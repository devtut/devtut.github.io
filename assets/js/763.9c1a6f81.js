(window.webpackJsonp=window.webpackJsonp||[]).push([[763],{1171:function(t,e,s){"use strict";s.r(e);var a=s(31),v=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"aliases-of-built-in-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aliases-of-built-in-types"}},[t._v("#")]),t._v(" Aliases of built-in types")]),t._v(" "),s("h2",{attrs:{id:"built-in-types-table"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#built-in-types-table"}},[t._v("#")]),t._v(" Built-In Types Table")]),t._v(" "),s("p",[t._v("The following table shows the keywords for built-in "),s("code",[t._v("C#")]),t._v(" types, which are aliases of predefined types in the System namespaces.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("C# Type")]),t._v(" "),s("th",[t._v(".NET Framework Type")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("bool")]),t._v(" "),s("td",[t._v("System.Boolean")])]),t._v(" "),s("tr",[s("td",[t._v("byte")]),t._v(" "),s("td",[t._v("System.Byte")])]),t._v(" "),s("tr",[s("td",[t._v("sbyte")]),t._v(" "),s("td",[t._v("System.SByte")])]),t._v(" "),s("tr",[s("td",[t._v("char")]),t._v(" "),s("td",[t._v("System.Char")])]),t._v(" "),s("tr",[s("td",[t._v("decimal")]),t._v(" "),s("td",[t._v("System.Decimal")])]),t._v(" "),s("tr",[s("td",[t._v("double")]),t._v(" "),s("td",[t._v("System.Double")])]),t._v(" "),s("tr",[s("td",[t._v("float")]),t._v(" "),s("td",[t._v("System.Single")])]),t._v(" "),s("tr",[s("td",[t._v("int")]),t._v(" "),s("td",[t._v("System.Int32")])]),t._v(" "),s("tr",[s("td",[t._v("uint")]),t._v(" "),s("td",[t._v("System.UInt32")])]),t._v(" "),s("tr",[s("td",[t._v("long")]),t._v(" "),s("td",[t._v("System.Int64")])]),t._v(" "),s("tr",[s("td",[t._v("ulong")]),t._v(" "),s("td",[t._v("System.UInt64")])]),t._v(" "),s("tr",[s("td",[t._v("object")]),t._v(" "),s("td",[t._v("System.Object")])]),t._v(" "),s("tr",[s("td",[t._v("short")]),t._v(" "),s("td",[t._v("System.Int16")])]),t._v(" "),s("tr",[s("td",[t._v("ushort")]),t._v(" "),s("td",[t._v("System.UInt16")])]),t._v(" "),s("tr",[s("td",[t._v("string")]),t._v(" "),s("td",[t._v("System.String")])])])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("C#")]),t._v(" type keywords and their aliases are interchangeable. For example, you can declare an integer variable by using either of the following declarations:")]),t._v(" "),s("div",{staticClass:"language-cs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),t._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Int32")]),t._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])])])}),[],!1,null,null,null);e.default=v.exports}}]);