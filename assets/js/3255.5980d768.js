(window.webpackJsonp=window.webpackJsonp||[]).push([[3255],{3663:function(t,a,e){"use strict";e.r(a);var s=e(31),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"delete"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#delete"}},[t._v("#")]),t._v(" DELETE")]),t._v(" "),e("p",[t._v("The DELETE statement is used to delete records from a table.")]),t._v(" "),e("h2",{attrs:{id:"delete-all-rows"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#delete-all-rows"}},[t._v("#")]),t._v(" DELETE all rows")]),t._v(" "),e("p",[t._v("Omitting a "),e("code",[t._v("WHERE")]),t._v(" clause will delete all rows from a table.")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Employees\n\n")])])]),e("p",[t._v("See "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/sql/1466/truncate#t=201610232306344446414",target:"_blank",rel:"noopener noreferrer"}},[t._v("TRUNCATE"),e("OutboundLink")],1),t._v(" documentation for details on how TRUNCATE performance can be better because it ignores triggers and indexes and logs to just delete the data.")]),t._v(" "),e("h2",{attrs:{id:"delete-certain-rows-with-where"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#delete-certain-rows-with-where"}},[t._v("#")]),t._v(" DELETE certain rows with WHERE")]),t._v(" "),e("p",[t._v("This will delete all rows that match the "),e("code",[t._v("WHERE")]),t._v(" criteria.")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Employees\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" FName "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'John'")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"truncate-clause"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#truncate-clause"}},[t._v("#")]),t._v(" TRUNCATE clause")]),t._v(" "),e("p",[t._v("Use this to reset the table to the condition at which it was created. This deletes all rows and resets values such as auto-increment. It also doesn't log each individual row deletion.")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRUNCATE")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Employees\n\n")])])]),e("h2",{attrs:{id:"delete-certain-rows-based-upon-comparisons-with-other-tables"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#delete-certain-rows-based-upon-comparisons-with-other-tables"}},[t._v("#")]),t._v(" DELETE certain rows based upon comparisons with other tables")]),t._v(" "),e("p",[t._v("It is possible to "),e("code",[t._v("DELETE")]),t._v(" data from a table if it matches (or mismatches) certain data in other tables.")]),t._v(" "),e("p",[t._v("Let's assume we want to "),e("code",[t._v("DELETE")]),t._v("data from Source once its loaded into Target.")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Source\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXISTS")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- specific value in SELECT doesn't matter")]),t._v("\n               "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Target\n               "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Where")]),t._v(" Source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ID "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Target"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ID "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),e("p",[t._v("Most common RDBMS implementations (e.g. MySQL, Oracle, PostgresSQL, Teradata) allow tables to be joined during "),e("code",[t._v("DELETE")]),t._v(" allowing more complex comparison in a compact syntax.")]),t._v(" "),e("p",[t._v("Adding complexity to original scenario, let's assume Aggregate is built from Target once a day and does not contain the same ID but contains the same date. Let us also assume that we want to delete data from Source "),e("strong",[t._v("only")]),t._v(" after the aggregate is populated for the day.")]),t._v(" "),e("p",[t._v("On MySQL, Oracle and Teradata this can be done using:")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Source\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v("  Source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ID "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" TargetSchema"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Target"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ID\n       "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" TargetSchema"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Target"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Date")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" AggregateSchema"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Aggregate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Date")]),t._v("\n\n")])])]),e("p",[t._v("In PostgreSQL use:")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Source\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("USING")]),t._v("  TargetSchema"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Target"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" AggregateSchema"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Aggregate\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v("  Source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ID "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" TargetSchema"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Target"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ID\n       "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" TargetSchema"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Target"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataDate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" AggregateSchema"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Aggregate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AggDate\n\n")])])]),e("p",[t._v("This essentially results in INNER JOINs between Source, Target and Aggregate. The deletion is performed on Source when the same IDs exist in Target AND date present in Target for those IDs also exists in Aggregate.")]),t._v(" "),e("p",[t._v("Same query may also be written (on MySQL, Oracle, Teradata) as:")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" Source\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("   Source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TargetSchema"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Target"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" AggregateSchema"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Aggregate\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v("  Source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ID "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" TargetSchema"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Target"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ID\n       "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" TargetSchema"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Target"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataDate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" AggregateSchema"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Aggregate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AggDate\n\n")])])]),e("p",[t._v("Explicit joins may be mentioned in "),e("code",[t._v("Delete")]),t._v(" statements on some RDBMS implementations (e.g. Oracle, MySQL) but not supported on all platforms (e.g. Teradata does not support them)")]),t._v(" "),e("p",[t._v("Comparisons can be designed to check mismatch scenarios instead of matching ones with all syntax styles (observe "),e("code",[t._v("NOT EXISTS")]),t._v(" below)")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Source\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXISTS")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- specific value in SELECT doesn't matter")]),t._v("\n               "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Target\n               "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Where")]),t._v(" Source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ID "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Target"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ID "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),e("h4",{attrs:{id:"syntax"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),e("ol",[e("li",[t._v("DELETE FROM "),e("strong",[t._v("TableName")]),t._v(" [WHERE "),e("strong",[t._v("Condition")]),t._v("] [LIMIT "),e("strong",[t._v("count")]),t._v("]")])])])}),[],!1,null,null,null);a.default=r.exports}}]);