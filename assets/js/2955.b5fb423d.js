(window.webpackJsonp=window.webpackJsonp||[]).push([[2955],{3363:function(t,s,a){"use strict";a.r(s);var n=a(31),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"set-operations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-operations"}},[t._v("#")]),t._v(" Set operations")]),t._v(" "),a("h2",{attrs:{id:"cartesian-or-cross-products-of-vectors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cartesian-or-cross-products-of-vectors"}},[t._v("#")]),t._v(' Cartesian or "cross" products of vectors')]),t._v(" "),a("p",[t._v("To find every vector of the form (x, y) where x is drawn from vector X and y from Y, we use "),a("code",[t._v("expand.grid")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("X "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nY "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nexpand.grid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   Var1 Var2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1    1    4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2    1    4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3    2    4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4    1    5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 5    1    5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 6    2    5")]),t._v("\n\n")])])]),a("p",[t._v('The result is a data.frame with one column for each vector passed to it. Often, we want to take the Cartesian product of sets rather than to expand a "grid" of vectors. We can use '),a("code",[t._v("unique")]),t._v(", "),a("code",[t._v("lapply")]),t._v(" and "),a("code",[t._v("do.call")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" do.call"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expand.grid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lapply"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unique"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   Var1 Var2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1    1    4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2    2    4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3    1    5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4    2    5")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"applying-functions-to-combinations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#applying-functions-to-combinations"}},[t._v("#")]),t._v(" Applying functions to combinations")]),t._v(" "),a("p",[t._v("If you then want to apply a function to each resulting combination "),a("code",[t._v("f(x,y)")]),t._v(", it can be added as another column:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("m"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" with"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Var1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Var2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   Var1 Var2  p")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1    1    4  4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2    2    4  8")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3    1    5  5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4    2    5 10")]),t._v("\n\n")])])]),a("p",[t._v("This approach works for as many vectors as we need, but in the special case of two, it is sometimes a better fit to have the result in a matrix, which can be achieved with "),a("code",[t._v("outer")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("uX "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" unique"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nuY "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" unique"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nouter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("setNames"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" uX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setNames"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" uY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" `"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("`"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   4  5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1 4  5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2 8 10")]),t._v("\n\n")])])]),a("p",[t._v("For related concepts and tools, see the combinatorics topic.")]),t._v(" "),a("h2",{attrs:{id:"set-operators-for-pairs-of-vectors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-operators-for-pairs-of-vectors"}},[t._v("#")]),t._v(" Set operators for pairs of vectors")]),t._v(" "),a("h3",{attrs:{id:"comparing-sets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparing-sets"}},[t._v("#")]),t._v(" Comparing sets")]),t._v(" "),a("p",[t._v("In R, a vector may contain duplicated elements:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),t._v("\nw "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("However, a set contains only one copy of each element. R treats a vector like a set by taking only its distinct elements, so the two vectors above are regarded as the same:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("setequal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TRUE")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"combining-sets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#combining-sets"}},[t._v("#")]),t._v(" Combining sets")]),t._v(" "),a("p",[t._v("The key functions have natural names:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ny "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nunion"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1 2 3 4")]),t._v("\n\nintersect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2")]),t._v("\n\nsetdiff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1 3")]),t._v("\n\n")])])]),a("p",[t._v("These are all documented on the same page, "),a("code",[t._v("?union")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"set-membership-for-vectors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-membership-for-vectors"}},[t._v("#")]),t._v(" Set membership for vectors")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("%in%")]),t._v(" operator compares a vector with a set.")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),t._v("\nw "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nw "),a("span",{pre:!0,attrs:{class:"token percent-operator operator"}},[t._v("%in%")]),t._v(" v\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TRUE TRUE")]),t._v("\n\nv "),a("span",{pre:!0,attrs:{class:"token percent-operator operator"}},[t._v("%in%")]),t._v(" w\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TRUE")]),t._v("\n\n")])])]),a("p",[t._v("Each element on the left is treated individually and tested for membership in the set associated with the vector on the right (consisting of all its distinct elements).")]),t._v(" "),a("p",[t._v("Unlike equality tests, "),a("code",[t._v("%in%")]),t._v(" always returns "),a("code",[t._v("TRUE")]),t._v(" or "),a("code",[t._v("FALSE")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token percent-operator operator"}},[t._v("%in%")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# TRUE FALSE")]),t._v("\n\n")])])]),a("p",[t._v("The documentation is at "),a("code",[t._v("?")]),t._v("%in%``.")]),t._v(" "),a("h2",{attrs:{id:"make-unique-drop-duplicates-select-distinct-elements-from-a-vector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#make-unique-drop-duplicates-select-distinct-elements-from-a-vector"}},[t._v("#")]),t._v(" Make unique / drop duplicates / select distinct elements from a vector")]),t._v(" "),a("p",[a("code",[t._v("unique")]),t._v(" drops duplicates so that each element in the result is unique (only appears once):")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nunique"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2 1")]),t._v("\n\n")])])]),a("p",[t._v("Values are returned in the order they first appeared.")]),t._v(" "),a("p",[a("code",[t._v("duplicated")]),t._v(" tags each duplicated element:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("duplicated"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# FALSE FALSE TRUE TRUE TRUE")]),t._v("\n\n")])])]),a("p",[a("code",[t._v("anyDuplicated(x) > 0L")]),t._v(" is a quick way of checking whether a vector contains any duplicates.")]),t._v(" "),a("h2",{attrs:{id:"measuring-set-overlaps-venn-diagrams-for-vectors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#measuring-set-overlaps-venn-diagrams-for-vectors"}},[t._v("#")]),t._v(" Measuring set overlaps / Venn diagrams for vectors")]),t._v(" "),a("p",[t._v("To count how many elements of two sets overlap, one could write a custom function:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("xtab_set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    both    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v("  union"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    inA     "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v("  both "),a("span",{pre:!0,attrs:{class:"token percent-operator operator"}},[t._v("%in%")]),t._v(" A\n    inB     "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v("  both "),a("span",{pre:!0,attrs:{class:"token percent-operator operator"}},[t._v("%in%")]),t._v(" B\n    return"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" inB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\nB "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n\nxtab_set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#        inB")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# inA     FALSE TRUE")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   FALSE     0   10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   TRUE      9   11")]),t._v("\n\n")])])]),a("p",[t._v("A Venn diagram, offered by various packages, can be used to visualize overlap counts across multiple sets.")]),t._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),a("p",[t._v("A set contains only one copy of each distinct element. Unlike some other programming languages, base R does not have a dedicated data type for sets. Instead, R treats a vector like a set by taking only its distinct elements. This applies to the set operators, "),a("code",[t._v("setdiff")]),t._v(", "),a("code",[t._v("intersect")]),t._v(", "),a("code",[t._v("union")]),t._v(", "),a("code",[t._v("setequal")]),t._v(" and "),a("code",[t._v("%in%")]),t._v(". For "),a("code",[t._v("v %in% S")]),t._v(", only "),a("code",[t._v("S")]),t._v(" is treated as a set, however, not the vector "),a("code",[t._v("v")]),t._v(".")]),t._v(" "),a("p",[t._v("For a true set data type in R, the Rcpp package provides "),a("a",{attrs:{href:"http://stackoverflow.com/a/23015853/",target:"_blank",rel:"noopener noreferrer"}},[t._v("some options"),a("OutboundLink")],1),t._v(".")])])}),[],!1,null,null,null);s.default=e.exports}}]);