(window.webpackJsonp=window.webpackJsonp||[]).push([[1014],{1422:function(s,t,a){"use strict";a.r(t);var n=a(31),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"process-and-thread-affinity-setting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process-and-thread-affinity-setting"}},[s._v("#")]),s._v(" Process and Thread affinity setting")]),s._v(" "),a("h2",{attrs:{id:"get-process-affinity-mask"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-process-affinity-mask"}},[s._v("#")]),s._v(" Get process affinity mask")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n   public static int GetProcessAffinityMask(string processName = null)\n    {\n        Process myProcess = GetProcessByName(ref processName);\n\n        int processorAffinity = (int)myProcess.ProcessorAffinity;\n        Console.WriteLine(\"Process {0} Affinity Mask is : {1}\", processName, FormatAffinity(processorAffinity));\n\n        return processorAffinity;\n    }\n\n    public static Process GetProcessByName(ref string processName)\n    {\n        Process myProcess;\n        if (string.IsNullOrEmpty(processName))\n        {\n            myProcess = Process.GetCurrentProcess();\n            processName = myProcess.ProcessName;\n        }\n        else\n        {\n            Process[] processList = Process.GetProcessesByName(processName);\n            myProcess = processList[0];\n        }\n        return myProcess;\n    }\n\n    private static string FormatAffinity(int affinity)\n    {\n        return Convert.ToString(affinity, 2).PadLeft(Environment.ProcessorCount, '0');\n    }\n}\n\n")])])]),a("p",[s._v("Example of usage :")]),s._v(" "),a("div",{staticClass:"language-dotnet extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dotnet"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")])]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("GetProcessAffinityMask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ReadKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Output:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Process Test.vshost Affinity Mask is : 11111111")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"set-process-affinity-mask"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-process-affinity-mask"}},[s._v("#")]),s._v(" Set process affinity mask")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('\n   public static void SetProcessAffinityMask(int affinity, string processName = null)\n    {\n        Process myProcess = GetProcessByName(ref processName);\n\n        Console.WriteLine("Process {0} Old Affinity Mask is : {1}", processName, FormatAffinity((int)myProcess.ProcessorAffinity));\n\n        myProcess.ProcessorAffinity = new IntPtr(affinity);\n        Console.WriteLine("Process {0} New Affinity Mask is : {1}", processName, FormatAffinity((int)myProcess.ProcessorAffinity));\n    }\n\n')])])]),a("p",[s._v("Example of usage :")]),s._v(" "),a("div",{staticClass:"language-dotnet extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dotnet"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")])]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")])]),s._v(" newAffinity "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Convert"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ToInt32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10101010"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("SetProcessAffinityMask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("newAffinity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ReadKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Output :")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Process Test.vshost Old Affinity Mask is : 11111111")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Process Test.vshost New Affinity Mask is : 10101010")]),s._v("\n\n")])])]),a("h4",{attrs:{id:"parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[s._v("#")]),s._v(" Parameters")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("Parameter")]),s._v(" "),a("th",[s._v("Details")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("affinity")]),s._v(" "),a("td",[s._v("integer that describes the set of processors on which the process is allowed to run. For example, on a 8 processor system if you want your process to be executed only on processors 3 and 4 than you choose affinity like this : 00001100 which equals 12")])])])]),s._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[s._v("#")]),s._v(" Remarks")]),s._v(" "),a("p",[s._v("The processor affinity of a thread is the set of processors it has a relationship to. In other words, those it can be scheduled to run on.")]),s._v(" "),a("p",[s._v("Processor affinity represents each processor as a bit. Bit 0 represents processor one, bit 1 represents processor two, and so on.")])])}),[],!1,null,null,null);t.default=e.exports}}]);