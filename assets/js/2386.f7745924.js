(window.webpackJsonp=window.webpackJsonp||[]).push([[2386],{2794:function(t,a,s){"use strict";s.r(a);var e=s(31),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"exception-handling"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exception-handling"}},[t._v("#")]),t._v(" Exception handling")]),t._v(" "),s("h2",{attrs:{id:"eval-and-die"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eval-and-die"}},[t._v("#")]),t._v(" eval and die")]),t._v(" "),s("p",[t._v('This is the built-in way to deal with "exceptions" without relying on third party libraries like '),s("a",{attrs:{href:"http://p3rl.org/Try::Tiny",target:"_blank",rel:"noopener noreferrer"}},[t._v("Try::Tiny"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("div",{staticClass:"language-perl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-perl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$ret")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("eval")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$ret")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" some_function_that_might_die"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$eval_error")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Zombie error!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  handle_error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$eval_error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# use $ret")]),t._v("\n\n")])])]),s("p",[t._v('We "abuse" the fact that '),s("code",[t._v("die")]),t._v(" has a false return value, and the return value of the overall code block is the value of the last expression in the code block:")]),t._v(" "),s("ul",[s("li",[t._v("if "),s("code",[t._v("$ret")]),t._v(" is assigned to successfully, then the "),s("code",[t._v("1;")]),t._v(" expression is the last thing that happens in the "),s("code",[t._v("eval")]),t._v(" code block. The "),s("code",[t._v("eval")]),t._v(" code block thus has a true value, so the "),s("code",[t._v("or do")]),t._v(" block does not run.")]),t._v(" "),s("li",[t._v("if "),s("code",[t._v("some_function_that_might_die()")]),t._v(" does "),s("code",[t._v("die")]),t._v(", then the last thing that happens in the "),s("code",[t._v("eval")]),t._v(" code block is the "),s("code",[t._v("die")]),t._v(". The "),s("code",[t._v("eval")]),t._v(" code block thus has a false value and the "),s("code",[t._v("or do")]),t._v(" block does run.")]),t._v(" "),s("li",[t._v("The first thing you "),s("strong",[t._v("must")]),t._v(" do in the "),s("code",[t._v("or do")]),t._v(" block is read "),s("code",[t._v("$@")]),t._v(". This global variable will hold whatever argument was passed to "),s("code",[t._v("die")]),t._v(". The "),s("code",[t._v('|| "Zombie Error"')]),t._v(" guard is popular, but unnecessary in the general case.")])]),t._v(" "),s("p",[t._v("This is important to understand because some not all code does fail by calling die, but the same structure can be used regardless. Consider a database function that returns:")]),t._v(" "),s("ul",[s("li",[t._v("the number of rows affected on success")]),t._v(" "),s("li",[s("code",[t._v("'0 but true'")]),t._v(" if the query is successful but no rows were affected")]),t._v(" "),s("li",[s("code",[t._v("0")]),t._v(" if the query was not successful.")])]),t._v(" "),s("p",[t._v("In that case you can still use the same idiom, but you "),s("strong",[t._v("have")]),t._v(" to skip the final "),s("code",[t._v("1;")]),t._v(", and this function "),s("strong",[t._v("has")]),t._v(" to be the last thing in the eval. Something like this:")]),t._v(" "),s("div",{staticClass:"language-perl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-perl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("eval")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$value")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" My"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Database"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("retrieve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$my_thing")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dies on fail")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$value")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("set_status"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Completed"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$value")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("set_completed_timestamp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$value")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("update"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# returns false value on fail")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# handles both the die and the 0 return value")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$eval_error")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Zombie error!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  handle_error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$eval_error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);