(window.webpackJsonp=window.webpackJsonp||[]).push([[1859],{2268:function(t,s,a){"use strict";a.r(s);var n=a(31),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"regex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regex"}},[t._v("#")]),t._v(" Regex")]),t._v(" "),a("h2",{attrs:{id:"idioms-for-regex-matching-in-when-expression"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#idioms-for-regex-matching-in-when-expression"}},[t._v("#")]),t._v(" Idioms for Regex Matching in When Expression")]),t._v(" "),a("h3",{attrs:{id:"using-immutable-locals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-immutable-locals"}},[t._v("#")]),t._v(" Using immutable locals:")]),t._v(" "),a("p",[t._v('Uses less horizontal space but more vertical space than the "anonymous temporaries" template.  Preferable over the "anonymous temporaries" template if the '),a("code",[t._v("when")]),t._v(" expression is in a loop--in that case, regex definitions should be placed outside the loop.")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" kotlin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("regex\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* some string */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" regex1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Regex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* pattern */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" regex2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Regex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* pattern */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* etc */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    regex1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* do stuff */")]),t._v("\n    regex2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* do stuff */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* etc */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"using-anonymous-temporaries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-anonymous-temporaries"}},[t._v("#")]),t._v(" Using anonymous temporaries:")]),t._v(" "),a("p",[t._v('Uses less vertical space but more horizontal space than the "immutable locals" template.  Should not be used if then '),a("code",[t._v("when")]),t._v(" expression is in a loop.")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" kotlin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("regex\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* some string */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Regex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* pattern */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* do stuff */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Regex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* pattern */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* do stuff */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* etc */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"using-the-visitor-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-the-visitor-pattern"}},[t._v("#")]),t._v(" Using the visitor pattern:")]),t._v(" "),a("p",[t._v('Has the benefit of closely emulating the "argument-ful" '),a("code",[t._v("when")]),t._v(" syntax.  This is beneficial because it more clearly indicates the argument of the "),a("code",[t._v("when")]),t._v(" expression, and also precludes certain programmer mistakes that could arise from having to repeat the "),a("code",[t._v("when")]),t._v(" argument in every "),a("code",[t._v("whenEntry")]),t._v('.  Either the "immutable locals" or the "anonymous temporaries" template may be used with this implementation the visitor pattern.')]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" kotlin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("regex\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* some string */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("RegexWhenArgument")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Regex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* pattern */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* do stuff */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Regex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* pattern */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* do stuff */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* etc */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("And the minimal definition of the wrapper class for the "),a("code",[t._v("when")]),t._v(" expression argument:")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("RegexWhenArgument")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" whenArgument"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" CharSequence"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("whenEntry"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" whenEntry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("whenArgument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("whenEntry"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Any"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("whenArgument "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" whenEntry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"introduction-to-regular-expressions-in-kotlin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction-to-regular-expressions-in-kotlin"}},[t._v("#")]),t._v(" Introduction to regular expressions in Kotlin")]),t._v(" "),a("p",[t._v("This post shows how to use most of the functions in the "),a("code",[t._v("Regex")]),t._v(" class, work with null safely related to the "),a("code",[t._v("Regex")]),t._v(" functions, and how raw strings makes it easier to write and read regex patterns.")]),t._v(" "),a("h3",{attrs:{id:"the-regex-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-regex-class"}},[t._v("#")]),t._v(" The RegEx class")]),t._v(" "),a("p",[t._v("To work with regular expressions in Kotlin, you need to use the "),a("code",[t._v("Regex(pattern: String)")]),t._v(" class and invoke functions like "),a("code",[t._v("find(..)")]),t._v(" or "),a("code",[t._v("replace(..)")]),t._v(" on that regex object.")]),t._v(" "),a("p",[t._v("An example on how to use the "),a("code",[t._v("Regex")]),t._v(" class that returns true if the "),a("code",[t._v("input")]),t._v(" string contains c or d:")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Regex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c|d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" matched "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsMatchIn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// matched: true")]),t._v("\n\n")])])]),a("p",[t._v("The essential thing to understand with all the "),a("code",[t._v("Regex")]),t._v(" functions is that the result is based on matching the regex "),a("code",[t._v("pattern")]),t._v(" and the "),a("code",[t._v("input")]),t._v(" string. Some of the functions requires a full match, while the rest requires only a partial match. The "),a("code",[t._v("containsMatchIn(..)")]),t._v(" function used in the example requires a partial match and is explained later in this post.")]),t._v(" "),a("h3",{attrs:{id:"null-safety-with-regular-expressions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-safety-with-regular-expressions"}},[t._v("#")]),t._v(" Null safety with regular expressions")]),t._v(" "),a("p",[t._v("Both "),a("code",[t._v("find(..)")]),t._v(" and "),a("code",[t._v("matchEntire(..)")]),t._v(" will return a "),a("code",[t._v("MatchResult?")]),t._v(" object. The "),a("code",[t._v("?")]),t._v(" character after "),a("code",[t._v("MatchResult")]),t._v(" is necessary for Kotlin to handle "),a("a",{attrs:{href:"https://kotlinlang.org/docs/reference/null-safety.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("null safely"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("An example that demonstrates how Kotlin handles null safely from a "),a("code",[t._v("Regex")]),t._v(" function, when the "),a("code",[t._v("find(..)")]),t._v(" function returns null:")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" matchResult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Regex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c|d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"efg"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// matchResult: null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" matchResult"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a: null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" matchResult"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("orEmpty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// b: ""')]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Still needs question mark. => null    ")]),t._v("\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Accesses the function directly. => ""')]),t._v("\n\n")])])]),a("p",[t._v("With the "),a("code",[t._v("orEmpty()")]),t._v(" function, "),a("code",[t._v("b")]),t._v(" can't be null and the "),a("code",[t._v("?")]),t._v(" character is unnecessary when you call functions on "),a("code",[t._v("b")]),t._v(".")]),t._v(" "),a("p",[t._v("If you don't care about this safe handling of null values, Kotlin allows you to work with null values like in Java with the "),a("code",[t._v("!!")]),t._v(" characters:")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => KotlinNullPointerException")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"raw-strings-in-regex-patterns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raw-strings-in-regex-patterns"}},[t._v("#")]),t._v(" Raw strings in regex patterns")]),t._v(" "),a("p",[t._v("Kotlin provides an improvement over Java with a "),a("a",{attrs:{href:"https://kotlinlang.org/docs/reference/basic-types.html#string-literals",target:"_blank",rel:"noopener noreferrer"}},[t._v("raw string"),a("OutboundLink")],1),t._v(" that makes it possible to write pure regex patterns without double backslashes, that are necessary with a Java string. A raw string is represented with a triple quote:")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token raw-string string"}},[t._v('"""\\d{3}-\\d{3}-\\d{4}"""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// raw Kotlin string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\d{3}-\\\\d{3}-\\\\d{4}"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// standard Java string")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"find-input-charsequence-startindex-int-matchresult"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-input-charsequence-startindex-int-matchresult"}},[t._v("#")]),t._v(" find(input: CharSequence, startIndex: Int): MatchResult?")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("input")]),t._v(" string will be matched against the "),a("code",[t._v("pattern")]),t._v(" in the "),a("code",[t._v("Regex")]),t._v(" object. It returns a "),a("code",[t._v("Matchresult?")]),t._v(" object with the first matched text after the "),a("code",[t._v("startIndex")]),t._v(", or "),a("code",[t._v("null")]),t._v(" if the pattern didn't match the "),a("code",[t._v("input")]),t._v(" string. The result string is retrieved from the "),a("code",[t._v("MatchResult?")]),t._v(" object's "),a("code",[t._v("value")]),t._v(" property. The "),a("code",[t._v("startIndex")]),t._v(" parameter is optional with the default value 0.")]),t._v(" "),a("p",[t._v("To extract the first valid phone number from a string with contact details:")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" phoneNumber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("String"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Regex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token raw-string string"}},[t._v('"""\\d{3}-\\d{3}-\\d{4}"""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"phone: 123-456-7890, e.."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// phoneNumber: 123-456-7890")]),t._v("\n\n")])])]),a("p",[t._v("With no valid phone number in the "),a("code",[t._v("input")]),t._v(" string, the variable "),a("code",[t._v("phoneNumber")]),t._v(" will be "),a("code",[t._v("null")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"findall-input-charsequence-startindex-int-sequence"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#findall-input-charsequence-startindex-int-sequence"}},[t._v("#")]),t._v(" findAll(input: CharSequence, startIndex: Int): Sequence")]),t._v(" "),a("p",[t._v("Returns all the matches from the "),a("code",[t._v("input")]),t._v(" string that matches the regex "),a("code",[t._v("pattern")]),t._v(".")]),t._v(" "),a("p",[t._v("To print out all numbers separated with space, from a text with letters and digits:")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" matchedResults "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Regex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token raw-string string"}},[t._v('"""\\d+"""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab12cd34ef"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("StringBuilder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("matchedText "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" matchedResults"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("matchedText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 12 34")]),t._v("\n\n")])])]),a("p",[t._v("The "),a("code",[t._v("matchedResults")]),t._v(" variable is a sequence with "),a("code",[t._v("MatchResult")]),t._v(" objects. With an "),a("code",[t._v("input")]),t._v(" string without digits, the "),a("code",[t._v("findAll(..)")]),t._v(" function will return an empty sequence.")]),t._v(" "),a("h3",{attrs:{id:"matchentire-input-charsequence-matchresult"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#matchentire-input-charsequence-matchresult"}},[t._v("#")]),t._v(" matchEntire(input: CharSequence): MatchResult?")]),t._v(" "),a("p",[t._v("If all the characters in the "),a("code",[t._v("input")]),t._v(" string matches the regex "),a("code",[t._v("pattern")]),t._v(", a string equal to the "),a("code",[t._v("input")]),t._v(" will be returned. Else, "),a("code",[t._v("null")]),t._v(" will be returned.")]),t._v(" "),a("p",[t._v("Returns the input string if the whole input string is a number:")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Regex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token raw-string string"}},[t._v('"""\\d+"""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matchEntire")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"100"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a: 100")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Regex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token raw-string string"}},[t._v('"""\\d+"""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matchEntire")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"100 dollars"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b: null")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"matches-input-charsequence-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#matches-input-charsequence-boolean"}},[t._v("#")]),t._v(" matches(input: CharSequence): Boolean")]),t._v(" "),a("p",[t._v("Returns true if the whole input string matches the regex pattern. False otherwise.")]),t._v(" "),a("p",[t._v("Tests if two strings contains only digits:")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Regex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token raw-string string"}},[t._v('"""\\d+"""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nregex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"50"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\nregex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"50 dollars"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => false")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"containsmatchin-input-charsequence-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#containsmatchin-input-charsequence-boolean"}},[t._v("#")]),t._v(" containsMatchIn(input: CharSequence): Boolean")]),t._v(" "),a("p",[t._v("Returns true if part of the input string matches the regex pattern. False otherwise.")]),t._v(" "),a("p",[t._v("Test if two strings contains at least one digit:")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Regex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token raw-string string"}},[t._v('"""\\d+"""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsMatchIn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"50 dollars"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Regex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token raw-string string"}},[t._v('"""\\d+"""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsMatchIn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Fifty dollars"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => false")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"split-input-charsequence-limit-int-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#split-input-charsequence-limit-int-list"}},[t._v("#")]),t._v(" split(input: CharSequence, limit: Int): List")]),t._v(" "),a("p",[t._v("Returns a new list without all the regex matches.")]),t._v(" "),a("p",[t._v("To return lists without digits:")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Regex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token raw-string string"}},[t._v('"""\\d+"""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab12cd34ef"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a: [ab, cd, ef]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Regex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token raw-string string"}},[t._v('"""\\d+"""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is a test"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b: [This is a test]")]),t._v("\n\n")])])]),a("p",[t._v("There is one element in the list for each split. The first "),a("code",[t._v("input")]),t._v(" string has three numbers. That results in a list with three elements.")]),t._v(" "),a("h3",{attrs:{id:"replace-input-charsequence-replacement-string-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replace-input-charsequence-replacement-string-string"}},[t._v("#")]),t._v(" replace(input: CharSequence, replacement: String): String")]),t._v(" "),a("p",[t._v("Replaces all matches of the regex "),a("code",[t._v("pattern")]),t._v(" in the "),a("code",[t._v("input")]),t._v(" string with the replacement string.")]),t._v(" "),a("p",[t._v("To replace all digits in a string with an x:")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Regex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token raw-string string"}},[t._v('"""\\d+"""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab12cd34ef"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// result: abxcdxef")]),t._v("\n\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);