(window.webpackJsonp=window.webpackJsonp||[]).push([[2885],{3293:function(t,n,s){"use strict";s.r(n);var e=s(31),a=Object(e.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"fault-tolerant-resilient-code"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fault-tolerant-resilient-code"}},[t._v("#")]),t._v(" Fault-tolerant/resilient code")]),t._v(" "),s("h2",{attrs:{id:"using-trycatch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-trycatch"}},[t._v("#")]),t._v(" Using tryCatch()")]),t._v(" "),s("p",[t._v("We're defining a robust version of a function that reads the HTML code from a given URL. "),s("strong",[t._v("Robust")]),t._v(" in the sense that we want it to handle situations where something either goes wrong (error) or not quite the way we planned it to (warning). The umbrella term for errors and warnings is "),s("strong",[t._v("condition")])]),t._v(" "),s("h3",{attrs:{id:"function-definition-using-trycatch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-definition-using-trycatch"}},[t._v("#")]),t._v(" Function definition using "),s("code",[t._v("tryCatch")])]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v("readUrl "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    out "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" tryCatch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("########################################################")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Try part: define the expression(s) you want to "try" #')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("########################################################")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Just to highlight: ")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# If you want to use more than one R expression in the "try part" ')]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# then you'll have to use curly brackets. ")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Otherwise, just write the single expression you want to try and ")]),t._v("\n\n            message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"This is the 'try' part\"")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            readLines"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("con "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" warn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("FALSE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("########################################################################")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Condition handler part: define how you want conditions to be handled #")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("########################################################################")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Handler when a warning occurs:")]),t._v("\n        warning "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("paste"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Reading the URL caused a warning:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Here\'s the original warning message:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Choose a return value when such a type of condition occurs")]),t._v("\n            return"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Handler when an error occurs:")]),t._v("\n        error "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("paste"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This seems to be an invalid URL:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Here\'s the original error message:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Choose a return value when such a type of condition occurs")]),t._v("\n            return"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NA")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("###############################################")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Final part: define what should happen AFTER #")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# everything has been tried and/or handled    #")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("###############################################")]),t._v("\n\n        finally "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("paste"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Processed URL:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Some message at the end\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    \n    return"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"testing-things-out"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#testing-things-out"}},[t._v("#")]),t._v(" Testing things out")]),t._v(" "),s("p",[t._v("Let's define a vector of URLs where one element isn't a valid URL")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v("urls "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://stat.ethz.ch/R-manual/R-devel/library/base/html/connections.html"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://en.wikipedia.org/wiki/Xz"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I\'m no URL"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("And pass this as input to the function we defined above")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v("y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" lapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("urls"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readUrl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Processed URL: http://stat.ethz.ch/R-manual/R-devel/library/base/html/connections.html")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Some message at the end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Processed URL: http://en.wikipedia.org/wiki/Xz")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Some message at the end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# URL does not seem to exist: I'm no URL ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Here's the original error message:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cannot open the connection")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Processed URL: I'm no URL")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Some message at the end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Warning message:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# In file(con, \"r\") : cannot open file 'I'm no URL': No such file or directory")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"investigating-the-output"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#investigating-the-output"}},[t._v("#")]),t._v(" Investigating the output")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 3")]),t._v("\n\nhead"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# [1] "<!DOCTYPE html PUBLIC \\"-//W3C//DTD HTML 4.01 Transitional//EN\\">"      ')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# [2] "<html><head><title>R: Functions to Manipulate Connections</title>"      ')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# [3] "<meta http-equiv=\\"Content-Type\\" content=\\"text/html; charset=utf-8\\">"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# [4] "<link rel=\\"stylesheet\\" type=\\"text/css\\" href=\\"R.css\\">"             ')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# [5] "</head><body>"                                                          ')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# [6] ""    ')]),t._v("\n\ny"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] NA")]),t._v("\n\n")])])]),s("h4",{attrs:{id:"parameters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Parameter")]),t._v(" "),s("th",[t._v("Details")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("expr")]),t._v(" "),s("td",[t._v('In case the "try part" was completed successfully '),s("code",[t._v("tryCatch")]),t._v(" will return the "),s("strong",[t._v("last evaluated expression")]),t._v(". Hence, the actual value being returned in case everything went well and there is no condition (i.e. a "),s("strong",[t._v("warning")]),t._v(" or an "),s("strong",[t._v("error")]),t._v(") is the return value of "),s("code",[t._v("readLines")]),t._v(". Note that you don't need to explicilty state the return value via "),s("code",[t._v("return")]),t._v(' as code in the "try part" is not wrapped insided a function environment (unlike that for the condition handlers for warnings and error below)')])]),t._v(" "),s("tr",[s("td",[t._v("warning/error/etc")]),t._v(" "),s("td",[t._v("Provide/define a handler function for all the conditions that you want to handle explicitly. AFAIU, you can provide handlers for "),s("strong",[t._v("any")]),t._v(" type of conditions (not just "),s("strong",[t._v("warnings")]),t._v(" and "),s("strong",[t._v("errors")]),t._v(", but also "),s("strong",[t._v("custom")]),t._v(" conditions; see "),s("code",[t._v("simpleCondition")]),t._v(" and friends for that) as long as the "),s("strong",[t._v("name of the respective handler function matches the class of the respective condition")]),t._v(" (see the "),s("strong",[t._v("Details")]),t._v(" part of the doc for "),s("code",[t._v("tryCatch")]),t._v(").")])]),t._v(" "),s("tr",[s("td",[t._v("finally")]),t._v(" "),s("td",[t._v("Here goes everything that should be executed at the very end, "),s("strong",[t._v("regardless")]),t._v(' if the expression in the "try part" succeeded or if there was any condition. If you want more than one expression to be executed, then you need to wrap them in curly brackets, otherwise you could just have written '),s("code",[t._v("finally = <expression>")]),t._v(' (i.e. the same logic as for "try part".')])])])]),t._v(" "),s("h4",{attrs:{id:"remarks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),s("h3",{attrs:{id:"trycatch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#trycatch"}},[t._v("#")]),t._v(" "),s("code",[t._v("tryCatch")])]),t._v(" "),s("p",[s("code",[t._v("tryCatch")]),t._v(" returns the value associated to executing "),s("code",[t._v("expr")]),t._v(" unless there's a condition: a warning or an error. If that's the case, specific return values (e.g.  "),s("code",[t._v("return(NA)")]),t._v(" above) can be specified by supplying a handler function for the respective conditions (see arguments "),s("code",[t._v("warning")]),t._v(" and "),s("code",[t._v("error")]),t._v(" in "),s("code",[t._v("?tryCatch")]),t._v("). These can be functions that already exist, but you can also define them within "),s("code",[t._v("tryCatch")]),t._v(" (as we did above).")]),t._v(" "),s("h3",{attrs:{id:"implications-of-choosing-specific-return-values-of-the-handler-functions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#implications-of-choosing-specific-return-values-of-the-handler-functions"}},[t._v("#")]),t._v(" Implications of choosing specific return values of the handler functions")]),t._v(" "),s("p",[t._v("As we've specified that "),s("code",[t._v("NA")]),t._v(' should be returned in case of an error in the "try part", the third element in '),s("code",[t._v("y")]),t._v(" is "),s("code",[t._v("NA")]),t._v(". If we'd have chosen "),s("code",[t._v("NULL")]),t._v(" to be the return value, the length of "),s("code",[t._v("y")]),t._v(" would just have been "),s("code",[t._v("2")]),t._v(" instead of "),s("code",[t._v("3")]),t._v(" as "),s("code",[t._v("lapply")]),t._v(' will simply "ignore/drop" return values that are '),s("code",[t._v("NULL")]),t._v(". Also note that if you don't specify an "),s("strong",[t._v("explicit")]),t._v(" return value via "),s("code",[t._v("return")]),t._v(", the handler functions will return "),s("code",[t._v("NULL")]),t._v(" (i.e. in case of an "),s("strong",[t._v("error")]),t._v(" or a "),s("strong",[t._v("warning")]),t._v(" condition).")]),t._v(" "),s("h3",{attrs:{id:"undesired-warning-message"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#undesired-warning-message"}},[t._v("#")]),t._v(' "Undesired" warning message')]),t._v(" "),s("p",[t._v("When the third element of our "),s("code",[t._v("urls")]),t._v(" vector hits our function, we get the following warning "),s("strong",[t._v("in addition")]),t._v(" to the fact that an error occurs ("),s("code",[t._v("readLines")]),t._v(" first complains that it can't open the connection via a "),s("strong",[t._v("warning")]),t._v(" before actually failing with an "),s("strong",[t._v("error")]),t._v("):")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v("Warning message"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    In file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("con"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"r"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" cannot open file "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I'")]),t._v("m no URL'"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" No such file or directory\n\n")])])]),s("p",[t._v("An "),s("strong",[t._v("error")]),t._v(' "wins" over a '),s("strong",[t._v("warning")]),t._v(", so we're not really interested in the warning in this particular case. Thus we have set "),s("code",[t._v("warn = FALSE")]),t._v(" in "),s("code",[t._v("readLines")]),t._v(", but that doesn't seem to have any effect. An alternative way to suppress the warning is to use")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v("suppressWarnings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("readLines"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("con "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("instead of")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v("readLines"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("con "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" warn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("FALSE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);