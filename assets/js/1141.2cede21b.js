(window.webpackJsonp=window.webpackJsonp||[]).push([[1141],{1549:function(e,t,a){"use strict";a.r(t);var r=a(31),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"pulling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pulling"}},[e._v("#")]),e._v(" Pulling")]),e._v(" "),a("p",[e._v("Unlike pushing with Git where your local changes are sent to the central repository's server, pulling with Git takes the current code on the server and 'pulls' it down from the repository's server to your local machine. This topic explains the process of pulling code from a repository using Git as well as the situations one might encounter while pulling different code into the local copy.")]),e._v(" "),a("h2",{attrs:{id:"updating-with-local-changes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#updating-with-local-changes"}},[e._v("#")]),e._v(" Updating with local changes")]),e._v(" "),a("p",[e._v("When local changes are present, the "),a("code",[e._v("git pull")]),e._v(" command aborts reporting :")]),e._v(" "),a("blockquote"),e._v(" "),a("p",[e._v("error: Your local changes to the following files would be overwritten\nby merge")]),e._v(" "),a("p",[e._v("In order to update (like svn update did with subversion), you can run :")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git stash\ngit pull --rebase\ngit stash pop\n\n")])])]),a("p",[e._v("A convenient way could be to define an alias using :")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git config --global alias.up "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'!git stash && git pull --rebase && git stash pop'")]),e._v("\n\n")])])]),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git config --global alias.up "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'pull --rebase --autostash'")]),e._v("\n\n")])])]),a("p",[e._v("Next you can simply use :")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git up\n\n")])])]),a("h2",{attrs:{id:"pull-overwrite-local"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pull-overwrite-local"}},[e._v("#")]),e._v(" Pull, overwrite local")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git fetch\ngit reset --hard origin/master\n\n")])])]),a("p",[a("strong",[e._v("Beware:")]),e._v(" While commits discarded using "),a("code",[e._v("reset --hard")]),e._v(" can be recovered using "),a("code",[e._v("reflog")]),e._v(" and "),a("code",[e._v("reset")]),e._v(", uncommitted changes are deleted forever.")]),e._v(" "),a("p",[e._v("Change "),a("code",[e._v("origin")]),e._v(" and "),a("code",[e._v("master")]),e._v(" to the remote and branch you want to forcibly pull to, respectively, if they are named differently.")]),e._v(" "),a("h2",{attrs:{id:"pull-code-from-remote"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pull-code-from-remote"}},[e._v("#")]),e._v(" Pull code from remote")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git pull\n\n")])])]),a("h2",{attrs:{id:"keeping-linear-history-when-pulling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keeping-linear-history-when-pulling"}},[e._v("#")]),e._v(" Keeping linear history when pulling")]),e._v(" "),a("h3",{attrs:{id:"rebasing-when-pulling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rebasing-when-pulling"}},[e._v("#")]),e._v(" Rebasing when pulling")]),e._v(" "),a("p",[e._v("If you are pulling in fresh commits from the remote repository and you have local changes on the current branch then git will automatically merge the remote version and your version. If you would like to reduce the number of merges on your branch you can tell git to "),a("a",{attrs:{href:"https://stackoverflow.com/documentation/git/355/rebasing",target:"_blank",rel:"noopener noreferrer"}},[e._v("rebase"),a("OutboundLink")],1),e._v(" your commits on the remote version of the branch.")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git pull --rebase\n\n")])])]),a("h3",{attrs:{id:"making-it-the-default-behavior"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#making-it-the-default-behavior"}},[e._v("#")]),e._v(" Making it the default behavior")]),e._v(" "),a("p",[e._v("To make this the default behavior for newly created branches, type the following command:")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git config branch.autosetuprebase always\n\n")])])]),a("p",[e._v("To change the behavior of an existing branch, use this:")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git config branch.BRANCH_NAME.rebase true\n\n")])])]),a("p",[e._v("And")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git pull --no-rebase\n\n")])])]),a("p",[e._v("To perform a normal merging pull.")]),e._v(" "),a("h3",{attrs:{id:"check-if-fast-forwardable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-if-fast-forwardable"}},[e._v("#")]),e._v(" Check if fast-forwardable")]),e._v(" "),a("p",[e._v("To only allow fast forwarding the local branch, you can use:")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git pull --ff-only\n\n")])])]),a("p",[e._v("This will display an error when the local branch is not fast-forwardable, and needs to be either rebased or merged with upstream.")]),e._v(" "),a("h2",{attrs:{id:"pulling-changes-to-a-local-repository"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pulling-changes-to-a-local-repository"}},[e._v("#")]),e._v(" Pulling changes to a local repository")]),e._v(" "),a("h3",{attrs:{id:"simple-pull"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-pull"}},[e._v("#")]),e._v(" Simple pull")]),e._v(" "),a("p",[e._v("When you are working on a remote repository (say, GitHub) with someone else, you will at some point want to share your changes with them. Once they have "),a("a",{attrs:{href:"https://stackoverflow.com/documentation/git/2600/pushing",target:"_blank",rel:"noopener noreferrer"}},[e._v("pushed"),a("OutboundLink")],1),e._v(" their changes to a remote repository, you can retrieve those changes by "),a("strong",[e._v("pulling")]),e._v(" from this repository.")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git pull\n\n")])])]),a("p",[e._v("Will do it, in the majority of cases.")]),e._v(" "),a("h3",{attrs:{id:"pull-from-a-different-remote-or-branch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pull-from-a-different-remote-or-branch"}},[e._v("#")]),e._v(" Pull from a different remote or branch")]),e._v(" "),a("p",[e._v("You can pull changes from a different remote or branch by specifying their names")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git pull origin feature-A\n\n")])])]),a("p",[e._v("Will pull the branch "),a("code",[e._v("feature-A")]),e._v(" form "),a("code",[e._v("origin")]),e._v(" into your local branch. Note that you can directly supply an URL instead of a remote name, and an object name such as a commit SHA instead of a branch name.")]),e._v(" "),a("h3",{attrs:{id:"manual-pull"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#manual-pull"}},[e._v("#")]),e._v(" Manual pull")]),e._v(" "),a("p",[e._v("To imitate the behavior of a git pull, you can use "),a("code",[e._v("git fetch")]),e._v(" then "),a("code",[e._v("git merge")])]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git fetch origin # retrieve objects and update refs from origin\ngit merge origin/feature-A # actually perform the merge\n\n")])])]),a("p",[e._v("This can give you more control, and allows you to inspect the remote branch before merging it. Indeed, after fetching, you can see the remote branches with "),a("code",[e._v("git branch -a")]),e._v(", and check them out with")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git checkout -b local-branch-name origin/feature-A # checkout the remote branch\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# inspect the branch, make commits, squash, ammend or whatever")]),e._v("\ngit checkout merging-branches # moving to the destination branch\ngit merge local-branch-name # performing the merge\n\n")])])]),a("p",[e._v("This can be very handy when processing pull requests.")]),e._v(" "),a("h2",{attrs:{id:"pull-permission-denied"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pull-permission-denied"}},[e._v("#")]),e._v(' Pull, "permission denied"')]),e._v(" "),a("p",[e._v("Some problems can occur if the "),a("code",[e._v(".git")]),e._v(" folder has wrong permission. Fixing this problem by setting the owner of the complete "),a("code",[e._v(".git")]),e._v(" folder. Sometimes it happen that another user pull and change the rights of the "),a("code",[e._v(".git")]),e._v(" folder or files.")]),e._v(" "),a("p",[e._v("To fix the problem:")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("chown -R youruser:yourgroup .git/\n\n")])])]),a("h4",{attrs:{id:"syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[e._v("#")]),e._v(" Syntax")]),e._v(" "),a("ul",[a("li",[e._v("git pull [options ["),a("repository",[e._v(" ["),a("refspec",[e._v("...]]")])],1)],1)]),e._v(" "),a("h4",{attrs:{id:"parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[e._v("#")]),e._v(" Parameters")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[e._v("Parameters")])]),e._v(" "),a("th",[a("strong",[e._v("Details")])])])]),e._v(" "),a("tbody",[a("tr",[a("td",[a("code",[e._v("--quiet")])]),e._v(" "),a("td",[e._v("No text output")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("-q")])]),e._v(" "),a("td",[e._v("shorthand for "),a("code",[e._v("--quiet")])])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("--verbose")])]),e._v(" "),a("td",[e._v("verbose text output. Passed to fetch and merge/rebase commands respectively.")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("-v")])]),e._v(" "),a("td",[e._v("shorthand for "),a("code",[e._v("--verbose")])])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("--[no-]recurse-submodules[=yes")])]),e._v(" "),a("td",[a("code",[e._v("on-demand")])])])])]),e._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[e._v("#")]),e._v(" Remarks")]),e._v(" "),a("p",[a("code",[e._v("git pull")]),e._v(" runs "),a("code",[e._v("git fetch")]),e._v(" with the given parameters and calls "),a("code",[e._v("git merge")]),e._v(" to merge the retrieved branch heads into the current branch.")])])}),[],!1,null,null,null);t.default=s.exports}}]);