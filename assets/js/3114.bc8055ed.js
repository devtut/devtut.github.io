(window.webpackJsonp=window.webpackJsonp||[]).push([[3114],{3522:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"strings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#strings"}},[t._v("#")]),t._v(" Strings")]),t._v(" "),a("h2",{attrs:{id:"difference-between-single-quoted-and-double-quoted-string-literals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#difference-between-single-quoted-and-double-quoted-string-literals"}},[t._v("#")]),t._v(" Difference between single-quoted and double-quoted String literals")]),t._v(" "),a("p",[t._v("The main difference is that double-quoted "),a("code",[t._v("String")]),t._v(" literals support string interpolations and the full set of escape sequences.")]),t._v(" "),a("p",[t._v("For instance, they can include arbitrary Ruby expressions via interpolation:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Single-quoted strings don't support interpolation")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Now is "),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("now"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v("'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Now is #{Time.now}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Double-quoted strings support interpolation")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Now is '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("now"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Now is 2016-07-21 12:43:04 +0200")]),t._v("\n\n")])])]),a("p",[t._v("Double-quoted strings also support the "),a("a",{attrs:{href:"https://github.com/ruby/ruby/blob/trunk/doc/syntax/literals.rdoc#strings",target:"_blank",rel:"noopener noreferrer"}},[t._v("entire set of escape sequences"),a("OutboundLink")],1),t._v(" including "),a("code",[t._v('"\\n"')]),t._v(", "),a("code",[t._v('"\\t"')]),t._v("...")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello\\nWorld'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Hello\\nWorld")]),t._v("\n\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello\\nWorld"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Hello")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# World")]),t._v("\n\n")])])]),a("p",[t._v("... while single-quoted strings support "),a("strong",[t._v("no")]),t._v(" escape sequences, baring the minimal set necessary for single-quoted strings to be useful: Literal single quotes and backslashes, "),a("code",[t._v("'\\''")]),t._v(" and "),a("code",[t._v("'\\\\'")]),t._v(" respectively.")]),t._v(" "),a("h2",{attrs:{id:"creating-a-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-string"}},[t._v("#")]),t._v(" Creating a String")]),t._v(" "),a("p",[t._v("Ruby provides several ways to create a "),a("a",{attrs:{href:"http://ruby-doc.org/core/String.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("String")]),a("OutboundLink")],1),t._v(' object. The most common way is using single or double quotes to create a "'),a("a",{attrs:{href:"http://ruby-doc.org/core/doc/syntax/literals_rdoc.html#label-Strings",target:"_blank",rel:"noopener noreferrer"}},[t._v("string literal"),a("OutboundLink")],1),t._v('":')]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello'")]),t._v("\ns2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\n\n")])])]),a("p",[t._v("The main difference is that double-quoted string literals are a little bit more flexible as they support interpolation and some backslash escape sequences.")]),t._v(" "),a("p",[t._v("There are also several other possible ways to create a string literal using arbitrary string delimiters. An arbitrary string delimiter is a "),a("code",[t._v("%")]),t._v(" followed by a matching pair of delimiters:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%(A string)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%{A string}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%<A string>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%|A string|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%!A string!")]),t._v("\n\n")])])]),a("p",[t._v("Finally, you can use the "),a("code",[t._v("%q")]),t._v(" and "),a("code",[t._v("%Q")]),t._v(" sequence, that are equivalent to "),a("code",[t._v("'")]),t._v(" and "),a("code",[t._v('"')]),t._v('":')]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%q(A string)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# A string")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%q(Now is "),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("now"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Now is #{Time.now}")]),t._v("\n\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%Q(A string)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# A string")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%Q(Now is "),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("now"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Now is 2016-07-21 12:47:45 +0200")]),t._v("\n\n")])])]),a("p",[a("code",[t._v("%q")]),t._v(" and "),a("code",[t._v("%Q")]),t._v(" sequences are useful when the string contains either single quotes, double quotes, or a mix of both. In this way, you don't need to escape the content:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('%Q(<a href="/profile">User\'s profile<a>)')]),t._v("\n\n")])])]),a("p",[t._v("You can use several different delimiters, as long as there is a matching pair:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%q(A string)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%q{A string}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%q<A string>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%q|A string|")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%q!A string!")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"case-manipulation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#case-manipulation"}},[t._v("#")]),t._v(" Case manipulation")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("upcase     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "STRING"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"STRING"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("downcase   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "string"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"String"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("swapcase   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "sTRING"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("capitalize "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "String"')]),t._v("\n\n")])])]),a("p",[t._v("These four methods do not modify the original receiver. For example,")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("upcase "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "HELLO"')]),t._v("\nputs str   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "Hello"')]),t._v("\n\n")])])]),a("p",[t._v("There are four similar methods that perform the same actions but modify original receiver.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("upcase"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "STRING"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"STRING"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("downcase"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "string"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"String"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("swapcase"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "sTRING"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("capitalize"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "String"')]),t._v("\n\n")])])]),a("p",[t._v("For example,")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("upcase"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "HELLO"')]),t._v("\nputs str     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "HELLO"')]),t._v("\n\n")])])]),a("p",[t._v("Notes:")]),t._v(" "),a("ul",[a("li",[t._v("prior to Ruby 2.4 these methods do not handle unicode.")])]),t._v(" "),a("h2",{attrs:{id:"string-concatenation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-concatenation"}},[t._v("#")]),t._v(" String concatenation")]),t._v(" "),a("p",[t._v("Concatenate strings with the "),a("code",[t._v("+")]),t._v(" operator:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\ns2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v("\ns3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),t._v("\n\nputs s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" s3\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => Hello World")]),t._v("\n\ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" s3\nputs s\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => Hello World")]),t._v("\n\n")])])]),a("p",[t._v("Or with the "),a("code",[t._v("<<")]),t._v(" operator:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello'")]),t._v("\ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),t._v("\ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'World'")]),t._v("\nputs s\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => Hello World")]),t._v("\n\n")])])]),a("p",[t._v("Note that the "),a("code",[t._v("<<")]),t._v(" operator modifies the object on the left hand side.")]),t._v(" "),a("p",[t._v("You also can multiply strings, e.g.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wow"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "wowwowwow"')]),t._v("\n\n")])])]),a("h2",{attrs:{id:"splitting-a-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitting-a-string"}},[t._v("#")]),t._v(" Splitting a String")]),t._v(" "),a("p",[a("code",[t._v("String#split")]),t._v(" splits a "),a("code",[t._v("String")]),t._v(" into an "),a("code",[t._v("Array")]),t._v(", based on a delimiter.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alpha,beta"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => ["alpha", "beta"]')]),t._v("\n\n")])])]),a("p",[t._v("An empty "),a("code",[t._v("String")]),t._v(" results into an empty "),a("code",[t._v("Array")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => []")]),t._v("\n\n")])])]),a("p",[t._v("A non-matching delimiter results in an "),a("code",[t._v("Array")]),t._v(" containing a single item:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alpha,beta"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => ["alpha,beta"]')]),t._v("\n\n")])])]),a("p",[t._v("You can also split a string using regular expressions:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alpha, beta,gamma"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/, ?/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => ["alpha", "beta", "gamma"]')]),t._v("\n\n")])])]),a("p",[t._v("The delimiter is optional, by default a string is split on whitespace:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alpha beta"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => ["alpha", "beta"] ')]),t._v("\n\n")])])]),a("h2",{attrs:{id:"positioning-strings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#positioning-strings"}},[t._v("#")]),t._v(" Positioning strings")]),t._v(" "),a("p",[t._v("In Ruby, strings can be left-justified, right-justified or centered")]),t._v(" "),a("p",[t._v("To left-justify  string, use the "),a("code",[t._v("ljust")]),t._v(" method. This takes in two parameters, an integer representing the number of characters of the new string and a string, representing the pattern to be filled.")]),t._v(" "),a("p",[t._v("If the integer is greater than the length of the original string, the new string will be left-justified with the optional string parameter taking the remaining space. If the string parameter is not given, the string will be padded with spaces.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcd"')]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ljust"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcd"')]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ljust"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcd      "')]),t._v("\n\n")])])]),a("p",[t._v("To right-justify a string, use the "),a("code",[t._v("rjust")]),t._v(" method. This takes in two parameters, an integer representing the number of characters of the new string and a string, representing the pattern to be filled.")]),t._v(" "),a("p",[t._v("If the integer is greater than the length of the original string, the new string will be right-justified with the optional string parameter taking the remaining space. If the string parameter is not given, the string will be padded with spaces.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcd"')]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rjust"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcd"')]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rjust"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"      abcd"')]),t._v("\n\n")])])]),a("p",[t._v("To center a string, use the "),a("code",[t._v("center")]),t._v(" method. This takes in two parameters, an integer representing the width of the new string and a string, which the original string will be padded with. The string will be aligned to the center.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcd"')]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("center"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcd"')]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("center"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"   abcd   "')]),t._v("\n\n")])])]),a("h2",{attrs:{id:"joining-strings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#joining-strings"}},[t._v("#")]),t._v(" Joining Strings")]),t._v(" "),a("p",[a("code",[t._v("Array#join")]),t._v(" joins an "),a("code",[t._v("Array")]),t._v(" into a "),a("code",[t._v("String")]),t._v(", based on a delimiter:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alpha"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"beta"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("join"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "alpha,beta"')]),t._v("\n\n")])])]),a("p",[t._v("The delimiter is optional, and defaults to an empty "),a("code",[t._v("String")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alpha"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"beta"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("join\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "alphabeta"')]),t._v("\n\n")])])]),a("p",[t._v("An empty "),a("code",[t._v("Array")]),t._v(" results in an empty "),a("code",[t._v("String")]),t._v(", no matter which delimiter is used.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("join"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => ""')]),t._v("\n\n")])])]),a("h2",{attrs:{id:"string-starts-with"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-starts-with"}},[t._v("#")]),t._v(" String starts with")]),t._v(" "),a("p",[t._v("To find if a string starts with a pattern, the "),a("code",[t._v("start_with?")]),t._v(" method comes in handy")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zebras are cool"')]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start_with"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zebras"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n")])])]),a("p",[t._v("You can also check the position of the pattern with "),a("code",[t._v("index")])]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zebras are cool"')]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zebras"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zero"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"string-interpolation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-interpolation"}},[t._v("#")]),t._v(" String interpolation")]),t._v(" "),a("p",[t._v("The double-quoted delimiter "),a("code",[t._v('"')]),t._v(" and "),a("code",[t._v("%Q")]),t._v(" sequence supports string interpolation using "),a("code",[t._v("#{ruby_expression}")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Now is '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("now"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Now is Now is 2016-07-21 12:47:45 +0200")]),t._v("\n\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%Q(Now is "),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("now"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Now is Now is 2016-07-21 12:47:45 +0200")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"string-ends-with"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-ends-with"}},[t._v("#")]),t._v(" String ends with")]),t._v(" "),a("p",[t._v("To find if a string ends with a pattern, the "),a("code",[t._v("end_with?")]),t._v(" method comes in handy")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I like pineapples"')]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("end_with"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pineaaples"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"multiline-strings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multiline-strings"}},[t._v("#")]),t._v(" Multiline strings")]),t._v(" "),a("p",[t._v("The easiest way to create a multiline string is to just use multiple lines between quotation marks:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("address "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(' "'),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Four")]),t._v(" score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" seven years ago our fathers brought forth on this\ncontinent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" nation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" conceived "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Liberty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" dedicated to the\nproposition that all men are created equal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v('"\n\n')])])]),a("p",[t._v("The main problem with that technique is that if the string includes a quotation, it'll break the string syntax. To work around the problem, you can use a "),a("a",{attrs:{href:"https://ruby-doc.org/core-2.3.0/doc/syntax/literals_rdoc.html#label-Here+Documents",target:"_blank",rel:"noopener noreferrer"}},[t._v("heredoc"),a("OutboundLink")],1),t._v(" instead:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("puts "),a("span",{pre:!0,attrs:{class:"token string heredoc-string"}},[a("span",{pre:!0,attrs:{class:"token delimiter symbol"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<<-")]),t._v("RAVEN")]),t._v('\n  Once upon a midnight dreary, while I pondered, weak and weary, \n  Over many a quaint and curious volume of forgotten lore— \n      While I nodded, nearly napping, suddenly there came a tapping, \n  As of some one gently rapping, rapping at my chamber door. \n  "\'Tis some visitor," I muttered, "tapping at my chamber door— \n              Only this and nothing more." \n  '),a("span",{pre:!0,attrs:{class:"token delimiter symbol"}},[t._v("RAVEN")])]),t._v("\n\n")])])]),a("p",[t._v("Ruby supports shell-style here documents with "),a("code",[t._v("<<EOT")]),t._v(", but the terminating text must start the line. That screws up code indentation, so there's not a lot of reason to use that style. Unfortunately, the string will have indentations depending no how the code itself is indented.")]),t._v(" "),a("p",[t._v("Ruby 2.3 solves the problem by introducing "),a("code",[t._v("<<~")]),t._v(" which strips out excess leading spaces:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("build_email")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("address"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EMAIL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TO")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#{address}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("To")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Whom")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("It")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("May")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Concern")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Please")]),t._v(" stop playing the bagpipes at sunrise"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n                     \n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Regards")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Your")]),t._v(" neighbor               \n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EMAIL")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[a("a",{attrs:{href:"https://ruby-doc.org/core-2.3.0/doc/syntax/literals_rdoc.html#label-Percent+Strings",target:"_blank",rel:"noopener noreferrer"}},[t._v("Percent Strings"),a("OutboundLink")],1),t._v(" also work to create multiline strings:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%q(\nHAMLET        Do you see yonder cloud that's almost in shape of a camel?\nPOLONIUS        By the mass, and 'tis like a camel, indeed.\nHAMLET        Methinks it is like a weasel.\nPOLONIUS        It is backed like a weasel.\nHAMLET        Or like a whale?\nPOLONIUS        Very like a whale\n)")]),t._v("\n\n")])])]),a("p",[t._v("There are a few ways to avoid interpolation and escape sequences:")]),t._v(" "),a("li",[t._v("\nSingle quote instead of double quote: `'\\n is a carriage return.'`\n")]),t._v(" "),a("li",[t._v("\nLower case `q` in a percent string: `%q[#{not-a-variable}]`\n")]),t._v(" "),a("li",[t._v("\nSingle quote the terminal string in a heredoc:\n"),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string heredoc-string"}},[a("span",{pre:!0,attrs:{class:"token delimiter symbol"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<<-'")]),t._v("CODE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")])]),t._v("\n   puts 'Hello world!'\n"),a("span",{pre:!0,attrs:{class:"token delimiter symbol"}},[t._v("CODE")])]),t._v("\n\n")])])])]),t._v(" "),a("h2",{attrs:{id:"formatted-strings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#formatted-strings"}},[t._v("#")]),t._v(" Formatted strings")]),t._v(" "),a("p",[t._v("Ruby can inject an array of values into a string by replacing any placeholders with the values from the supplied array.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello %s, my name is %s!"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'World'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'br3nt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => Hello World, my name is br3nt!")]),t._v("\n\n")])])]),a("p",[t._v("The place holders are represented by two "),a("code",[t._v("%s")]),t._v(" and the values are supplied by the array "),a("code",[t._v("['Hello', 'br3nt']")]),t._v(".  The "),a("code",[t._v("%")]),t._v(" operator instructs the string to inject the values of the array.")]),t._v(" "),a("h2",{attrs:{id:"string-character-replacements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-character-replacements"}},[t._v("#")]),t._v(" String character replacements")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("tr")]),t._v(" method returns a copy of a string where the characters of the first argument are replaced by the characters of the second argument.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'l'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "stling"')]),t._v("\n\n")])])]),a("p",[t._v("To replace only the first occurrence of a pattern with with another expression use the "),a("code",[t._v("sub")]),t._v(" method")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string ring"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'l'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "stling ring"')]),t._v("\n\n")])])]),a("p",[t._v("If you would like to replace "),a("strong",[t._v("all")]),t._v(" occurrences of a pattern with that expression use "),a("code",[t._v("gsub")])]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string ring"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gsub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'r'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'l'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "stling ling" ')]),t._v("\n\n")])])]),a("p",[t._v("To delete characters, pass in an empty string for the second parameter")]),t._v(" "),a("p",[t._v("You can also use regular expressions in all these methods.")]),t._v(" "),a("p",[t._v("It's important to note that these methods will only return a new copy of a string and won't modify the string in place. To do that, you need to use the "),a("code",[t._v("tr!")]),t._v(", "),a("code",[t._v("sub!")]),t._v(" and "),a("code",[t._v("gsub!")]),t._v(" methods respectively.")]),t._v(" "),a("h2",{attrs:{id:"understanding-the-data-in-a-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#understanding-the-data-in-a-string"}},[t._v("#")]),t._v(" Understanding the data in a string")]),t._v(" "),a("p",[t._v("In Ruby, a string is just a sequence of "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Byte",target:"_blank",rel:"noopener noreferrer"}},[t._v("bytes"),a("OutboundLink")],1),t._v(" along with the name of an encoding (such as "),a("code",[t._v("UTF-8")]),t._v(", "),a("code",[t._v("US-ASCII")]),t._v(", "),a("code",[t._v("ASCII-8BIT")]),t._v(") that specifies how you might interpret those bytes as characters.")]),t._v(" "),a("p",[t._v("Ruby strings can be used to hold text (basically a sequence of characters), in which case the UTF-8 encoding is usually used.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bytes  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => [97, 98, 99]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("encoding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "UTF-8"')]),t._v("\n\n")])])]),a("p",[t._v("Ruby strings can also be used to hold binary data (a sequence of bytes), in which case the ASCII-8BIT encoding is usually used.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("encoding  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "ASCII-8BIT"')]),t._v("\n\n")])])]),a("p",[t._v("It is possible for the sequence of bytes in a string to not match the encoding, resulting in errors if you try to use the string.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\xFF \\xFF"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("valid_encoding"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\xFF \\xFF"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ArgumentError: invalid byte sequence in UTF-8")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"string-substitution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-substitution"}},[t._v("#")]),t._v(" String Substitution")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("p "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is %s"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "This is foo"')]),t._v("\n\np "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s %s %s"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"baz"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "foo bar baz"')]),t._v("\n\np "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%{foo} == %{foo}"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":foo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "foo == foo"')]),t._v("\n\n")])])]),a("p",[t._v("See "),a("a",{attrs:{href:"http://ruby-doc.org/core-2.3.0/String.html#method-i-25",target:"_blank",rel:"noopener noreferrer"}},[t._v("String "),a("code",[t._v("%")]),a("OutboundLink")],1),t._v(" docs and "),a("a",{attrs:{href:"http://ruby-doc.org/core-2.3.1/Kernel.html#method-i-sprintf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kernel::sprintf"),a("OutboundLink")],1),t._v(" for more details.")]),t._v(" "),a("h4",{attrs:{id:"syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),a("ul",[a("li",[t._v("'A string' // creates a string via single-quoted literal")]),t._v(" "),a("li",[t._v('"A string" // creates a string via double-quoted literal')]),t._v(" "),a("li",[t._v('String.new("A string")')]),t._v(" "),a("li",[t._v("%q(A string) // alternative syntax for creating single quoted strings")]),t._v(" "),a("li",[t._v("%Q(A string) // alternative syntax for creating double quoted strings")])])])}),[],!1,null,null,null);s.default=n.exports}}]);