(window.webpackJsonp=window.webpackJsonp||[]).push([[3416],{3824:function(e,t,a){"use strict";a.r(t);var s=a(31),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"creating-a-procedure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-procedure"}},[e._v("#")]),e._v(" Creating a procedure")]),e._v(" "),a("h2",{attrs:{id:"introduction-to-procedures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction-to-procedures"}},[e._v("#")]),e._v(" Introduction to procedures")]),e._v(" "),a("p",[e._v("A "),a("code",[e._v("Sub")]),e._v(" is a procedure that performs a specific task but does not return a specific value.")]),e._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Sub")]),e._v(" ProcedureName "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("[argument_list]"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    [statements]\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("End")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Sub")]),e._v("\n\n")])])]),a("p",[e._v("If no access modifier is specified, a procedure is "),a("code",[e._v("Public")]),e._v(" by default.")]),e._v(" "),a("p",[e._v("A "),a("code",[e._v("Function")]),e._v(" is a procedure that is given data and returns a value, ideally without global or module-scope side-effects.")]),e._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Function")]),e._v(" ProcedureName "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("[argument_list]"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" ["),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" ReturnType]\n    [statements]\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("End")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Function")]),e._v("\n\n")])])]),a("p",[e._v("A "),a("code",[e._v("Property")]),e._v(" is a procedure that "),a("strong",[e._v("encapsulates")]),e._v(" module data. A property can have up to 3 accessors: "),a("code",[e._v("Get")]),e._v(" to return a value or object reference, "),a("code",[e._v("Let")]),e._v(" to assign a value, and/or "),a("code",[e._v("Set")]),e._v(" to assign an object reference.")]),e._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Property")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Get")]),e._v("|"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Let")]),e._v("|"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Set")]),e._v(" PropertyName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("[argument_list]"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" ["),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" ReturnType]\n    [statements]\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("End")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Property")]),e._v("\n\n")])])]),a("p",[e._v("Properties are usually used in class modules (although they are allowed in standard modules as well), exposing accessor to data that is otherwise inaccessible to the calling code. A property that only exposes a "),a("code",[e._v("Get")]),e._v(' accessor is "read-only"; a property that would only expose a '),a("code",[e._v("Let")]),e._v(" and/or "),a("code",[e._v("Set")]),e._v(' accessor is "write-only". Write-only properties are not considered a good programming practice - if the client code can '),a("strong",[e._v("write")]),e._v(" a value, it should be able to "),a("strong",[e._v("read")]),e._v(" it back. Consider implementing a "),a("code",[e._v("Sub")]),e._v(" procedure instead of making a write-only property.")]),e._v(" "),a("h3",{attrs:{id:"returning-a-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returning-a-value"}},[e._v("#")]),e._v(" Returning a value")]),e._v(" "),a("p",[e._v("A "),a("code",[e._v("Function")]),e._v(" or "),a("code",[e._v("Property Get")]),e._v(" procedure can (and should!) return a value to its caller. This is done by assigning the identifier of the procedure:")]),e._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Property")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Get")]),e._v(" Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Integer")]),e._v("\n    Foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("42")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("End")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Property")]),e._v("\n\n")])])]),a("h2",{attrs:{id:"function-with-examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-with-examples"}},[e._v("#")]),e._v(" Function With Examples")]),e._v(" "),a("p",[e._v("As stated above Functions are smaller procedures that contain small pieces of code which may be repetitive inside a Procedure.")]),e._v(" "),a("p",[e._v("Functions are used to reduce redundancy in code.")]),e._v(" "),a("p",[e._v("Similar to a Procedure, A function can be declared with or without an arguments list.")]),e._v(" "),a("p",[e._v("Function is declared as a return type, as all functions return a value.\nThe Name and the Return Variable of a function are the Same.")]),e._v(" "),a("li",[e._v("\nFunction With Parameter:\n"),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Function")]),e._v(" check_even"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("as")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("as")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("mod")]),e._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n check_even "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),e._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v("\n check_even"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("False")]),e._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("end")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("end")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Function")]),e._v("\n\n")])])])]),e._v(" "),a("li",[e._v("\nFunction Without Parameter:\n"),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Function")]),e._v(" greet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("as")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("String")]),e._v("\n greet"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello Coder!"')]),e._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("end")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Function")]),e._v("\n\n")])])])]),e._v(" "),a("p",[e._v("The Function can be called in various ways inside a function. Since a Function declared with a return type is basically a variable. it is used similar to a variable.")]),e._v(" "),a("p",[e._v("Functional Calls:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n   call greet() 'Similar to a Procedural call just allows the Procedure to use the\n                 'variable greet \n    string_1=greet() 'The Return value of the function is used for variable\n                     'assignment\n\n")])])]),a("p",[e._v("Further the function can also be used as conditions for if and other conditional statements.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\n     for i = 1 to 10\n      if check_even(i) then\n      msgbox i & " is Even"\n      else\n      msgbox i & " is Odd"\n      end if\n      next i\n\n')])])]),a("p",[e._v("Further more Functions can have modifiers such as By ref and By val for their arguments.")])])}),[],!1,null,null,null);t.default=r.exports}}]);