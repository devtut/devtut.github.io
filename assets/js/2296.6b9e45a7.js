(window.webpackJsonp=window.webpackJsonp||[]).push([[2296],{2704:function(t,a,e){"use strict";e.r(a);var s=e(31),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"multi-threading"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#multi-threading"}},[t._v("#")]),t._v(" Multi-Threading")]),t._v(" "),e("h2",{attrs:{id:"creating-a-simple-thread"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-simple-thread"}},[t._v("#")]),t._v(" Creating a simple thread")]),t._v(" "),e("p",[t._v('The most simple way to create a thread is by calling a selector "in the background". This means a new thread is created to execute the selector. The receiving object can be any object, not just '),e("code",[t._v("self")]),t._v(", but it needs to respond to the given selector.")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("createThread "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" performSelectorInBackground"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("threadMainWithOptionalArgument"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                           withObject"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("someObject"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("threadMainWithOptionalArgument"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("argument "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// To avoid memory leaks, the first thing a thread method needs to do is")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// create a new autorelease pool, either manually or via "@autoreleasepool".')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("autoreleasepool "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The thread code should be here.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"create-more-complex-thread"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-more-complex-thread"}},[t._v("#")]),t._v(" Create more complex thread")]),t._v(" "),e("p",[t._v("Using a subclass of "),e("code",[t._v("NSThread")]),t._v(" allows implementation of more complex threads (for example, to allow passing more arguments or to encapsulate all related helper methods in one\nclass). Additionally, the "),e("code",[t._v("NSThread")]),t._v(" instance can be saved in a property or variable and can be queried about its current state (whether it's still running).")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("NSThread")]),t._v(" class supports a method called "),e("code",[t._v("cancel")]),t._v(" that can be called from any thread, which then sets the "),e("code",[t._v("cancelled")]),t._v(" property to "),e("code",[t._v("YES")]),t._v(" in a thread-safe way. The thread implementation can query (and/or observe) the "),e("code",[t._v("cancelled")]),t._v(" property and exit its "),e("code",[t._v("main")]),t._v(" method. This can be used to gracefully shut down a worker thread.")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create a new NSThread subclass")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" MyThread "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NSThread\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Add properties for values that need to be passed from the caller to the new")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// thread. Caller must not modify these once the thread is started to avoid")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// threading issues (or the properties must be made thread-safe using locks).")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" NSInteger someProperty"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" MyThread\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("main\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v("autoreleasepool "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The main thread method goes here")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"New thread. Some property: %ld"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("someProperty"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n\nMyThread "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("thread "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MyThread alloc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" init"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nthread"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("someProperty "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("thread start"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"thread-local-storage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#thread-local-storage"}},[t._v("#")]),t._v(" Thread-local storage")]),t._v(" "),e("p",[t._v("Every thread has access to a mutable dictionary that is local to the current thread. This allows to cache informations in an easy way without the need for locking, as each thread has its own dedicated mutable dictionary:")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[t._v("NSMutableDictionary "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("localStorage "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSThread currentThread"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("threadDictionary"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlocalStorage"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("someKey"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" someValue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[t._v("The dictionary is automatically released when the thread terminates.")])])}),[],!1,null,null,null);a.default=n.exports}}]);