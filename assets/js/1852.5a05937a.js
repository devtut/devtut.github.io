(window.webpackJsonp=window.webpackJsonp||[]).push([[1852],{2260:function(t,e,a){"use strict";a.r(e);var s=a(31),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"kotlin-for-java-developers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kotlin-for-java-developers"}},[t._v("#")]),t._v(" Kotlin for Java Developers")]),t._v(" "),a("p",[t._v("Most people coming to Kotlin do have a programming background in Java.")]),t._v(" "),a("p",[t._v("This topic collects examples comparing Java to Kotlin, highlighting the most important differences and those gems Kotlin offers over Java.")]),t._v(" "),a("h2",{attrs:{id:"declaring-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#declaring-variables"}},[t._v("#")]),t._v(" Declaring Variables")]),t._v(" "),a("p",[t._v("In Kotlin, variable declarations look a bit different than Java's:")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("\n\n")])])]),a("li",[t._v('\nThey start with either `val` or `var`, making the declaration `final` ("**val**ue") or **var**iable.\n')]),t._v(" "),a("li",[t._v("\nThe type is noted after the name, separated by a `:`\n")]),t._v(" "),a("li",[t._v("\nThanks to Kotlin's **type inference** the explicit type declaration can be obmitted if there is an assignment with a type the compiler is able to unambigously detect\n")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Java")]),t._v(" "),a("th",[t._v("Kotlin")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("int i = 42;")])]),t._v(" "),a("td",[a("code",[t._v("var i = 42")]),t._v(" ("),a("strong",[t._v("or")]),t._v(" "),a("code",[t._v("var i : Int = 42")]),t._v(")")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("final int i = 42;")])]),t._v(" "),a("td",[a("code",[t._v("val i = 42")])])])])]),t._v(" "),a("h2",{attrs:{id:"quick-facts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quick-facts"}},[t._v("#")]),t._v(" Quick Facts")]),t._v(" "),a("ul",[a("li",[t._v("Kotlin does not need "),a("strong",[a("code",[t._v(";")])]),t._v(" to end statements")]),t._v(" "),a("li",[t._v("Kotlin is "),a("strong",[t._v("null-safe")])]),t._v(" "),a("li",[t._v("Kotlin is "),a("strong",[t._v("100% Java interoperable")])]),t._v(" "),a("li",[t._v("Kotlin has "),a("strong",[t._v("no primitives")]),t._v(" (but optimizes their object counterparts for the JVM, if possible)")]),t._v(" "),a("li",[t._v("Kotlin classes have "),a("strong",[t._v("properties, not fields")])]),t._v(" "),a("li",[t._v("Kotlin offers "),a("strong",[t._v("data classes")]),t._v(" with auto-generated "),a("code",[t._v("equals")]),t._v("/"),a("code",[t._v("hashCode")]),t._v(" methods and field accessors")]),t._v(" "),a("li",[t._v("Kotlin only has runtime Exceptions, "),a("strong",[t._v("no checked Exceptions")])]),t._v(" "),a("li",[t._v("Kotlin has "),a("strong",[t._v("no "),a("code",[t._v("new")]),t._v(" keyword")]),t._v(". Creating objects is done just by calling the constructor like any other method.")]),t._v(" "),a("li",[t._v("Kotlin supports (limited) "),a("strong",[t._v("operator overloading")]),t._v(". For example, accessing a value of a map can be written like: "),a("code",[t._v('val a = someMap["key"]')])]),t._v(" "),a("li",[t._v("Kotlin can not only be compiled to byte code for the JVM, but also into "),a("strong",[t._v("Java Script")]),t._v(", enabling you to write both backend and frontend code in Kotlin")]),t._v(" "),a("li",[t._v("Kotlin is "),a("strong",[t._v("fully compatible with Java 6")]),t._v(", which is especially interesting in regards for support of (not so) old Android devices")]),t._v(" "),a("li",[t._v("Kotlin is an "),a("strong",[t._v("officially supported")]),t._v(" language "),a("strong",[t._v("for Android development")])]),t._v(" "),a("li",[t._v("Kotlin's collections have built-in disctinction between "),a("strong",[t._v("mutable and immutable collections")]),t._v(".")]),t._v(" "),a("li",[t._v("Kotlin supports "),a("strong",[t._v("Coroutines")]),t._v(" (experimental)")])]),t._v(" "),a("h2",{attrs:{id:"equality-identity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#equality-identity"}},[t._v("#")]),t._v(" Equality & Identity")]),t._v(" "),a("p",[t._v("Kotlin uses "),a("code",[t._v("==")]),t._v(" for equality (that is, calls "),a("code",[t._v("equals")]),t._v(" internally) and "),a("code",[t._v("===")]),t._v(" for referential identity.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Java")]),t._v(" "),a("th",[t._v("Kotlin")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("a.equals(b);")])]),t._v(" "),a("td",[a("code",[t._v("a == b")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("a == b;")])]),t._v(" "),a("td",[a("code",[t._v("a === b")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("a != b;")])]),t._v(" "),a("td",[a("code",[t._v("a !== b")])])])])]),t._v(" "),a("p",[t._v("See: "),a("a",{attrs:{href:"https://kotlinlang.org/docs/reference/equality.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://kotlinlang.org/docs/reference/equality.html"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"if-try-and-others-are-expressions-not-statements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if-try-and-others-are-expressions-not-statements"}},[t._v("#")]),t._v(" IF, TRY and others are expressions, not statements")]),t._v(" "),a("p",[t._v("In Kotlin, "),a("code",[t._v("if")]),t._v(", "),a("code",[t._v("try")]),t._v(" and others are expressions (so they do return a value) rather than (void) statements.")]),t._v(" "),a("p",[t._v("So, for example, Kotlin does not have Java's ternary "),a("strong",[t._v("Elvis Operator")]),t._v(", but you can write something like this:")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("someBoolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("33")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("\n\n")])])]),a("p",[t._v("Even more unfamiliar, but equally expressive, is the "),a("code",[t._v("try")]),t._v(" "),a("strong",[t._v("expression")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-kotlin extra-class"},[a("pre",{pre:!0,attrs:{class:"language-kotlin"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("someString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Exception"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);