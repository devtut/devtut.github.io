(window.webpackJsonp=window.webpackJsonp||[]).push([[627],{1035:function(t,s,a){"use strict";a.r(s);var e=a(31),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"c-incompatibilities"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-incompatibilities"}},[t._v("#")]),t._v(" C incompatibilities")]),t._v(" "),a("p",[t._v("This describes what C code will break in a C++ compiler.")]),t._v(" "),a("h2",{attrs:{id:"reserved-keywords"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reserved-keywords"}},[t._v("#")]),t._v(" Reserved Keywords")]),t._v(" "),a("p",[t._v("The first example are keywords that have a special purpose in C++: the following is legal in C, but not C++.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\n")])])]),a("p",[t._v("These errors are easy to fix: just rename the variable.")]),t._v(" "),a("h2",{attrs:{id:"weakly-typed-pointers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#weakly-typed-pointers"}},[t._v("#")]),t._v(" Weakly typed pointers")]),t._v(" "),a("p",[t._v("In C, pointers can be cast to a "),a("code",[t._v("void*")]),t._v(", which needs an explicit cast in C++. The following is illegal in C++, but legal in C:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" intptr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("Adding an explicit cast makes this work, but can cause further issues.")]),t._v(" "),a("h2",{attrs:{id:"goto-or-switch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#goto-or-switch"}},[t._v("#")]),t._v(" goto or switch")]),t._v(" "),a("p",[t._v("In C++, you may not skip initializations with "),a("code",[t._v("goto")]),t._v(" or "),a("code",[t._v("switch")]),t._v(". The following is valid in C, but not C++:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" skipped "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfoo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("These bugs may require redesign.")])])}),[],!1,null,null,null);s.default=r.exports}}]);