(window.webpackJsonp=window.webpackJsonp||[]).push([[2671],{3078:function(s,t,a){"use strict";a.r(t);var e=a(31),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"comparisons"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparisons"}},[s._v("#")]),s._v(" Comparisons")]),s._v(" "),a("h2",{attrs:{id:"chain-comparisons"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chain-comparisons"}},[s._v("#")]),s._v(" Chain Comparisons")]),s._v(" "),a("p",[s._v("You can compare multiple items with multiple comparison operators with chain comparison. For example")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" z\n\n")])])]),a("p",[s._v("is just a short form of:")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" z\n\n")])])]),a("p",[s._v("This will evaluate to "),a("code",[s._v("True")]),s._v(" only if both comparisons are "),a("code",[s._v("True")]),s._v(".")]),s._v(" "),a("p",[s._v("The general form is")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[s._v("a OP b OP c OP d "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n")])])]),a("p",[s._v("Where "),a("code",[s._v("OP")]),s._v(" represents one of the multiple comparison operations you can use, and the letters represent arbitrary valid expressions.")]),s._v(" "),a("blockquote"),s._v(" "),a("p",[s._v("Note that "),a("code",[s._v("0 != 1 != 0")]),s._v(" evaluates to "),a("code",[s._v("True")]),s._v(", even though "),a("code",[s._v("0 != 0")]),s._v(" is "),a("code",[s._v("False")]),s._v(". Unlike the common mathematical notation in which "),a("code",[s._v("x != y != z")]),s._v(" means that "),a("code",[s._v("x")]),s._v(", "),a("code",[s._v("y")]),s._v(" and "),a("code",[s._v("z")]),s._v(" have different values. Chaining "),a("code",[s._v("==")]),s._v(" operations has the natural meaning in most cases, since equality is generally transitive.")]),s._v(" "),a("h3",{attrs:{id:"style"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#style"}},[s._v("#")]),s._v(" Style")]),s._v(" "),a("p",[s._v("There is no theoretical limit on how many items and comparison operations you use as long you have proper syntax:")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("\n\n")])])]),a("p",[s._v("The above returns "),a("code",[s._v("True")]),s._v(" if each comparison returns "),a("code",[s._v("True")]),s._v('. However, using convoluted chaining is not a good style. A good chaining will be "directional", not more complicated than')]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("\n\n")])])]),a("h3",{attrs:{id:"side-effects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#side-effects"}},[s._v("#")]),s._v(" Side effects")]),s._v(" "),a("p",[s._v("As soon as one comparison returns "),a("code",[s._v("False")]),s._v(", the expression evaluates immediately to "),a("code",[s._v("False")]),s._v(", skipping all remaining comparisons.")]),s._v(" "),a("p",[s._v("Note that the expression "),a("code",[s._v("exp")]),s._v(" in "),a("code",[s._v("a > exp > b")]),s._v(" will be evaluated only once, whereas in the case of")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" exp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" exp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" b\n\n")])])]),a("p",[a("code",[s._v("exp")]),s._v(" will be computed twice if "),a("code",[s._v("a > exp")]),s._v(" is true.")]),s._v(" "),a("h2",{attrs:{id:"comparison-by-is-vs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparison-by-is-vs"}},[s._v("#")]),s._v(" Comparison by "),a("code",[s._v("is")]),s._v(" vs "),a("code",[s._v("==")])]),s._v(" "),a("p",[s._v("A common pitfall is confusing the equality comparison operators "),a("code",[s._v("is")]),s._v(" and "),a("code",[s._v("==")]),s._v(".")]),s._v(" "),a("p",[a("code",[s._v("a == b")]),s._v(" compares the value of "),a("code",[s._v("a")]),s._v(" and "),a("code",[s._v("b")]),s._v(".")]),s._v(" "),a("p",[a("code",[s._v("a is b")]),s._v(" will compare the "),a("strong",[s._v("identities")]),s._v(" of "),a("code",[s._v("a")]),s._v(" and "),a("code",[s._v("b")]),s._v(".")]),s._v(" "),a("p",[s._v("To illustrate:")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Python is fun!'")]),s._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Python is fun!'")]),s._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# returns True")]),s._v("\na "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# returns False")]),s._v("\n\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# b references a")]),s._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" b     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\na "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" b     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# b now references a copy of a")]),s._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" b     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\na "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" b     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# False [!!]")]),s._v("\n\n")])])]),a("p",[s._v("Basically, "),a("code",[s._v("is")]),s._v(" can be thought of as shorthand for "),a("code",[s._v("id(a) == id(b)")]),s._v(".")]),s._v(" "),a("p",[s._v("Beyond this, there are quirks of the run-time environment that further complicate things.  Short strings and small integers will return "),a("code",[s._v("True")]),s._v(" when compared with "),a("code",[s._v("is")]),s._v(", due to the Python machine attempting to use less memory for identical objects.")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'short'")]),s._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'short'")]),s._v("\nc "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\nd "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\na "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\nc "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" d "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\n\n")])])]),a("p",[s._v("But longer strings and larger integers will be stored separately.")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'not so short'")]),s._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'not so short'")]),s._v("\nc "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\nd "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\na "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# False")]),s._v("\nc "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" d "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# False")]),s._v("\n\n")])])]),a("p",[s._v("You should use "),a("code",[s._v("is")]),s._v(" to test for "),a("code",[s._v("None")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" myvar "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# not None")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pass")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" myvar "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# None")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pass")]),s._v("\n\n")])])]),a("p",[s._v("A use of "),a("code",[s._v("is")]),s._v(" is to test for a “sentinel” (i.e. a unique object).")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[s._v("sentinel "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("myfunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("var"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("sentinel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" var "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" sentinel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# value wasn’t provided")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pass")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# value was provided")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pass")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"greater-than-or-less-than"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#greater-than-or-less-than"}},[s._v("#")]),s._v(" Greater than or less than")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" y\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" y\n\n")])])]),a("p",[s._v("These operators compare two types of values, they're the less than and greater than operators. For numbers this simply compares the numerical values to see which is larger:")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# False")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\n\n")])])]),a("p",[s._v("For strings they will compare lexicographically, which is similar to alphabetical order but not quite the same.")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"alpha"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"beta"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"gamma"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"beta"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"gamma"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"OMEGA"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# False")]),s._v("\n\n")])])]),a("p",[s._v("In these comparisons, lowercase letters are considered 'greater than' uppercase, which is why "),a("code",[s._v('"gamma" < "OMEGA"')]),s._v(" is false. If they were all uppercase it would return the expected alphabetical ordering result:")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"GAMMA"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"OMEGA"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\n\n")])])]),a("p",[s._v("Each type defines it's calculation with the "),a("code",[s._v("<")]),s._v(" and "),a("code",[s._v(">")]),s._v(" operators differently, so you should investigate what the operators mean with a given type before using it.")]),s._v(" "),a("h2",{attrs:{id:"not-equal-to"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#not-equal-to"}},[s._v("#")]),s._v(" Not equal to")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" y  \n\n")])])]),a("p",[s._v("This returns "),a("code",[s._v("True")]),s._v(" if "),a("code",[s._v("x")]),s._v(" and "),a("code",[s._v("y")]),s._v(" are not equal and otherwise returns "),a("code",[s._v("False")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'12'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'12'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'12'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# False")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"equal-to"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#equal-to"}},[s._v("#")]),s._v(" Equal To")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" y \n\n")])])]),a("p",[s._v("This expression evaluates if "),a("code",[s._v("x")]),s._v(" and "),a("code",[s._v("y")]),s._v(" are the same value and returns the result as a boolean value. Generally both type and value need to match, so the int "),a("code",[s._v("12")]),s._v(" is not the same as the string "),a("code",[s._v("'12'")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# False")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'12'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'12'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'spam'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'spam'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'spam'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'spam '")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# False")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'12'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# False")]),s._v("\n\n")])])]),a("p",[s._v("Note that each type has to define a function that will be used to evaluate if two values are the same. For builtin types these functions behave as you'd expect, and just evaluate things based on being the same value. However custom types could define equality testing as whatever they'd like, including always returning "),a("code",[s._v("True")]),s._v(" or always returning "),a("code",[s._v("False")]),s._v(".")]),s._v(" "),a("h2",{attrs:{id:"comparing-objects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparing-objects"}},[s._v("#")]),s._v(" Comparing Objects")]),s._v(" "),a("p",[s._v("In order to compare the equality of custom classes, you can override "),a("code",[s._v("==")]),s._v(" and "),a("code",[s._v("!=")]),s._v(" by defining "),a("code",[s._v("__eq__")]),s._v(" and "),a("code",[s._v("__ne__")]),s._v(" methods. You can also override "),a("code",[s._v("__lt__")]),s._v(" ("),a("code",[s._v("<")]),s._v("), "),a("code",[s._v("__le__")]),s._v(" ("),a("code",[s._v("<=")]),s._v("), "),a("code",[s._v("__gt__")]),s._v(" ("),a("code",[s._v(">")]),s._v("), and "),a("code",[s._v("__ge__")]),s._v(" ("),a("code",[s._v(">")]),s._v("). Note that you only need to override two comparison methods, and Python can handle the rest ("),a("code",[s._v("==")]),s._v(" is the same as "),a("code",[s._v("not <")]),s._v(" and "),a("code",[s._v("not >")]),s._v(", etc.)")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("my_item "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" item\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__eq__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("my_item "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("my_item\n    \na "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" b     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True")]),s._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" b     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# False")]),s._v("\na "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" b     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# False")]),s._v("\n\n")])])]),a("p",[s._v("Note that this simple comparison assumes that "),a("code",[s._v("other")]),s._v(" (the object being compared to) is the same object type.  Comparing to another type will throw an error:")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("other_item "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" item\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__eq__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("other_item "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("other_item\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__ne__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("other_item "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("other_item\n    \nc "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" c    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# throws AttributeError: 'Foo' object has no attribute 'other_item'")]),s._v("\n\n")])])]),a("p",[s._v("Checking "),a("code",[s._v("isinstance()")]),s._v(" or similar will help prevent this (if desired).")]),s._v(" "),a("h2",{attrs:{id:"common-gotcha-python-does-not-enforce-typing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#common-gotcha-python-does-not-enforce-typing"}},[s._v("#")]),s._v(" Common Gotcha: Python does not enforce typing")]),s._v(" "),a("p",[s._v("In many other languages, if you run the following\n(Java example)")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"asgdsrf"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v("do stuff\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])]),a("p",[s._v("... you'll get an error.\nYou can't just go comparing strings to integers like that. In Python, this is a perfectly legal statement - it'll just resolve to "),a("code",[s._v("False")]),s._v(".")]),s._v(" "),a("p",[s._v("A common gotcha is the following")]),s._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[s._v("myVariable "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" myVariable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#do stuff")]),s._v("\n\n")])])]),a("p",[s._v("This comparison will evaluate to "),a("code",[s._v("False")]),s._v(" without an error, every time, potentially hiding a bug or breaking a conditional.")]),s._v(" "),a("h4",{attrs:{id:"syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[s._v("#")]),s._v(" Syntax")]),s._v(" "),a("li",[s._v("\n!= - Is not equal to\n")]),s._v(" "),a("li",[s._v("\n== - Is equal to\n")]),s._v(" "),a("li",[s._v("\n`>` - greater than\n")]),s._v(" "),a("li",[s._v("\n`<` - less than\n")]),s._v(" "),a("li",[s._v("\n`>=` - greater than or equal to\n")]),s._v(" "),a("li",[s._v("\n`<=` - less than or equal to\n")]),s._v(" "),a("li",[s._v("\n`is` - test if objects are the exact same object\n")]),s._v(" "),a("li",[s._v("\nis not = test if objects are not the exact same object\n")]),s._v(" "),a("h4",{attrs:{id:"parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[s._v("#")]),s._v(" Parameters")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("Parameter")]),s._v(" "),a("th",[s._v("Details")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("x")]),s._v(" "),a("td",[s._v("First item to be compared")])]),s._v(" "),a("tr",[a("td",[s._v("y")]),s._v(" "),a("td",[s._v("Second item to be compared")])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);