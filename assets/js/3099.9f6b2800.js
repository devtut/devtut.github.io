(window.webpackJsonp=window.webpackJsonp||[]).push([[3099],{3507:function(t,s,e){"use strict";e.r(s);var a=e(31),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"operating-system-or-shell-commands"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#operating-system-or-shell-commands"}},[t._v("#")]),t._v(" Operating System or Shell commands")]),t._v(" "),e("p",[t._v("There are many ways to interact with the operating system. From within Ruby you can run shell/system commands or sub-processes.")]),t._v(" "),e("h2",{attrs:{id:"recommended-ways-to-execute-shell-code-in-ruby"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#recommended-ways-to-execute-shell-code-in-ruby"}},[t._v("#")]),t._v(" Recommended ways to execute shell code in Ruby:")]),t._v(" "),e("p",[e("strong",[t._v("Open3.popen3 or Open3.capture3:")]),e("br"),t._v("\nOpen3 actually just uses Ruby's spawn command, but gives you a much better API.")]),t._v(" "),e("p",[e("strong",[t._v("Open3.popen3")])]),t._v(" "),e("p",[t._v("Popen3 runs in a sub-process and returns stdin, stdout, stderr and wait_thr.")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'open3'")]),t._v("\nstdin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stderr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" wait_thr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Open3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("popen3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sleep 5s && ls"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nputs "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read"),e("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("stderr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read"),e("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("wait_thr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exitstatus"),e("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n\n")])])]),e("p",[t._v("or")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'open3'")]),t._v("\ncmd "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git push heroku master'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Open3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("popen3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cmd"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("stdin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stderr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" wait_thr"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  puts "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"stdout is:"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read\n  puts "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"stderr is:"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" stderr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),e("p",[t._v("will output:\n"),e("strong",[t._v("stdout is:\nstderr is:fatal: Not a git repository (or any of the parent directories): .git")])]),t._v(" "),e("p",[t._v("or")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'open3'")]),t._v("\ncmd "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ping www.google.com'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Open3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("popen3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cmd"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("stdin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stderr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" wait_thr"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" line "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gets\n    puts line\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),e("p",[t._v("will output:")]),t._v(" "),e("p",[e("strong",[t._v("Pinging www.google.com [216.58.223.36] with 32 bytes of data:"),e("br"),t._v("\nReply from 216.58.223.36: bytes=32 time=16ms TTL=54"),e("br"),t._v("\nReply from 216.58.223.36: bytes=32 time=10ms TTL=54"),e("br"),t._v("\nReply from 216.58.223.36: bytes=32 time=21ms TTL=54"),e("br"),t._v("\nReply from 216.58.223.36: bytes=32 time=29ms TTL=54"),e("br"),t._v("\nPing statistics for 216.58.223.36:"),e("br"),t._v("\nPackets: Sent = 4, Received = 4, Lost = 0 (0% loss),"),e("br"),t._v("\nApproximate round trip times in milli-seconds:"),e("br"),t._v("\nMinimum = 10ms, Maximum = 29ms, Average = 19ms")])]),t._v(" "),e("p",[e("strong",[t._v("Open3.capture3:")])]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'open3'")]),t._v("\n\nstdout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stderr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" status "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Open3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("capture3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my_funky_command'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'and'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'argumants'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" status"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("success"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# command completed successfully, do some more stuff")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"An error occured"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),e("p",[t._v("or")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Open3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("capture3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/some/binary with some args'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n\n")])])]),e("p",[t._v("Not recommended though, due to additional overhead and the potential for shell injections.")]),t._v(" "),e("p",[t._v("If the command reads from stdin and you want to feed it some data:")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Open3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("capture3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my_funky_command'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stdin_data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'read from stdin'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n\n")])])]),e("p",[t._v("Run the command with a different working directory, by using chdir:")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Open3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("capture3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my_funky_command'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" chdir"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/some/directory'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n\n")])])]),e("h2",{attrs:{id:"clasic-ways-to-execute-shell-code-in-ruby"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#clasic-ways-to-execute-shell-code-in-ruby"}},[t._v("#")]),t._v(" Clasic ways to execute shell code in Ruby:")]),t._v(" "),e("p",[e("strong",[t._v("Exec:")])]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[t._v("exec "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'echo \"hello world\"'")]),t._v("\n\n")])])]),e("p",[t._v("or")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[t._v("exec "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'echo \"hello world\"'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),e("p",[e("strong",[t._v("The System Command:")])]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[t._v("system "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'echo \"hello world\"'")]),t._v("\n\n")])])]),e("p",[t._v('Will output "hello world" in the command window.')]),t._v(" "),e("p",[t._v("or")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[t._v("system "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'echo \"hello world\"'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),e("p",[t._v("The system command can return a true if the command was successful or nill when not.")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[t._v("result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" system "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'echo \"hello world\"'")]),t._v("\nputs result  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# will return a true in the command window")]),t._v("\n\n")])])]),e("p",[e("strong",[t._v("The backticks (`):")])]),t._v(" "),e("p",[e("code",[t._v('echo "hello world"')]),t._v('\nWill output "hello world" in the command window.')]),t._v(" "),e("p",[t._v("You can also catch the result.")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[t._v("result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" `echo "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),t._v("`  \nputs "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"We always code a "')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" result  \n\n")])])]),e("p",[e("strong",[t._v("IO.popen:")])]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Will get and return the current date from the system")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("IO")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("popen"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"date"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("f"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" puts f"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gets "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("h4",{attrs:{id:"remarks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),e("p",[e("strong",[t._v("Exec:")]),e("br"),t._v("\nExec is very limited in functionality and when executed will exit the Ruby program and run the command.")]),t._v(" "),e("p",[e("strong",[t._v("The System Command:")]),e("br"),t._v("\nThe System command runs in a sub-shell instead of replacing the current process and returns true or nill. The system command is, like backticks, a blocking operation where the main application waits until the result of the system operation completes. Here the main operation never needs to worry about capturing an exception raised from the child process.")]),t._v(" "),e("p",[t._v("The output of system function will always be true or nil depending on whether or not the script has been executed without error. Therefore, every error while executing the script will not be passed to our application. The main operation never needs to worry about capturing an exception raised from the child process. In this case the output is nil because the child process raised an exception."),e("br"),t._v("\nThis is a blocking operation where the Ruby program will wait until the operation of the command completes before going on."),e("br"),t._v("\nThe system operation use fork to fork the current process and then execute the given operation using exec.")]),t._v(" "),e("p",[e("strong",[t._v("The backticks (`):")]),e("br"),t._v("\nThe backtick character is usualy located under the escape key on the keyboard.\nBackticks runs in a sub-shell instead of replacing the current process and returns the result of the command."),e("br"),t._v("\nHere we can get the output of the command but the program will crash when an exception is generated."),e("br"),t._v("\nIf there is an exception in the sub-process then that exception is given to the main process and the main process might terminate if exception is not handled.\nThis is a blocking operation where the Ruby program will wait until the operation of the command completes before going on."),e("br"),t._v("\nThe system operation use fork to fork the current process and then execute the given operation using exec.")]),t._v(" "),e("p",[e("strong",[t._v("IO.popen:")]),e("br"),t._v("\nIO.popen runs in a sub-process. Here the sub-process standard input and standard output are connected to the IO object.")]),t._v(" "),e("p",[e("strong",[t._v("Popen3:")]),e("br"),t._v("\nPopen3 allows you to access the standard input, standard output and standard error."),e("br"),t._v("\nThe subprocess's standard input and output will be returned into IO objects.")]),t._v(" "),e("p",[e("strong",[t._v("$? (same as $CHILD_STATUS)")]),e("br"),t._v("\nCan be used with the backticks, system() or %x{} operations and will give the status of the last system executed command."),e("br"),t._v("\nThis might be usefull to access the "),e("code",[t._v("exitstatus")]),t._v(" and the "),e("code",[t._v("pid")]),t._v(" properties.")])])}),[],!1,null,null,null);s.default=n.exports}}]);