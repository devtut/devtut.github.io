(window.webpackJsonp=window.webpackJsonp||[]).push([[3430],{3838:function(s,e,a){"use strict";a.r(e);var t=a(31),n=Object(t.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"naming-conventions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#naming-conventions"}},[s._v("#")]),s._v(" Naming Conventions")]),s._v(" "),a("h2",{attrs:{id:"variable-names"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variable-names"}},[s._v("#")]),s._v(" Variable Names")]),s._v(" "),a("p",[s._v("Variables hold data. Name them after what they're used for, "),a("strong",[s._v("not after their data type")]),s._v(" or scope, using a "),a("strong",[s._v("noun")]),s._v(". If you feel compelled to "),a("strong",[s._v("number")]),s._v(" your variables (e.g. "),a("code",[s._v("thing1, thing2, thing3")]),s._v("), then consider using an appropriate data structure instead (e.g. an array, a "),a("code",[s._v("Collection")]),s._v(", or a "),a("code",[s._v("Dictionary")]),s._v(").")]),s._v(" "),a("p",[s._v("Names of variables that represent an iteratable "),a("strong",[s._v("set")]),s._v(" of values - e.g. an array, a "),a("code",[s._v("Collection")]),s._v(", a "),a("code",[s._v("Dictionary")]),s._v(", or a "),a("code",[s._v("Range")]),s._v(" of cells, should be plural.")]),s._v(" "),a("p",[s._v("Some common VBA naming conventions go thus:")]),s._v(" "),a("p",[a("strong",[s._v("For procedure-level Variables")]),s._v(":")]),s._v(" "),a("p",[a("code",[s._v("camelCase")])]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" ExampleNaming"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByVal")]),s._v(" inputValue "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByRef")]),s._v(" inputVariable "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" procedureVariable "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" someOtherVariable "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n")])])]),a("p",[a("strong",[s._v("For module-level Variables:")])]),s._v(" "),a("p",[a("code",[s._v("PascalCase")])]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" GlobalVariable "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Private")]),s._v(" ModuleVariable "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),s._v("\n\n")])])]),a("p",[a("strong",[s._v("For Constants:")])]),s._v(" "),a("p",[a("code",[s._v("SHOUTY_SNAKE_CASE")]),s._v(" is commonly used to differentiate constants from variables:")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Const")]),s._v(" GLOBAL_CONSTANT "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Project Version #1.000.000.001"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Const")]),s._v(" MODULE_CONSTANT "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Something relevant to this Module"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" SomeProcedure"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Const")]),s._v(" PROCEDURE_CONSTANT "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n")])])]),a("p",[s._v("However "),a("code",[s._v("PascalCase")]),s._v(" names make cleaner-looking code and are just as good, given IntelliSense uses different icons for variables and constants:")]),s._v(" "),a("img",{attrs:{src:"https://i.stack.imgur.com/2wPA4.png",alt:"IntelliSense using different icons for constant Foo and variable Bar"}}),s._v(" "),a("h3",{attrs:{id:"hungarian-notation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hungarian-notation"}},[s._v("#")]),s._v(" Hungarian Notation")]),s._v(" "),a("blockquote"),s._v(" "),a("p",[s._v("Name them after what they're used for, "),a("strong",[s._v("not after their data type")]),s._v(" or scope.")]),s._v(" "),a("p",[a("strong",[a("strong",[s._v('"Hungarian Notation makes it easier to see what the type of a variable is"')])])]),s._v(" "),a("p",[s._v("If you write your code such as procedures adhere to the "),a("strong",[s._v("Single Responsibility Principle")]),s._v(" (as it should), you should never be looking at a screenful of variable declarations at the top of any procedure; declare variables as close as possible to their first usage, and their data type will always be in plain sight if you declare them with an explicit type. The VBE's "),a("kbd",[s._v("Ctrl")]),s._v("+"),a("kbd",[s._v("i")]),s._v(" shortcut can be used to display a variable's type in a tooltip, too.")]),s._v(" "),a("p",[s._v("What a variable is used for is much more useful information than its data type, "),a("strong",[s._v("especially")]),s._v(" in a language such as VBA which happily and implicitly converts a type into another as needed.")]),s._v(" "),a("p",[s._v("Consider "),a("code",[s._v("iFile")]),s._v(" and "),a("code",[s._v("strFile")]),s._v(" in this example:")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v(" bReadFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByVal")]),s._v(" strFile "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByRef")]),s._v(" strData "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Boolean")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" bRetVal "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Boolean")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" iFile "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("On")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Error")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GoTo")]),s._v(" CleanFail\n\n    iFile "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" FreeFile\n    Open strFile "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("For")]),s._v(" Input "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token directive comment"}},[s._v("#iFile")]),s._v("\n    Input "),a("span",{pre:!0,attrs:{class:"token directive comment"}},[s._v("#iFile, strData")]),s._v("\n\n    bRetVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n\nCleanExit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    Close "),a("span",{pre:!0,attrs:{class:"token directive comment"}},[s._v("#iFile")]),s._v("\n    bReadFile "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" bRetVal\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v("\nCleanFail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    bRetVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Resume")]),s._v(" CleanExit\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v("\n\n")])])]),a("p",[s._v("Compare to:")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v(" CanReadFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByVal")]),s._v(" path "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByRef")]),s._v(" outContent "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Boolean")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("On")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Error")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GoTo")]),s._v(" CleanFail\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" handle "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),s._v("\n    handle "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" FreeFile\n\n    Open path "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("For")]),s._v(" Input "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("#")]),s._v("handle\n    Input "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("#")]),s._v("handle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" outContent\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Boolean")]),s._v("\n    result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n\nCleanExit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    Close "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("#")]),s._v("handle\n    CanReadFile "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" result\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Exit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v("\nCleanFail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Resume")]),s._v(" CleanExit\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v("\n\n")])])]),a("p",[a("code",[s._v("strData")]),s._v(" is passed "),a("code",[s._v("ByRef")]),s._v(" in the top example, but beside the fact that we're lucky enough to see that it's "),a("strong",[s._v("explicitly")]),s._v(" passed as such, there's no indication that "),a("code",[s._v("strData")]),s._v(" is actually "),a("strong",[s._v("returned")]),s._v(" by the function.")]),s._v(" "),a("p",[s._v("The bottom example names it "),a("code",[s._v("outContent")]),s._v("; this "),a("code",[s._v("out")]),s._v(" prefix is what Hungarian Notation was invented for: to help clarify "),a("strong",[s._v("what a variable is used for")]),s._v(', in this case to clearly identify it as an "out" parameter.')]),s._v(" "),a("p",[s._v("This is useful, because IntelliSense by itself doesn't display "),a("code",[s._v("ByRef")]),s._v(", even when the parameter is "),a("strong",[s._v("explicitly")]),s._v(" passed by reference:")]),s._v(" "),a("p",[s._v('<img src="https://i.stack.imgur.com/3FAHc.png" alt="IntelliSense showing "CanReadFile(ByVal path As String, outComment As String) As Boolean" when the actual signature specifies outComment as explicitly passed by reference ("ByRef")" />')]),s._v(" "),a("p",[s._v("Which leads to...")]),s._v(" "),a("p",[a("strong",[s._v("Hungarian Done Right")])]),s._v(" "),a("p",[a("a",{attrs:{href:"http://www.joelonsoftware.com/articles/Wrong.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Hungarian Notation originally didn't have anything to do with variable types"),a("OutboundLink")],1),s._v(". In fact, Hungarian Notation "),a("strong",[s._v("done right")]),s._v(" is actually useful. Consider this small example ("),a("code",[s._v("ByVal")]),s._v(" and "),a("code",[s._v("As Integer")]),s._v(" removed for brevety):")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" Copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("iX1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" iY1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" iX2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" iY2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n")])])]),a("p",[s._v("Compare to:")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" Copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("srcColumn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" srcRow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" dstColumn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" dstRow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n")])])]),a("p",[a("code",[s._v("src")]),s._v(" and "),a("code",[s._v("dst")]),s._v(" are "),a("strong",[s._v("Hungarian Notation")]),s._v(" prefixes here, and they convey "),a("strong",[s._v("useful")]),s._v(" information that cannot otherwise already be inferred from the parameter names or IntelliSense showing us the declared type.")]),s._v(" "),a("p",[s._v("Of course there's a better way to convey it all, using proper "),a("strong",[s._v("abstraction")]),s._v(" and real words that can be pronounced out loud and make sense - as a contrived example:")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Type")]),s._v(" Coordinate\n    RowIndex "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),s._v("\n    ColumnIndex "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Type")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" Copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("source "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" Coordinate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" destination "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" Coordinate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"procedure-names"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#procedure-names"}},[s._v("#")]),s._v(" Procedure Names")]),s._v(" "),a("p",[s._v("Procedures "),a("strong",[s._v("do something")]),s._v(". Name them after what they're doing, using a "),a("strong",[s._v("verb")]),s._v(". If accurately naming a procedure is not possible, likely the procedure is "),a("strong",[s._v("doing too many things")]),s._v(" and needs to be broken down into smaller, more specialized procedures.")]),s._v(" "),a("p",[s._v("Some common VBA naming conventions go thus:")]),s._v(" "),a("p",[a("strong",[s._v("For all Procedures:")])]),s._v(" "),a("p",[a("code",[s._v("PascalCase")])]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" DoThing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v(" ReturnSomeValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" [DataType]\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v("\n\n")])])]),a("p",[a("strong",[s._v("For event handler procedures:")])]),s._v(" "),a("p",[a("code",[s._v("ObjectName_EventName")])]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" Workbook_Open"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" Button1_Click"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n")])])]),a("p",[s._v("Event handlers are usually automatically named by the VBE; renaming them without renaming the object and/or the handled event will break the code - the code will run and compile, but the handler procedure will be orphaned and will never be executed.")]),s._v(" "),a("p",[a("strong",[s._v("Boolean Members")])]),s._v(" "),a("p",[s._v("Consider a Boolean-returning function:")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v(" bReadFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByVal")]),s._v(" strFile "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByRef")]),s._v(" strData "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Boolean")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v("\n\n")])])]),a("p",[s._v("Compare to:")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v(" CanReadFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByVal")]),s._v(" path "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByRef")]),s._v(" outContent "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Boolean")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v("\n\n")])])]),a("p",[s._v("The "),a("code",[s._v("Can")]),s._v(" prefix "),a("strong",[s._v("does")]),s._v(" serve the same purpose as the "),a("code",[s._v("b")]),s._v(" prefix: it identifies the function's return value as a "),a("code",[s._v("Boolean")]),s._v(". But "),a("code",[s._v("Can")]),s._v(" reads better than "),a("code",[s._v("b")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v(" CanReadFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" content"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Then")]),s._v("\n\n")])])]),a("p",[s._v("Compared to:")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v(" bReadFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("strFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Then")]),s._v("\n\n")])])]),a("p",[s._v("Consider using prefixes such as "),a("code",[s._v("Can")]),s._v(", "),a("code",[s._v("Is")]),s._v(" or "),a("code",[s._v("Has")]),s._v(" in front of Boolean-returning members (functions and properties), but only when it adds value. This conforms with the "),a("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/ms229012(v=vs.110).aspx",target:"_blank",rel:"noopener noreferrer"}},[s._v("current Microsoft naming guidelines"),a("OutboundLink")],1),s._v(".")])])}),[],!1,null,null,null);e.default=n.exports}}]);