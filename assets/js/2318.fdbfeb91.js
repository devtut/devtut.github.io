(window.webpackJsonp=window.webpackJsonp||[]).push([[2318],{2726:function(t,s,e){"use strict";e.r(s);var a=e(31),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"properties"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),e("h2",{attrs:{id:"custom-getters-and-setters"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#custom-getters-and-setters"}},[t._v("#")]),t._v(" Custom getters and setters")]),t._v(" "),e("p",[t._v("The default property getters and setters can be overridden:")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" TestClass\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("someString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" TestClass\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// override the setter to print a message")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setSomeString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("newString "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"Setting someString to %@"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Make sure to access the ivar (default is the property name with a _ ")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// at the beginning) because calling self.someString would call the same")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// method again leading to an infinite recursion")]),t._v("\n    _someString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("doSomething "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The next line will call the setSomeString: method")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("someString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"Test"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n")])])]),e("p",[t._v("This can be useful to provide, for example, lazy initialization (by overriding the getter to set the initial value if it has not yet been set):")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("someString "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_someString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" nil"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        _someString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" getInitialValueForSomeString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" _someString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("You can also make a property that computes its value in the getter:")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" Circle "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NSObject\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" CGPoint origin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" CGFloat radius"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("readonly"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" CGFloat area"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" Circle\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CGFloat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("area "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" M_PI "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("radius"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"what-are-properties"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what-are-properties"}},[t._v("#")]),t._v(" What are properties?")]),t._v(" "),e("p",[t._v("Here is an example class which has a couple of instance variables, without using properties:")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" TestClass "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NSObject "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("_someString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" _someInt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("someString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setSomeString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("newString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("someInt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setSomeInt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("newInt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" TestClass\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("someString "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" _someString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setSomeString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("newString "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _someString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("someInt "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" _someInt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setSomeInt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("newInt "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _someInt "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newInt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n")])])]),e("p",[t._v("This is quite a lot of boilerplate code to create a simple instance variable.  You have to create the instance variable & create accessor methods which do nothing except set or return the instance variable.  So with Objective-C 2.0, Apple introduced properties, which auto-generate some or all of the boilerplate code.")]),t._v(" "),e("p",[t._v("Here is the above class rewritten with properties:")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" TestClass\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("someString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" someInt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" testClass\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n")])])]),e("p",[t._v("A property is an instance variable paired with auto-generated getters and setters.  For a property called "),e("code",[t._v("someString")]),t._v(", the getter and setter are called "),e("code",[t._v("someString")]),t._v(" and "),e("code",[t._v("setSomeString:")]),t._v(" respectively.  The name of the instance variable is, by default, the name of the property prefixed with an underscore (so the instance variable for "),e("code",[t._v("someString")]),t._v(" is called "),e("code",[t._v("_someString")]),t._v(", but this can be overridden with an "),e("code",[t._v("@synthesize")]),t._v(" directive in the "),e("code",[t._v("@implementation")]),t._v(" section:")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@synthesize")]),t._v(" someString"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("foo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//names the instance variable "foo"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@synthesize")]),t._v(" someString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//names it "someString"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@synthesize")]),t._v(" someString"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("_someString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//names it "_someString"; the default if ')]),t._v("\n                                           "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//there is no @synthesize directive")]),t._v("\n\n")])])]),e("p",[t._v("Properties can be accessed by calling the getters and setters:")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("testObject setSomeString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"Foo"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"someInt is %d"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("testObject someInt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[t._v("They can also be accessed using dot notation:")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[t._v("testObject"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("someString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"Foo"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSLog")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"someInt is %d"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" testObject"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("someInt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"properties-that-cause-updates"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#properties-that-cause-updates"}},[t._v("#")]),t._v(" Properties that cause updates")]),t._v(" "),e("p",[t._v("This object, "),e("code",[t._v("Shape")]),t._v(" has a property "),e("code",[t._v("image")]),t._v(" that depends on "),e("code",[t._v("numberOfSides")]),t._v(" and "),e("code",[t._v("sideWidth")]),t._v(". If either one of them is set, than the "),e("code",[t._v("image")]),t._v(" has to be recalculated. But recalculation is presumably long, and only needs to be done once if both properties are set, so the "),e("code",[t._v("Shape")]),t._v(" provides a way to set both properties and only recalculate once. This is done by setting the property ivars directly.")]),t._v(" "),e("p",[t._v("In "),e("code",[t._v("Shape.h")])]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" Shape "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    NSUInteger numberOfSides"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    CGFloat sideWidth"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    UIImage "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" image"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Initializer that takes initial values for the properties.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instancetype"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("initWithNumberOfSides"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSUInteger"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("numberOfSides withWidth"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CGFloat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("width"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Method that allows to set both properties in once call.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is useful if setting these properties has expensive side-effects.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Using a method to set both values at once allows you to have the side-")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// effect executed only once.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setNumberOfSides"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSUInteger"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("numberOfSides andWidth"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CGFloat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("width"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Properties using default attributes.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" NSUInteger numberOfSides"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),t._v(" CGFloat sideWidth"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Property using explicit attributes.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strong"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readonly"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" UIImage "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" image"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n")])])]),e("p",[t._v("In "),e("code",[t._v("Shape.m")])]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" AnObject\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The variable name of a property that is auto-generated by the compiler")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// defaults to being the property name prefixed with an underscore, for")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// example "_propertyName". You can change this default variable name using')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the following statement:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// @synthesize propertyName = customVariableName;")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("initWithNumberOfSides"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSUInteger"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("numberOfSides withWidth"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CGFloat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("width "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" init"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" setNumberOfSides"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("numberOfSides andWidth"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("width"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setNumberOfSides"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSUInteger"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("numberOfSides "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _numberOfSides "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" numberOfSides"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" updateImage"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setSideWidth"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CGFloat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("sideWidth "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _sideWidth "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sideWidth"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" updateImage"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setNumberOfSides"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSUInteger"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("numberOfSides andWidth"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CGFloat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("sideWidth "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _numberOfSides "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" numberOfSides"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    _sideWidth "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sideWidth"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" updateImage"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Method that does some post-processing once either of the properties has")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// been updated.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("updateImage "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n")])])]),e("p",[t._v("When properties are assigned to (using "),e("code",[t._v("object.property = value")]),t._v("), the setter method "),e("code",[t._v("setProperty:")]),t._v(" is called. This setter, even if provided by "),e("code",[t._v("@synthesize")]),t._v(", can be overridden, as it is in this case for "),e("code",[t._v("numberOfSides")]),t._v(" and "),e("code",[t._v("sideWidth")]),t._v(". However, if you set an property's ivar directly (through "),e("code",[t._v("property")]),t._v(" if the object is self, or "),e("code",[t._v("object->property")]),t._v("), it doesn't call the getter or setter, allowing you to do things like multiple property sets that only call one update or bypass side-effects caused by the setter.")]),t._v(" "),e("h4",{attrs:{id:"syntax"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),e("ul",[e("li",[t._v("@property ("),e("strong",[t._v("optional_attributes, ...")]),t._v(") "),e("strong",[t._v("type")]),t._v(" "),e("strong",[t._v("identifier")]),t._v(";")]),t._v(" "),e("li",[t._v("@synthesize "),e("strong",[t._v("identifier")]),t._v(" = "),e("strong",[t._v("optional_backing_ivar")]),t._v(";")]),t._v(" "),e("li",[t._v("@dynamic "),e("strong",[t._v("identifier")]),t._v(";")])]),t._v(" "),e("h4",{attrs:{id:"parameters"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Attribute")]),t._v(" "),e("th",[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("atomic")])]),t._v(" "),e("td",[e("strong",[t._v("Implicit.")]),t._v(" Enables synchronization in synthesized accessor methods.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("nonatomic")])]),t._v(" "),e("td",[t._v("Disables synchronization in the synthesized accessor methods.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("readwrite")])]),t._v(" "),e("td",[e("strong",[t._v("Implicit.")]),t._v(" Synthesizes getter, setter and backing ivar.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("readonly")])]),t._v(" "),e("td",[t._v("Synthesizes only the getter method and backing ivar, which can be assigned directly.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("getter=")]),e("strong",[t._v("name")])]),t._v(" "),e("td",[t._v("Specifies the name of getter method, implicit is "),e("code",[t._v("propertyName")]),t._v(".")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("setter=")]),e("strong",[t._v("name")])]),t._v(" "),e("td",[t._v("Specifies the name of setter method, implicity is "),e("code",[t._v("setPropertyName:")]),t._v(". Colon "),e("code",[t._v(":")]),t._v(" must be a part of the name.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("strong")])]),t._v(" "),e("td",[e("strong",[t._v("Implicit for objects under ARC")]),t._v(". The backing ivar is synthesized using "),e("code",[t._v("__strong")]),t._v(", which prevents deallocation of referenced object.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("retain")])]),t._v(" "),e("td",[t._v("Synonym for "),e("code",[t._v("strong")]),t._v(".")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("copy")])]),t._v(" "),e("td",[t._v("Same as "),e("code",[t._v("strong")]),t._v(", but the synthesized setter also calls "),e("code",[t._v("-copy")]),t._v(" on the new value.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("unsafe_unretained")])]),t._v(" "),e("td",[e("strong",[t._v("Implicit, except for objects under ARC.")]),t._v(" The backing ivar is synthesized using "),e("code",[t._v("__unsafe_unretained")]),t._v(", which (for obejcts) results in dangling pointer once the referenced object deallocates.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("assign")])]),t._v(" "),e("td",[t._v("Synonym for "),e("code",[t._v("unsafe_unretained")]),t._v(". Suitable for non-object types.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("weak")])]),t._v(" "),e("td",[t._v("Backing ivar is synthesized using "),e("code",[t._v("__weak")]),t._v(", so the value will be nullified once the referenced object is deallocated.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("class")])]),t._v(" "),e("td",[t._v("Property accessors are synthesized as class methods, instead of instance methods. No backing storage is synthesized.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("nullable")])]),t._v(" "),e("td",[t._v("The property accepts "),e("code",[t._v("nil")]),t._v(" values. Mainly used for Swift bridging.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("nonnull")])]),t._v(" "),e("td",[t._v("The property doesn’t accept "),e("code",[t._v("nil")]),t._v(" values. Mainly used for Swift bridging.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("null_resettable")])]),t._v(" "),e("td",[t._v("The property accepts "),e("code",[t._v("nil")]),t._v(" values  in setter, but never returns "),e("code",[t._v("nil")]),t._v(" values from getter. Your custom implementation of getter or setter must ensure this behavior. Mainly used for Swift bridging.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("null_unspecified")])]),t._v(" "),e("td",[e("strong",[t._v("Implicit.")]),t._v(" The property doesn’t specify handling of "),e("code",[t._v("nil")]),t._v(" values. Mainly used for Swift bridging.")])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);