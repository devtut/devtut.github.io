(window.webpackJsonp=window.webpackJsonp||[]).push([[2639],{3047:function(a,s,t){"use strict";t.r(s);var e=t(31),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"variables-in-powershell"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#variables-in-powershell"}},[a._v("#")]),a._v(" Variables in PowerShell")]),a._v(" "),t("p",[a._v("Variables are used for storing values. Let the value be of any type , we need to store it somewhere so that we can use it throughout the console/script. Variable names in PowerShell begin with a "),t("strong",[a._v("$")]),a._v(", as in "),t("strong",[a._v("$Variable1")]),a._v(", and values are assigned using "),t("strong",[a._v("=")]),a._v(", like "),t("strong",[a._v('$Variable1 = "Value 1"')]),a._v(".PowerShell supports a huge number of variable types; such as text strings, integers, decimals, arrays, and even advanced types like version numbers or IP addresses.")]),a._v(" "),t("h2",{attrs:{id:"removing-a-variable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#removing-a-variable"}},[a._v("#")]),a._v(" Removing a variable")]),a._v(" "),t("p",[a._v("To remove a variable from memory, one can use the "),t("code",[a._v("Remove-Item")]),a._v(" cmdlet. Note: The variable name does NOT include the "),t("code",[a._v("$")]),a._v(".")]),a._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Remove-Item")]),a._v(" Variable:\\foo\n\n")])])]),t("p",[t("code",[a._v("Variable")]),a._v(" has a provider to allow most *-item cmdlets to work much like file systems.")]),a._v(" "),t("p",[a._v("Another method to remove variable is to use Remove-Variable cmdlet and its alias rv")]),a._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$var")]),a._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Some Variable"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#Define variable 'var' containing the string 'Some Variable'")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$var")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#For test and show string 'Some Variable' on the console")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Remove-Variable")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("Name "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$var")]),a._v(" \n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#also can use alias 'rv'")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("rv")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"simple-variable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#simple-variable"}},[a._v("#")]),a._v(" Simple variable")]),a._v(" "),t("p",[a._v("All variables in powershell begin with a US dollar sign ("),t("code",[a._v("$")]),a._v("). The simplest example of this is:")]),a._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$foo")]),a._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"bar"')]),a._v("\n\n")])])]),t("p",[a._v("This statement allocates a variable called "),t("code",[a._v("foo")]),a._v(' with a string value of "bar".')]),a._v(" "),t("h2",{attrs:{id:"scope"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scope"}},[a._v("#")]),a._v(" Scope")]),a._v(" "),t("p",[a._v("The default "),t("a",{attrs:{href:"https://technet.microsoft.com/en-us/library/hh847849.aspx",target:"_blank",rel:"noopener noreferrer"}},[a._v("scope"),t("OutboundLink")],1),a._v(" for a variable is the enclosing container. If outside a script, or other container then the scope is "),t("code",[a._v("Global")]),a._v(". To specify a "),t("a",{attrs:{href:"https://technet.microsoft.com/en-us/library/hh847849.aspx",target:"_blank",rel:"noopener noreferrer"}},[a._v("scope"),t("OutboundLink")],1),a._v(", it is prefixed to the variable name "),t("code",[a._v("$scope:varname")]),a._v(" like so:")]),a._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$foo")]),a._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Global Scope"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" myFunc "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$foo")]),a._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Function (local) scope"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Write-Host")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$global")]),a._v(":foo\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Write-Host")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$local")]),a._v(":foo\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Write-Host")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$foo")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\nmyFunc\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Write-Host")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$local")]),a._v(":foo\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Write-Host")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$foo")]),a._v("\n\n")])])]),t("p",[a._v("Output:")]),a._v(" "),t("h2",{attrs:{id:"arrays"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arrays"}},[a._v("#")]),a._v(" Arrays")]),a._v(" "),t("p",[a._v("Array declaration in Powershell is almost the same as instantiating any other variable, i.e. you use a "),t("code",[a._v("$name =")]),a._v(" syntax. The items in the array are declared by separating them by commas("),t("code",[a._v(",")]),a._v("):")]),a._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$myArrayOfInts")]),a._v(" = 1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("4\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$myArrayOfStrings")]),a._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"2"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"3"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"4"')]),a._v("\n\n")])])]),t("h3",{attrs:{id:"adding-to-an-arry"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#adding-to-an-arry"}},[a._v("#")]),a._v(" Adding to an arry")]),a._v(" "),t("p",[a._v("Adding to an array is as simple as using the "),t("code",[a._v("+")]),a._v(" operator:")]),a._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$myArrayOfInts")]),a._v(" = "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$myArrayOfInts")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" 5\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("now contains 1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("4 & 5"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\n\n")])])]),t("h3",{attrs:{id:"combining-arrays-together"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#combining-arrays-together"}},[a._v("#")]),a._v(" Combining arrays together")]),a._v(" "),t("p",[a._v("Again this is as simple as using the "),t("code",[a._v("+")]),a._v(" operator")]),a._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$myArrayOfInts")]),a._v(" = 1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("4\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$myOtherArrayOfInts")]),a._v(" = 5"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("6"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("7\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$myArrayOfInts")]),a._v(" = "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$myArrayOfInts")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$myOtherArrayOfInts")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("now 1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("5"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("6"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("7\n\n")])])]),t("h2",{attrs:{id:"list-assignment-of-multiple-variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list-assignment-of-multiple-variables"}},[a._v("#")]),a._v(" List Assignment of Multiple Variables")]),a._v(" "),t("p",[a._v("Powershell allows multiple assignment of variables and treats almost everything like an array or list. This means that instead of doing something like this:")]),a._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$input")]),a._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"foo.bar.baz"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$parts")]),a._v(" = "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$input")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Split"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$foo")]),a._v(" = "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$parts")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$bar")]),a._v(" = "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$parts")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$baz")]),a._v(" = "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$parts")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n")])])]),t("p",[a._v("You can simply do this:")]),a._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$bar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$baz")]),a._v(" = "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$input")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Split"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),t("p",[a._v("Since Powershell treats assignments in this manner like lists, if there are more values in the list than items in your list of variables to assign them to, the last variable becomes an array of the remaining values. This means you can also do things like this:")]),a._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$leftover")]),a._v(" = "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$input")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Split"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v('#Sets $foo = "foo", $leftover = ["bar","baz"]')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$bar")]),a._v(" = "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$leftover")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v('# $bar = "bar"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$baz")]),a._v(" = "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$leftover")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v('# $baz = "baz"')]),a._v("\n\n")])])]),t("h2",{attrs:{id:"reading-a-cmdlet-output"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reading-a-cmdlet-output"}},[a._v("#")]),a._v(" Reading a CmdLet Output")]),a._v(" "),t("p",[a._v("By Default, powershell would return the output to the calling Entity. Consider Below Example,")]),a._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Get-Process")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("Name excel   \n\n")])])]),t("p",[a._v("This would simply, return the running process which matches the name excel, to the calling entity. In this case, the PowerShell Host. It prints something like,")]),a._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[a._v("Handles  NPM"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("    PM"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("      WS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" VM"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("M"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("   CPU"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("     Id  "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("SI")]),a._v(" ProcessName                                                                                                                     \n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("      "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("     "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("                                                                                                                     \n   1037      54    67632      62544   617     5"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("23   4544   1 EXCEL \n\n")])])]),t("p",[a._v("Now if you assign the output to a variable, it simply wont print anything. And of course the variable holds the output. (Be it a string, Object - Any type for that matter)")]),a._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$allExcel")]),a._v(" = "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Get-Process")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("Name excel\n\n")])])]),t("p",[a._v("So, lets say you have a scenario where you want to assign a variable by a Dynamic name, you can use the "),t("strong",[t("code",[a._v("-OutVariable")])]),a._v(" parameter")]),a._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Get-Process")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("Name excel "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("OutVariable AllRunningExcel\n\n")])])]),t("p",[a._v("Note that the '$' is missing here. A major difference between these two assignments is that, it also prints the output apart from assigning it to the variable AllRunningExcel. You can also choose to assign it to an another variable.")]),a._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$VarOne")]),a._v(" = "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Get-Process")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("Name excel "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("OutVariable VarTwo\n\n")])])]),t("p",[a._v("Albeit, the above scenario is very rare, both variables $VarOne & $VarTwo will have the same value.")]),a._v(" "),t("p",[a._v("Now consider this,")]),a._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Get-Process")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("Name EXCEL "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("OutVariable MSOFFICE\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Get-Process")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("Name WINWORD "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("OutVariable "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("MSOFFICE\n\n")])])]),t("p",[a._v('The first statement would simply get excel process & assign it to MSOFFICE variable, and next would get ms word processes running and "Append" it to  the existing value of MSOFFICE. It would look something like this,')]),a._v(" "),t("div",{staticClass:"language-powershell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-powershell"}},[t("code",[a._v("Handles  NPM"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("    PM"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("      WS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("K"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" VM"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("M"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("   CPU"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("     Id  "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("SI")]),a._v(" ProcessName                                                                                                                     \n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("      "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("     "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("                                                                                                                     \n   1047      54    67720      64448   618     5"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("70   4544   1 EXCEL                                                                                                                           \n   1172      70    50052      81780   584     1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("83  14968   1 WINWORD     \n\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);