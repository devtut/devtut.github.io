(window.webpackJsonp=window.webpackJsonp||[]).push([[2052],{2460:function(t,a,s){"use strict";s.r(a);var e=s(31),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"row-level-security"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#row-level-security"}},[t._v("#")]),t._v(" Row-level security")]),t._v(" "),s("h2",{attrs:{id:"rls-filter-predicate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rls-filter-predicate"}},[t._v("#")]),t._v(" RLS filter predicate")]),t._v(" "),s("p",[t._v("Sql Server 2016+ and Azure Sql database enables you to automatically filter rows that are returned in select statement using some predicate. This feature is called "),s("strong",[t._v("Row-level security")]),t._v(".")]),t._v(" "),s("p",[t._v("First, you need a table-valued function that contains some predicate that describes what it the condition that will allow users to read data from some table:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FUNCTION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("IF")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXISTS")]),t._v(" dbo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pUserCanAccessCompany\nGO\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FUNCTION")]),t._v("\n\ndbo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pUserCanAccessCompany"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@CompanyID")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RETURNS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" SCHEMABINDING\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RETURN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" canAccess "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" \n\n    CAST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SESSION_CONTEXT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("N"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'CompanyID'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@CompanyID")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("In this example, the predicate says that only users that have a value in SESSION_CONTEXT that is matching input argument can access the company. You can put any other condition e.g. that checks database role or database_id of the current user, etc.")]),t._v(" "),s("blockquote"),t._v(" "),s("p",[t._v("Most of the code above is a template that you will copy-paste. The\nonly thing that will change here is the name and arguments of\npredicate and condition in WHERE clause. Now you create security\npolicy that will apply this predicate on some table.")]),t._v(" "),s("p",[t._v("Now you can create security policy that will apply predicate on some table:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" SECURITY POLICY dbo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CompanyAccessPolicy\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" FILTER PREDICATE dbo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pUserCanAccessCompany"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CompanyID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" dbo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Company\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("State"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("This security policy assigns predicate to company table. Whenever someone tries to read data from Company table , security policy will apply predicate on each row, pass CompanyID column as a parameter of the predicate, and predicate will evaluate should this row be returned in the result of SELECT query.")]),t._v(" "),s("h2",{attrs:{id:"altering-rls-security-policy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#altering-rls-security-policy"}},[t._v("#")]),t._v(" Altering RLS security policy")]),t._v(" "),s("p",[t._v("Security policy is a group of predicates associated to tables that can be managed together. You can add, or remove predicates or turn on/off entire policy.")]),t._v(" "),s("p",[t._v("You can add more predicates on tables in the existing security policy.")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" SECURITY POLICY dbo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CompanyAccessPolicy\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" FILTER PREDICATE dbo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pUserCanAccessCompany"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CompanyID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" dbo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Company\n\n")])])]),s("p",[t._v("You can drop some predicates from security policy:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" SECURITY POLICY dbo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CompanyAccessPolicy\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" FILTER PREDICATE "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" dbo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Company\n\n")])])]),s("p",[t._v("You can disable security policy")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" SECURITY POLICY dbo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CompanyAccessPolicy "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" STATE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OFF")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n\n")])])]),s("p",[t._v("You can enable security policy that was disabled:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" SECURITY POLICY dbo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CompanyAccessPolicy "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" STATE "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n\n")])])]),s("h2",{attrs:{id:"preventing-updated-using-rls-block-predicate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#preventing-updated-using-rls-block-predicate"}},[t._v("#")]),t._v(" Preventing updated using RLS block predicate")]),t._v(" "),s("p",[t._v("Row-level security enables you to define some predicates that will control who could update rows in the table.\nFirst you need to define some table-value function that represents predicate that wll control access policy.")]),t._v(" "),s("p",[t._v("CREATE FUNCTION")]),t._v(" "),s("p",[t._v("dbo.pUserCanAccessProduct(@CompanyID int)")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RETURNS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" SCHEMABINDING\n\n")])])]),s("p",[t._v("AS RETURN (\nSELECT 1 as canAccess WHERE")]),t._v(" "),s("p",[t._v("CAST(SESSION_CONTEXT(N'CompanyID') as int) = @CompanyID")]),t._v(" "),s("p",[t._v(")\nIn this example, the predicate says that only users that have a value in SESSION_CONTEXT that is matching input argument can access the company. You can put any other condition e.g. that checks database role or database_id of the current user, etc.")]),t._v(" "),s("blockquote"),t._v(" "),s("p",[t._v("Most of the code above is a template that you will copy-paste. The\nonly thing that will change here is the name and arguments of\npredicate and condition in WHERE clause. Now you create security\npolicy that will apply this predicate on some table.")]),t._v(" "),s("p",[t._v("Now we can create security policy with the predicate that will block updates on product table if CompanyID column in table do not satisfies predicate.")]),t._v(" "),s("p",[t._v("CREATE SECURITY POLICY dbo.ProductAccessPolicy\nADD BLOCK PREDICATE dbo.pUserCanAccessProduct(CompanyID) ON dbo.Product")]),t._v(" "),s("p",[t._v("This predicate will be applied on all operations. If you want to apply predicate on some operation you can write something like:")]),t._v(" "),s("p",[t._v("CREATE SECURITY POLICY dbo.ProductAccessPolicy\nADD BLOCK PREDICATE dbo.pUserCanAccessProduct(CompanyID) ON dbo.Product AFTER INSERT")]),t._v(" "),s("p",[t._v("Possible options that you can add after block predicate definition are:")]),t._v(" "),s("p",[t._v("[ { AFTER { INSERT | UPDATE } }"),s("br"),t._v("\n| { BEFORE { UPDATE | DELETE } } ]")])])}),[],!1,null,null,null);a.default=n.exports}}]);