(window.webpackJsonp=window.webpackJsonp||[]).push([[1101],{1509:function(e,a,t){"use strict";t.r(a);var s=t(31),i=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases"}},[e._v("#")]),e._v(" Aliases")]),e._v(" "),t("h2",{attrs:{id:"list-search-existing-aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list-search-existing-aliases"}},[e._v("#")]),e._v(" List / search existing aliases")]),e._v(" "),t("p",[e._v("You can "),t("a",{attrs:{href:"http://stackoverflow.com/q/7066325/23649",target:"_blank",rel:"noopener noreferrer"}},[e._v("list existing git aliases"),t("OutboundLink")],1),e._v(" using "),t("code",[e._v("--get-regexp")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language-git extra-class"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git config"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --get")]),e._v("-regexp ")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'^alias\\.'")]),e._v("\n\n")])])]),t("h3",{attrs:{id:"searching-aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#searching-aliases"}},[e._v("#")]),e._v(" Searching aliases")]),e._v(" "),t("p",[e._v("To "),t("a",{attrs:{href:"http://stackoverflow.com/questions/39466417/how-do-i-search-my-git-aliases/39466418#39466418",target:"_blank",rel:"noopener noreferrer"}},[e._v("search aliases"),t("OutboundLink")],1),e._v(", add the following to your "),t("code",[e._v(".gitconfig")]),e._v(" under "),t("code",[e._v("[alias]")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language-git extra-class"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("aliases = !git config --list | grep ^alias\\\\. | cut -c 7- | grep -Ei --color \\"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$1\\" "')]),e._v('#"\n\n')])])]),t("p",[e._v("Then you can:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("git aliases")]),e._v(" - show ALL aliases")]),e._v(" "),t("li",[t("code",[e._v("git aliases commit")]),e._v(' - only aliases containing "commit"')])]),e._v(" "),t("h2",{attrs:{id:"simple-aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#simple-aliases"}},[e._v("#")]),e._v(" Simple aliases")]),e._v(" "),t("p",[e._v("There are two ways of creating aliases in Git:")]),e._v(" "),t("ul",[t("li",[e._v("with the "),t("code",[e._v("~/.gitconfig")]),e._v(" file:")])]),e._v(" "),t("div",{staticClass:"language-git extra-class"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("[alias]\n    ci = commit\n    st = status\n    co = checkout\n\n")])])]),t("ul",[t("li",[e._v("with the command line:")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\ngit config --global alias.ci "commit"\n git config --global alias.st "status"\n git config --global alias.co "checkout"\n\n')])])]),t("p",[e._v("After the alias is created - type:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("git ci")]),e._v(" instead of "),t("code",[e._v("git commit")]),e._v(",")]),e._v(" "),t("li",[t("code",[e._v("git st")]),e._v(" instead of "),t("code",[e._v("git status")]),e._v(",")]),e._v(" "),t("li",[t("code",[e._v("git co")]),e._v(" instead of "),t("code",[e._v("git checkout")]),e._v(".")])]),e._v(" "),t("p",[e._v("As with regular git commands, aliases can be used beside arguments. For example:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\ngit ci -m "Commit message..."\n git co -b feature-42\n\n')])])]),t("h2",{attrs:{id:"advanced-aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#advanced-aliases"}},[e._v("#")]),e._v(" Advanced Aliases")]),e._v(" "),t("p",[e._v("Git lets you use non-git commands and full "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Bourne_shell",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("sh")]),t("OutboundLink")],1),e._v(" shell syntax in your aliases if you prefix them with "),t("code",[e._v("!")]),e._v(".")]),e._v(" "),t("p",[e._v("In your "),t("code",[e._v("~/.gitconfig")]),e._v(" file:")]),e._v(" "),t("div",{staticClass:"language-git extra-class"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("[alias]\n    temp = !git add -A && git commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Temp"')]),e._v("\n\n")])])]),t("p",[e._v("The fact that full shell syntax is available in these prefixed aliases also means you can use shell functions to construct more complex aliases, such as ones which utilize command line arguments:")]),e._v(" "),t("div",{staticClass:"language-git extra-class"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("[alias]\n    ignore = "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"!f() { echo $1 >> .gitignore; }; f"')]),e._v("\n\n")])])]),t("p",[e._v("The above alias defines the "),t("code",[e._v("f")]),e._v(" function, then runs it with any arguments you pass to the alias. So running "),t("code",[e._v("git ignore .tmp/")]),e._v(" would add "),t("code",[e._v(".tmp/")]),e._v(" to your "),t("code",[e._v(".gitignore")]),e._v(" file.")]),e._v(" "),t("p",[e._v("In fact, this pattern is so useful that Git defines "),t("code",[e._v("$1")]),e._v(", "),t("code",[e._v("$2")]),e._v(", etc. variables for you, so you don't even have to define a special function for it. (But keep in mind that Git will also append the arguments anyway, even if you access it via these variables, so you may want to add a dummy command at the end.)")]),e._v(" "),t("p",[e._v("Note that aliases prefixed with "),t("code",[e._v("!")]),e._v(" in this way are run from the root directory of your git checkout, even if your current directory is deeper in the tree. This can be a useful way to run a command from the root without having to "),t("code",[e._v("cd")]),e._v(" there explicitly.")]),e._v(" "),t("div",{staticClass:"language-git extra-class"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("[alias]\n    ignore = "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"! echo $1 >> .gitignore"')]),e._v("\n\n")])])]),t("h2",{attrs:{id:"temporarily-ignore-tracked-files"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#temporarily-ignore-tracked-files"}},[e._v("#")]),e._v(" Temporarily ignore tracked files")]),e._v(" "),t("p",[e._v("To temporarily mark a file as ignored (pass file as parameter to alias) - type:")]),e._v(" "),t("div",{staticClass:"language-git extra-class"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("unwatch = update-index --assume-unchanged\n\n")])])]),t("p",[e._v("To start tracking file again - type:")]),e._v(" "),t("div",{staticClass:"language-git extra-class"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("watch = update-index --no-assume-unchanged\n\n")])])]),t("p",[e._v("To list all files that has been temporarily ignored - type:")]),e._v(" "),t("div",{staticClass:"language-git extra-class"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("unwatched = "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"!git ls-files -v | grep '^[[:lower:]]'\"")]),e._v("\n\n")])])]),t("p",[e._v("To clear the unwatched list - type:")]),e._v(" "),t("div",{staticClass:"language-git extra-class"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("watchall = "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"!git unwatched | xargs -L 1 -I % sh -c 'git watch `echo % | cut -c 2-`'\"")]),e._v("\n\n")])])]),t("p",[e._v("Example of using the aliases:")]),e._v(" "),t("div",{staticClass:"language-git extra-class"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git unwatch my_file.txt\ngit watch my_file.txt\ngit unwatched\ngit watchall\n\n")])])]),t("h2",{attrs:{id:"show-pretty-log-with-branch-graph"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#show-pretty-log-with-branch-graph"}},[e._v("#")]),e._v(" Show pretty log with branch graph")]),e._v(" "),t("div",{staticClass:"language-git extra-class"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("[alias]\n  logp=log --pretty=format:"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'%h %ad | %s%d [%an]'")]),e._v(" --graph --date=short\n\n  lg =  log --graph --date-order --first-parent \\\n     --pretty=format:"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'%C(auto)%h%Creset %C(auto)%d%Creset %s %C(green)(%ad) %C(bold cyan)<%an>%Creset'")]),e._v("\n  lgb = log --graph --date-order --branches --first-parent \\                      \n     --pretty=format:"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'%C(auto)%h%Creset %C(auto)%d%Creset %s %C(green)(%ad) %C(bold cyan)<%an>%Creset'")]),e._v("\n lga = log --graph --date-order --all \\                                          \n   --pretty=format:"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'%C(auto)%h%Creset %C(auto)%d%Creset %s %C(green)(%ad) %C(bold cyan)<%an>%Creset'")]),e._v("\n\n")])])]),t("p",[e._v("Here an explanation of the options and placeholder used in the "),t("code",[e._v("--pretty")]),e._v(" format (exhaustive list are available with "),t("code",[e._v("git help log")]),e._v(" )")]),e._v(" "),t("p",[e._v("--graph - draw the commit tree")]),e._v(" "),t("p",[e._v("--date-order - use commit timestamp order when possible")]),e._v(" "),t("p",[e._v("--first-parent - follow only the first parent on merge node.")]),e._v(" "),t("p",[e._v("--branches - show all local branches (by default, only current branch is shown)")]),e._v(" "),t("p",[e._v("--all - show all local and remotes branches")]),e._v(" "),t("p",[e._v("%h - hash value for commit (abbreviated)")]),e._v(" "),t("p",[e._v("%ad - Date stamp (author)")]),e._v(" "),t("p",[e._v("%an - Author username")]),e._v(" "),t("p",[e._v("%an - Commit username")]),e._v(" "),t("p",[e._v("%C(auto) - to use colors defined in [color] section")]),e._v(" "),t("p",[e._v("%Creset - to reset color")]),e._v(" "),t("p",[e._v("%d - --decorate (branch & tag names)")]),e._v(" "),t("p",[e._v("%s - commit message")]),e._v(" "),t("p",[e._v("%ad - author date (will follow --date directive) (and not commiter date)")]),e._v(" "),t("p",[e._v("%an - author name (can be %cn for commiter name)")]),e._v(" "),t("h2",{attrs:{id:"updating-code-while-keeping-a-linear-history"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#updating-code-while-keeping-a-linear-history"}},[e._v("#")]),e._v(" Updating code while keeping a linear history")]),e._v(" "),t("p",[e._v("Sometimes you need to keep a linear (non-branching) history of your code commits. If you are working on a branch for a while, this can be tricky if you have to do a regular "),t("code",[e._v("git pull")]),e._v(" since that will record a merge with upstream.")]),e._v(" "),t("div",{staticClass:"language-git extra-class"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("[alias]\n  up = pull --rebase\n\n")])])]),t("p",[e._v("This will update with your upstream source, then reapply any work you have not pushed on top of whatever you pulled down.")]),e._v(" "),t("p",[e._v("To use:")]),e._v(" "),t("div",{staticClass:"language-git extra-class"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git up\n\n")])])]),t("h2",{attrs:{id:"see-which-files-are-being-ignored-by-your-gitignore-configuration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#see-which-files-are-being-ignored-by-your-gitignore-configuration"}},[e._v("#")]),e._v(" See which files are being ignored by your .gitignore configuration")]),e._v(" "),t("div",{staticClass:"language-git extra-class"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("[ alias ]\n\n    ignored = ! git ls-files --others --ignored --exclude-standard --directory \\\n            && git ls-files --others -i --exclude-standard\n\n")])])]),t("p",[e._v("Shows one line per file, so you can grep (only directories):")]),e._v(" "),t("div",{staticClass:"language-git extra-class"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git ignored | grep ")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/$'")]),e._v("\n.yardoc/\ndoc/\n\n")])])]),t("p",[e._v("Or count:")]),e._v(" "),t("div",{staticClass:"language-git extra-class"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[e._v("~$ git ignored | wc"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" -l")])]),e._v("\n199811                 # oops, my home directory is getting crowded\n\n")])])]),t("h2",{attrs:{id:"unstage-staged-files"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unstage-staged-files"}},[e._v("#")]),e._v(" Unstage staged files")]),e._v(" "),t("p",[e._v("Normally, to remove files that are staged to be committed using the "),t("code",[e._v("git reset")]),e._v(" commit, "),t("code",[e._v("reset")]),e._v(" has a lot of functions depending on the arguments provided to it. To completely unstage all files staged, we can make use of git aliases to create a new alias that uses "),t("code",[e._v("reset")]),e._v(" but now we do not need to remember to provide the correct arguments to "),t("code",[e._v("reset")]),e._v(".")]),e._v(" "),t("p",[t("code",[e._v('git config --global alias.unstage "reset --"')])]),e._v(" "),t("p",[e._v("Now, any time you want to "),t("strong",[e._v("unstage")]),e._v(" stages files, type "),t("code",[e._v("git unstage")]),e._v(" and you are good to go.")])])}),[],!1,null,null,null);a.default=i.exports}}]);