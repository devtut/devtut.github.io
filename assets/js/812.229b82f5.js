(window.webpackJsonp=window.webpackJsonp||[]).push([[812],{1220:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"expression-trees"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expression-trees"}},[t._v("#")]),t._v(" Expression Trees")]),t._v(" "),a("h2",{attrs:{id:"create-expression-trees-with-a-lambda-expression"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-expression-trees-with-a-lambda-expression"}},[t._v("#")]),t._v(" Create Expression Trees with a lambda expression")]),t._v(" "),a("p",[t._v("Following is most basic expression tree that is created by lambda.")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" lambda "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("To create expression trees 'by hand', one should use "),a("code",[t._v("Expression")]),t._v(" class.")]),t._v(" "),a("p",[t._v("Expression above would be equivalent to:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ParameterExpression")]),t._v(" parameter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Parameter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token type-expression class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// num argument")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConstantExpression")]),t._v(" constant "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Constant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token type-expression class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 42 constant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryExpression")]),t._v(" equality "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parameter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" constant"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// equality of two expressions (num == 42)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" lambda "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token generic-method"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Lambda")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("equality"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parameter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"creating-expression-trees-by-using-the-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-expression-trees-by-using-the-api"}},[t._v("#")]),t._v(" Creating Expression Trees by Using the API")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("System"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Linq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Expressions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Manually build the expression tree for ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the lambda expression num => num < 5.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ParameterExpression")]),t._v(" numParam "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Parameter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token type-expression class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConstantExpression")]),t._v(" five "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Constant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token type-expression class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryExpression")]),t._v(" numLessThanFive "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LessThan")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numParam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" five"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" lambda1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token generic-method"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Lambda")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        numLessThanFive"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("ParameterExpression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" numParam "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"compiling-expression-trees"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compiling-expression-trees"}},[t._v("#")]),t._v(" Compiling Expression Trees")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Define an expression tree, taking an integer, returning a bool.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" expr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Call the Compile method on the expression tree to return a delegate that can be called.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" expr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Compile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Invoke the delegate and write the result to the console.")]),t._v("\nConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("result")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints True.")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// You can also combine the compile step with the call/invoke step as below:")]),t._v("\nConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Compile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"parsing-expression-trees"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parsing-expression-trees"}},[t._v("#")]),t._v(" Parsing Expression Trees")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("System"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Linq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Expressions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create an expression tree.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" exprTree "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Decompose the expression tree.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ParameterExpression")]),t._v(" param "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ParameterExpression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("exprTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Parameters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryExpression")]),t._v(" operation "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinaryExpression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("exprTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ParameterExpression")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ParameterExpression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("operation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConstantExpression")]),t._v(" right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ConstantExpression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("operation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Decomposed expression: {0} => {1} {2} {3}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                  param"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" operation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("NodeType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Decomposed expression: num => num LessThan 5      ")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"expression-tree-basic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expression-tree-basic"}},[t._v("#")]),t._v(" Expression Tree Basic")]),t._v(" "),a("p",[t._v("Expression trees represent code in a tree-like data structure, where each node is an expression")]),t._v(" "),a("p",[t._v("Expression Trees enables dynamic modification of executable code, the execution of LINQ queries in various databases, and the creation of dynamic queries. You can compile and run code represented by expression trees.")]),t._v(" "),a("p",[t._v("These are also used in the dynamic language run-time (DLR) to provide interoperability between dynamic languages and the .NET Framework and to enable compiler writers to emit expression trees instead of Microsoft intermediate language (MSIL).")]),t._v(" "),a("p",[t._v("Expression Trees can be created Via")]),t._v(" "),a("ol",[a("li",[t._v("Anonymous lambda expression,")]),t._v(" "),a("li",[t._v("Manually by using the System.Linq.Expressions namespace.")])]),t._v(" "),a("p",[a("strong",[t._v("Expression Trees from Lambda Expressions")])]),t._v(" "),a("p",[t._v("When a lambda expression is assigned to Expression type variable , the compiler emits code to build an expression tree that represents the lambda expression.")]),t._v(" "),a("p",[t._v("The following code examples shows how to have the C# compiler create an expression tree that represents the lambda expression num => num < 5.")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" lambda "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("Expression Trees by Using the API")])]),t._v(" "),a("p",[t._v("Expression Trees also created using the "),a("strong",[t._v("Expression")]),t._v(" Class. This class contains static factory methods that create expression tree nodes of specific types.")]),t._v(" "),a("p",[t._v("Below are few type of Tree nodes.")]),t._v(" "),a("ol",[a("li",[t._v("ParameterExpression")]),t._v(" "),a("li",[t._v("MethodCallExpression")])]),t._v(" "),a("p",[t._v("The following code example shows how to create an expression tree that represents the lambda expression num => num < 5 by using the API.")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ParameterExpression")]),t._v(" numParam "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Parameter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token type-expression class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConstantExpression")]),t._v(" five "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Constant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token type-expression class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryExpression")]),t._v(" numLessThanFive "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LessThan")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numParam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" five"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" lambda1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token generic-method"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Lambda")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numLessThanFive"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("ParameterExpression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" numParam "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"examining-the-structure-of-an-expression-using-visitor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examining-the-structure-of-an-expression-using-visitor"}},[t._v("#")]),t._v(" Examining the Structure of an Expression using Visitor")]),t._v(" "),a("p",[t._v("Define a new visitor class by overriding some of the methods of "),a("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/system.linq.expressions.expressionvisitor(v=vs.110).aspx",target:"_blank",rel:"noopener noreferrer"}},[t._v("ExpressionVisitor"),a("OutboundLink")],1),t._v(":")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrintingVisitor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token type-list"}},[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExpressionVisitor")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("Expression")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("VisitConstant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConstantExpression")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Constant: {0}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("base")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("VisitConstant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("Expression")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("VisitParameter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ParameterExpression")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Parameter: {0}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("base")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("VisitParameter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("Expression")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("VisitBinary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryExpression")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Binary with operator {0}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("NodeType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("base")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("VisitBinary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("Call "),a("code",[t._v("Visit")]),t._v(" to use this visitor on an existing expression:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" isBig "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" visitor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("PrintingVisitor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvisitor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Visit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isBig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"understanding-the-expressions-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#understanding-the-expressions-api"}},[t._v("#")]),t._v(" Understanding the expressions API")]),t._v(" "),a("p",[t._v("We're going to use the expression tree API to create a "),a("code",[t._v("CalculateSalesTax")]),t._v(" tree.  In plain English, here's a summary of the steps it takes to create the tree.")]),t._v(" "),a("ol",[a("li",[t._v("Check if the product is taxable")]),t._v(" "),a("li",[t._v("If it is, multiply the line total by the applicable tax rate and return that amount")]),t._v(" "),a("li",[t._v("Otherwise return 0")])]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//For reference, we're using the API to build this lambda expression")]),t._v("\n    orderLine "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" orderLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IsTaxable "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v(" orderLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Total "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" orderLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TaxRate "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//The orderLine parameter we pass in to the method.  We specify it's type (OrderLine) and the name of the parameter.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ParameterExpression")]),t._v(" orderLine "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Parameter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token type-expression class-name"}},[t._v("OrderLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"orderLine"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Check if the parameter is taxable;  First we need to access the is taxable property, then check if it's true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PropertyInfo")]),t._v(" isTaxableAccessor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token type-expression class-name"}},[t._v("OrderLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"IsTaxable"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MemberExpression")]),t._v(" getIsTaxable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MakeMemberAccess")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("orderLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" isTaxableAccessor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnaryExpression")]),t._v(" isLineTaxable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsTrue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("getIsTaxable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Before creating the if, we need to create the braches")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//If the line is taxable, we'll return the total times the tax rate; get the total and tax rate, then multiply")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Get the total")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PropertyInfo")]),t._v(" totalAccessor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token type-expression class-name"}},[t._v("OrderLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Total"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MemberExpression")]),t._v(" getTotal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MakeMemberAccess")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("orderLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" totalAccessor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Get the order")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PropertyInfo")]),t._v(" orderAccessor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token type-expression class-name"}},[t._v("OrderLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Order"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MemberExpression")]),t._v(" getOrder "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MakeMemberAccess")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("orderLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" orderAccessor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Get the tax rate - notice that we pass the getOrder expression directly to the member access")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PropertyInfo")]),t._v(" taxRateAccessor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token type-expression class-name"}},[t._v("Order")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"TaxRate"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MemberExpression")]),t._v(" getTaxRate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MakeMemberAccess")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("getOrder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" taxRateAccessor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Multiply the two - notice we pass the two operand expressions directly to multiply")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryExpression")]),t._v(" multiplyTotalByRate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Multiply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("getTotal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" getTaxRate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//If the line is not taxable, we'll return a constant value - 0.0 (decimal)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConstantExpression")]),t._v(" zero "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Constant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0M")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Create the actual if check and branches")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConditionalExpression")]),t._v(" ifTaxableTernary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Condition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isLineTaxable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" multiplyTotalByRate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" zero"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//Wrap the whole thing up in a "method" - a LambdaExpression')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("OrderLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("decimal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" method "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token generic-method"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Lambda")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("OrderLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("decimal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ifTaxableTernary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" orderLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h4",{attrs:{id:"syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),a("ul",[a("li",[t._v("Expression"),a("TDelegate",[t._v(" name = lambdaExpression;")])],1)]),t._v(" "),a("h4",{attrs:{id:"parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Parameter")]),t._v(" "),a("th",[t._v("Details")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("TDelegate")]),t._v(" "),a("td",[t._v("The delegate type to be used for the expression")])]),t._v(" "),a("tr",[a("td",[t._v("lambdaExpression")]),t._v(" "),a("td",[t._v("The lambda expression (ex. "),a("code",[t._v("num => num < 5")]),t._v(")")])])])]),t._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),a("h3",{attrs:{id:"intro-to-expression-trees"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#intro-to-expression-trees"}},[t._v("#")]),t._v(" Intro to Expression Trees")]),t._v(" "),a("h3",{attrs:{id:"where-we-came-from"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#where-we-came-from"}},[t._v("#")]),t._v(" Where we came from")]),t._v(" "),a("p",[t._v('Expression trees are all about consuming "source code" at runtime.  Consider a method which calculates the sales tax due on a sales order '),a("code",[t._v("decimal CalculateTotalTaxDue(SalesOrder order)")]),t._v(".  Using that method in a .NET program is easy — you just call it "),a("code",[t._v("decimal taxDue = CalculateTotalTaxDue(order);")]),t._v(".  What if you want to apply it to all the results from a remote query (SQL, XML, a remote server, etc)?  Those remote query sources cannot call the method!  Traditionally, you would have to invert the flow in all these cases.  Make the entire query, store it in memory, then loop through the results and calculate tax for each result.")]),t._v(" "),a("p",[a("a",{staticClass:"remarks-subsection-anchor",attrs:{name:"remarks-how-to-avoid-flow-inversion's-memory-and-latency-problems-2"}})]),a("h3",[t._v("How to avoid flow inversion's memory and latency problems")]),a("p"),t._v(" "),a("p",[t._v("Expression trees are data structures in a format of a tree, where each node holds an expression. They are used to translate the compiled instructions (like methods used to filter data) in expressions which could be used outside of the program environment such as inside a database query.")]),t._v(" "),a("p",[t._v("The problem here is that a remote query "),a("strong",[t._v("cannot access our method")]),t._v(".  We could avoid this problem if instead, we sent the "),a("strong",[t._v("instructions")]),t._v(" for the method to the remote query.  In our "),a("code",[t._v("CalculateTotalTaxDue")]),t._v(" example, that means we send this information:")]),t._v(" "),a("ol",[a("li",[t._v("Create a variable to store the total tax")]),t._v(" "),a("li",[t._v("Loop through all the lines on the order")]),t._v(" "),a("li",[t._v("For each line, check if the product is taxable")]),t._v(" "),a("li",[t._v("If it is, multiply the line total by the applicable tax rate and add that amount to the total")]),t._v(" "),a("li",[t._v("Otherwise do nothing")])]),t._v(" "),a("p",[t._v("With those instructions, the remote query can perform the work as it's creating the data.")]),t._v(" "),a("p",[t._v("There are two challenges to implementing this. How do you transform a compiled .NET method into a list of instructions, and how do you format the instructions in a way that they can be consumed by the remote system?")]),t._v(" "),a("p",[t._v("Without expression trees, you could only solve the first problem with MSIL.  (MSIL is the assembler-like code created by the .NET compiler.)  Parsing MSIL is "),a("strong",[t._v("possible")]),t._v(", but it's not easy.  Even when you do parse it properly, it can be hard to determine what the original programmer's intent was with a particular routine.")]),t._v(" "),a("p",[a("a",{staticClass:"remarks-subsection-anchor",attrs:{name:"remarks-expression-trees-save-the-day-3"}})]),a("h3",[t._v("Expression trees save the day")]),t._v("\nExpression trees address these exact issues.  They represent program instructions a tree data structure where each node represents "),a("strong",[t._v("one instruction")]),t._v(" and has references to all the information you need to execute that instruction.  For example, a "),a("code",[t._v("MethodCallExpression")]),t._v(" has reference to 1) the "),a("code",[t._v("MethodInfo")]),t._v(" it is going to call, 2) a list of "),a("code",[t._v("Expression")]),t._v("s it will pass to that method, 3) for instance methods, the "),a("code",[t._v("Expression")]),t._v(' you\'ll call the method on.  You can "walk the tree" and apply the instructions on your remote query.'),a("p"),t._v(" "),a("p",[a("a",{staticClass:"remarks-subsection-anchor",attrs:{name:"remarks-creating-expression-trees-4"}})]),a("h3",[t._v("Creating expression trees")]),t._v("\nThe easiest way to create an expression tree is with a lambda expression.  These expressions look almost the same as normal C# methods.  It's important to realize this is "),a("strong",[t._v("compiler magic")]),t._v(".  When you first create a lambda expression, the compiler checks what you assign it to.  If it's a "),a("code",[t._v("Delegate")]),t._v(" type (including "),a("code",[t._v("Action")]),t._v(" or "),a("code",[t._v("Func")]),t._v("), the compiler converts the lambda expression into a delegate.  If it's a "),a("code",[t._v("LambdaExpression")]),t._v(" (or an "),a("code",[t._v("Expression<Action<T>>")]),t._v(" or "),a("code",[t._v("Expression<Func<T>>")]),t._v(" which are strongly typed "),a("code",[t._v("LambdaExpression")]),t._v("'s), the compiler transforms it into a "),a("code",[t._v("LambdaExpression")]),t._v(".  This is where the magic kicks in.  Behind the scenes, the compiler "),a("strong",[t._v("uses the expression tree API")]),t._v(" to transform your lambda expression into a "),a("code",[t._v("LambdaExpression")]),t._v("."),a("p"),t._v(" "),a("p",[t._v("Lambda expressions cannot create every type of expression tree.  In those cases, you can use the Expressions API manually to create the tree you need to.  In the "),a("a",{attrs:{href:"//stackoverflow.com/documentation/c%23/75/expression-trees/19200/understanding-the-expressions-api"}},[t._v("Understanding the expressions API")]),t._v(" example, we create the "),a("code",[t._v("CalculateTotalSalesTax")]),t._v(" expression using the API.")]),t._v(" "),a("p",[t._v("NOTE: The names get a bit confusing here.  A "),a("strong",[t._v("lambda expression")]),t._v(" (two words, lower case) refers to the block of code with a "),a("code",[t._v("=>")]),t._v(" indicator.  It represents an anonymous method in C# and is converted into either a "),a("code",[t._v("Delegate")]),t._v(" or "),a("code",[t._v("Expression")]),t._v(".  A "),a("strong",[a("code",[t._v("LambdaExpression")])]),t._v(" (one word, PascalCase) refers to the node type within the Expression API which represents a method you can execute.")]),t._v(" "),a("h3",{attrs:{id:"expression-trees-and-linq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expression-trees-and-linq"}},[t._v("#")]),t._v(" Expression Trees and LINQ")]),t._v(" "),a("p",[t._v("One of the most common uses of expression trees is with LINQ and database queries.  LINQ pairs an expression tree with a query provider to apply your instructions to the target remote query.  For example, the LINQ to Entity Framework query provider transforms an expression tree into SQL which is executed against the database directly.")]),t._v(" "),a("p",[t._v("Putting all the pieces together, you can see the real power behind LINQ.")]),t._v(" "),a("ol",[a("li",[t._v("Write a query using a lambda expression: "),a("code",[t._v("products.Where(x => x.Cost > 5)")])]),t._v(" "),a("li",[t._v('The compiler transforms that expression into an expression tree with the instructions "check if the Cost property of the parameter is greater than five".')]),t._v(" "),a("li",[t._v("The query provider parses the expression tree and produces a valid SQL query "),a("code",[t._v("SELECT * FROM products WHERE Cost > 5")])]),t._v(" "),a("li",[t._v("The ORM projects all the results into POCOs and you get a list of objects back")])]),t._v(" "),a("h3",{attrs:{id:"notes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#notes"}},[t._v("#")]),t._v(" Notes")]),t._v(" "),a("ul",[a("li",[t._v("Expression trees are immutable. If you want to change an expression tree you need to create a new one, copy the existing one into the new one (to traverse an expression tree you can use the "),a("code",[t._v("ExpressionVisitor")]),t._v(") and make the wanted changes.")])])])}),[],!1,null,null,null);s.default=n.exports}}]);