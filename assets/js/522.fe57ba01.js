(window.webpackJsonp=window.webpackJsonp||[]).push([[522],{930:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"process-substitution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process-substitution"}},[t._v("#")]),t._v(" Process substitution")]),t._v(" "),a("h2",{attrs:{id:"compare-two-files-from-the-web"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compare-two-files-from-the-web"}},[t._v("#")]),t._v(" Compare two files from the web")]),t._v(" "),a("p",[t._v("The following compares two files with "),a("code",[t._v("diff")]),t._v(" using process substitution instead of creating temporary files.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" http://www.example.com/page1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" http://www.example.com/page2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"feed-a-while-loop-with-the-output-of-a-command"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#feed-a-while-loop-with-the-output-of-a-command"}},[t._v("#")]),t._v(" Feed a while loop with the output of a command")]),t._v(" "),a("p",[t._v("This feeds a "),a("code",[t._v("while")]),t._v(" loop with the output of a "),a("code",[t._v("grep")]),t._v(" command:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("IFS")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('":"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("read")]),t._v(" -r user _\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# "$user" holds the username in /etc/passwd')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("done")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v(" /etc/passwd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"concatenating-files"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concatenating-files"}},[t._v("#")]),t._v(" Concatenating files")]),t._v(" "),a("p",[t._v("It is well known that you cannot use the same file for input and ouput in the same command. For instance,")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" header.txt body.txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("body.txt\n\n")])])]),a("p",[t._v("doesn’t do what you want. By the time "),a("code",[t._v("cat")]),t._v(" reads "),a("code",[t._v("body.txt")]),t._v(", it has already been truncated by the redirection and it is empty. The final result will be that "),a("code",[t._v("body.txt")]),t._v(" will hold the contents of "),a("code",[t._v("header.txt")]),t._v(" "),a("strong",[t._v("only.")])]),t._v(" "),a("p",[t._v("One might think to avoid this with process substitution, that is, that the command")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" header.txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" body.txt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" body.txt\n\n")])])]),a("p",[t._v("will force the original contents of "),a("code",[t._v("body.txt")]),t._v(" to be somehow saved in some buffer somewhere before the file is truncated by the redirection. It doesn’t work. The "),a("code",[t._v("cat")]),t._v(" in parentheses begins reading the file only after all file descriptors have been set up, just like the outer one. There is no point in trying to use process substitution in this case.")]),t._v(" "),a("p",[t._v("The only way to prepend a file to another file is to create an intermediate one:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" header.txt body.txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("body.txt.new\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" body.txt.new body.txt\n\n")])])]),a("p",[t._v("which is what "),a("code",[t._v("sed")]),t._v(" or "),a("code",[t._v("perl")]),t._v(" or similar programs do under the carpet when called with an "),a("strong",[t._v("edit-in-place")]),t._v(" option (usually "),a("code",[t._v("-i")]),t._v(").")]),t._v(" "),a("h2",{attrs:{id:"with-paste-command"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#with-paste-command"}},[t._v("#")]),t._v(" With paste command")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Process substitution with paste command is common")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# To compare the contents of two directories")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("paste")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" /path/to/directory1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" /path/to/directory1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"stream-a-file-through-multiple-programs-at-once"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stream-a-file-through-multiple-programs-at-once"}},[t._v("#")]),t._v(" Stream a file through multiple programs at once")]),t._v(" "),a("p",[t._v("This counts the number of lines in a big file with "),a("code",[t._v("wc -l")]),t._v(" while simultaneously compressing it with "),a("code",[t._v("gzip")]),t._v(".  Both run concurrently.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tee")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wc")]),t._v(" -l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("&2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" bigfile "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gzip")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" bigfile.gz\n\n")])])]),a("p",[t._v("Normally "),a("code",[t._v("tee")]),t._v(" writes its input to one or more files (and stdout).  We can write to commands instead of files with "),a("code",[t._v("tee >(command)")]),t._v(".")]),t._v(" "),a("p",[t._v("Here the command "),a("code",[t._v("wc -l >&2")]),t._v(" counts the lines read from "),a("code",[t._v("tee")]),t._v(" (which in turn is reading from "),a("code",[t._v("bigfile")]),t._v(").  (The line count is sent to stderr ("),a("code",[t._v(">&2")]),t._v(") to avoid mixing with the input to "),a("code",[t._v("gzip")]),t._v(".)  The stdout of "),a("code",[t._v("tee")]),t._v(" is simultaneously fed into "),a("code",[t._v("gzip")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"to-avoid-usage-of-a-sub-shell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#to-avoid-usage-of-a-sub-shell"}},[t._v("#")]),t._v(" To avoid usage of a sub-shell")]),t._v(" "),a("p",[t._v("One major aspect of process substitution is that it lets us avoid usage of a sub-shell when piping commands from the shell.")]),t._v(" "),a("p",[t._v("This can be demonstrated with a simple example below. I have the following files in my current folder:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" -maxdepth "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" -type f -print\nfoo bar zoo foobar foozoo barzoo \n\n")])])]),a("p",[t._v("If I pipe to a "),a("code",[t._v("while")]),t._v("/"),a("code",[t._v("read")]),t._v(" loop that increments a counter as follows:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" -maxdepth "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" -type f -print "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("IFS")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("read")]),t._v(" -r _"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n\n")])])]),a("p",[a("code",[t._v("$count")]),t._v(" now does "),a("strong",[t._v("not")]),t._v(" contain "),a("code",[t._v("6")]),t._v(", because it was modified in the sub-shell context. Any of the commands shown below are run in a sub-shell context and the scope of the variables used within are lost after the sub-shell terminates.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("command")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("command")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("command")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("command")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("Process substitution will solve the problem by avoiding use the of pipe "),a("code",[t._v("|")]),t._v(" operator as in")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("IFS")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("read")]),t._v(" -r _"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("done")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" -maxdepth "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" -type f -print"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("This will retain the "),a("code",[t._v("count")]),t._v(" variable value as no sub-shells are invoked.")]),t._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),a("p",[t._v("Process substitution is a form of redirection where the input or output of a process (some sequence of commands) appear as a temporary file.")])])}),[],!1,null,null,null);s.default=n.exports}}]);