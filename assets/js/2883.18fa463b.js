(window.webpackJsonp=window.webpackJsonp||[]).push([[2883],{3291:function(a,t,e){"use strict";e.r(t);var s=e(31),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"extracting-and-listing-files-in-compressed-archives"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extracting-and-listing-files-in-compressed-archives"}},[a._v("#")]),a._v(" Extracting and Listing Files in Compressed Archives")]),a._v(" "),e("h2",{attrs:{id:"extracting-files-from-a-zip-archive"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extracting-files-from-a-zip-archive"}},[a._v("#")]),a._v(" Extracting files from a .zip archive")]),a._v(" "),e("p",[a._v("Unzipping a zip archive is done with "),e("code",[a._v("unzip")]),a._v(" function from the "),e("code",[a._v("utils")]),a._v(" package (which is included in base R).")]),a._v(" "),e("div",{staticClass:"language-r extra-class"},[e("pre",{pre:!0,attrs:{class:"language-r"}},[e("code",[a._v("unzip"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("zipfile "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"bar.zip"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" exdir "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"./foo"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),e("p",[a._v("This will extract all files in "),e("code",[a._v('"bar.zip"')]),a._v(" to the "),e("code",[a._v('"foo"')]),a._v(" directory, which will be created if necessary. Tilde expansion is done automatically from your working directory. Alternatively, you can pass the whole path name to the zipfile.")]),a._v(" "),e("h2",{attrs:{id:"listing-files-in-a-zip-archive"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#listing-files-in-a-zip-archive"}},[a._v("#")]),a._v(" Listing files in a .zip archive")]),a._v(" "),e("p",[a._v("Listing files in a zip archive is done with "),e("code",[a._v("unzip")]),a._v(" function from the "),e("code",[a._v("utils")]),a._v(" package (which is included in base R).")]),a._v(" "),e("div",{staticClass:"language-r extra-class"},[e("pre",{pre:!0,attrs:{class:"language-r"}},[e("code",[a._v("unzip"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("zipfile "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"bar.zip"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" list "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("TRUE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),e("p",[a._v("This will list all files in "),e("code",[a._v('"bar.zip"')]),a._v(" and extract none. Tilde expansion is done automatically from your working directory. Alternatively, you can pass the whole path name to the zipfile.")]),a._v(" "),e("h2",{attrs:{id:"listing-files-in-a-tar-archive"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#listing-files-in-a-tar-archive"}},[a._v("#")]),a._v(" Listing files in a .tar archive")]),a._v(" "),e("p",[a._v("Listing files in a tar archive is done with "),e("code",[a._v("untar")]),a._v(" function from the "),e("code",[a._v("utils")]),a._v(" package (which is included in base R).")]),a._v(" "),e("div",{staticClass:"language-r extra-class"},[e("pre",{pre:!0,attrs:{class:"language-r"}},[e("code",[a._v("untar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("zipfile "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"bar.tar"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" list "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("TRUE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),e("p",[a._v("This will list all files in "),e("code",[a._v('"bar.tar"')]),a._v(" and extract none. Tilde expansion is done automatically from your working directory. Alternatively, you can pass the whole path name to the tarfile.")]),a._v(" "),e("h2",{attrs:{id:"extracting-files-from-a-tar-archive"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extracting-files-from-a-tar-archive"}},[a._v("#")]),a._v(" Extracting files from a .tar archive")]),a._v(" "),e("p",[a._v("Extracting files from a tar archive is done with "),e("code",[a._v("untar")]),a._v(" function from the "),e("code",[a._v("utils")]),a._v(" package (which is included in base R).")]),a._v(" "),e("div",{staticClass:"language-r extra-class"},[e("pre",{pre:!0,attrs:{class:"language-r"}},[e("code",[a._v("untar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("tarfile "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"bar.tar"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" exdir "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"./foo"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),e("p",[a._v("This will extract all files in "),e("code",[a._v('"bar.tar"')]),a._v(" to the "),e("code",[a._v('"foo"')]),a._v(" directory, which will be created if necessary. Tilde expansion is done automatically from your working directory. Alternatively, you can pass the whole path name to the tarfile.")]),a._v(" "),e("h2",{attrs:{id:"extract-all-zip-archives-in-a-directory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extract-all-zip-archives-in-a-directory"}},[a._v("#")]),a._v(" Extract all .zip archives in a directory")]),a._v(" "),e("p",[a._v("With a simple "),e("code",[a._v("for")]),a._v(" loop, all zip archives in a directory can be extracted.")]),a._v(" "),e("div",{staticClass:"language-r extra-class"},[e("pre",{pre:!0,attrs:{class:"language-r"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" dir"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("pattern"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('".zip$"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    unzip"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),e("p",[a._v("The "),e("code",[a._v("dir")]),a._v(" function produces a character vector of the names of the files in a directory matching the regex pattern specified by "),e("code",[a._v("pattern")]),a._v(". This vector is looped through with index "),e("code",[a._v("i")]),a._v(", using the "),e("code",[a._v("unzip")]),a._v(" function to extract each zip archive.")])])}),[],!1,null,null,null);t.default=r.exports}}]);