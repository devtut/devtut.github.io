(window.webpackJsonp=window.webpackJsonp||[]).push([[1737],{2145:function(e,s,t){"use strict";t.r(s);var a=t(31),r=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"escape-sequences"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#escape-sequences"}},[e._v("#")]),e._v(" Escape Sequences")]),e._v(" "),t("h2",{attrs:{id:"entering-special-characters-in-strings-and-regular-expressions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#entering-special-characters-in-strings-and-regular-expressions"}},[e._v("#")]),e._v(" Entering special characters in strings and regular expressions")]),e._v(" "),t("p",[e._v("Most printable characters can be included in string or regular expression literals just as they are, e.g.")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ポケモン"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// a valid string")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" regExp "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("[Α-Ωα-ω]")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// matches any Greek letter without diacritics")]),e._v("\n\n")])])]),t("p",[e._v("In order to add arbitrary characters to a string or regular expression, including non-printable ones, one has to use "),t("strong",[e._v("escape sequences")]),e._v('. Escape sequences consist of a backslash ("") followed by one or more other characters. To write an escape sequence for a particular character, one typically (but not always) needs to know its hexadecimal '),t("a",{attrs:{href:"http://stackoverflow.com/documentation/javascript/1041/strings/19135/character-code#t=201608112028595843342",target:"_blank",rel:"noopener noreferrer"}},[e._v("character code"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("JavaScript provides a number of different ways to specify escape sequences, as documented in the examples in this topic. For instance, the following escape sequences all denote the same character: the "),t("strong",[e._v("line feed")]),e._v(" (Unix newline character), with character code U+000A.")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("\\n")])]),e._v(" "),t("li",[t("code",[e._v("\\x0a")])]),e._v(" "),t("li",[t("code",[e._v("\\u000a")])]),e._v(" "),t("li",[t("code",[e._v("\\u{a}")]),e._v(" new in ES6, only in strings")]),e._v(" "),t("li",[t("code",[e._v("\\012")]),e._v(" forbidden in string literals in strict mode and in template strings")]),e._v(" "),t("li",[t("code",[e._v("\\cj")]),e._v(" only in regular expressions")])]),e._v(" "),t("h2",{attrs:{id:"escape-sequence-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#escape-sequence-types"}},[e._v("#")]),e._v(" Escape sequence types")]),e._v(" "),t("h3",{attrs:{id:"single-character-escape-sequences"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#single-character-escape-sequences"}},[e._v("#")]),e._v(" Single character escape sequences")]),e._v(" "),t("p",[e._v("Some escape sequences consist of a backslash followed by a single character.")]),e._v(" "),t("p",[e._v("For example, in "),t("code",[e._v('alert("Hello\\nWorld");')]),e._v(", the escape sequence "),t("code",[e._v("\\n")]),e._v(' is used to introduce a newline in the string parameter, so that the words "Hello" and "World" are displayed in consecutive lines.')]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Escape sequence")]),e._v(" "),t("th",[e._v("Character")]),e._v(" "),t("th",[e._v("Unicode")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[t("code",[e._v("\\b")]),e._v(" (only in strings, not in regular expressions)")]),e._v(" "),t("td",[e._v("backspace")]),e._v(" "),t("td",[e._v("U+0008")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("\\t")])]),e._v(" "),t("td",[e._v("horizontal tab")]),e._v(" "),t("td",[e._v("U+0009")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("\\n")])]),e._v(" "),t("td",[e._v("line feed")]),e._v(" "),t("td",[e._v("U+000A")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("\\v")])]),e._v(" "),t("td",[e._v("vertical tab")]),e._v(" "),t("td",[e._v("U+000B")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("\\f")])]),e._v(" "),t("td",[e._v("form feed")]),e._v(" "),t("td",[e._v("U+000C")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("\\r")])]),e._v(" "),t("td",[e._v("carriage return")]),e._v(" "),t("td",[e._v("U+000D")])])])]),e._v(" "),t("p",[e._v("Additionally, the sequence "),t("code",[e._v("\\0")]),e._v(", when not followed by a digit between 0 and 7, can be used to escape the null character (U+0000).")]),e._v(" "),t("p",[e._v("The sequences "),t("code",[e._v("\\\\")]),e._v(", "),t("code",[e._v("\\'")]),e._v(" and "),t("code",[e._v('\\"')]),e._v(" are used to escape the character that follows the backslash. While similar to non-escape sequences, where the leading backslash is simply ignored (i.e. "),t("code",[e._v("\\?")]),e._v(" for "),t("code",[e._v("?")]),e._v("), they are explicitly treated as single character escape sequences inside strings as per the specification.")]),e._v(" "),t("h3",{attrs:{id:"hexadecimal-escape-sequences"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hexadecimal-escape-sequences"}},[e._v("#")]),e._v(" Hexadecimal escape sequences")]),e._v(" "),t("p",[e._v("Characters with codes between 0 and 255 can be represented with an escape sequence where "),t("code",[e._v("\\x")]),e._v(" is followed by the 2-digit hexadecimal character code. For example, the non-breaking space character has code 160 or A0 in base 16, and so it can be written as "),t("code",[e._v("\\xa0")]),e._v(".")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ONE\\xa0LINE"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ONE and LINE with a non-breaking space between them")]),e._v("\n\n")])])]),t("p",[e._v("For hex digits above 9, the letters "),t("code",[e._v("a")]),e._v(" to "),t("code",[e._v("f")]),e._v(" are used, in lowercase or uppercase without distinction.")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" regExp1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("[\\x00-xff]")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// matches any character between U+0000 and U+00FF")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" regExp2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("[\\x00-xFF]")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// same as above")]),e._v("\n\n")])])]),t("h3",{attrs:{id:"_4-digit-unicode-escape-sequences"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-digit-unicode-escape-sequences"}},[e._v("#")]),e._v(" 4-digit Unicode escape sequences")]),e._v(" "),t("p",[e._v("Characters with codes between 0 and 65535 (2"),t("sup",[e._v("16")]),e._v(" - 1) can be represented with an escape sequence where "),t("code",[e._v("\\u")]),e._v(" is followed by the 4-digit hexadecimal character code.")]),e._v(" "),t("p",[e._v('For example, the Unicode standard defines the right arrow character ("→") with the number 8594, or 2192 in hexadecimal format. So an escape sequence for it would be '),t("code",[e._v("\\u2192")]),e._v(".")]),e._v(" "),t("p",[e._v('This produces the string "A → B":')]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"A \\u2192 B"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n")])])]),t("p",[e._v("For hex digits above 9, the letters "),t("code",[e._v("a")]),e._v(" to "),t("code",[e._v("f")]),e._v(" are used, in lowercase or uppercase without distinction.\nHexadecimal codes shorter than 4 digits must be left-padded with zeros: "),t("code",[e._v("\\u007A")]),e._v(' for the small letter "z".')]),e._v(" "),t("h3",{attrs:{id:"curly-bracket-unicode-escape-sequences"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#curly-bracket-unicode-escape-sequences"}},[e._v("#")]),e._v(" Curly bracket Unicode escape sequences")]),e._v(" "),t("p",[e._v("ES6 extends Unicode support to the full code range from 0 to 0x10FFFF.\nIn order to escape characters with code greater than 2"),t("sup",[e._v("16")]),e._v(" - 1, a new syntax for escape sequences was introduced:")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("\\u"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("??")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n")])])]),t("p",[e._v("Where the code in curly braces is hexadecimal representation of the code point value, e.g.")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("alert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Look! \\u{1f440}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Look! 👀")]),e._v("\n\n")])])]),t("p",[e._v("In the example above, the code "),t("code",[e._v("1f440")]),e._v(" is the hexadecimal representation of the character code of the Unicode Character "),t("strong",[e._v("Eyes")]),e._v(".")]),e._v(" "),t("p",[e._v("Note that the code in curly braces may contain any number of hex digits, as long the value does not exceed 0x10FFFF. For hex digits above 9, the letters "),t("code",[e._v("a")]),e._v(" to "),t("code",[e._v("f")]),e._v(" are used, in lowercase or uppercase without distinction.")]),e._v(" "),t("p",[e._v("Unicode escape sequences with curly braces only work inside strings, not inside regular expressions!")]),e._v(" "),t("h3",{attrs:{id:"octal-escape-sequences"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#octal-escape-sequences"}},[e._v("#")]),e._v(" Octal escape sequences")]),e._v(" "),t("p",[e._v("Octal escape sequences are deprecated as of ES5, but they are still supported inside regular expressions and in non-strict mode also inside non-template strings. An octal escape sequence consists of one, two or three octal digits, with value between 0 and 377"),t("sub",[e._v("8")]),e._v(" = 255.")]),e._v(" "),t("p",[e._v('For example, the capital letter "E" has character code 69, or 105 in base 8. So it can be represented with the escape sequence '),t("code",[e._v("\\105")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[e._v("\\105scape")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[e._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Fun with Escape Sequences"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// true")]),e._v("\n\n")])])]),t("p",[e._v("In strict mode, octal escape sequences are not allowed inside strings and will produce a syntax error. It is worth to note that "),t("code",[e._v("\\0")]),e._v(", unlike "),t("code",[e._v("\\00")]),e._v(" or "),t("code",[e._v("\\000")]),e._v(", is "),t("strong",[e._v("not")]),e._v(" considered an octal escape sequence, and is thus still allowed inside strings (even template strings) in strict mode.")]),e._v(" "),t("h3",{attrs:{id:"control-escape-sequences"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#control-escape-sequences"}},[e._v("#")]),e._v(" Control escape sequences")]),e._v(" "),t("p",[e._v("Some escape sequences are only recognized inside regular expression literals (not in strings). These can be used to escape characters with codes between 1 and 26 (U+0001–U+001A). They consist of a single letter A–Z (case makes no difference) preceded by "),t("code",[e._v("\\c")]),e._v(". The alphabetic position of the letter after "),t("code",[e._v("\\c")]),e._v(" determines the character code.")]),e._v(" "),t("p",[e._v("For example, in the regular expression")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token template-string"}},[t("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("/\\cG/")]),t("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")])]),e._v("\n\n")])])]),t("p",[e._v('The letter "G" (the 7th letter in the alphabet) refers to the character U+0007, and thus')]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token template-string"}},[t("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("/\\cG")]),t("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("String"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("fromCharCode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// true")]),e._v("\n\n")])])]),t("h4",{attrs:{id:"remarks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[e._v("#")]),e._v(" Remarks")]),e._v(" "),t("p",[e._v("Not everything that starts with a backslash is an escape sequence.\nMany characters are just not useful to escape sequences, and will simply cause a preceding backslash to be ignored.")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"\\H\\e\\l\\l\\o"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// true")]),e._v("\n\n")])])]),t("p",[e._v('On the other hand, some characters like "u" and "x" will cause a syntax error when used improperly after a backslash.\nThe following is not a valid string literal because it contains the Unicode escape sequence prefix '),t("code",[e._v("\\u")]),e._v(" followed by a character that is not a valid hexadecimal digit nor a curly brace:")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"C:\\Windows\\System32\\updatehandlers.dll"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// SyntaxError")]),e._v("\n\n")])])]),t("p",[e._v("A backslash at the end of a line inside a string does not introduce an escape sequence, but indicates line continuation, i.e.")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"contin\\\nuation"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("===")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"continuation"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// true")]),e._v("\n\n")])])]),t("h3",{attrs:{id:"similarity-to-other-formats"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#similarity-to-other-formats"}},[e._v("#")]),e._v(" Similarity to other formats")]),e._v(" "),t("p",[e._v("While escape sequences in JavaScript bear resemblance to other languages and formats, like C++, Java, JSON, etc. there will often be critical differences in the details. When in doubt, be sure to test that your code behaves as expected, and consider checking the language specification.")])])}),[],!1,null,null,null);s.default=r.exports}}]);