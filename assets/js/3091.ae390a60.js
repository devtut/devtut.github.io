(window.webpackJsonp=window.webpackJsonp||[]).push([[3091],{3499:function(s,e,t){"use strict";t.r(e);var a=t(31),n=Object(a.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"message-passing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#message-passing"}},[s._v("#")]),s._v(" Message Passing")]),s._v(" "),t("h2",{attrs:{id:"introduction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[s._v("#")]),s._v(" Introduction")]),s._v(" "),t("p",[s._v("In "),t("strong",[s._v("Object Oriented Design")]),s._v(", objects "),t("strong",[s._v("receive")]),s._v(" messages and "),t("strong",[s._v("reply")]),s._v(" to them. In Ruby, sending a message is "),t("strong",[s._v("calling a method")]),s._v(" and result of that method is the reply.")]),s._v(" "),t("p",[s._v("In Ruby message passing is dynamic. When a message arrives rather than knowing exactly how to reply to it Ruby uses a predefined set of rules to find a method that can reply to it. We can use these rules to interrupt and reply to the message, send it to another object or modify it among other actions.")]),s._v(" "),t("p",[s._v("Each time an object receives a message Ruby checks:")]),s._v(" "),t("ol",[t("li",[s._v("If this object has a singleton class and it can reply to this message.")]),s._v(" "),t("li",[s._v("Looks up this object's class then class' ancestors chain.")]),s._v(" "),t("li",[s._v("One by one checks if a method is available on this ancestor and moves up the chain.")])]),s._v(" "),t("h2",{attrs:{id:"message-passing-through-inheritance-chain"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#message-passing-through-inheritance-chain"}},[s._v("#")]),s._v(" Message Passing Through Inheritance Chain")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Example")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("example_method")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":example")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("subexample_method")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":example")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("not_missed_method")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":example")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method_missing")])]),s._v(" name\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":example")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":missing_example_method")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":example")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":missing_subexample_method")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":subexample")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":not_missed_method")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SubExample")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Example")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("subexample_method")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":subexample")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method_missing")])]),s._v(" name\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":subexample")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":missing_subexample_method")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":subexample")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":not_missed_method")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\ns "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Subexample")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("\n\n")])])]),t("p",[s._v("To find a suitable method for "),t("code",[s._v("SubExample#subexample_method")]),s._v(" Ruby first looks at ancestors chain of "),t("code",[s._v("SubExample")])]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SubExample")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ancestors "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => [SubExample, Example, Object, Kernel, BasicObject]")]),s._v("\n\n")])])]),t("p",[s._v("It starts from "),t("code",[s._v("SubExample")]),s._v(". If we send "),t("code",[s._v("subexample_method")]),s._v(" message Ruby chooses the one available one SubExample and ignores "),t("code",[s._v("Example#subexample_method")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("subexample_method "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => :subexample")]),s._v("\n\n")])])]),t("p",[s._v("After "),t("code",[s._v("SubExample")]),s._v(" it checks "),t("code",[s._v("Example")]),s._v(". If we send "),t("code",[s._v("example_method")]),s._v(" Ruby checks if "),t("code",[s._v("SubExample")]),s._v(" can reply to it or not and since it can't Ruby goes up the chain and looks into "),t("code",[s._v("Example")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("example_method "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => :example")]),s._v("\n\n")])])]),t("p",[s._v("After Ruby checks all defined methods then it runs "),t("code",[s._v("method_missing")]),s._v(" to see if it can reply or not. If we send "),t("code",[s._v("missing_subexample_method")]),s._v(" Ruby won't be able to find a defined method on "),t("code",[s._v("SubExample")]),s._v(" so it moves up to "),t("code",[s._v("Example")]),s._v(". It can't find a defined method on "),t("code",[s._v("Example")]),s._v(" or any other class higher in chain either. Ruby starts over and runs "),t("code",[s._v("method_missing")]),s._v(". "),t("code",[s._v("method_missing")]),s._v(" of "),t("code",[s._v("SubExample")]),s._v(" can reply to "),t("code",[s._v("missing_subexample_method")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("missing_subexample_method "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => :subexample")]),s._v("\n\n")])])]),t("p",[s._v("However if a method is defined Ruby uses defined version even if it is higher in the chain. For example if we send "),t("code",[s._v("not_missed_method")]),s._v(" even though "),t("code",[s._v("method_missing")]),s._v(" of "),t("code",[s._v("SubExample")]),s._v(" can reply to it Ruby walks up on "),t("code",[s._v("SubExample")]),s._v(" because it doesn't have a defined method with that name and looks into "),t("code",[s._v("Example")]),s._v(" which has one.")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("not_missed_method "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => :example")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"message-passing-through-module-composition"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#message-passing-through-module-composition"}},[s._v("#")]),s._v(" Message Passing Through Module Composition")]),s._v(" "),t("p",[s._v("Ruby moves up on ancestors chain of an object. This chain can contain both modules and classes. Same rules about moving up the chain apply to modules as well.")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Example")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("module")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Prepended")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("initialize")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("args\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":default")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("empty"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("module")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FirstIncluded")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":first")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("module")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SecondIncluded")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":second")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SubExample")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Example")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("prepend")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Prepended")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FirstIncluded")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SecondIncluded")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("initialize")])]),s._v(" data "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":subexample")]),s._v("\n    puts data\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SubExample")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ancestors "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => [Prepended, SubExample, SecondIncluded, FirstIncluded, Example, Object, Kernel, BasicObject]")]),s._v("\n\ns "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SubExample")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => :default")]),s._v("\ns"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("foo "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => :second")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"interrupting-messages"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#interrupting-messages"}},[s._v("#")]),s._v(" Interrupting Messages")]),s._v(" "),t("p",[s._v("There are two ways to interrupt messages.")]),s._v(" "),t("ul",[t("li",[s._v("Use "),t("code",[s._v("method_missing")]),s._v(" to interrupt any non defined message.")]),s._v(" "),t("li",[s._v("Define a method in middle of a chain to intercept the message")])]),s._v(" "),t("p",[s._v("After interrupting messages, it is possible to:")]),s._v(" "),t("ul",[t("li",[s._v("Reply to them.")]),s._v(" "),t("li",[s._v("Send them somewhere else.")]),s._v(" "),t("li",[s._v("Modify the message or its result.")])]),s._v(" "),t("p",[s._v("Interrupting via "),t("code",[s._v("method_missing")]),s._v(" and replying to message:")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Example")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@foo")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method_missing")])]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" data\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unless")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("to_s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/=$/")]),s._v("\n    name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("to_s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sub"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/=$/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    instance_variable_set "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"@'),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" data\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\ne "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Example")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("\n\ne"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":foo")]),s._v("\ne"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("foo "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => :foo")]),s._v("\n\n")])])]),t("p",[s._v("Intercepting message and modifying it:")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Example")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("initialize")])]),s._v(" title"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" body\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SubExample")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Example")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),t("p",[s._v('Now let\'s imagine our data is "title:body" and we have to split them before calling '),t("code",[s._v("Example")]),s._v(". We can define "),t("code",[s._v("initialize")]),s._v(" on "),t("code",[s._v("SubExample")]),s._v(".")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SubExample")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Example")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("initialize")])]),s._v(" raw_data\n    processed_data "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" raw_data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("split "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('":"')]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),s._v(" processed_data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" processed_data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),t("p",[s._v("Intercepting message and sending it to another object:")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ObscureLogicProcessor")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("process")])]),s._v(" data\n    "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":ok")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NormalLogicProcessor")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("process")])]),s._v(" data\n    "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":not_ok")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("WrapperProcessor")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NormalLogicProcessor")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("process")])]),s._v(" data\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ObscureLogicProcessor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("process data "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("obscure"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);