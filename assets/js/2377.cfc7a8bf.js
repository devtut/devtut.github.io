(window.webpackJsonp=window.webpackJsonp||[]).push([[2377],{2785:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"best-practices"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#best-practices"}},[t._v("#")]),t._v(" Best Practices")]),t._v(" "),a("h2",{attrs:{id:"using-perl-critic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-perl-critic"}},[t._v("#")]),t._v(" Using Perl::Critic")]),t._v(" "),a("p",[t._v("If you'd like to start implementing best practices, for yourself or your team, then "),a("a",{attrs:{href:"https://metacpan.org/pod/Perl::Critic",target:"_blank",rel:"noopener noreferrer"}},[t._v("Perl::Critic"),a("OutboundLink")],1),t._v(" is the best place to start. The module is based on the "),a("strong",[a("a",{attrs:{href:"http://shop.oreilly.com/product/9780596001735.do",target:"_blank",rel:"noopener noreferrer"}},[t._v("Perl Best Practices"),a("OutboundLink")],1)]),t._v(" book by Damien Conway and does a fairly good job implementing the suggestions made therein.")]),t._v(" "),a("blockquote"),t._v(" "),a("p",[a("strong",[t._v("Note:")]),t._v(" "),a("strong",[t._v("I should mention (and Conway himself says in the book) that these are suggestions. I've found the book provides solid reasoning in most cases, though I certainly don't agree with all of them. The important thing to remember is that, whatever practices you decide to adopt, you remain consistent. The more predictable your code is, the easier it will be to maintain.")])]),t._v(" "),a("p",[t._v("You can also try out Perl::Critic through your browser at "),a("a",{attrs:{href:"http://perlcritic.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("perlcritic.com"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[t._v("#")]),t._v(" Installation")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[t._v("cpan Perl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Critic\n\n")])])]),a("p",[t._v("This will install the basic ruleset and a "),a("strong",[t._v("perlcritic")]),t._v(" script that can be called from the command line.")]),t._v(" "),a("h3",{attrs:{id:"basic-usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basic-usage"}},[t._v("#")]),t._v(" Basic Usage")]),t._v(" "),a("p",[t._v("The "),a("a",{attrs:{href:"https://metacpan.org/pod/distribution/Perl-Critic/bin/perlcritic",target:"_blank",rel:"noopener noreferrer"}},[t._v("CPAN doc for perlcritic"),a("OutboundLink")],1),t._v(" contains full documentation, so I will only be going over the most common use cases to get you started. Basic usage is to simply call perlcritic on the file:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\nperlcritic -1 /path/to/script.pl\n\n")])])]),a("p",[t._v("perlcritic works both on scripts and on modules. The "),a("strong",[t._v("-1")]),t._v(" refers to the severity level of the rules you want to run against the script. There are five levels that correspond to how much Perl::Critic will pick apart your code.")]),t._v(" "),a("p",[a("strong",[t._v("-5")]),t._v(" is the most gentle and will only warn about potentially dangerous problems that could cause unexpected results. "),a("strong",[t._v("-1")]),t._v(" is the most brutal and will complain about things as small as your code being tidy or not. In my experience, keeping code compliant with level 3 is good enough to keep out of danger without getting too persnickety.")]),t._v(" "),a("p",[t._v("By default, any failures will list the reason and severity the rule triggers on:")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[t._v("perlcritic "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("verbose "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("to"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("pl\n\nDebugging module loaded at line "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" column "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("  You"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ve loaded Data::Dumper, which probably shouln'")]),t._v("t be loaded in production"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Severity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nPrivate subroutine"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("method "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'_sub_name'")]),t._v(" declared but "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" used at line "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("58")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" column "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("  Eliminate dead code"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Severity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nBacktick operator used at line "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("230")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" column "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("37")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("  Use IPC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Open3 instead"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Severity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nBacktick operator used at line "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("327")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" column "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("  Use IPC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Open3 instead"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Severity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"viewing-policies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#viewing-policies"}},[t._v("#")]),t._v(" Viewing Policies")]),t._v(" "),a("p",[t._v("You can quickly see which rules are being triggered and why by utilizing perlcritic's "),a("strong",[t._v("--verbose")]),t._v(" option:")]),t._v(" "),a("p",[t._v("Setting the level to 8 will show you the rule that triggered a warning:")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[t._v("perlcritic "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("verbose "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("to"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("pl\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Bangs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ProhibitDebuggingModules"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Debugging module loaded at line "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" column "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Severity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Subroutines"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ProhibitUnusedPrivateSubroutines"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Private subroutine"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("method "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'_sub_name'")]),t._v(" declared but "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" used at line "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("58")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" column "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Severity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("InputOutput"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ProhibitBacktickOperators"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Backtick operator used at line "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("230")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" column "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("37")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Severity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("InputOutput"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ProhibitBacktickOperators"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Backtick operator used at line "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("327")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" column "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Severity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("While a level of 11 will show the specific reasons why the rule exists:")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[t._v("perlcritic "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("verbose "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("to"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("pl\n\nDebugging module loaded at line "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" near "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'use Data::Dumper;'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("\n  Bangs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ProhibitDebuggingModules "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Severity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    This policy prohibits loading common debugging modules like the\n    Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Dumper manpage"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("\n\n    While such modules are incredibly useful during development "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v("\n    debugging"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" they should probably "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" be loaded in production "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v(" If this\n    policy is violated"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" it probably means you forgot to remove a "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("`use\n    Data::Dumper;' line that you had added when you were debugging.\nPrivate subroutine/method '_svn_revisions_differ' declared but not used at line 58, near 'sub _sub_name {'.\n  Subroutines::ProhibitUnusedPrivateSubroutines (Severity: 3)\n    By convention Perl authors (like authors in many other languages)\n    indicate private methods and variables by inserting a leading underscore\n    before the identifier. This policy catches such subroutines which are\n    not used in the file which declares them.\n\n    This module defines a 'use' of a subroutine as a subroutine or method\n    call to it (other than from inside the subroutine itself), a reference\n    to it (i.e. `")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$foo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("&_foo")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'), a `goto'")]),t._v(" to it outside the subroutine\n    itself "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("`goto &_foo'), or the use of the subroutine's name as an\n    even-numbered argument to `")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" overload'"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("\nBacktick operator used at line "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("230")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" near "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my $filesystem_diff = join q{}, `diff $trunk_checkout $staging_checkout`;'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("\n  InputOutput"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ProhibitBacktickOperators "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Severity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Backticks are super"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("convenient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" especially "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" CGI programs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" but I find\n    that they make a lot of noise by filling up STDERR with messages "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v("\n    they fail"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v(" I think its better to "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" IPC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Open3 to trap all the output\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" let the application decide what to "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" with it"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" IPC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Open3 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'open3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$SIG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("CHLD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'IGNORE'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@output")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("`some_command`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#not ok")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$writer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$reader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$err")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        open3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$writer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$reader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$err")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some_command'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#ok;")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@output")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$reader")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Output here")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@errors")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$err")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Errors here, instead of the console")]),t._v("\nBacktick operator used at line "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("327")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" near "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my $output = `$cmd`;'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("\n  InputOutput"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ProhibitBacktickOperators "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Severity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Backticks are super"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("convenient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" especially "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" CGI programs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" but I find\n    that they make a lot of noise by filling up STDERR with messages "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v("\n    they fail"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v(" I think its better to "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" IPC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Open3 to trap all the output\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" let the application decide what to "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" with it"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" IPC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Open3 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'open3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$SIG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("CHLD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'IGNORE'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@output")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("`some_command`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#not ok")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$writer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$reader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$err")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        open3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$writer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$reader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$err")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some_command'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#ok;")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@output")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$reader")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Output here")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@errors")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$err")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Errors here, instead of the console")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"ignoring-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ignoring-code"}},[t._v("#")]),t._v(" Ignoring Code")]),t._v(" "),a("p",[t._v("There will be times when you can't comply with a Perl::Critic policy. In those cases, you can wrap special comments, \""),a("strong",[t._v("## use critic()")]),t._v('" and "'),a("strong",[t._v("## no critic")]),t._v('", around your code to make Perl::Critic ignore them. Simply add the rules you want to ignore in the parentheses (multiples can be separated by a comma).')]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##no critic qw(InputOutput::ProhibitBacktickOperator)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$filesystem_diff")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" join "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("q{}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("`diff $trunk_checkout $staging_checkout`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## use critic")]),t._v("\n\n")])])]),a("p",[t._v("Make sure to wrap the entire code block or Critic may not recognize the ignore statement.")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## no critic (Subroutines::ProhibitExcessComplexity)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sub")]),t._v(" no_time_to_refactor_this")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## use critic")]),t._v("\n\n")])])]),a("p",[t._v("Note that there are certain policies that are run on the document level and cannot be exempted this way. However, they can be turned off...")]),t._v(" "),a("h3",{attrs:{id:"creating-permanent-exceptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-permanent-exceptions"}},[t._v("#")]),t._v(" Creating Permanent Exceptions")]),t._v(" "),a("p",[t._v("Using ## no critic() is nice, but as you start to adopt coding standards, you will likely want to make permanent exceptions to certain rules. You can do this by creating a "),a("strong",[t._v(".perlcriticrc")]),t._v(" configuration file.")]),t._v(" "),a("p",[t._v("This file will allow you to customize not only which policies are run, but how they are run. Using it is as simple as placing the file in your home directory (in Linux, unsure if it's the same place on Windows). Or, you can specify the config file when running the command using the "),a("strong",[t._v("--profile")]),t._v(" option:")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[t._v("perlcritic "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("profile"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/to/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("perlcriticrc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("to"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("pl\n\n")])])]),a("p",[t._v("Again, the "),a("a",{attrs:{href:"https://metacpan.org/pod/distribution/Perl-Critic/bin/perlcritic",target:"_blank",rel:"noopener noreferrer"}},[t._v("perlcritic CPAN page"),a("OutboundLink")],1),t._v(" has a full list of these options. I will list some examples from my own config file:")]),t._v(" "),a("p",[t._v("Apply basic settings:")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#very very harsh")]),t._v("\nseverity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\ncolor"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("severity"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("medium "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bold yellow\ncolor"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("severity"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("low "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" yellow\ncolor"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("severity"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("lowest "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bold blue\n\n")])])]),a("p",[t._v("Disable a rule (note the dash in front of the policy name):")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# do not require version control numbers")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Miscellanea"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("RequireRcsKeywords"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# pod spelling is too over-zealous, disabling")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Documentation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("PodSpelling"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])]),a("p",[t._v("Modifying a rule:")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# do not require checking for print failure ( false positives for printing to stdout, not filehandle )")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("InputOutput"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("RequireCheckedSyscalls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    functions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" open close\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Allow specific unused subroutines for moose builders")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Subroutines"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ProhibitUnusedPrivateSubroutines"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nprivate_name_regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token filehandle symbol"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("build_"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("w"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"conclusion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[t._v("#")]),t._v(" Conclusion")]),t._v(" "),a("p",[t._v("Properly utilized, Perl::Critic can be an invaluable tool to help teams keep their coding consistent and easily maintainable no matter what best practice policies you employ.")])])}),[],!1,null,null,null);s.default=n.exports}}]);