(window.webpackJsonp=window.webpackJsonp||[]).push([[2409],{2817:function(t,a,s){"use strict";s.r(a);var e=s(31),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"split-a-string-on-unquoted-separators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#split-a-string-on-unquoted-separators"}},[t._v("#")]),t._v(" Split a string on unquoted separators")]),t._v(" "),s("h2",{attrs:{id:"parse-line"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parse-line"}},[t._v("#")]),t._v(" parse_line()")]),t._v(" "),s("p",[t._v("Using "),s("code",[t._v("parse_line()")]),t._v(" of "),s("a",{attrs:{href:"http://perldoc.perl.org/Text/ParseWords.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Text::ParseWords"),s("OutboundLink")],1),t._v(":")]),t._v(" "),s("div",{staticClass:"language-perl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-perl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.010")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" Text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ParseWords"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$line")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('q{"a quoted, comma", word1, word2}')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@parsed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parse_line"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$line")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("say")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@parsed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),s("p",[t._v("Output:")]),t._v(" "),s("div",{staticClass:"language-perl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-perl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a quoted, comma"')]),t._v("\n word1\n word2\n\n")])])]),s("h2",{attrs:{id:"text-csv-or-text-csv-xs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#text-csv-or-text-csv-xs"}},[t._v("#")]),t._v(" Text::CSV or Text::CSV_XS")]),t._v(" "),s("div",{staticClass:"language-perl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-perl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" Text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("CSV"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Can use Text::CSV which will switch to _XS if installed")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$sep_char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$csv")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("CSV"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("new"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("sep_char "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$sep_char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$line")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('q{"a quoted, comma", word1, word2}')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$csv")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("parse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$line")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@fields")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$csv")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("fields"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" join"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@fields")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),s("p",[t._v("Output:")]),t._v(" "),s("div",{staticClass:"language-perl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-perl"}},[s("code",[t._v("a quoted"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" comma\n word1\n word2\n\n")])])]),s("h3",{attrs:{id:"notes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#notes"}},[t._v("#")]),t._v(" NOTES")]),t._v(" "),s("li",[t._v("\nBy default, Text::CSV does not strip whitespace around separator character, the way `Text::ParseWords` does. However, adding `allow_whitespace=>1` to constructor attributes achieves that effect.\n"),s("div",{staticClass:"language-perl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-perl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$csv")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("CSV_XS"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("new"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("sep_char "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$sep_char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" allow_whitespace"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n\n")])])]),s("p",[t._v("Output:")]),t._v(" "),s("div",{staticClass:"language-perl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-perl"}},[s("code",[t._v("a quoted"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" comma\nword1\nword2\n\n")])])])]),t._v(" "),s("li",[t._v("\nThe library supports escaping special characters (quotes, separators)\n")]),t._v(" "),s("li",[t._v("\nThe library supports configurable separator character, quote character, and escape character\n")]),t._v(" "),s("p",[t._v("Documentatoin: "),s("a",{attrs:{href:"http://search.cpan.org/perldoc/Text::CSV",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://search.cpan.org/perldoc/Text::CSV"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);