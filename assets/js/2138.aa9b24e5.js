(window.webpackJsonp=window.webpackJsonp||[]).push([[2138],{2546:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"performance-tuning"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#performance-tuning"}},[t._v("#")]),t._v(" Performance Tuning")]),t._v(" "),a("h2",{attrs:{id:"add-the-correct-index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-the-correct-index"}},[t._v("#")]),t._v(" Add the correct index")]),t._v(" "),a("p",[t._v('This is a huge topic, but it is also the most important "performance" issue.')]),t._v(" "),a("p",[t._v('The main lesson for a novice is to learn of "composite" indexes.  Here\'s a quick example:')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("last_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" first_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("is excellent for these:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" last_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'...'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" first_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'...'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" last_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'...'")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- (order in WHERE does not matter)")]),t._v("\n\n")])])]),a("p",[t._v("but not for")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" first_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'...'")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- order in INDEX _does_ matter")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" last_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'...'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" first_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'...'")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('-- "OR" is a killer')]),t._v("\n\n")])])]),a("h2",{attrs:{id:"don-t-hide-in-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#don-t-hide-in-function"}},[t._v("#")]),t._v(" Don't hide in function")]),t._v(" "),a("p",[t._v("A common mistake is to hide an indexed column inside a function call.  For example, this can't be helped by an index:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2000-01-01'")]),t._v("\n\n")])])]),a("p",[t._v("Instead, given "),a("code",[t._v("INDEX(dt)")]),t._v(" then these may use the index:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" dt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2000-01-01'")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- if `dt` is datatype `DATE`")]),t._v("\n\n")])])]),a("p",[t._v("This works for "),a("code",[t._v("DATE")]),t._v(", "),a("code",[t._v("DATETIME")]),t._v(", "),a("code",[t._v("TIMESTAMP")]),t._v(", and even "),a("code",[t._v("DATETIME(6)")]),t._v(" (microseconds):")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" dt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2000-01-01'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" dt  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2000-01-01'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTERVAL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DAY")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"or"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#or"}},[t._v("#")]),t._v(" OR")]),t._v(" "),a("p",[t._v("In general "),a("code",[t._v("OR")]),t._v(" kills optimization.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("78")]),t._v("\n\n")])])]),a("p",[t._v("cannot use "),a("code",[t._v("INDEX(a,b)")]),t._v(", and may or may not use "),a("code",[t._v("INDEX(a), INDEX(b)")]),t._v(' via "index merge".  Index merge is better than nothing, but only barely.')]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\n")])])]),a("p",[t._v("is turned into")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("which "),a("strong",[t._v("may")]),t._v(" use an index with "),a("code",[t._v("x")]),t._v(" in it.")]),t._v(" "),a("h2",{attrs:{id:"set-the-cache-correctly"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-the-cache-correctly"}},[t._v("#")]),t._v(" Set the cache correctly")]),t._v(" "),a("p",[a("code",[t._v("innodb_buffer_pool_size")]),t._v(" should be about 70% of available RAM.")]),t._v(" "),a("h2",{attrs:{id:"negatives"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#negatives"}},[t._v("#")]),t._v(" Negatives")]),t._v(" "),a("p",[t._v("Here are some things that are not likely to help performance.  They stem from out-of-date information and/or naivety.")]),t._v(" "),a("ul",[a("li",[t._v("InnoDB has improved to the point where MyISAM is unlikely to be better.")]),t._v(" "),a("li",[a("code",[t._v("PARTITIONing")]),t._v(" rarely provides performance benefits; it can even hurt performance.")]),t._v(" "),a("li",[t._v("Setting "),a("code",[t._v("query_cache_size")]),t._v(" bigger than 100M will usually "),a("strong",[t._v("hurt")]),t._v(" performance.")]),t._v(" "),a("li",[t._v("Increasing lots of values in "),a("code",[t._v("my.cnf")]),t._v(" may lead to 'swapping', which is a "),a("strong",[t._v("serious")]),t._v(" performance problem.")]),t._v(" "),a("li",[t._v('"Prefix indexes" (such as '),a("code",[t._v("INDEX(foo(20))")]),t._v(") are generally useless.")]),t._v(" "),a("li",[a("code",[t._v("OPTIMIZE TABLE")]),t._v(" is almost always useless.  (And it involves locking the table.)")])]),t._v(" "),a("h2",{attrs:{id:"have-an-index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#have-an-index"}},[t._v("#")]),t._v(" Have an INDEX")]),t._v(" "),a("p",[t._v("The most important thing for speeding up a query on any non-tiny table is to have a suitable index.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e INDEX(a)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e INDEX(a)")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("78")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e INDEX(a,b) is more useful than INDEX(b,a)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("78")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e INDEX(a) or INDEX(b); no way to handle both ranges")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" x  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e INDEX(x)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e INDEX(x,y) in that order")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ASC")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e No index helps - because of mixing ASC and DESC")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"subqueries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#subqueries"}},[t._v("#")]),t._v(" Subqueries")]),t._v(" "),a("p",[t._v('Subqueries come in several flavors, and they have different optimization potential.  First, note that subqueries can be either "correlated" or "uncorrelated".  Correlated means that they depend on some value from outside the subquery.  This generally implies that the subquery '),a("strong",[t._v("must")]),t._v(" be re-evaluated for each outer value.")]),t._v(" "),a("p",[t._v("This correlated subquery is often pretty good.  Note: It must return at most 1 value.  It is often useful as an alternative to, though not necessarily faster than, a "),a("code",[t._v("LEFT JOIN")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" c\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" u "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" c\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" u "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" c\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" u "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n")])])]),a("p",[t._v("This is usually uncorrelated:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" a\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n")])])]),a("p",[t._v("Notes on the "),a("code",[t._v("FROM-SELECT")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("If it returns 1 row, great.")]),t._v(" "),a("li",[t._v('A good paradigm (again "1 row") is for the subquery to be '),a("code",[t._v("( SELECT @n := 0 )")]),t._v(", thereby initializing an `@variable for use in the rest or the query.")]),t._v(" "),a("li",[t._v("If it returns many rows "),a("strong",[t._v("and")]),t._v(" the "),a("code",[t._v("JOIN")]),t._v(" also is "),a("code",[t._v("( SELECT ... )")]),t._v(" with many rows, then efficiency can be terrible.  Pre-5.6, there was no index, so it became a "),a("code",[t._v("CROSS JOIN")]),t._v("; 5.6+ involves deducing the best index on the temp tables and then generating it, only to throw it away when finished with the "),a("code",[t._v("SELECT")]),t._v(".")])]),t._v(" "),a("h2",{attrs:{id:"join-group-by"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#join-group-by"}},[t._v("#")]),t._v(" JOIN + GROUP BY")]),t._v(" "),a("p",[t._v("A common problem that leads to an inefficient query goes something like this:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" a\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" b  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id\n\n")])])]),a("p",[t._v("First, the "),a("code",[t._v("JOIN")]),t._v(" expands the number of rows; then the "),a("code",[t._v("GROUP BY")]),t._v(" whittles it back down the the number of rows in "),a("code",[t._v("a")]),t._v(".")]),t._v(" "),a("p",[t._v("There may not be any good choices to solve this explode-implode problem.  One possible option is to turn the "),a("code",[t._v("JOIN")]),t._v(" into a correlated subquery in the "),a("code",[t._v("SELECT")]),t._v(".  This also eliminates the "),a("code",[t._v("GROUP BY")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"avoid-inefficient-constructs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#avoid-inefficient-constructs"}},[t._v("#")]),t._v(" Avoid inefficient constructs")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("turn into a "),a("code",[t._v("JOIN")])]),t._v(" "),a("p",[t._v("When possible, avoid "),a("code",[t._v("OR")]),t._v(".")]),t._v(" "),a("p",[t._v("Do not 'hide' an indexed column in a function, such as "),a("code",[t._v("WHERE DATE(x) = ...")]),t._v("; reformulate as "),a("code",[t._v("WHERE x = ...")])]),t._v(" "),a("p",[t._v("You can generally avoid "),a("code",[t._v("WHERE LCASE(name1) = LCASE(name2)")]),t._v(" by having a suitable collation.")]),t._v(" "),a("p",[t._v("Do no use "),a("code",[t._v("OFFSET")]),t._v(" for \"pagination\", instead 'remember where you left off'.")]),t._v(" "),a("p",[t._v("Avoid "),a("code",[t._v("SELECT * ...")]),t._v(" (unless debugging).")]),t._v(" "),a("p",[a("strong",[t._v("Note to Maria Deleva, Barranka, Batsu: This is a place holder; please make remove these items as you build full-scale examples.  After you have done the ones you can, I will move in to elaborate on the rest and/or toss them.")])]),t._v(" "),a("h4",{attrs:{id:"syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),a("li",[t._v("\nDon't use DISTINCT and GROUP BY in the same SELECT.\n")]),t._v(" "),a("li",[t._v('\nDon\'t paginate via OFFSET, "remember where you left off".\n')]),t._v(" "),a("li",[t._v("\nWHERE (a,b) = (22,33) does not optimize at all.\n")]),t._v(" "),a("li",[t._v("\nExplicitly say ALL or DISTINCT after UNION -- it reminds you pick between the faster ALL or the slower DISTINCT.\n")]),t._v(" "),a("li",[t._v("\nDon't use SELECT *, especially if you have TEXT or BLOB columns that you don't need. There is overhead in tmp tables and transmission.\n")]),t._v(" "),a("li",[t._v("\nIt is faster when the GROUP BY and ORDER BY can have exactly the same list.\n")]),t._v(" "),a("li",[t._v("\nDon't use FORCE INDEX; it may help today, but will probably hurt tomorrow.\n")]),t._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),a("p",[t._v("See also discussions about ORDER BY, LIKE, REGEXP, etc. Note: this needs editing with links and more Topics.")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mariadb.com/kb/en/mariadb/building-the-best-index-for-a-given-select/",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("Cookbook on building optimal indexes")]),a("OutboundLink")],1),t._v(".")])])}),[],!1,null,null,null);s.default=n.exports}}]);