(window.webpackJsonp=window.webpackJsonp||[]).push([[1139],{1547:function(e,t,a){"use strict";a.r(t);var r=a(31),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"merging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merging"}},[e._v("#")]),e._v(" Merging")]),e._v(" "),a("h2",{attrs:{id:"merge-one-branch-into-another"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge-one-branch-into-another"}},[e._v("#")]),e._v(" Merge one branch into another")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git merge incomingBranch\n\n")])])]),a("p",[e._v("This merges the branch "),a("code",[e._v("incomingBranch")]),e._v(" into the branch you are currently in. For example, if you are currently in "),a("code",[e._v("master")]),e._v(", then "),a("code",[e._v("incomingBranch")]),e._v(" will be merged into "),a("code",[e._v("master")]),e._v(".")]),e._v(" "),a("p",[e._v("Merging can create conflicts in some cases. If this happens, you will see the message "),a("code",[e._v("Automatic merge failed; fix conflicts and then commit the result.")]),e._v(" You will need to manually edit the conflicted files, or to undo your merge attempt, run:")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git merge --abort\n\n")])])]),a("h2",{attrs:{id:"automatic-merging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#automatic-merging"}},[e._v("#")]),e._v(" Automatic Merging")]),e._v(" "),a("p",[e._v("When the commits on two branches don't conflict, Git can automatically merge them:")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("~/Stack Overflow(branch:master) Â» git merge another_branch\nAuto-merging file_a\nMerge made by the "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'recursive'")]),e._v(" strategy.\n file_a | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\n")])])]),a("h2",{attrs:{id:"aborting-a-merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aborting-a-merge"}},[e._v("#")]),e._v(" Aborting a merge")]),e._v(" "),a("p",[e._v("After starting a merge, you might want to stop the merge and return everything to its pre-merge state. Use "),a("code",[e._v("--abort")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git merge --abort\n\n")])])]),a("h2",{attrs:{id:"keep-changes-from-only-one-side-of-a-merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keep-changes-from-only-one-side-of-a-merge"}},[e._v("#")]),e._v(" Keep changes from only one side of a merge")]),e._v(" "),a("p",[e._v("During a merge, you can pass "),a("code",[e._v("--ours")]),e._v(" or "),a("code",[e._v("--theirs")]),e._v(" to "),a("code",[e._v("git checkout")]),e._v(" to take all changes for a file from one side or the other of a merge.")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git checkout"),a("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --ours")]),e._v("   -- file1.txt # Use our version of file1, delete all their changes")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git checkout"),a("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --theirs")]),e._v(" -- file2.txt # Use their version of file2, delete all our changes")]),e._v("\n\n")])])]),a("h2",{attrs:{id:"merge-with-a-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge-with-a-commit"}},[e._v("#")]),e._v(" Merge with a commit")]),e._v(" "),a("p",[e._v("Default behaviour is when the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. Use "),a("code",[e._v("--no-ff")]),e._v(" to resolve.")]),e._v(" "),a("p",[a("code",[e._v('git merge <branch_name> --no-ff -m "<commit message>"')])]),e._v(" "),a("h2",{attrs:{id:"finding-all-branches-with-no-merged-changes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finding-all-branches-with-no-merged-changes"}},[e._v("#")]),e._v(" Finding all branches with no merged changes")]),e._v(" "),a("p",[e._v("Sometimes you might have branches lying around that have already had their changes merged into master. This finds all branches that are not "),a("code",[e._v("master")]),e._v(" that have no unique commits as compared to "),a("code",[e._v("master")]),e._v(". This is very useful for finding branches that were not deleted after the PR was merged into master.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\nfor branch in $(git branch -r) ; do\n   [ "${branch}" != "origin/master" ] && [ $(git diff master...${branch} | wc -l) -eq 0 ] && echo -e `git show --pretty=format:"%ci %cr" $branch | head -n 1`\\\\t$branch\n done | sort -r\n\n')])])]),a("h4",{attrs:{id:"syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[e._v("#")]),e._v(" Syntax")]),e._v(" "),a("ul",[a("li",[e._v("git merge "),a("strong",[e._v("another_branch")]),e._v(" [options]")]),e._v(" "),a("li",[e._v("git merge "),a("strong",[e._v("--abort")])])]),e._v(" "),a("h4",{attrs:{id:"parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[e._v("#")]),e._v(" Parameters")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Parameter")]),e._v(" "),a("th",[e._v("Details")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[a("code",[e._v("-m")])]),e._v(" "),a("td",[e._v("Message to be included in the merge commit")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("-v")])]),e._v(" "),a("td",[e._v("Show verbose output")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("--abort")])]),e._v(" "),a("td",[e._v("Attempt to revert all files back to their state")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("--ff-only")])]),e._v(" "),a("td",[e._v("Aborts instantly when a merge-commit would be required")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("--no-ff")])]),e._v(" "),a("td",[e._v("Forces creation of a merge-commit, even if it wasn't mandatory")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("--no-commit")])]),e._v(" "),a("td",[e._v("Pretends the merge failed to allow inspection and tweaking of the result")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("--stat")])]),e._v(" "),a("td",[e._v("Show a diffstat after merge completion")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("-n")]),e._v("/"),a("code",[e._v("--no-stat")])]),e._v(" "),a("td",[e._v("Don't show the diffstat")])]),e._v(" "),a("tr",[a("td",[a("code",[e._v("--squash")])]),e._v(" "),a("td",[e._v("Allows for a single commit on the current branch with the merged changes")])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);