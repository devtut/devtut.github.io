(window.webpackJsonp=window.webpackJsonp||[]).push([[719],{1127:function(t,s,a){"use strict";a.r(s);var o=a(31),_=Object(o.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"std-atomics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#std-atomics"}},[t._v("#")]),t._v(" std::atomics")]),t._v(" "),a("h2",{attrs:{id:"atomic-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#atomic-types"}},[t._v("#")]),t._v(" atomic types")]),t._v(" "),a("p",[t._v("Each instantiation and full specialization of the "),a("code",[t._v("std::atomic")]),t._v(" template defines an atomic type. If one thread writes to an atomic object while another thread reads from it, the behavior is well-defined (see memory model for details on data races)")]),t._v(" "),a("p",[t._v("In addition, accesses to atomic objects may establish inter-thread synchronization and order non-atomic memory accesses as specified by "),a("code",[t._v("std::memory_order")]),t._v(".")]),t._v(" "),a("p",[t._v("std::atomic may be instantiated with any "),a("code",[t._v("TriviallyCopyable type T. std::atomic")]),t._v(" is neither copyable nor movable.")]),t._v(" "),a("p",[t._v("The standard library provides specializations of the std::atomic template for the following types:")]),t._v(" "),a("ol",[a("li",[t._v("One full specialization for the type "),a("code",[t._v("bool")]),t._v(" and its typedef name is defined that is treated as a non-specialized "),a("code",[t._v("std::atomic<T>")]),t._v(" except that it has standard layout, trivial default constructor, trivial destructors, and supports aggregate initialization syntax:")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Typedef name")]),t._v(" "),a("th",[t._v("Full specialization")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("std::atomic_bool")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<bool>")])])])])]),t._v(" "),a("p",[t._v("2)Full specializations and typedefs for integral types, as follows:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Typedef name")]),t._v(" "),a("th",[t._v("Full specialization")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("std::atomic_char")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<char>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_char")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<char>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_schar")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<signed char>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_uchar")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<unsigned char>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_short")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<short>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_ushort")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<unsigned short>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_int")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<int>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_uint")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<unsigned int>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_long")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<long>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_ulong")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<unsigned long>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_llong")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<long long>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_ullong")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<unsigned long long>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_char16_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<char16_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_char32_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<char32_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_wchar_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<wchar_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_int8_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::int8_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_uint8_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::uint8_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_int16_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::int16_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_uint16_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::uint16_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_int32_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::int32_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_uint32_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::uint32_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_int64_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::int64_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_uint64_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::uint64_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_int_least8_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::int_least8_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_uint_least8_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::uint_least8_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_int_least16_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::int_least16_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_uint_least16_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::uint_least16_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_int_least32_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::int_least32_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_uint_least32_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::uint_least32_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_int_least64_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::int_least64_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_uint_least64_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::uint_least64_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_int_fast8_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::int_fast8_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_uint_fast8_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::uint_fast8_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_int_fast16_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::int_fast16_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_uint_fast16_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::uint_fast16_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_int_fast32_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::int_fast32_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_uint_fast32_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::uint_fast32_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_int_fast64_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::int_fast64_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_uint_fast64_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::uint_fast64_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_intptr_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::intptr_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_uintptr_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::uintptr_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_size_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::size_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_ptrdiff_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::ptrdiff_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_intmax_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::intmax_t>")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("std::atomic_uintmax_t")])]),t._v(" "),a("td",[a("code",[t._v("std::atomic<std::uintmax_t>")])])])])]),t._v(" "),a("p",[t._v("Simple example of using std::atomic_int")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// std::cout")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<atomic>")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// std::atomic, std::memory_order_relaxed")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<thread>")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// std::thread")])]),t._v("\n\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("atomic_int "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("store")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("memory_order_relaxed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// set value atomically")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print_foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("memory_order_relaxed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get value atomically")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("thread "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("first")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("print_foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("thread "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("second")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set_foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//second.join();")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//output: foo: 10")]),t._v("\n\n")])])])])}),[],!1,null,null,null);s.default=_.exports}}]);