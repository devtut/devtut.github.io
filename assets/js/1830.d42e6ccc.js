(window.webpackJsonp=window.webpackJsonp||[]).push([[1830],{2237:function(a,t,e){"use strict";e.r(t);var s=e(31),n=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"basics-of-kotlin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#basics-of-kotlin"}},[a._v("#")]),a._v(" Basics of Kotlin")]),a._v(" "),e("p",[a._v("This topic covers the basics of Kotlin for beginners.")]),a._v(" "),e("h2",{attrs:{id:"basic-examples"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#basic-examples"}},[a._v("#")]),a._v(" Basic examples")]),a._v(" "),e("p",[a._v("1.The Unit return type declaration is optional for functions. The following codes are equivalent.")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('\n   fun printHello(name: String?): Unit {\n        if (name != null)\n            println("Hello ${name}")\n    }\n    \n    fun printHello(name: String?) {\n        ...\n    }\n\n')])])]),e("p",[a._v("2.Single-Expression functions:When a function returns a single expression, the curly braces can be omitted and the body is specified after  = symbol")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("\n fun double(x: Int): Int = x * 2\n\n")])])]),e("p",[a._v("Explicitly declaring the return type is optional when this can be inferred by the compiler")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("\n fun double(x: Int) = x * 2\n\n")])])]),e("p",[a._v("3.String interpolation: Using string values is easy.")]),a._v(" "),e("div",{staticClass:"language-kotlin extra-class"},[e("pre",{pre:!0,attrs:{class:"language-kotlin"}},[e("code",[a._v("In java"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("\n    int num"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v("\n    String s  "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"i ="')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\nIn Kotlin\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" num "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" s "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"i = '),e("span",{pre:!0,attrs:{class:"token interpolation variable"}},[a._v("$num")]),a._v('"')]),a._v("\n\n")])])]),e("p",[a._v("4.In Kotlin, the type system distinguishes between references that can hold null (nullable references) and those that can not (non-null references). For example, a regular variable of type String can not hold null:")]),a._v(" "),e("div",{staticClass:"language-kotlin extra-class"},[e("pre",{pre:!0,attrs:{class:"language-kotlin"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" String "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"abc"')]),a._v("\na "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// compilation error")]),a._v("\n\n")])])]),e("p",[a._v("To allow nulls, we can declare a variable as nullable string, written String?:")]),a._v(" "),e("div",{staticClass:"language-kotlin extra-class"},[e("pre",{pre:!0,attrs:{class:"language-kotlin"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" b"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" String"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"abc"')]),a._v("\nb "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ok")]),a._v("\n\n")])])]),e("p",[a._v("5.In Kotlin,== actually checks for equality of values.By convention, an expression like\na == b is translated to")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("\n  a?.equals(b) ?: (b === null)\n\n")])])]),e("h4",{attrs:{id:"remarks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[a._v("#")]),a._v(" Remarks")]),a._v(" "),e("ol",[e("li",[a._v("Kotlin file has an extension .kt.")]),a._v(" "),e("li",[a._v("All classes in Kotlin have a common superclass Any, that is a default super for a class with no supertypes declared(similar to Object in Java).")]),a._v(" "),e("li",[a._v("Variables can be declared as val(immutable- assign once) or var(mutables- value can be changed)")]),a._v(" "),e("li",[a._v("Semicolon is not needed at end of statement.\n")]),e("li",[a._v("If a function does not return any useful value, its return type is Unit.It is also optional.\n6.Referential equality is checked by the === operation. a === b evaluates to true if and only if a and b point to the same object.")])])])}),[],!1,null,null,null);t.default=n.exports}}]);