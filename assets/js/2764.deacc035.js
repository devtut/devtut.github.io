(window.webpackJsonp=window.webpackJsonp||[]).push([[2764],{3172:function(t,a,s){"use strict";s.r(a);var e=s(31),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"pickle-data-serialisation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pickle-data-serialisation"}},[t._v("#")]),t._v(" Pickle data serialisation")]),t._v(" "),s("h2",{attrs:{id:"using-pickle-to-serialize-and-deserialize-an-object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-pickle-to-serialize-and-deserialize-an-object"}},[t._v("#")]),t._v(" Using Pickle to serialize and deserialize an object")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("pickle")]),t._v(" module implements an algorithm for turning an arbitrary Python object into a series of bytes. This process is also called "),s("strong",[t._v("serializing")]),t._v(" the object. The byte stream representing the object can then be transmitted or stored, and later reconstructed to create a new object with the same characteristics.")]),t._v(" "),s("p",[t._v("For the simplest code, we use the "),s("code",[t._v("dump()")]),t._v(" and "),s("code",[t._v("load()")]),t._v(" functions.")]),t._v(" "),s("h3",{attrs:{id:"to-serialize-the-object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#to-serialize-the-object"}},[t._v("#")]),t._v(" To serialize the object")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pickle\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# An arbitrary collection of objects supported by pickle.")]),t._v("\ndata "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6j")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"character string"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('b"byte string"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data.pickle'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wb'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Pickle the 'data' dictionary using the highest protocol available.")]),t._v("\n    pickle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dump"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pickle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HIGHEST_PROTOCOL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"to-deserialize-the-object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#to-deserialize-the-object"}},[t._v("#")]),t._v(" To deserialize the object")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pickle\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data.pickle'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rb'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The protocol version used is detected automatically, so we do not")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# have to specify it.")]),t._v("\n    data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pickle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("load"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"using-pickle-and-byte-objects"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-pickle-and-byte-objects"}},[t._v("#")]),t._v(" Using pickle and byte objects")]),t._v(" "),s("p",[t._v("It is also possible to serialize into and deserialize out of byte objects, using\nthe "),s("code",[t._v("dumps")]),t._v(" and "),s("code",[t._v("loads")]),t._v(" function, which are equivalent to "),s("code",[t._v("dump")]),t._v(" and "),s("code",[t._v("load")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("serialized_data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pickle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dumps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pickle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HIGHEST_PROTOCOL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# type(serialized_data) is bytes")]),t._v("\n\ndeserialized_data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pickle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("serialized_data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# deserialized_data == data")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"customize-pickled-data"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#customize-pickled-data"}},[t._v("#")]),t._v(" Customize Pickled Data")]),t._v(" "),s("p",[t._v("Some data cannot be pickled. Other data should not be pickled for other reasons.")]),t._v(" "),s("p",[t._v("What will be pickled can be defined in "),s("code",[t._v("__getstate__")]),t._v(" method. This method must return something that is picklable.")]),t._v(" "),s("p",[t._v("On the oposite side is "),s("code",[t._v("__setstate__")]),t._v(": it will receive what "),s("code",[t._v("__getstate__")]),t._v(" created and has to initialize the object.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" important_data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("important_data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" important_data\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Add data which cannot be pickled:")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("func "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lambda")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Add data which should never be pickled, because it expires quickly:")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("is_up_to_date "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__getstate__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("important_data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# only this is needed")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__setstate__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("important_data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        \n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("func "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lambda")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# just some hard-coded unpicklable function")]),t._v("\n        \n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("is_up_to_date "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# even if it was before pickling")]),t._v("\n\n")])])]),s("p",[t._v("Now, this can be done:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'very important'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pickle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dumps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# calls a1.__getstate__()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pickle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# calls a1.__setstate__(['very important'])")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a2\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("__main__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("A "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),t._v(" at "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0000000002742470")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("important_data\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'very important'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" a2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("func"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n\n")])])]),s("p",[t._v("The implementation here pikles a list with one value: "),s("code",[t._v("[self.important_data]")]),t._v(". That was just an example, "),s("code",[t._v("__getstate__")]),t._v(" could have returned anything that is picklable, as long as "),s("code",[t._v("__setstate__")]),t._v(" knows how to do the oppoisite. A good alternative is a dictionary of all values: "),s("code",[t._v("{'important_data': self.important_data}")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("Constructor is not called!")]),t._v("\nNote that in the previous example instance "),s("code",[t._v("a2")]),t._v(" was created in "),s("code",[t._v("pickle.loads")]),t._v(" without ever calling "),s("code",[t._v("A.__init__")]),t._v(", so "),s("code",[t._v("A.__setstate__")]),t._v(" had to initialize everything that "),s("code",[t._v("__init__")]),t._v(" would have initialized if it were called.")]),t._v(" "),s("h4",{attrs:{id:"syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),s("li",[t._v("\npickle.dump(object,file,protocol) #To serialize an object\n")]),t._v(" "),s("li",[t._v("\npickle.load(file) #To de-serialize an object\n")]),t._v(" "),s("li",[t._v("\npickle.dumps(object, protocol) # To serialize an object to bytes\n")]),t._v(" "),s("li",[t._v("\npickle.loads(buffer) # To de-serialzie an object from bytes\n")]),t._v(" "),s("h4",{attrs:{id:"parameters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Parameter")]),t._v(" "),s("th",[t._v("Details")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("object")]),t._v(" "),s("td",[t._v("The object which is to be stored")])]),t._v(" "),s("tr",[s("td",[t._v("file")]),t._v(" "),s("td",[t._v("The open file which will contain the object")])]),t._v(" "),s("tr",[s("td",[t._v("protocol")]),t._v(" "),s("td",[t._v("The protocol used for pickling the object (optional parameter)")])]),t._v(" "),s("tr",[s("td",[t._v("buffer")]),t._v(" "),s("td",[t._v("A bytes object that contains a serialized object")])])])]),t._v(" "),s("h4",{attrs:{id:"remarks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),s("h3",{attrs:{id:"pickleable-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pickleable-types"}},[t._v("#")]),t._v(" Pickleable types")]),t._v(" "),s("p",[t._v("The following objects are picklable.")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("None")]),t._v(", "),s("code",[t._v("True")]),t._v(", and "),s("code",[t._v("False")])]),t._v(" "),s("li",[t._v("numbers (of all types)")]),t._v(" "),s("li",[t._v("strings (of all types)")]),t._v(" "),s("li",[s("code",[t._v("tuple")]),t._v("s, "),s("code",[t._v("list")]),t._v("s, "),s("code",[t._v("set")]),t._v("s, and "),s("code",[t._v("dict")]),t._v("s containing only picklable objects")]),t._v(" "),s("li",[t._v("functions defined at the top level of a module")]),t._v(" "),s("li",[t._v("built-in functions\n")]),s("li",[t._v("classes that are defined at the top level of a module\n"),s("ul")]),t._v(" "),s("li",[t._v("instances of such classes whose "),s("code",[t._v("__dict__")]),t._v(" or the result of calling "),s("code",[t._v("__getstate__()")]),t._v(" is picklable (see "),s("a",{attrs:{href:"https://docs.python.org/3/library/pickle.html#pickling-class-instances",target:"_blank",rel:"noopener noreferrer"}},[t._v("the official docs"),s("OutboundLink")],1),t._v(" for details).")])]),t._v(" "),s("p",[t._v("Based on the "),s("a",{attrs:{href:"https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled",target:"_blank",rel:"noopener noreferrer"}},[t._v("official Python documentation"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"pickle-and-security"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pickle-and-security"}},[t._v("#")]),t._v(" "),s("code",[t._v("pickle")]),t._v(" and security")]),t._v(" "),s("p",[t._v("The pickle module is "),s("strong",[t._v("not secure")]),t._v(". It should not be used when receiving the serialized data from an untrusted party, such as over the Internet.")])])}),[],!1,null,null,null);a.default=n.exports}}]);