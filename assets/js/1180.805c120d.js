(window.webpackJsonp=window.webpackJsonp||[]).push([[1180],{1588:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"data-text"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-text"}},[t._v("#")]),t._v(" Data.Text")]),t._v(" "),a("h2",{attrs:{id:"text-literals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#text-literals"}},[t._v("#")]),t._v(" Text Literals")]),t._v(" "),a("p",[t._v("The "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/haskell/369/overloaded-literals/1329/strings#t=201610072315314796807",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("OverloadedStrings")]),a("OutboundLink")],1),t._v(" language extension allows the use of normal string literals to stand for "),a("code",[t._v("Text")]),t._v(" values.")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("{-# LANGUAGE OverloadedStrings #-}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token import-statement"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("qualified")]),t._v(" Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Text "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" T")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("myText")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Text")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("myText")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"overloaded"')]),t._v("\n\n")])])]),a("h2",{attrs:{id:"checking-if-a-text-is-a-substring-of-another-text"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#checking-if-a-text-is-a-substring-of-another-text"}},[t._v("#")]),t._v(" Checking if a Text is a substring of another Text")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XOverloadedStrings")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Text")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v("\n\n")])])]),a("p",[a("a",{attrs:{href:"https://hackage.haskell.org/package/text-1.2.2.1/docs/Data-Text.html#v:isInfixOf",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("isInfixOf :: Text -> Text -> Bool")]),a("OutboundLink")],1),t._v(" checks whether a "),a("code",[t._v("Text")]),t._v(" is contained anywhere within another "),a("code",[t._v("Text")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rum"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("`T.isInfixOf`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"crumble"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("True")]),t._v("\n\n")])])]),a("p",[a("a",{attrs:{href:"https://hackage.haskell.org/package/text-1.2.2.1/docs/Data-Text.html#v:isPrefixOf",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("isPrefixOf :: Text -> Text -> Bool")]),a("OutboundLink")],1),t._v(" checks whether a "),a("code",[t._v("Text")]),t._v(" appears at the beginning of another "),a("code",[t._v("Text")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"crumb"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("`T.isPrefixOf`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"crumble"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("True")]),t._v("\n\n")])])]),a("p",[a("a",{attrs:{href:"https://hackage.haskell.org/package/text-1.2.2.1/docs/Data-Text.html#v:isSuffixOf",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("isSuffixOf :: Text -> Text -> Bool")]),a("OutboundLink")],1),t._v(" checks whether a "),a("code",[t._v("Text")]),t._v(" appears at the end of another "),a("code",[t._v("Text")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rumble"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("`T.isSuffixOf`")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"crumble"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("True")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"stripping-whitespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stripping-whitespace"}},[t._v("#")]),t._v(" Stripping whitespace")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("{-# LANGUAGE OverloadedStrings #-}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token import-statement"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("qualified")]),t._v(" Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Text "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" T")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("myText")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Text")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("myText")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n\\r\\t   leading and trailing whitespace   \\t\\r\\n"')]),t._v("\n\n")])])]),a("p",[a("code",[t._v("strip")]),t._v(" removes whitespace from the start and end of a "),a("code",[t._v("Text")]),t._v(" value.")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("strip")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("myText")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"leading and trailing whitespace"')]),t._v("\n\n")])])]),a("p",[a("code",[t._v("stripStart")]),t._v(" removes whitespace only from the start.")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stripStart")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("myText")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"leading and trailing whitespace   \\t\\r\\n"')]),t._v("\n\n")])])]),a("p",[a("code",[t._v("stripEnd")]),t._v(" removes whitespace only from the end.")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stripEnd")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("myText")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n\\r\\t   leading and trailing whitespace"')]),t._v("\n\n")])])]),a("p",[a("code",[t._v("filter")]),t._v(" can be used to remove whitespace, or other characters, from the middle.")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("filter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/=")]),a("span",{pre:!0,attrs:{class:"token char string"}},[t._v("' '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"spaces in the middle of a text string"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"spacesinthemiddleofatextstring"')]),t._v("\n\n")])])]),a("h2",{attrs:{id:"splitting-text-values"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitting-text-values"}},[t._v("#")]),t._v(" Splitting Text Values")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("{-# LANGUAGE OverloadedStrings #-}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token import-statement"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("qualified")]),t._v(" Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Text "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" T")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("myText")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Text")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("myText")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mississippi"')]),t._v("\n\n")])])]),a("p",[a("code",[t._v("splitOn")]),t._v(" breaks a "),a("code",[t._v("Text")]),t._v(" up into a list of "),a("code",[t._v("Texts")]),t._v(" on occurrences of a substring.")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("splitOn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ss"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("myText")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"i"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ippi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])]),a("p",[a("code",[t._v("splitOn")]),t._v(" is the inverse of "),a("code",[t._v("intercalate")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("intercalate")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ss"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("splitOn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ss"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mississippi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mississippi"')]),t._v("\n\n")])])]),a("p",[a("code",[t._v("split")]),t._v(" breaks a "),a("code",[t._v("Text")]),t._v(" value into chunks on characters that satisfy a Boolean predicate.")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char string"}},[t._v("'i'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("myText")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"m"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ss"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ss"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"encoding-and-decoding-text"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#encoding-and-decoding-text"}},[t._v("#")]),t._v(" Encoding and Decoding Text")]),t._v(" "),a("p",[t._v("Encoding and decoding functions for a variety of Unicode encodings can be found in the "),a("code",[t._v("Data.Text.Encoding")]),t._v(" module.")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Encoding")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("decodeUtf8")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("encodeUtf8")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my text"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my text"')]),t._v("\n\n")])])]),a("p",[t._v("Note that "),a("code",[t._v("decodeUtf8")]),t._v(" will throw an exception on invalid input. If you want to handle invalid UTF-8 yourself, use "),a("code",[t._v("decodeUtf8With")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("decodeUtf8With")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("errorDescription")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("input")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Nothing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("messyOutsideData")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"indexing-text"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indexing-text"}},[t._v("#")]),t._v(" Indexing Text")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("{-# LANGUAGE OverloadedStrings #-}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token import-statement"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("qualified")]),t._v(" Data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Text "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" T")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("myText")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Text")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("myText")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mississippi"')]),t._v("\n\n")])])]),a("p",[t._v("Characters at specific indices can be returned by the "),a("code",[t._v("index")]),t._v(" function.")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("index")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("myText")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token char string"}},[t._v("'s'")]),t._v("\n\n")])])]),a("p",[t._v("The "),a("code",[t._v("findIndex")]),t._v(" function takes a function of type "),a("code",[t._v("(Char -> Bool)")]),t._v(" and Text and returns the index of the first occurrence of a given string or Nothing if it doesn't occur.")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findIndex")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token char string"}},[t._v("'s'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("myText")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Just")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("findIndex")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token char string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("myText")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Nothing")]),t._v("\n\n")])])]),a("p",[t._v("The "),a("code",[t._v("count")]),t._v(" function returns the number of times a query "),a("code",[t._v("Text")]),t._v(" occurs within another "),a("code",[t._v("Text")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("ghci")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("count")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"miss"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Text")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("myText")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n")])])]),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),a("p",[a("code",[t._v("Text")]),t._v(" is a more efficient alternative to Haskell's standard "),a("code",[t._v("String")]),t._v(" type. "),a("code",[t._v("String")]),t._v(" is defined as a linked list of characters in the standard Prelude, per "),a("a",{attrs:{href:"https://www.haskell.org/onlinereport/haskell2010/haskellch6.html#x13-1190006.1.2",target:"_blank",rel:"noopener noreferrer"}},[t._v("the Haskell Report"),a("OutboundLink")],1),t._v(":")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])]),a("p",[a("code",[t._v("Text")]),t._v(" is represented as a packed array of Unicode characters. This is similar to how most other high-level languages represent strings, and gives much better time and space efficiency than the list version.")]),t._v(" "),a("p",[a("code",[t._v("Text")]),t._v(" should be preferred over "),a("code",[t._v("String")]),t._v(" for all production usage. A notable exception is depending on a library which has a "),a("code",[t._v("String")]),t._v(" API, but even in that case there may be a benefit of using "),a("code",[t._v("Text")]),t._v(" internally and converting to a "),a("code",[t._v("String")]),t._v(" just before interfacing with the library.")]),t._v(" "),a("p",[t._v("All of the examples in this topic use "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/haskell/1274/common-ghc-language-extensions/4173/overloadedstrings",target:"_blank",rel:"noopener noreferrer"}},[t._v("the "),a("code",[t._v("OverloadedStrings")]),t._v(" language extension"),a("OutboundLink")],1),t._v(".")])])}),[],!1,null,null,null);s.default=n.exports}}]);