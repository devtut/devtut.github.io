(window.webpackJsonp=window.webpackJsonp||[]).push([[3173],{3581:function(s,t,e){"use strict";e.r(t);var a=e(31),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"rails-cookbook-advanced-rails-recipes-learnings-and-coding-techniques"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rails-cookbook-advanced-rails-recipes-learnings-and-coding-techniques"}},[s._v("#")]),s._v(" Rails Cookbook - Advanced rails recipes/learnings and coding techniques")]),s._v(" "),e("h2",{attrs:{id:"playing-with-tables-using-rails-console"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#playing-with-tables-using-rails-console"}},[s._v("#")]),s._v(" Playing with Tables using rails console")]),s._v(" "),e("p",[e("strong",[s._v("View tables")])]),s._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ActiveRecord")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Base")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("connection"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tables\n\n")])])]),e("p",[e("strong",[s._v("Delete any table")]),s._v(".")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('\n   ActiveRecord::Base.connection.drop_table("users")\n    ------------OR----------------------\n    ActiveRecord::Migration.drop_table(:users)\n    ------------OR---------------------\n    ActiveRecord::Base.connection.execute("drop table users")\n\n')])])]),e("p",[e("strong",[s._v("Remove index from existing column")])]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nActiveRecord::Migration.remove_index(:users, :name => 'index_users_on_country')\n\n")])])]),e("p",[s._v("where "),e("code",[s._v("country")]),s._v(" is a column name in the migration file with "),e("strong",[s._v("already")]),s._v(" added index in "),e("code",[s._v("users")]),s._v(" table as shown below:-")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nt.string :country,add_index: true\n\n")])])]),e("p",[e("strong",[s._v("Remove foreign key constraint")])]),s._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ActiveRecord")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Base")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("connection"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("remove_foreign_key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'food_items'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'menus'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])])]),e("p",[s._v("where "),e("code",[s._v("menus has_many food_items")]),s._v(" and their respective migrations too.")]),s._v(" "),e("p",[e("strong",[s._v("Add column")])]),s._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ActiveRecord")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Migration")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("remove_column "),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":table_name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":column_name")]),s._v("\n\n")])])]),e("p",[s._v("for example:-")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nActiveRecord::Migration.add_column :profiles, :profile_likes, :integer, :default => 0\n\n")])])]),e("h2",{attrs:{id:"rails-methods-returning-boolean-values"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rails-methods-returning-boolean-values"}},[s._v("#")]),s._v(" Rails methods - returning boolean values")]),s._v(" "),e("p",[s._v("Any method in Rails model can return boolean value.")]),s._v(" "),e("p",[e("strong",[s._v("simple method-")])]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('\n ##this method return ActiveRecord::Relation\n  def check_if_user_profile_is_complete\n    User.includes( :profile_pictures,:address,:contact_detail).where("user.id = ?",self)\n  end\n\n')])])]),e("p",[e("strong",[s._v("Again simple method returning boolean value-")])]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('\n ##this method return Boolean(NOTE THE !! signs before result)\n  def check_if_user_profile_is_complete\n    !!User.includes( :profile_pictures,:address,:contact_detail).where("user.id = ?",self)\n  end\n\n')])])]),e("p",[s._v("So,the same method will now return boolean instead of anything else ðŸ˜ƒ.")]),s._v(" "),e("h2",{attrs:{id:"handling-the-error-undefined-method-where-for-array-0x000000071923f8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#handling-the-error-undefined-method-where-for-array-0x000000071923f8"}},[s._v("#")]),s._v(" Handling the error - undefined method `where' for #"),e("a",{attrs:{href:"Array:0x000000071923f8"}},[s._v("Array:0x000000071923f8")])]),s._v(" "),e("p",[s._v("Sometimes we want to use a "),e("code",[s._v("where")]),s._v(" query on a a collection of records returned which is not "),e("code",[s._v("ActiveRecord::Relation")]),s._v(".Hence we get the above error as "),e("code",[s._v("Where")]),s._v(" clause is know to "),e("code",[s._v("ActiveRecord")]),s._v(" and not to "),e("code",[s._v("Array")]),s._v(".")]),s._v(" "),e("p",[s._v("There is a precise solution for this by using "),e("code",[s._v("Joins")]),s._v(".")]),s._v(" "),e("p",[e("strong",[s._v("EXAMPLE")]),s._v(":-")]),s._v(" "),e("blockquote"),s._v(" "),e("p",[s._v("Suppose i need to find all user profiles(UserProfile) which are active which is not a user(User) with an id=10.")]),s._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UserProfiles")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("includes"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":user")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":profile_pictures")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("where"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":active")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("map"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":user")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("where"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":id")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])])]),e("p",[s._v("So above query will fail after "),e("code",[s._v("map")]),s._v(" as "),e("code",[s._v("map")]),s._v(" will return an "),e("code",[s._v("array")]),s._v(" which will "),e("strong",[s._v("not")]),s._v(" work with "),e("code",[s._v("where")]),s._v(" clause.")]),s._v(" "),e("p",[e("strong",[s._v("But using joins,will make it work,")])]),s._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UserProfiles")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("includes"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":user")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":profile_pictures")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("where"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":active")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("joins"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":user")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("where"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":id")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])])]),e("p",[s._v("As "),e("code",[s._v("joins")]),s._v(" will output similar records like "),e("code",[s._v("map")]),s._v(" but they will be "),e("code",[s._v("ActiveRecord")]),s._v(" and "),e("strong",[s._v("not")]),s._v(" an "),e("code",[s._v("Array")]),s._v(".")])])}),[],!1,null,null,null);t.default=n.exports}}]);