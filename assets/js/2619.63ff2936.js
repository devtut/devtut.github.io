(window.webpackJsonp=window.webpackJsonp||[]).push([[2619],{3027:function(e,t,a){"use strict";a.r(t);var r=a(31),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"powershell-workflows"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#powershell-workflows"}},[e._v("#")]),e._v(" PowerShell Workflows")]),e._v(" "),a("p",[e._v("PowerShell Workflow is a feature that was introduced starting with PowerShell version 3.0. Workflow definitions look very similar to PowerShell function definitions, however they execute within the Windows Workflow Foundation environment, instead of directly in the PowerShell engine.")]),e._v(" "),a("p",[e._v('Several unique "out of box" features are included with the Workflow engine, most notably, job persistence.')]),e._v(" "),a("h2",{attrs:{id:"workflow-with-input-parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workflow-with-input-parameters"}},[e._v("#")]),e._v(" Workflow with Input Parameters")]),e._v(" "),a("p",[e._v("Just like PowerShell functions, workflows can accept input parameter. Input parameters can optionally be bound to a specific data type, such as a string, integer, etc. Use the standard "),a("code",[e._v("param")]),e._v(" keyword to define a block of input parameters, directly after the workflow declaration.")]),e._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("workflow")]),e._v(" DoSomeWork "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("param")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("[string[]]")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$ComputerName")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Get-Process")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("ComputerName "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$ComputerName")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\nDoSomeWork "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("ComputerName server01"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" server02"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" server03\n\n")])])]),a("h2",{attrs:{id:"simple-workflow-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-workflow-example"}},[e._v("#")]),e._v(" Simple Workflow Example")]),e._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("workflow")]),e._v(" DoSomeWork "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Get-Process")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Name notepad "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Stop-Process")]),e._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n")])])]),a("p",[e._v("This is a basic example of a PowerShell Workflow definition.")]),e._v(" "),a("h2",{attrs:{id:"run-workflow-as-a-background-job"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run-workflow-as-a-background-job"}},[e._v("#")]),e._v(" Run Workflow as a Background Job")]),e._v(" "),a("p",[e._v("PowerShell Workflows are inherently equipped with the ability to run as a background job. To call a workflow as a PowerShell background job, use the "),a("code",[e._v("-AsJob")]),e._v(" parameter when invoking the workflow.")]),e._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("workflow")]),e._v(" DoSomeWork "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Get-Process")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("ComputerName server01\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Get-Process")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("ComputerName server02\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Get-Process")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("ComputerName server03\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\nDoSomeWork "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("AsJob\n\n")])])]),a("h2",{attrs:{id:"add-a-parallel-block-to-a-workflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-a-parallel-block-to-a-workflow"}},[e._v("#")]),e._v(" Add a Parallel Block to a Workflow")]),e._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("workflow")]),e._v(" DoSomeWork "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("parallel")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Get-Process")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("ComputerName server01\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Get-Process")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("ComputerName server02\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Get-Process")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("ComputerName server03\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n")])])]),a("p",[e._v("One of the unique features of PowerShell Workflow is the ability to define a block of activities as parallel. To use this feature, use the "),a("code",[e._v("parallel")]),e._v(" keyword inside your Workflow.")]),e._v(" "),a("p",[e._v("Calling workflow activities in parallel may help to improve performance of your workflow.")]),e._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[e._v("#")]),e._v(" Remarks")]),e._v(" "),a("p",[e._v("The PowerShell Workflow feature is exclusively supported on the Microsoft Windows platform, under PowerShell Desktop Edition. PowerShell Core Edition, which is supported on Linux, Mac, and Windows, does not support the PowerShell Workflow feature.")]),e._v(" "),a("p",[e._v("When authoring a PowerShell Workflow, keep in mind that workflows call activities, not cmdlets. You can still call cmdlets from a PowerShell Workflow, but the Workflow Engine will implicitly wrap the cmdlet invocation in an "),a("code",[e._v("InlineScript")]),e._v(" activity. You can also explicitly wrap code inside of the "),a("code",[e._v("InlineScript")]),e._v(" activity, which executes PowerShell code; by default the "),a("code",[e._v("InlineScript")]),e._v(" activity runs in a separate process, and returns the result to the calling Workflow.")])])}),[],!1,null,null,null);t.default=s.exports}}]);