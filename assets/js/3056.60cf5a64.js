(window.webpackJsonp=window.webpackJsonp||[]).push([[3056],{3464:function(s,t,a){"use strict";a.r(t);var e=a(31),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"classes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#classes"}},[s._v("#")]),s._v(" Classes")]),s._v(" "),a("h2",{attrs:{id:"constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[s._v("#")]),s._v(" Constructor")]),s._v(" "),a("p",[s._v("A class can have only one constructor, that is a method called "),a("code",[s._v("initialize")]),s._v(". The method is automatically invoked when a new instance of the class is created.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Customer")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("initialize")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@name")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("capitalize \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\nsarah "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Customer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'sarah'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nsarah"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#=> 'Sarah'")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"creating-a-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-class"}},[s._v("#")]),s._v(" Creating a class")]),s._v(" "),a("p",[s._v("You can define a new class using the "),a("code",[s._v("class")]),s._v(" keyword.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("p",[s._v("Once defined, you can create a new instance using the "),a("code",[s._v(".new")]),s._v(" method")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("somevar "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MyClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => #<MyClass:0x007fe2b8aa4a18>")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"access-levels"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#access-levels"}},[s._v("#")]),s._v(" Access Levels")]),s._v(" "),a("p",[s._v("Ruby has three access levels. They are "),a("code",[s._v("public")]),s._v(", "),a("code",[s._v("private")]),s._v(" and "),a("code",[s._v("protected")]),s._v(".")]),s._v(" "),a("p",[s._v("Methods that follow the "),a("code",[s._v("private")]),s._v(" or "),a("code",[s._v("protected")]),s._v(" keywords are defined as such. Methods that come before these are implicitly "),a("code",[s._v("public")]),s._v(" methods.")]),s._v(" "),a("h3",{attrs:{id:"public-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-methods"}},[s._v("#")]),s._v(" "),a("strong",[s._v("Public Methods")])]),s._v(" "),a("p",[s._v("A public method should describe the behavior of the object being created. These methods can be called from outside the scope of the created object.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cat")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("initialize")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@name")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("speak")])]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"I'm "),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@name")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v(" and I'm 2 years old\"")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\nnew_cat "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Cat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"garfield"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#=> <Cat:0x2321868 @name="garfield">')]),s._v("\n \nnew_cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("speak\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#=> I'm garfield and I'm 2 years old")]),s._v("\n\n")])])]),a("p",[s._v("These methods are public ruby methods, they describe the behavior for initializing a new cat and the behavior of the speak method.")]),s._v(" "),a("p",[a("code",[s._v("public")]),s._v(" keyword is unnecessary, but can be used to escape "),a("code",[s._v("private")]),s._v(" or "),a("code",[s._v("protected")])]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("MyClass")])]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("first_public_method")])]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("private_method")])]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("second_public_method")])]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("h3",{attrs:{id:"private-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#private-methods"}},[s._v("#")]),s._v(" "),a("strong",[s._v("Private Methods")])]),s._v(" "),a("p",[s._v("Private methods are not accessible from outside of the object. They are used internally by the object. Using the cat example again:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cat")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("initialize")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@name")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("speak")])]),s._v("\n    age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" calculate_cat_age "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# here we call the private method ")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"I'm "),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@name")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v(" and I'm "),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v(' years old"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("calculate_cat_age")])]),s._v("\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" \n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\nmy_cat "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Cat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Bilbo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nmy_cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("speak "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#=> I'm Bilbo and I'm 2 years old")]),s._v("\nmy_cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("calculate_cat_age "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#=> NoMethodError: private method `calculate_cat_age\' called for #<Cat:0x2321868 @name="Bilbo">')]),s._v("\n\n")])])]),a("p",[s._v("As you can see in the example above, the newly created Cat object has access to the "),a("code",[s._v("calculate_cat_age")]),s._v(" method internally. We assign the variable "),a("code",[s._v("age")]),s._v(" to the result of running the private "),a("code",[s._v("calculate_cat_age")]),s._v(" method which prints the name and age of the cat to the console.")]),s._v(" "),a("p",[s._v("When we try and call the "),a("code",[s._v("calculate_cat_age")]),s._v(" method from outside the "),a("code",[s._v("my_cat")]),s._v(" object, we receive a "),a("code",[s._v("NoMethodError")]),s._v(" because it's private. Get it?")]),s._v(" "),a("h3",{attrs:{id:"protected-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protected-methods"}},[s._v("#")]),s._v(" "),a("strong",[s._v("Protected Methods")])]),s._v(" "),a("p",[s._v("Protected methods are very similar to private methods. They cannot be accessed outside the instance of object in the same way private methods can't be. However, using the "),a("code",[s._v("self")]),s._v(" ruby method, protected methods can be called within the context of an object of the same type.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cat")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("initialize")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@name")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@age")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" age\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("speak")])]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"I'm "),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@name")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v(" and I'm "),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@age")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v(' years old"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# this == method allows us to compare two objects own ages. ")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# if both Cat's have the same age they will be considered equal.")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("own_age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("own_age\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("own_age")])]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\ncat1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Cat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ricky"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#<Cat:0x007fe2b8aa4a18 @name="ricky", @age=2>')]),s._v("\n\ncat2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Cat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lucy"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#<Cat:0x008gfb7aa6v67 @name="lucy", @age=4>')]),s._v("\n\ncat3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Cat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"felix"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#<Cat:0x009frbaa8V76 @name="felix", @age=2>')]),s._v("\n\n")])])]),a("p",[s._v("You can see we've added an age parameter to the cat class and created three new cat objects with the name and age. We are going to call the "),a("code",[s._v("own_age")]),s._v(" protected method to compare the age's of our cat objects.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("cat1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" cat2\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n\ncat1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" cat3\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n\n")])])]),a("p",[s._v("Look at that, we were able to retrieve cat1's age using the "),a("code",[s._v("self.own_age")]),s._v(" protected method and compare it against cat2's age by calling "),a("code",[s._v("cat2.own_age")]),s._v(" inside of cat1.")]),s._v(" "),a("h2",{attrs:{id:"accessing-instance-variables-with-getters-and-setters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accessing-instance-variables-with-getters-and-setters"}},[s._v("#")]),s._v(" Accessing instance variables with getters and setters")]),s._v(" "),a("p",[s._v("We have three methods:")]),s._v(" "),a("ol",[a("li",[a("strong",[a("code",[s._v("attr_reader")])]),s._v(": used to allow "),a("code",[s._v("read")]),s._v("ing the variable outside the class.")]),s._v(" "),a("li",[a("strong",[a("code",[s._v("attr_writer")])]),s._v(": used to allow modifying the variable outside the class.")]),s._v(" "),a("li",[a("strong",[a("code",[s._v("attr_accessor")])]),s._v(": combines both methods.")])]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cat")]),s._v("\n  attr_reader "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":age")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# you can read the age but you can never change it")]),s._v("\n  attr_writer "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":name")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# you can change name but you are not allowed to read")]),s._v("\n  attr_accessor "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":breed")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# you can both change the breed and read it")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("initialize")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" breed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@name")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@breed")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" breed\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@age")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("speak")])]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"I'm "),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@name")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v(" and I am a "),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@breed")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v(' cat"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n \nmy_cat "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Cat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Banjo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"birman"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# reading values:")]),s._v("\n\nmy_cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#=> 2")]),s._v("\nmy_cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("breed "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#=> "birman"')]),s._v("\nmy_cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#=> Error")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# changing values")]),s._v("\n \nmy_cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#=> Error")]),s._v("\nmy_cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("breed "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sphynx"')]),s._v(" \nmy_cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Bilbo"')]),s._v("\n\nmy_cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("speak "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#=> I'm Bilbo and I am a sphynx cat")]),s._v("\n\n")])])]),a("p",[s._v("Note that the parameters are symbols. this works by creating a method.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cat")]),s._v("\n  attr_accessor "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":breed")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("p",[s._v("Is basically the same as:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cat")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("breed")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@breed")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("breed")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@breed")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"class-methods-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-methods-types"}},[s._v("#")]),s._v(" Class Methods types")]),s._v(" "),a("p",[s._v("Classes have 3 types of methods: instance, singleton and class methods.")]),s._v(" "),a("h3",{attrs:{id:"instance-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instance-methods"}},[s._v("#")]),s._v(" Instance Methods")]),s._v(" "),a("p",[s._v("These are methods that can be called from an "),a("code",[s._v("instance")]),s._v(" of the class.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thing")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("somemethod")])]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"something"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\nfoo "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Thing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# create an instance of the class")]),s._v("\nfoo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("somemethod "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => something")]),s._v("\n\n")])])]),a("h3",{attrs:{id:"class-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-method"}},[s._v("#")]),s._v(" Class Method")]),s._v(" "),a("p",[s._v("These are static methods, i.e,  they can be invoked on the class, and not on an instantiation of that class.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thing")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Thing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v('!"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("p",[s._v("It is equivalent to use "),a("code",[s._v("self")]),s._v(" in place of the class name. The following code is equivalent to the code above:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thing")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v('!"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("p",[s._v("Invoke the method by writing")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Thing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"John Doe"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# prints: "Hello, John Doe!"')]),s._v("\n\n")])])]),a("h3",{attrs:{id:"singleton-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#singleton-methods"}},[s._v("#")]),s._v(" Singleton Methods")]),s._v(" "),a("p",[s._v("These are only available to specific instances of the class, but not to all.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# create an empty class")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thing")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# two instances of the class")]),s._v("\nthing1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Thing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("\nthing2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Thing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# create a singleton method")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[s._v("thing1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("makestuff")])]),s._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I belong to thing one"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\nthing1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("makestuff "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => prints: I belong to thing one")]),s._v("\nthing2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("makestuff "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# NoMethodError: undefined method `makestuff' for #<Thing>")]),s._v("\n\n")])])]),a("p",[s._v("Both the "),a("code",[s._v("singleton")]),s._v(" and "),a("code",[s._v("class")]),s._v(" methods are called "),a("code",[s._v("eigenclass")]),s._v("es. Basically, what ruby does is to create an anonymous class that holds such methods so that it won't interfere with the instances that are created.")]),s._v(" "),a("p",[s._v("Another way of doing this is by the "),a("code",[s._v("class <<")]),s._v(" constructor. For example:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a class method (same as the above example)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thing")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# the anonymous class")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v('!"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Thing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sarah"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => Hello, sarah!")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# singleton method")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thing")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\nthing1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Thing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" thing1\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("makestuff")])]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I belong to thing one"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\nthing1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("makestuff "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => prints: "I belong to thing one"')]),s._v("\n\n")])])]),a("h2",{attrs:{id:"dynamic-class-creation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-class-creation"}},[s._v("#")]),s._v(" Dynamic class creation")]),s._v(" "),a("p",[s._v("Classes can be created dynamically through the use of "),a("code",[s._v("Class.new")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# create a new class dynamically")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MyClass")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# instantiate an object of type MyClass")]),s._v("\nmy_class "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MyClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("\n\n")])])]),a("p",[s._v("In the above example, a new class is created and assigned to the constant "),a("code",[s._v("MyClass")]),s._v(".  This class can be instantiated and used just like any other class.")]),s._v(" "),a("p",[s._v("The "),a("code",[s._v("Class.new")]),s._v(" method accepts a "),a("code",[s._v("Class")]),s._v(" which will become the superclass of the dynamically created class.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# dynamically create a class that subclasses another")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Staffy")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Dog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# instantiate an object of type Staffy")]),s._v("\nlucky "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Staffy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("\nlucky"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("is_a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Staffy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\nlucky"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("is_a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Dog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\n\n")])])]),a("p",[s._v("The "),a("code",[s._v("Class.new")]),s._v(" method also accepts a block.  The context of the block is the newly created class.  This allows methods to be defined.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Duck")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" \n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("quack")])]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Quack!!'")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# instantiate an object of type Duck")]),s._v("\nduck "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Duck")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("\nduck"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("quack "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 'Quack!!'")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"new-allocate-and-initialize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-allocate-and-initialize"}},[s._v("#")]),s._v(" New, allocate, and initialize")]),s._v(" "),a("p",[s._v("In many languages, new instances of a class are created using a special "),a("code",[s._v("new")]),s._v(" keyword. In Ruby, "),a("code",[s._v("new")]),s._v(" is also used to create instances of a class, but it isn't a keyword; instead, it's a static/class method, no different from any other static/class method. The definition is roughly this:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" allocate\n     obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("initialize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# oversimplied; initialize is actually private")]),s._v("\n     obj\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("p",[a("code",[s._v("allocate")]),s._v(" performs the real 'magic' of creating an uninitialized instance of the class")]),s._v(" "),a("p",[s._v("Note also that the return value of "),a("code",[s._v("initialize")]),s._v(" is discarded, and obj is returned instead. This makes it immediately clear why you can code your initialize method without worrying about returning "),a("code",[s._v("self")]),s._v(" at the end.")]),s._v(" "),a("p",[s._v("The 'normal' "),a("code",[s._v("new")]),s._v(" method that all classes get from "),a("code",[s._v("Class")]),s._v(" works as above, but it's possible to redefine it however you like, or to define alternatives that work differently. For example:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("extraNew")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" allocate\n    obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pre_initialize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("initialize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("post_initialize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    obj\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"class-and-instance-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-and-instance-variables"}},[s._v("#")]),s._v(" Class and instance variables")]),s._v(" "),a("p",[s._v("There are several special variable types that a class can use for more easily sharing data.")]),s._v(" "),a("p",[s._v("Instance variables, preceded by "),a("code",[s._v("@")]),s._v(". They are useful if you want to use the same variable in different methods.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("initialize")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    my_age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" age "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# local variable, will be destroyed at end of constructor")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@name")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# instance variable, is only destroyed when the object is")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("some_method")])]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"My name is '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@name")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v('."')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# we can use @name with no problem")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n   \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("another_method")])]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"My age is '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),s._v("my_age"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v('."')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# this will not work!")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\nmhmd "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Mark"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nmhmd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("some_method "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#=> My name is Mark.")]),s._v("\nmhmd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("another_method "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#=> throws an error")]),s._v("\n\n")])])]),a("p",[s._v("Class variable, preceded by "),a("code",[s._v("@@")]),s._v(". They contain the same values across all instances of a class.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@@persons_created")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# class variable, available to all objects of this class")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("initialize")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@name")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# modification of class variable persists across all objects of this class")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@@persons_created")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("  \n      \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("how_many_persons")])]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"persons created so far: '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@@persons_created")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v('"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n    \nmark "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Mark"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nmark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("how_many_persons "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#=> persons created so far: 1")]),s._v("\nhelen "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Helen"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nmark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("how_many_persons "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#=> persons created so far: 2")]),s._v("\nhelen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("how_many_persons "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#=> persons created so far: 2")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# you could either ask mark or helen")]),s._v("\n\n")])])]),a("p",[s._v("Global Variables, preceded by "),a("code",[s._v("$")]),s._v(". These are available anywhere to the program, so make sure to use them wisely.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$total_animals")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cat")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("initialize")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$total_animals")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Dog")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("initialize")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$total_animals")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\nbob "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Cat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nputs "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$total_animals")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#=> 1")]),s._v("\nfred "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Dog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nputs "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$total_animals")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#=> 2")]),s._v("\n\n")])])]),a("h4",{attrs:{id:"syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[s._v("#")]),s._v(" Syntax")]),s._v(" "),a("ul",[a("li",[s._v("class Name")]),s._v(" "),a("li",[s._v("#some code describing the class behavior")]),s._v(" "),a("li",[s._v("end")])]),s._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[s._v("#")]),s._v(" Remarks")]),s._v(" "),a("p",[s._v("Class names in Ruby are Constants, so the first letter should be a capital.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Cat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# correct")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("  \n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("dog")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# wrong, throws an error")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);