(window.webpackJsonp=window.webpackJsonp||[]).push([[3098],{3505:function(t,s,a){"use strict";a.r(s);var n=a(31),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"numbers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#numbers"}},[t._v("#")]),t._v(" Numbers")]),t._v(" "),a("h2",{attrs:{id:"converting-a-string-to-integer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#converting-a-string-to-integer"}},[t._v("#")]),t._v(" Converting a String to Integer")]),t._v(" "),a("p",[t._v("You can use the "),a("code",[t._v("Integer")]),t._v(" method to convert a "),a("code",[t._v("String")]),t._v(" to an "),a("code",[t._v("Integer")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 123")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0xFF"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 255")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0b100"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0555"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 365")]),t._v("\n\n")])])]),a("p",[t._v("You can also pass a base parameter to the "),a("code",[t._v("Integer")]),t._v(" method to convert numbers from a certain base")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'74'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 60")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'NUM'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("36")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 30910")]),t._v("\n\n")])])]),a("p",[t._v("Note that the method raises an "),a("code",[t._v("ArgumentError")]),t._v(" if the parameter cannot be converted:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# raises ArgumentError: invalid value for Integer(): "hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"23-hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# raises ArgumentError: invalid value for Integer(): "23-hello"')]),t._v("\n\n")])])]),a("p",[t._v("You can also use the "),a("code",[t._v("String#to_i")]),t._v(" method. However, this method is slightly more permissive and has a different behavior than "),a("code",[t._v("Integer")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"23"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_i         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 23")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"23-hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_i   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 23")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_i      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 0")]),t._v("\n\n")])])]),a("p",[a("code",[t._v("String#to_i")]),t._v(" accepts an argument, the base to interpret the number as:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 10")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"creating-an-integer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-an-integer"}},[t._v("#")]),t._v(" Creating an Integer")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# creates the Fixnum 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# creates the Fixnum 123")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("_000   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# creates the Fixnum 1000. You can use _ as separator for readability")]),t._v("\n\n")])])]),a("p",[t._v("By default the notation is base 10. However, there are some other built-in notations for different bases:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xFF")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Hexadecimal representation of 255, starts with a 0x")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("b100   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Binary representation of 4, starts with a 0b")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0555")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Octal representation of 365, starts with a 0 and digits")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"rounding-numbers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rounding-numbers"}},[t._v("#")]),t._v(" Rounding Numbers")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("round")]),t._v(" method will round a number up if the first digit after its decimal place is 5 or higher and round down if that digit is 4 or lower. This takes in an optional argument for the precision you're looking for.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.89")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("round        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("round        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.141526")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("round"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 3.1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.141526")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("round"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 3.14")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.141526")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("round"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 3.1415")]),t._v("\n\n")])])]),a("p",[t._v("Floating point numbers can also be rounded down to the highest integer lower than the number with the "),a("code",[t._v("floor")]),t._v(" method")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.9999999999999")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("floor "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 4")]),t._v("\n\n")])])]),a("p",[t._v("They can also be rounded up to the lowest integer higher than the number using the "),a("code",[t._v("ceil")]),t._v(" method")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0000000000001")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ceil  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 5")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"even-and-odd-numbers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#even-and-odd-numbers"}},[t._v("#")]),t._v(" Even and Odd Numbers")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("even?")]),t._v(" method can be used to determine if a number is even")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.")]),t._v("even"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.")]),t._v("even"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => false")]),t._v("\n\n")])])]),a("p",[t._v("The "),a("code",[t._v("odd?")]),t._v(" method can be used to determine if a number is odd")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.")]),t._v("odd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.")]),t._v("odd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => true")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"converting-a-number-to-a-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#converting-a-number-to-a-string"}},[t._v("#")]),t._v(" Converting a number to a string")]),t._v(" "),a("p",[t._v("Fixnum#to_s takes an optional base argument and represents the given number in that base:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("to_s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "10"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v("to_s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "11"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v("to_s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "10"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.")]),t._v("to_s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "a"')]),t._v("\n\n")])])]),a("p",[t._v("If no argument is provided, then it represents the number in base 10")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("to_s "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "2"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10423.")]),t._v("to_s "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "10423"')]),t._v("\n\n")])])]),a("h2",{attrs:{id:"rational-numbers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rational-numbers"}},[t._v("#")]),t._v(" Rational Numbers")]),t._v(" "),a("p",[a("code",[t._v("Rational")]),t._v(" represents a rational number as numerator and denominator:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("r1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Rational")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nr2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_r\nr3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" r1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" r2\nr3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("numerator   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 19")]),t._v("\nr3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("denominator "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 6")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Rational")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => (1/2)")]),t._v("\n\n")])])]),a("p",[t._v("Other ways of creating a Rational")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Rational")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2/3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => (2/3)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Rational")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => (3/1)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Rational")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => (-3/5)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Rational")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => (3602879701896397/18014398509481984)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Rational")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0.2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => (1/5)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_r         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => (3602879701896397/18014398509481984)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rationalize  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => (1/5)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1/4'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_r       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => (1/4)")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"complex-numbers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#complex-numbers"}},[t._v("#")]),t._v(" Complex Numbers")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("i     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => (0+1i)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("to_c "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => (1+0i)")]),t._v("\nrectangular "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Complex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => (2+3i)")]),t._v("\npolar       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Complex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1@2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => (-0.4161468365471424+0.9092974268256817i)")]),t._v("\n\npolar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rectangular "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => [-0.4161468365471424, 0.9092974268256817]")]),t._v("\nrectangular"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("polar "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => [3.605551275463989, 0.982793723247329]")]),t._v("\nrectangular "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" polar "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => (1.5838531634528576+3.909297426825682i)")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"dividing-two-numbers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dividing-two-numbers"}},[t._v("#")]),t._v(" Dividing two numbers")]),t._v(" "),a("p",[t._v("When dividing two numbers pay attention to the type you want in return. Note that dividing "),a("strong",[t._v("two integers will invoke the integer division")]),t._v(". If your goal is to run the float division, at least one of the parameters should be of "),a("code",[t._v("float")]),t._v(" type.")]),t._v(" "),a("p",[t._v("Integer division:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 1")]),t._v("\n\n")])])]),a("p",[t._v("Float division")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 1.0")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 4.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 4.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16.0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 4.0")]),t._v("\n\n")])])]),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),a("h3",{attrs:{id:"numbers-hierarchy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#numbers-hierarchy"}},[t._v("#")]),t._v(" Numbers hierarchy")]),t._v(" "),a("p",[t._v("Ruby includes several built-in classes to represent numbers:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Numeric")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Integer")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Fixnum")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Bignum")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 10000000000000000000")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Float")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1.0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Complex")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (1+0i)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Rational")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Rational(2, 3) == 2/3")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BigDecimal")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# not loaded by default")]),t._v("\n\n")])])]),a("p",[t._v("The most common are:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Fixnum")]),t._v(" to represent, for instance positive and negative integers")]),t._v(" "),a("li",[a("code",[t._v("Float")]),t._v(" to represent floating point numbers")])]),t._v(" "),a("p",[a("code",[t._v("BigDecimal")]),t._v(" is the only one not loaded by default. You can load it with:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bigdecimal"')]),t._v("\n\n")])])]),a("p",[t._v("Note that in ruby 2.4+, "),a("code",[t._v("Fixnum")]),t._v(" and "),a("code",[t._v("Bignum")]),t._v(" are unified; "),a("strong",[t._v("all")]),t._v(" integers are now just members of the "),a("code",[t._v("Integer")]),t._v(" class. For backwards compatibility, "),a("code",[t._v("Fixnum == Bignum == Integer")]),t._v(".")])])}),[],!1,null,null,null);s.default=e.exports}}]);