(window.webpackJsonp=window.webpackJsonp||[]).push([[1122],{1530:function(e,t,s){"use strict";s.r(t);var a=s(31),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"git-client-side-hooks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-client-side-hooks"}},[e._v("#")]),e._v(" Git Client-Side Hooks")]),e._v(" "),s("p",[e._v("Like many other Version Control Systems, Git has a way to fire off custom scripts when certain important actions occur. There are two groups of these hooks: client-side and server-side. Client-side hooks are triggered by operations such as committing and merging, while server-side hooks run on network operations such as receiving pushed commits. You can use these hooks for all sorts of reasons.")]),e._v(" "),s("h2",{attrs:{id:"git-pre-push-hook"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-pre-push-hook"}},[e._v("#")]),e._v(" Git pre-push hook")]),e._v(" "),s("p",[s("strong",[e._v("pre-push")]),e._v(" script is called by "),s("code",[e._v("git push")]),e._v(" after it has checked the remote status, but before anything has been pushed.  If this script exits with a non-zero status nothing will be pushed.")]),e._v(" "),s("p",[e._v("This hook is called with the following parameters:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("\n$1 -- Name of the remote to which the push is being done (Ex: origin)\n $2 -- URL to which the push is being done (Ex: https://<host>:<port>/<username>/<project_name>.git)\n\n")])])]),s("p",[e._v("Information about the commits which are being pushed is supplied as lines to the standard input in the form:")]),e._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("<local_ref> <local_sha1> <remote_ref> <remote_sha1>\n\n")])])]),s("p",[e._v("Sample values:")]),e._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("local_ref = refs/heads/master\nlocal_sha1 = 68a07ee4f6af8271dc40caae6cc23f283122ed11\nremote_ref = refs/heads/master\nremote_sha1 = efd4d512f34b11e3cf5c12433bbedd4b1532716f\n\n")])])]),s("p",[e._v("Below example pre-push script was taken from default pre-push.sample which was automatically created when a new repository is initialized with "),s("code",[e._v("git init")])]),e._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This sample shows how to prevent push of commits where the log message starts")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# with "WIP" (work in progress).')]),e._v("\n\nremote="),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$1"')]),e._v("\nurl="),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$2"')]),e._v("\n\nz40=0000000000000000000000000000000000000000\n\nwhile read local_ref local_sha remote_ref remote_sha\ndo\n    if [ "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$local_sha"')]),e._v(" = $z40 ]\n    then\n        # Handle delete\n        :\n    else\n        if [ "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$remote_sha"')]),e._v(" = $z40 ]\n        then\n            # New branch, examine all commits\n            range="),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$local_sha"')]),e._v("\n        else\n            # Update to existing branch, examine new commits\n            range="),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$remote_sha..$local_sha"')]),e._v("\n        fi\n\n        # Check for WIP commit\n        commit=`git rev-list -n 1 --grep "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'^WIP'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$range"')]),e._v("`\n        if [ -n "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$commit"')]),e._v(" ]\n        then\n            echo >&2 "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Found WIP commit in $local_ref, not pushing"')]),e._v("\n            exit 1\n        fi\n    fi\ndone\n\nexit 0\n\n")])])]),s("h2",{attrs:{id:"installing-a-hook"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#installing-a-hook"}},[e._v("#")]),e._v(" Installing a Hook")]),e._v(" "),s("p",[e._v("The hooks are all stored in the "),s("code",[e._v("hooks")]),e._v(" sub directory of the Git directory. In most projects, thatâ€™s "),s("code",[e._v(".git/hooks")]),e._v(".")]),e._v(" "),s("p",[e._v("To enable a hook script, put a file in the "),s("code",[e._v("hooks")]),e._v(" subdirectory of your "),s("code",[e._v(".git")]),e._v(" directory that is named appropriately (without any extension) and is executable.")])])}),[],!1,null,null,null);t.default=n.exports}}]);