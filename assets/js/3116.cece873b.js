(window.webpackJsonp=window.webpackJsonp||[]).push([[3116],{3524:function(s,t,a){"use strict";a.r(t);var e=a(31),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"symbols"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbols"}},[s._v("#")]),s._v(" Symbols")]),s._v(" "),a("h2",{attrs:{id:"creating-a-symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-symbol"}},[s._v("#")]),s._v(" Creating a Symbol")]),s._v(" "),a("p",[s._v("The most common way to create a "),a("code",[s._v("Symbol")]),s._v(" object is by prefixing the string identifier with a colon:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":a_symbol")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => :a_symbol")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":a_symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => Symbol")]),s._v("\n\n")])])]),a("p",[s._v("Here are some alternative ways to define a "),a("code",[s._v("Symbol")]),s._v(", in combination with a "),a("code",[s._v("String")]),s._v(" literal:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a_symbol"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a_symbol"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("to_sym\n\n")])])]),a("p",[s._v("Symbols also have a "),a("code",[s._v("%s")]),s._v(" sequence that supports arbitrary delimiters similar to how "),a("code",[s._v("%q")]),s._v(" and "),a("code",[s._v("%Q")]),s._v(" work for strings:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("%s(a_symbol)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("%s{a_symbol}")]),s._v("\n\n")])])]),a("p",[s._v("The "),a("code",[s._v("%s")]),s._v(" is particularly useful to create a symbol from an input that contains white space:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("%s{a symbol}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => :"a symbol"')]),s._v("\n\n")])])]),a("p",[s._v("While some interesting symbols ("),a("code",[s._v(":/")]),s._v(", "),a("code",[s._v(":[]")]),s._v(", "),a("code",[s._v(":^")]),s._v(", etc.) can be created with certain string identifiers, note that symbols cannot be created using a numeric identifier:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => syntax error, unexpected tINTEGER, ...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => syntax error, unexpected tFLOAT, ...")]),s._v("\n\n")])])]),a("p",[s._v("Symbols may end with a single "),a("code",[s._v("?")]),s._v(" or "),a("code",[s._v("!")]),s._v(" without needing to use a string literal as the symbol's identifier:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":hello?")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# :"hello?" is not necessary.')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":world!")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# :"world!" is not necessary.')]),s._v("\n\n")])])]),a("p",[s._v("Note that all of these different methods of creating symbols will return the same object:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("object_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"symbol"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("to_sym"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("object_id\n"),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("object_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("%s{symbol}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("object_id\n\n")])])]),a("p",[s._v("Since Ruby 2.0 there is a shortcut for creating an array of symbols from words:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("%i(numerator denominator)")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":numerator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":denominator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"converting-a-string-to-symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#converting-a-string-to-symbol"}},[s._v("#")]),s._v(" Converting a String to Symbol")]),s._v(" "),a("p",[s._v("Given a "),a("code",[s._v("String")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"something"')]),s._v("\n\n")])])]),a("p",[s._v("there are several ways to convert it to a "),a("code",[s._v("Symbol")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("to_sym\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => :something")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v('"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => :something")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"converting-a-symbol-to-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#converting-a-symbol-to-string"}},[s._v("#")]),s._v(" Converting a Symbol to String")]),s._v(" "),a("p",[s._v("Given a "),a("code",[s._v("Symbol")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":something")]),s._v("\n\n")])])]),a("p",[s._v("The simplest way to convert it to a "),a("code",[s._v("String")]),s._v(" is by using the "),a("code",[s._v("Symbol#to_s")]),s._v(" method:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("to_s\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "something"')]),s._v("\n\n")])])]),a("p",[s._v("Another way to do it is by using the "),a("code",[s._v("Symbol#id2name")]),s._v(" method which is an alias for the "),a("code",[s._v("Symbol#to_s")]),s._v(" method. But it's a method that is unique to the "),a("code",[s._v("Symbol")]),s._v(" class:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id2name\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "something"')]),s._v("\n\n")])])]),a("h4",{attrs:{id:"syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[s._v("#")]),s._v(" Syntax")]),s._v(" "),a("ul",[a("li",[s._v(":symbol")]),s._v(" "),a("li",[s._v(":'symbol'")]),s._v(" "),a("li",[s._v(':"symbol"')]),s._v(" "),a("li",[s._v('"symbol".to_sym')]),s._v(" "),a("li",[s._v("%s{symbol}")])]),s._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[s._v("#")]),s._v(" Remarks")]),s._v(" "),a("h3",{attrs:{id:"advantages-of-using-symbols-over-strings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#advantages-of-using-symbols-over-strings"}},[s._v("#")]),s._v(" "),a("strong",[s._v("Advantages of using symbols over strings:")])]),s._v(" "),a("p",[a("strong",[s._v("1. A Ruby symbol is an object with O(1) comparison")])]),s._v(" "),a("p",[s._v("To compare two strings, we potentially need to look at every character. For two strings of length N, this will require N+1 comparisons")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("string_compare")])]),s._v(" str1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" str2\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" str1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" str2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("str1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" str1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" str2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\nstring_compare "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foobar"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foobar"')]),s._v("\n\n")])])]),a("p",[s._v("But since every appearance of :foobar refers to the same object, we can compare symbols by looking at object IDs. We can do this with a single comparison.(O(1))")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("symbol_compare")])]),s._v(" sym1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" sym2\n  sym1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("object_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" sym2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("object_id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\nsymbol_compare "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":foobar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":foobar")]),s._v("\n\n")])])]),a("p",[a("strong",[s._v("2. A Ruby symbol is a label in a free-form enumeration")])]),s._v(" "),a("p",[s._v("In C++, we can use “enumerations” to represent families of related constants:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("enum "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("BugStatus")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OPEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CLOSED")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("BugStatus")]),s._v(" original_status "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OPEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("BugStatus")]),s._v(" current_status  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CLOSED")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),a("p",[s._v("But because Ruby is a dynamic language, we don’t worry about declaring a BugStatus type, or keeping track of the legal values. Instead, we represent the enumeration values as symbols:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("original_status "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":open")]),s._v("\ncurrent_status  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":closed")]),s._v("\n\n")])])]),a("p",[a("strong",[s._v("3. A Ruby symbol is a constant, unique name")])]),s._v(" "),a("p",[s._v("In Ruby, we can change the contents of a string:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foobar"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("b "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "boo"')]),s._v("\n\n")])])]),a("p",[s._v("But we can’t change the contents of a symbol:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":foobar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("b "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Raises an error")]),s._v("\n\n")])])]),a("p",[a("strong",[s._v("4. A Ruby symbol is the keyword for a keyword argument")])]),s._v(" "),a("p",[s._v("When passing keyword arguments to a Ruby function, we specify the keywords using symbols:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Build a URL for 'bug' using Rails.")]),s._v("\nurl_for "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":controller")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'bug'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":action")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'show'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":id")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" bug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id\n\n")])])]),a("p",[a("strong",[s._v("5. A Ruby symbol is an excellent choice for a hash key")])]),s._v(" "),a("p",[s._v("Typically, we’ll use symbols to represent the keys of a hash table:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("options "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\noptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":auto_save")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\noptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":show_comments")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);