(window.webpackJsonp=window.webpackJsonp||[]).push([[543],{951:function(s,a,t){"use strict";t.r(a);var e=t(31),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"word-splitting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#word-splitting"}},[s._v("#")]),s._v(" Word splitting")]),s._v(" "),t("h2",{attrs:{id:"bad-effects-of-word-splitting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bad-effects-of-word-splitting"}},[s._v("#")]),s._v(" Bad effects of word splitting")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I am a string with spaces'")]),s._v("\n$ "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"didn\'t match"')]),s._v("\nbash: "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(": too many arguments\ndidn't match\n\n")])])]),t("blockquote",[t("p",[t("code",[s._v("[ $a = $a ]")]),s._v(" was interpreted as "),t("code",[s._v("[ I am a string with spaces = I am a string with spaces ]")]),s._v(". "),t("code",[s._v("[")]),s._v(" is the "),t("code",[s._v("test")]),s._v(" command for which "),t("code",[s._v("I am a string with spaces")]),s._v(" is not a single argument, rather it's "),t("strong",[s._v("6")]),s._v(" arguments!!")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" something "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"didn\'t match"')]),s._v("\nbash: "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(": too many arguments\ndidn't match\n\n")])])]),t("blockquote",[t("p",[t("code",[s._v("[ $a = something ]")]),s._v(" was interpreted as "),t("code",[s._v("[ I am a string with spaces = something ]")])])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'something'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nbash: "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(": too many arguments\n\n")])])]),t("blockquote",[t("p",[s._v("The "),t("code",[s._v("grep")]),s._v(" command returns a multiline string with spaces, so you can just imagine how many arguments are there...ðŸ˜„")])]),s._v(" "),t("p",[t("strong",[s._v("See "),t("a",{attrs:{href:"http://stackoverflow.com/documentation/bash/5472/word-splitting/19453/what-when-and-why#t=201608151204564817213",target:"_blank",rel:"noopener noreferrer"}},[s._v("what, when and why"),t("OutboundLink")],1),s._v(" for the basics.")])]),s._v(" "),t("h2",{attrs:{id:"splitting-with-ifs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#splitting-with-ifs"}},[s._v("#")]),s._v(" Splitting with IFS")]),s._v(" "),t("p",[s._v("To be more clear, let's create a script named "),t("code",[s._v("showarg")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("printf")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%d args:"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("printf")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" <%s>"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n\n")])])]),t("p",[s._v("Now let's see the differences:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This is an example"')]),s._v("\n$ showarg "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" args: "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("This"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("is"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("an"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("example"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n")])])]),t("blockquote",[t("p",[t("code",[s._v("$var")]),s._v(" is split into 4 args. "),t("code",[s._v("IFS")]),s._v(" is white space characters and thus word splitting occurred in spaces")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This/is/an/example"')]),s._v("\n$ showarg "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" args: "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("This/is/an/example"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n")])])]),t("blockquote",[t("p",[s._v("In above word splitting didn't occur because the "),t("code",[s._v("IFS")]),s._v(" characters weren't found.")])]),s._v(" "),t("p",[s._v("Now let's set "),t("code",[s._v("IFS=/")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("IFS")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/\n$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This/is/an/example"')]),s._v("\n$ showarg "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" args: "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("This"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("is"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("an"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("example"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n")])])]),t("blockquote",[t("p",[s._v("The "),t("code",[s._v("$var")]),s._v(" is splitting into 4 arguments not a single argument.")])]),s._v(" "),t("h2",{attrs:{id:"what-when-and-why"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#what-when-and-why"}},[s._v("#")]),s._v(" What, when and Why?")]),s._v(" "),t("p",[s._v("When the shell performs "),t("strong",[s._v("parameter expansion")]),s._v(", "),t("strong",[s._v("command substitution")]),s._v(", "),t("strong",[s._v("variable or arithmetic expansion")]),s._v(", it scans for word boundaries in the result. If any word boundary is found, then the result is split into multiple words at that position. The word boundary is defined by a shell variable "),t("code",[s._v("IFS")]),s._v(" (Internal Field Separator). The default value for IFS are space, tab and newline, i.e. word splitting will occur on these three white space characters if not prevented explicitly.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" -x\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I am\na\nmultiline string'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("fun")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('-"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v('*"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('".'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),s._v('."')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nfun "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var")]),s._v("\n\n")])])]),t("p",[s._v("In the above example this is how the "),t("code",[s._v("fun")]),s._v(" function is being executed:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("fun I am a multiline string\n\n")])])]),t("blockquote",[t("p",[t("code",[s._v("$var")]),s._v(" is split into 5 args, only "),t("code",[s._v("I")]),s._v(", "),t("code",[s._v("am")]),s._v(" and "),t("code",[s._v("a")]),s._v(" will be printed.")])]),s._v(" "),t("h2",{attrs:{id:"ifs-word-splitting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ifs-word-splitting"}},[s._v("#")]),s._v(" IFS & word splitting")]),s._v(" "),t("p",[t("strong",[s._v("See "),t("a",{attrs:{href:"http://stackoverflow.com/documentation/bash/5472/word-splitting/19453/what-when-and-why#t=201608151204564817213",target:"_blank",rel:"noopener noreferrer"}},[s._v("what, when and why"),t("OutboundLink")],1),s._v(" if you don't know about the affiliation of IFS to word splitting")])]),s._v(" "),t("p",[t("strong",[s._v("let's set the IFS to space character only:")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" -x\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I am\na\nmultiline string'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("IFS")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("fun")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('-"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v('*"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('".'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),s._v('."')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nfun "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var")]),s._v("\n\n")])])]),t("p",[s._v("This time word splitting will only work on spaces. The "),t("code",[s._v("fun")]),s._v(" function will be executed like this:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("fun I "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'am\na\nmultiline'")]),s._v(" string\n\n")])])]),t("blockquote",[t("p",[t("code",[s._v("$var")]),s._v(" is split into 3 args. "),t("code",[s._v("I")]),s._v(", "),t("code",[s._v("am\\na\\nmultiline")]),s._v(" and "),t("code",[s._v("string")]),s._v(" will be printed")])]),s._v(" "),t("p",[t("strong",[s._v("Let's set the IFS to newline only:")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("IFS")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("$'"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n\n")])])]),t("p",[s._v("Now the "),t("code",[s._v("fun")]),s._v(" will be executed like:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("fun "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I am'")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'multiline string'")]),s._v("\n\n")])])]),t("blockquote",[t("p",[t("code",[s._v("$var")]),s._v(" is split into 3 args. "),t("code",[s._v("I am")]),s._v(", "),t("code",[s._v("a")]),s._v(", "),t("code",[s._v("multiline string")]),s._v(" will be printed")])]),s._v(" "),t("p",[t("strong",[s._v("Let's see what happens if we set IFS to nullstring:")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("IFS")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n\n")])])]),t("p",[s._v("This time the "),t("code",[s._v("fun")]),s._v(" will be executed like this:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("fun "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I am\na\nmultiline string'")]),s._v("\n\n")])])]),t("blockquote",[t("p",[t("code",[s._v("$var")]),s._v(" is not split i.e it remained a single arg.")])]),s._v(" "),t("p",[t("strong",[s._v("You can prevent word splitting by setting the IFS to nullstring")])]),s._v(" "),t("p",[t("strong",[s._v("A general way of preventing word splitting is to use double quote:")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("fun "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var")]),s._v('"')]),s._v("\n\n")])])]),t("p",[s._v("will prevent word splitting in all the cases discussed above i.e the "),t("code",[s._v("fun")]),s._v(" function will be executed with only one argument.")]),s._v(" "),t("h2",{attrs:{id:"usefulness-of-word-splitting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usefulness-of-word-splitting"}},[s._v("#")]),s._v(" Usefulness of word splitting")]),s._v(" "),t("p",[s._v("There are some cases where word splitting can be useful:")]),s._v(" "),t("p",[t("strong",[s._v("Filling up array:")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("arr")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" -o "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'[0-9]\\+'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])])]),t("blockquote",[t("p",[s._v("This will fill up "),t("code",[s._v("arr")]),s._v(" with all numeric values found in "),t("strong",[s._v("file")])])]),s._v(" "),t("p",[t("strong",[s._v("Looping through space separated words:")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("words")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'foo bar baz'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("w")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$words")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"W: '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$w")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n")])])]),t("p",[s._v("Output:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("W: foo\nW: bar\nW: baz\n\n")])])]),t("p",[t("strong",[s._v("Passing space separated parameters which don't contain white spaces:")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("packs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'apache2 php php-mbstring php-mysql'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$packs")]),s._v("\n\n")])])]),t("p",[s._v("or")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("packs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\napache2\nphp\nphp-mbstring\nphp-mysql\n'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$packs")]),s._v("\n\n")])])]),t("blockquote",[t("p",[s._v("This will install the packages. If you double quote the "),t("code",[s._v("$packs")]),s._v(" then it will throw an error.")])]),s._v(" "),t("blockquote",[t("p",[s._v("Unquoetd "),t("code",[s._v("$packs")]),s._v(" is sending all the space separated package names as arguments to "),t("code",[s._v("apt-get")]),s._v(", while quoting it will send the "),t("code",[s._v("$packs")]),s._v(" string as a single argument and then "),t("code",[s._v("apt-get")]),s._v(" will try to install a package named "),t("code",[s._v("apache2 php php-mbstring php-mysql")]),s._v(" (for the first one) which obviously doesn't exist")])]),s._v(" "),t("p",[t("strong",[s._v("See "),t("a",{attrs:{href:"http://stackoverflow.com/documentation/bash/5472/word-splitting/19453/what-when-and-why#t=201608151204564817213",target:"_blank",rel:"noopener noreferrer"}},[s._v("what, when and why"),t("OutboundLink")],1),s._v(" for the basics.")])]),s._v(" "),t("h2",{attrs:{id:"splitting-by-separator-changes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#splitting-by-separator-changes"}},[s._v("#")]),s._v(" Splitting by separator changes")]),s._v(" "),t("p",[s._v("We can just do simple replacement of separators from space to new line, as following example.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$sentence")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v("\n\n")])])]),t("p",[s._v("It'll split the value of the variable "),t("code",[s._v("sentence")]),s._v(" and show it line by line respectively.")]),s._v(" "),t("h4",{attrs:{id:"syntax"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[s._v("#")]),s._v(" Syntax")]),s._v(" "),t("ul",[t("li",[s._v("Set IFS to newline: IFS=$'\\n'")]),s._v(" "),t("li",[s._v("Set IFS to nullstring: IFS=")]),s._v(" "),t("li",[s._v("Set IFS to / character: IFS=/")])]),s._v(" "),t("h4",{attrs:{id:"parameters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[s._v("#")]),s._v(" Parameters")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("Parameter")]),s._v(" "),t("th",[s._v("Details")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("IFS")]),s._v(" "),t("td",[s._v("Internal field separator")])]),s._v(" "),t("tr",[t("td",[s._v("-x")]),s._v(" "),t("td",[s._v("Print commands and their arguments as they are executed (Shell option)")])])])]),s._v(" "),t("h4",{attrs:{id:"remarks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[s._v("#")]),s._v(" Remarks")]),s._v(" "),t("ul",[t("li",[s._v("Word splitting is not performed during assignments e.g "),t("code",[s._v("newvar=$var")])]),s._v(" "),t("li",[s._v("Word splitting is not performed in the "),t("code",[s._v("[[ ... ]]")]),s._v(" construct")]),s._v(" "),t("li",[s._v("Use double quotes on variables to prevent word splitting")])])])}),[],!1,null,null,null);a.default=n.exports}}]);