(window.webpackJsonp=window.webpackJsonp||[]).push([[2854],{3263:function(t,a,s){"use strict";s.r(a);var n=s(31),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"apply-family-of-functions-functionals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#apply-family-of-functions-functionals"}},[t._v("#")]),t._v(" *apply family of functions (functionals)")]),t._v(" "),s("h2",{attrs:{id:"using-built-in-functionals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-built-in-functionals"}},[t._v("#")]),t._v(" Using built-in functionals")]),t._v(" "),s("h3",{attrs:{id:"built-in-functionals-lapply-sapply-and-mapply"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#built-in-functionals-lapply-sapply-and-mapply"}},[t._v("#")]),t._v(" Built-in functionals: lapply(), sapply(), and mapply()")]),t._v(" "),s("p",[t._v("R comes with built-in functionals, of which perhaps the most well-known are the apply family of functions. Here is a description of some of the most common apply functions:")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("lapply()")]),t._v("    = takes a list as an argument and applies the specified function to the list.\n")])]),s("li",[s("code",[t._v("sapply()")]),t._v(" = the same as "),s("code",[t._v("lapply()")]),t._v(" but attempts to simplify the output to a vector or a matrix.\n"),s("ul",[s("p")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("vapply()")]),t._v(" = a variant of "),s("code",[t._v("sapply()")]),t._v(" in which the output object's type must be specified.")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Map()")]),t._v(" is an alias to "),s("code",[t._v("mapply()")]),t._v(" with "),s("code",[t._v("SIMPLIFY = FALSE")]),t._v(".")])])]),t._v(" "),s("h3",{attrs:{id:"lapply"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lapply"}},[t._v("#")]),t._v(" lapply()")]),t._v(" "),s("p",[s("code",[t._v("lapply()")]),t._v(" can be used with two different iterations:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("lapply(variable, FUN)")])]),t._v(" "),s("li",[s("code",[t._v("lapply(seq_along(variable), FUN)")])])]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Two ways of finding the mean of x")]),t._v("\nset.seed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" data.frame"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rnorm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rnorm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("seq_along"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" mean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"sapply"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sapply"}},[t._v("#")]),t._v(" sapply()")]),t._v(" "),s("p",[s("code",[t._v("sapply()")]),t._v(" will attempt to resolve its output to either a vector or a matrix.")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Two examples to show the different outputs of sapply()")]),t._v("\nsapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("letters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" print"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## produces a vector")]),t._v("\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" beta "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" logic "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("FALSE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("FALSE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nsapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" quantile"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## produces a matrix")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"mapply"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mapply"}},[t._v("#")]),t._v(" mapply()")]),t._v(" "),s("p",[s("code",[t._v("mapply()")]),t._v(" works much like "),s("code",[t._v("lapply()")]),t._v(" except it can take multiple vectors as input (hence the m for multivariate).")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v("mapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 3 will be "recycled" by mapply')]),t._v("\n\n")])])]),s("h2",{attrs:{id:"bulk-file-loading"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bulk-file-loading"}},[t._v("#")]),t._v(" Bulk File Loading")]),t._v(" "),s("p",[t._v("for a large number of files which may need to be operated on in a similar process and with well structured file names.")]),t._v(" "),s("p",[t._v("firstly a vector of the file names to be accessed must be created, there are multiple options for this:")]),t._v(" "),s("li",[t._v("\nCreating the vector manually with `paste0()`\n"),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v(" files "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" paste0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"file_"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('".rds"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])])]),t._v(" "),s("li",[t._v("\nUsing `list.files()` with a regex search term for the file type, requires knowledge of regular expressions ([regex](http://stackoverflow.com/documentation/regex/259/introduction-to-regular-expressions#t=201607212348569143593)) if other files of same type are in the directory.\n"),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v(" files "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" list.files"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pattern "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\.rds$"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" full.names "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])])]),t._v(" "),s("p",[t._v("where "),s("code",[t._v("X")]),t._v(" is a vector of part of the files naming format used.")]),t._v(" "),s("p",[s("code",[t._v("lapply")]),t._v(" will output each response as element of a list.")]),t._v(" "),s("p",[s("code",[t._v("readRDS")]),t._v(" is specific to "),s("code",[t._v(".rds")]),t._v(" files and will change depending on the application of the process.")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v("my_file_list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" lapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("files"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" readRDS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("This is not necessarily faster than a for loop from testing but allows all files to be an element of a list without assigning them explicitly.")]),t._v(" "),s("p",[t._v("Finally, we often need to load multiple packages at once.\nThis trick can do it quite easily by applying "),s("code",[t._v("library()")]),t._v(" to all libraries that we wish to import:")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v("lapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jsonlite"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"stringr"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"igraph"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("library"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("character.only"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"combining-multiple-data-frames-lapply-mapply"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#combining-multiple-data-frames-lapply-mapply"}},[t._v("#")]),t._v(" Combining multiple "),s("code",[t._v("data.frames")]),t._v(" ("),s("code",[t._v("lapply")]),t._v(", "),s("code",[t._v("mapply")]),t._v(")")]),t._v(" "),s("p",[t._v("In this exercise, we will generate four bootstrap linear regression models and combine the summaries of these models into a single data frame.")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v("library"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("broom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#* Create the bootstrap data sets")]),t._v("\nBootData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" lapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" mtcars"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sample"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("nrow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mtcars"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                             size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nrow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mtcars"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                             replace "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#* Fit the models")]),t._v("\nModels "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" lapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BootData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" lm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mpg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v(" qsec "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" wt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" factor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("am"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                 data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#* Tidy the output into a data.frame")]),t._v("\nTidied "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" lapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Models"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                 tidy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#* Give each element in the Tidied list a name")]),t._v("\nTidied "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" setNames"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tidied"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" paste0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Boot"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" seq_along"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tidied"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("At this point, we can take two approaches to inserting the names into the data.frame.")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#* Insert the element name into the summary with `lapply`")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#* Requires passing the names attribute to `lapply` and referencing `Tidied` within")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#* the applied function.")]),t._v("\nDescribed_lapply "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" \n lapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("names"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tidied"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" cbind"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Tidied"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nCombined_lapply "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" do.call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rbind"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Described_lapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#* Insert the element name into the summary with `mapply`")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#* Allows us to pass the names and the elements as separate arguments.")]),t._v("\nDescribed_mapply "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" \n mapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dframe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" cbind"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dframe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  names"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Tidied"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Tidied"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  SIMPLIFY "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("FALSE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nCombined_mapply "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" do.call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rbind"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Described_mapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("If you're a fan of "),s("code",[t._v("magrittr")]),t._v(" style pipes, you can accomplish the entire task in a single chain (though it may not be prudent to do so if you need any of the intermediary objects, such as the model objects themselves):")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v("library"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("magrittr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlibrary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("broom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nCombined "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" lapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" mtcars"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sample"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("nrow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mtcars"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                             size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nrow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mtcars"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                             replace "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token percent-operator operator"}},[t._v("%>%")]),t._v("\n lapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" lm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" mpg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v(" qsec "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" wt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" factor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("am"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token percent-operator operator"}},[t._v("%>%")]),t._v("\n lapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tidy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token percent-operator operator"}},[t._v("%>%")]),t._v("\n setNames"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("paste0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Boot"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" seq_along"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token percent-operator operator"}},[t._v("%>%")]),t._v("\n mapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dframe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" cbind"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dframe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        nm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" names"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        dframe "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        SIMPLIFY "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("FALSE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token percent-operator operator"}},[t._v("%>%")]),t._v("\n do.call"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rbind"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"using-user-defined-functionals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-user-defined-functionals"}},[t._v("#")]),t._v(" Using user-defined functionals")]),t._v(" "),s("h3",{attrs:{id:"user-defined-functionals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#user-defined-functionals"}},[t._v("#")]),t._v(" User-defined functionals")]),t._v(" "),s("p",[t._v("Users can create their own functionals to varying degrees of complexity. The following examples are from "),s("a",{attrs:{href:"http://adv-r.had.co.nz/Functionals.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Functionals"),s("OutboundLink")],1),t._v(" by Hadley Wickham:")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v("randomise "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("runif"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        \nlapply2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token ellipsis"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    out "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" vector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"list"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" seq_along"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token ellipsis"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    out\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("In the first case, "),s("code",[t._v("randomise")]),t._v(" accepts a single argument "),s("code",[t._v("f")]),t._v(", and calls it on a sample of Uniform random variables. To demonstrate equivalence, we call "),s("code",[t._v("set.seed")]),t._v(" below:")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v("set.seed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nrandomise"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[1] 0.4972778")]),t._v("\n    \nset.seed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("runif"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[1] 0.4972778")]),t._v("\n\n\nset.seed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nrandomise"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("max"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[1] 0.9994045")]),t._v("\n\nset.seed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmax"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("runif"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[1] 0.9994045")]),t._v("\n\n")])])]),s("p",[t._v("The second example is a re-implementation of "),s("code",[t._v("base::lapply")]),t._v(", which uses functionals to apply an operation ("),s("code",[t._v("f")]),t._v(") to each element in a list ("),s("code",[t._v("x")]),t._v("). The "),s("code",[t._v("...")]),t._v(" parameter allows the user to pass additional arguments to "),s("code",[t._v("f")]),t._v(", such as the "),s("code",[t._v("na.rm")]),t._v(" option in the "),s("code",[t._v("mean")]),t._v(" function:")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v("lapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NA")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [[1]]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [[2]]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] NA")]),t._v("\n\nlapply2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NA")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [[1]]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [[2]]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] NA")]),t._v("\n\n\nlapply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NA")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" na.rm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [[1]]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [[2]]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 4")]),t._v("\n\nlapply2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NA")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" na.rm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [[1]]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [[2]]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 4")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"use-anonymous-functions-with-apply"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#use-anonymous-functions-with-apply"}},[t._v("#")]),t._v(" Use anonymous functions with apply")]),t._v(" "),s("p",[s("code",[t._v("apply")]),t._v(" is used to evaluate a function (maybe an anonymous one) over the margins of an array or matrix.")]),t._v(" "),s("p",[t._v("Let's use the "),s("code",[t._v("iris")]),t._v(" dataset to illustrate this idea. The "),s("code",[t._v("iris")]),t._v(" dataset has measurements of 150 flowers from 3 species. Let's see how this dataset is structured:")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iris"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.1")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.5")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.4")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),t._v("  setosa\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.9")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.4")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),t._v("  setosa\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.7")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.2")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.3")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),t._v("  setosa\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.6")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.5")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),t._v("  setosa\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.6")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.4")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),t._v("  setosa\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.4")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.9")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.7")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.4")]),t._v("  setosa\n\n")])])]),s("p",[t._v("Now, imagine that you want to know the mean of "),s("strong",[t._v("each")]),t._v(" of these variables. One way to solve this might be to use a "),s("code",[t._v("for")]),t._v(" loop, but R programmers will often prefer to use "),s("code",[t._v("apply")]),t._v(" (for reasons why, see Remarks):")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" apply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iris"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.843333")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.057333")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.758000")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.199333")]),t._v("\n\n")])])]),s("ul",[s("li",[t._v("In the first parameter, we subset "),s("code",[t._v("iris")]),t._v(" to include only the first 4 columns, because "),s("code",[t._v("mean")]),t._v(" only works on numeric data.")]),t._v(" "),s("li",[t._v("The second parameter value of "),s("code",[t._v("2")]),t._v(" indicates that we want to work on the columns only (the second subscript of the r×c array); "),s("code",[t._v("1")]),t._v(" would give the row means.")])]),t._v(" "),s("p",[t._v("In the same way we can calculate more meaningful values:")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# standard deviation")]),t._v("\napply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iris"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# variance")]),t._v("\napply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iris"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[s("strong",[t._v("Caveat")]),t._v(": R has some built-in functions which are better for calculating column and row sums and means: "),s("a",{attrs:{href:"http://stat.ethz.ch/R-manual/R-patched/library/base/html/colSums.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("colMeans")]),t._v(" and "),s("code",[t._v("rowMeans")]),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("Now, let's do a different and more meaningful task: let's calculate the mean "),s("strong",[t._v("only")]),t._v(" for those values which are bigger than "),s("code",[t._v("0.5")]),t._v(". For that, we will create our own "),s("code",[t._v("mean")]),t._v(" function.")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" our.mean."),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" mean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" apply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iris"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" our.mean."),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.843333")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.057333")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.758000")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.665347")]),t._v("\n\n")])])]),s("p",[s("strong",[t._v("(Note the difference in the mean of "),s("code",[t._v("Petal.Width")]),t._v(")")])]),t._v(" "),s("p",[t._v("But, what if we don't want to use this function in the rest of our code? Then, we can use an anonymous function, and write our code like this:")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[t._v("apply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iris"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" mean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("So, as we have seen, we can use "),s("code",[t._v("apply")]),t._v(" to execute the same operation on columns or rows of a dataset using only one line.")]),t._v(" "),s("p",[s("strong",[t._v("Caveat")]),t._v(": Since "),s("code",[t._v("apply")]),t._v(" returns very different kinds of output depending on the length of the results of the specified function, it may not be the best choice in cases where you are not working interactively. Some of the other "),s("code",[t._v("*apply")]),t._v(" family functions are a bit more predictable (see Remarks).")]),t._v(" "),s("h4",{attrs:{id:"remarks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),s("p",[t._v("A function in the "),s("code",[t._v("*apply")]),t._v(" family is an abstraction of a "),s("code",[t._v("for")]),t._v(" loop. Compared with the "),s("code",[t._v("for")]),t._v(" loops "),s("code",[t._v("*apply")]),t._v(" functions have the following advantages:")]),t._v(" "),s("ol",[s("li",[t._v("Require less code to write.")]),t._v(" "),s("li",[t._v("Doesn't have an iteration counter.")]),t._v(" "),s("li",[t._v("Doesn't use temporary variables to store intermediate results.")])]),t._v(" "),s("p",[t._v("However "),s("code",[t._v("for")]),t._v(" loops are more general and can give us more control allowing to achieve complex computations that are not always trivial to do using "),s("code",[t._v("*apply")]),t._v(" functions.")]),t._v(" "),s("p",[t._v("The relationship between "),s("code",[t._v("for")]),t._v(" loops and "),s("code",[t._v("*apply")]),t._v(" functions is explained in the "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/r/2201/for-loops#t=20160722154010460381&a=remarks",target:"_blank",rel:"noopener noreferrer"}},[t._v("documentation for "),s("code",[t._v("for")]),t._v(" loops"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"members-of-the-apply-family"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#members-of-the-apply-family"}},[t._v("#")]),t._v(" Members of the "),s("code",[t._v("*apply")]),t._v(" Family")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("*apply")]),t._v(" family of functions contains several variants of the same principle that differ based primarily on the kind of output they return.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("function")]),t._v(" "),s("th",[t._v("Input")]),t._v(" "),s("th",[t._v("Output")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("apply")])]),t._v(" "),s("td",[s("code",[t._v("matrix")]),t._v(", "),s("code",[t._v("data.frame")]),t._v(", or "),s("code",[t._v("array")])]),t._v(" "),s("td",[t._v("vector or matrix (depending on the length of each element returned)")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("sapply")])]),t._v(" "),s("td",[t._v("vector or "),s("code",[t._v("list")])]),t._v(" "),s("td",[t._v("vector or matrix (depending on the length of each element returned)")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("lapply")])]),t._v(" "),s("td",[t._v("vector or "),s("code",[t._v("list")])]),t._v(" "),s("td",[s("code",[t._v("list")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("vapply")])]),t._v(" "),s("td",[t._v("vector or `list")]),t._v(" "),s("td",[t._v("vector or matrix (depending on the length of each element returned) of the user-designated class")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("mapply")])]),t._v(" "),s("td",[t._v("multiple vectors, "),s("code",[t._v("lists")]),t._v(" or a combination")]),t._v(" "),s("td",[s("code",[t._v("list")])])])])]),t._v(" "),s("p",[t._v('See "Examples" to see how each of these functions is used.')])])}),[],!1,null,null,null);a.default=e.exports}}]);