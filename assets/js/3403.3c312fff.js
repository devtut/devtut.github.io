(window.webpackJsonp=window.webpackJsonp||[]).push([[3403],{3810:function(t,s,a){"use strict";a.r(s);var n=a(31),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arrays"}},[t._v("#")]),t._v(" Arrays")]),t._v(" "),a("h2",{attrs:{id:"multidimensional-arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multidimensional-arrays"}},[t._v("#")]),t._v(" Multidimensional Arrays")]),t._v(" "),a("h3",{attrs:{id:"multidimensional-arrays-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multidimensional-arrays-2"}},[t._v("#")]),t._v(" Multidimensional Arrays")]),t._v(" "),a("p",[t._v("As the name indicates, multi dimensional arrays are arrays that contain more than one dimension, usually two or three but it can have up to 32 dimensions.")]),t._v(" "),a("p",[t._v("A multi array works like a matrix with various levels, take in example a comparison between one, two, and three Dimensions.")]),t._v(" "),a("p",[t._v("One Dimension is your typical array, it looks like a list of elements.")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1D")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1D")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Visually"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("Two Dimensions would look like a Sudoku Grid or an Excel sheet, when initializing the array you would define how many rows and columns the array would have.")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2D")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'this would result in a 3x3 grid ")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2D")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Visually"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("Three Dimensions would start to look like Rubik's Cube, when initializing the array you would define rows and columns and layers/depths the array would have.")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3D")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'this would result in a 3x3x3 grid")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3D")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Visually"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1s")]),t._v("t layer                 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("nd layer                  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3r")]),t._v("d layer\n         front                     middle                     back\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ¦ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ¦ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ¦ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ¦ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ¦ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ¦ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("Further dimensions could be thought as the multiplication of the 3D, so a 4D(1,3,3,3) would be two side-by-side 3D arrays.")]),t._v(" "),a("h3",{attrs:{id:"two-dimension-array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#two-dimension-array"}},[t._v("#")]),t._v(" Two-Dimension Array")]),t._v(" "),a("p",[a("strong",[t._v("Creating")]),t._v(" "),a("br"),t._v(" "),a("br"),t._v("\nThe example below will be a compilation of a list of employees, each employee will have a set of information on the list (First Name, Surname, Address, Email, Phone ...), the example will essentially be storing on the array (employee,information) being the (0,0) is the first employee's first name.")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Bosses "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'set bosses as Variant, so we can input any data type we want")]),t._v("\n\nBosses "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ["),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jonh"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Snow"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"President"')]),t._v(";"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ygritte"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Wild"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Vice-President"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("]\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'initialise a 2D array directly by filling it with information, the redult wil be a array(1,2) size 2x3 = 6 elements")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Employees "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'initialize your Employees array as variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'initialize and ReDim the Employee array so it is a dynamic array instead of a static one, hence treated differently by the VBA Compiler")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'declaring an 2D array that can store 100 employees with 6 elements of information each, but starts empty")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'the array size is 101 x 6 and contains 606 elements")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" employee "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'for each employee/row in the array, UBound for 2D arrays, which will get the last element on the array")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'needs two parameters 1st the array you which to check and 2nd the dimension, in this case 1 = employee and 2 = information")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" information_e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'for each information element/column in the array")]),t._v("\n        \n        Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("employee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" information_e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" InformationNeeded "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' InformationNeeded would be the data to fill the array")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'iterating the full array will allow for direct attribution of information into the element coordinates")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("Resizing")]),t._v(" "),a("br"),t._v(" "),a("br"),t._v("\nResizing or "),a("code",[t._v("ReDim Preserve")]),t._v(" a Multi-Array like the norm for a One-Dimension array would get an error, instead the information needs to be transferred into a Temporary array with the same size as the original plus the number of row/columns to add. In the example below we'll see how to initialize a Temp Array, transfer the information over from the original array, fill the remaining empty elements, and replace the temp array by the original array.")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" TempEmp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'initialise your temp array as variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" TempEmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'ReDim/Resize Temp array as a 2D array with size UBound(Employees)+1 = (last element in Employees 1st dimension) + 1,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'the 2nd dimension remains the same as the original array. we effectively add 1 row in the Employee array")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'transfer")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" info "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'to transfer Employees into TempEmp we iterate both arrays and fill TempEmp with the corresponding element value in Employees")]),t._v("\n        TempEmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'fill remaining")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'after the transfers the Temp array still has unused elements at the end, being that it was increased")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'to fill the remaining elements iterate from the last "row" with values to the last row in the array')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'in this case the last row in Temp will be the size of the Employees array rows + 1, as the last row of Employees array is already filled in the TempArray")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TempEmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" info "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TempEmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TempEmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        \n        TempEmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" InformationNeeded "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NewRow"')]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'erase Employees, attribute Temp array to Employees and erase Temp array")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Erase")]),t._v(" Employees\nEmployees "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" TempEmp\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Erase")]),t._v(" TempEmp\n\n")])])]),a("p",[a("strong",[t._v("Changing Element Values")]),t._v(" "),a("br"),t._v(" "),a("br"),t._v("\nTo change/alter the values in a certain element can be done by simply calling the coordinate to change and giving it a new value:\n"),a("code",[t._v('Employees(0, 0) = "NewValue"')])]),t._v(" "),a("p",[t._v("Alternatively iterate through the coordinates use conditions to match values corresponding to the parameters needed:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gloria"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("And")]),t._v(" Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Stephan"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'if value found")]),t._v("\n        Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Married, Last Name Change"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Exit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'don't iterate through a full array unless necessary")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("Reading")]),t._v(" "),a("br"),t._v(" "),a("br")]),t._v(" "),a("p",[t._v("Accessing the elements in the array can be done with a Nested Loop (iterating every element), Loop and Coordinate (iterate Rows and accessing columns directly), or accessing directly with both coordinates.")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'nested loop, will iterate through all elements")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" info "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'loop and coordinate, iteration through all rows and in each row accessing all columns directly")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'directly accessing element with coordinates")]),t._v("\nDebug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[a("strong",[a("strong",[t._v("Remember")]),t._v(", it's always handy to keep an array map when using Multidimensional arrays, they can easily become confusion.")])]),t._v(" "),a("h3",{attrs:{id:"three-dimension-array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#three-dimension-array"}},[t._v("#")]),t._v(" Three-Dimension Array")]),t._v(" "),a("p",[t._v("For the 3D array, we'll use the same premise as the 2D array, with the addition of not only storing the Employee and Information but as well Building they work in.")]),t._v(" "),a("p",[t._v("The 3D array will have the Employees (can be thought of as Rows), the Information (Columns), and Building that can be thought of as different sheets on an excel document, they have the same size between them, but every sheets has a different set of information in its cells/elements. The 3D array will contain "),a("strong",[a("strong",[t._v("n")])]),t._v(" number of 2D arrays.")]),t._v(" "),a("p",[a("strong",[t._v("Creating")]),t._v(" "),a("br"),t._v(" "),a("br"),t._v("\nA 3D array needs 3 coordinates to be initialized "),a("code",[t._v("Dim 3Darray(2,5,5) As Variant")]),t._v(" the first coordinate on the array will be the number of Building/Sheets (different sets of rows and columns), second coordinate will define Rows and third Columns. The "),a("code",[t._v("Dim")]),t._v(" above will result in a 3D array with 108 elements ("),a("code",[t._v("3*6*6")]),t._v("), effectively having 3 different sets of 2D arrays.")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" ThreeDArray "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'initialise your ThreeDArray array as variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'declaring an 3D array that can store two sets of 51 employees with 6 elements of information each, but starts empty")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'the array size is 2 x 51 x 6 and contains 612 elements")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" building "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'for each building/set in the array")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" employee "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'for each employee/row in the array")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" information_e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'for each information element/column in the array")]),t._v("\n            \n            ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("building"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" employee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" information_e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" InformationNeeded "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' InformationNeeded would be the data to fill the array")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'iterating the full array will allow for direct attribution of information into the element coordinates")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("Resizing")]),t._v(" "),a("br"),t._v(" "),a("br")]),t._v(" "),a("p",[t._v("Resizing a 3D array is similar to resizing a 2D, first create a Temporary array with the same size of the original adding one in the coordinate of the parameter to increase, the first coordinate will increase the number of sets in the array, the second and third coordinates will increase the number of Rows or Columns in each set.")]),t._v(" "),a("p",[t._v("The example below increases the number of Rows in each set by one, and fills those recently added elements with new information.")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" TempEmp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'initialise your temp array as variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" TempEmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'ReDim/Resize Temp array as a 3D array with size UBound(ThreeDArray)+1 = (last element in Employees 2nd dimension) + 1,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'the other dimension remains the same as the original array. we effectively add 1 row in the for each set of the 3D array")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'transfer")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" building "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" info "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'to transfer ThreeDArray into TempEmp by iterating all sets in the 3D array and fill TempEmp with the corresponding element value in each set of each row")]),t._v("\n            TempEmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("building"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("building"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'fill remaining")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'to fill the remaining elements we need to iterate from the last "row" with values to the last row in the array in each set, remember that the first empty element is the original array Ubound() plus 1')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" building "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TempEmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TempEmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TempEmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" info "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TempEmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TempEmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            \n            TempEmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("building"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" InformationNeeded "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NewRow"')]),t._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'erase Employees, attribute Temp array to Employees and erase Temp array")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Erase")]),t._v(" ThreeDArray\nThreeDArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" TempEmp\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Erase")]),t._v(" TempEmp\n\n")])])]),a("p",[a("strong",[t._v("Changing Element Values and Reading")]),t._v(" "),a("br"),t._v(" "),a("br"),t._v("\nReading and changing the elements on the 3D array can be done similarly to the way we do the 2D array, just adjust for the extra level in the loops and coordinates.")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Do")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' using Do ... While for early exit")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" building "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("building"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Gloria"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("And")]),t._v(" ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("building"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Stephan"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'if value found")]),t._v("\n                ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("building"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Married, Last Name Change"')]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Exit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Do")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'don't iterate through all the array unless necessary")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Loop")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("While")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'nested loop, will iterate through all elements")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" building "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" info "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("building"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'loop and coordinate, will iterate through all set of rows and ask for the row plus the value we choose for the columns")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" building "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("building"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("building"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("building"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("building"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("building"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print ThreeDArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("building"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'directly accessing element with coordinates")]),t._v("\nDebug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print Employees"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"dynamic-arrays-array-resizing-and-dynamic-handling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-arrays-array-resizing-and-dynamic-handling"}},[t._v("#")]),t._v(" Dynamic Arrays (Array Resizing and Dynamic Handling)")]),t._v(" "),a("h3",{attrs:{id:"dynamic-arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-arrays"}},[t._v("#")]),t._v(" Dynamic Arrays")]),t._v(" "),a("p",[t._v("Adding and reducing variables on an array dynamically is a huge advantage for when the information you are treating does not have a set number of variables.")]),t._v(" "),a("h3",{attrs:{id:"adding-values-dynamically"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adding-values-dynamically"}},[t._v("#")]),t._v(" Adding Values Dynamically")]),t._v(" "),a("p",[t._v("You can simply resize the Array with the "),a("code",[t._v("ReDim")]),t._v(" Statement, this will resize the array but to if you which to retain the information already stored in the array you'll need the part "),a("code",[t._v("Preserve")]),t._v(".")]),t._v(" "),a("p",[t._v("In the example below we create an array and increase it by one more variable in each iteration while preserving the values already in the array.")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Dynamic_array "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' first we set Dynamic_array as variant")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" IsEmpty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'isempty() will check if we need to add the first value to the array or subsequent ones")]),t._v("\n    \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'ReDim Dynamic_array(0) will resize the array to one variable only")]),t._v("\n        Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Else")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" Preserve Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'in the line above we resize the array from variable 0 to the UBound() = last variable, plus one effectivelly increeasing the size of the array by one")]),t._v("\n        Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'attribute a value to the last variable of Dynamic_array")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"removing-values-dynamically"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#removing-values-dynamically"}},[t._v("#")]),t._v(" Removing Values Dynamically")]),t._v(" "),a("p",[t._v('We can utilise the same logic to to decrease the the array. In the example the value "last" will be removed from the array.')]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Dynamic_array "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\nDynamic_array "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"first"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"middle"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"last"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" Preserve Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' Resize Preserve while dropping the last value")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"resetting-an-array-and-reusing-dynamically"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resetting-an-array-and-reusing-dynamically"}},[t._v("#")]),t._v(" Resetting an Array and Reusing Dynamically")]),t._v(" "),a("p",[t._v("We can as well re-utilise the arrays we create as not to have many on memory, which would make the run time slower. This is useful for arrays of various sizes.\nOne snippet you could use to re-utilise the array is to "),a("code",[t._v("ReDim")]),t._v(" the array back to "),a("code",[t._v("(0)")]),t._v(", attribute one variable to to the array and freely increase the array again.")]),t._v(" "),a("p",[t._v("In the snippet below I construct an array with the values 1 to 40, empty the array, and refill the array with values 40 to 100, all this done dynamically.")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Dynamic_array "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" IsEmpty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ElseIf")]),t._v(" Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'if first variant is empty ( = "") then give it the value of n')]),t._v("\n        Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Else")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" Preserve Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" Dynamic_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Resizing the array back to one variable without Preserving,")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'leaving the first value of the array empty")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"jagged-arrays-arrays-of-arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jagged-arrays-arrays-of-arrays"}},[t._v("#")]),t._v(" Jagged Arrays (Arrays of Arrays)")]),t._v(" "),a("h3",{attrs:{id:"jagged-arrays-not-multidimensional-arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jagged-arrays-not-multidimensional-arrays"}},[t._v("#")]),t._v(" Jagged Arrays NOT Multidimensional Arrays")]),t._v(" "),a("p",[t._v("Arrays of Arrays(Jagged Arrays) are not the same as Multidimensional Arrays if you think about them visually Multidimensional Arrays would look like Matrices (Rectangular) with defined number of elements on their dimensions(inside arrays), while Jagged array would be like a yearly calendar with the inside arrays having different number of elements, like days in on different months.")]),t._v(" "),a("p",[t._v("Although Jagged Arrays are quite messy and tricky to use due to their nested levels and don't have much type safety, but they are very flexible, allow you to manipulate different types of data quite easily, and don't need to contain unused or empty elements.")]),t._v(" "),a("h3",{attrs:{id:"creating-a-jagged-array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-jagged-array"}},[t._v("#")]),t._v(" Creating a Jagged Array")]),t._v(" "),a("p",[t._v("In the below example we will initialise a jagged array containing two arrays one for Names and another for Numbers, and then accessing one element of each")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" OuterArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'arrays are declared variant so we can access attribute any data type to its elements")]),t._v("\n\nNames "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Person1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Person2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Person3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nNumbers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"001"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"002"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"003"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nOuterArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Directly giving OuterArray an array containing both Names and Numbers arrays inside")]),t._v("\n\nDebug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print OuterArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nDebug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print OuterArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'accessing elements inside the jagged by giving the coordenades of the element")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"dynamically-creating-and-reading-jagged-arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dynamically-creating-and-reading-jagged-arrays"}},[t._v("#")]),t._v(" Dynamically Creating and Reading Jagged Arrays")]),t._v(" "),a("p",[t._v("We can as well be more dynamic in our approx to construct the arrays, imagine that we have a customer data sheet in excel and we want to construct an array to output the customer details.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\n  Name -   Phone   -  Email  - Customer Number \nPerson1 - 153486231 - 1@STACK - 001\nPerson2 - 153486242 - 2@STACK - 002\nPerson3 - 153486253 - 3@STACK - 003\nPerson4 - 153486264 - 4@STACK - 004\nPerson5 - 153486275 - 5@STACK - 005\n\n")])])]),a("p",[t._v("We will Dynamically construct an Header array and a Customers array, the Header will contain the column titles and the Customers array will contain the information of each customer/row as arrays.")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Headers "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' headers array with the top section of the customer data sheet")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" IsEmpty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" Headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            Headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Cells"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Else")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" Preserve Headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            Headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Cells"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Customers "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Customers array will contain arrays of customer values")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Customer_Values "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Customer_Values will be an array of the customer in its elements (Name-Phone-Email-CustNum)")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'iterate through the customers/rows")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'iterate through the values/columns")]),t._v("\n            \n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'build array containing customer values")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" IsEmpty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Customer_Values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" Customer_Values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                Customer_Values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Cells"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ElseIf")]),t._v(" Customer_Values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n                Customer_Values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Cells"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Else")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" Preserve Customer_Values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Customer_Values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                Customer_Values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Customer_Values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Cells"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'add customer_values array to Customers Array")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" IsEmpty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Customers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" Customers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            Customers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Customer_Values\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Else")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" Preserve Customers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Customers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            Customers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Customers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Customer_Values\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'reset Custumer_Values to rebuild a new array if needed")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" Customer_Values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Main_Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'main array will contain both the Headers and Customers")]),t._v("\n    \n    Main_Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Headers\n    Main_Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Customers\n\n")])])]),a("p",[a("strong",[a("code",[t._v("To better understand the way to Dynamically construct a one dimensional array please check Dynamic Arrays (Array Resizing and Dynamic Handling) on the Arrays documentation.")])])]),t._v(" "),a("p",[t._v("The Result of the above snippet is an Jagged Array with two arrays one of those arrays with 4 elements, 2 indention levels, and the other being itself another Jagged Array containing 5 arrays of 4 elements each and 3 indention levels, see below the structure:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[t._v("Main_Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Headers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Phone"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Email"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Customer Number"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Customers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Person1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("153486231")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1@STACK"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("001")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                Customers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Person2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("153486242")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2@STACK"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("002")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n                Customers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Person5"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("153486275")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5@STACK"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("005")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("To access the information you'll have to bear in mind the structure of the Jagged Array you create, in the above example you can see that the "),a("code",[t._v("Main Array")]),t._v(" contains an Array of "),a("code",[t._v("Headers")]),t._v(" and an Array of Arrays ("),a("code",[t._v("Customers")]),t._v(") hence with different ways of accessing the elements.")]),t._v(" "),a("p",[t._v("Now we'll read the information of the "),a("code",[t._v("Main Array")]),t._v(" and print out each of the Customers information as "),a("code",[t._v("Info Type: Info")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Main_Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'n to iterate from fisrt to last array in Main_Array(1)")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Main_Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'j will iterate from first to last element in each array of Main_Array(1)")]),t._v("\n        \n        Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print Main_Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('": "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" Main_Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'print Main_Array(0)(j) which is the header and Main_Array(0)(n)(j) which is the element in the customer array")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'we can call the header with j as the header array has the same structure as the customer array")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n")])])]),a("p",[t._v("REMEMBER to keep track of the structure of your Jagged Array, in the example above to access the Name of a customer is by accessing "),a("code",[t._v("Main_Array -> Customers -> CustomerNumber -> Name")]),t._v(" which is three levels, to return "),a("code",[t._v('"Person4"')]),t._v(" you'll need the location of Customers in the Main_Array, then the Location of customer four on the Customers Jagged array and lastly the location of the element you need, in this case "),a("code",[t._v("Main_Array(1)(3)(0)")]),t._v(" which is "),a("code",[t._v("Main_Array(Customers)(CustomerNumber)(Name)")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"declaring-an-array-in-vba"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#declaring-an-array-in-vba"}},[t._v("#")]),t._v(" Declaring an Array in VBA")]),t._v(" "),a("p",[t._v("Declaring an array is very similar to declaring a variable, except you need to declare the dimension of the Array right after its name:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" myArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Declaring an array that will contain up to 10 strings")]),t._v("\n\n")])])]),a("p",[t._v("By default, Arrays in VBA are "),a("strong",[t._v("indexed from ZERO")]),t._v(", thus, the number inside the parenthesis doesn't refer to the size of the array, but rather to "),a("strong",[t._v("the index of the last element")])]),t._v(" "),a("h3",{attrs:{id:"accessing-elements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accessing-elements"}},[t._v("#")]),t._v(" Accessing Elements")]),t._v(" "),a("p",[t._v("Accessing an element of the Array is done by using the name of the Array, followed by the index of the element, inside parenthesis:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[t._v("myArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"first element"')]),t._v("\nmyArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sixth element"')]),t._v("\nmyArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"last element"')]),t._v("\n\n")])])]),a("h3",{attrs:{id:"array-indexing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-indexing"}},[t._v("#")]),t._v(" Array Indexing")]),t._v(" "),a("p",[t._v("You can change Arrays indexing by placing this line at the top of a module:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Option")]),t._v(" Base "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n")])])]),a("p",[t._v("With this line, all Arrays declared in the module will be "),a("strong",[t._v("indexed from ONE")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"specific-index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specific-index"}},[t._v("#")]),t._v(" Specific Index")]),t._v(" "),a("p",[t._v("You can also declare each Array with its own index by using the "),a("code",[t._v("To")]),t._v(" keyword, and the lower and upper bound (= index):")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" mySecondArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Array of 12 strings indexed from 1 to 12")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" myThirdArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Array of 12 strings indexed from 13 to 24")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"dynamic-declaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-declaration"}},[t._v("#")]),t._v(" Dynamic Declaration")]),t._v(" "),a("p",[t._v("When you do not know the size of your Array prior to its declaration, you can use the dynamic declaration, and the "),a("code",[t._v("ReDim")]),t._v(" keyword:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" myDynamicArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" Strings "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Creates an Array of an unknown number of strings")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" myDynamicArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'This resets the array to 6 elements")]),t._v("\n\n")])])]),a("p",[t._v("Note that using the "),a("code",[t._v("ReDim")]),t._v(" keyword will wipe out any previous content of your Array. To prevent this, you can use the "),a("code",[t._v("Preserve")]),t._v(" keyword after "),a("code",[t._v("ReDim")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" myDynamicArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v("\nmyDynamicArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Something I want to keep"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" Preserve myDynamicArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Expand the size to up to 9 strings")]),t._v("\nDebug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print myDynamicArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' still prints the element")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"use-of-split-to-create-an-array-from-a-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-of-split-to-create-an-array-from-a-string"}},[t._v("#")]),t._v(" Use of Split to create an array from a string")]),t._v(" "),a("p",[a("strong",[t._v("Split Function")])]),t._v(" "),a("p",[t._v("returns a zero-based, one dimensional array containing a specified number of substrings.")]),t._v(" "),a("p",[a("strong",[t._v("Syntax")])]),t._v(" "),a("p",[a("strong",[t._v("Split(expression")]),t._v(" [, "),a("strong",[t._v("delimiter")]),t._v(" [, "),a("strong",[t._v("limit")]),t._v(" [, "),a("strong",[t._v("compare")]),t._v("]]]"),a("strong",[t._v(")")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Part")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[a("strong",[t._v("expression")])])]),t._v(" "),a("td",[t._v("Required. String expression containing substrings and delimiters. If "),a("strong",[t._v("expression")]),t._v(' is a zero-length string("" or vbNullString), '),a("strong",[t._v("Split")]),t._v(" returns an empty array containing no elements and no data. In this case, the returned array will have a LBound of 0 and a UBound of -1.")])]),t._v(" "),a("tr",[a("td",[a("strong",[a("strong",[t._v("delimiter")])])]),t._v(" "),a("td",[t._v('Optional. String character used to identify substring limits. If omitted, the space character (" ") is assumed to be the delimiter. If '),a("strong",[a("strong",[t._v("delimiter")])]),t._v(" is a zero-length string, a single-element array containing the entire "),a("strong",[a("strong",[t._v("expression")])]),t._v(" string is returned.")])]),t._v(" "),a("tr",[a("td",[a("strong",[a("strong",[t._v("limit")])])]),t._v(" "),a("td",[t._v("Optional. Number of substrings to be returned; -1 indicates that all substrings are returned.")])]),t._v(" "),a("tr",[a("td",[a("strong",[a("strong",[t._v("compare")])])]),t._v(" "),a("td",[t._v("Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings section for values.")])])])]),t._v(" "),a("p",[a("strong",[t._v("Settings")])]),t._v(" "),a("p",[t._v("The "),a("strong",[a("strong",[t._v("compare")])]),t._v(" argument can have the following values:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("Constant")])]),t._v(" "),a("th",[a("strong",[t._v("Value")])]),t._v(" "),a("th",[a("strong",[t._v("Description")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Description")]),t._v(" "),a("td",[t._v("-1")]),t._v(" "),a("td",[t._v("Performs a comparison using the setting of the "),a("strong",[t._v("Option Compare")]),t._v(" statement.")])]),t._v(" "),a("tr",[a("td",[t._v("vbBinaryCompare")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("Performs a binary comparison.")])]),t._v(" "),a("tr",[a("td",[t._v("vbTextCompare")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Performs a textual comparison.")])]),t._v(" "),a("tr",[a("td",[t._v("vbDatabaseCompare")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Microsoft Access only. Performs a comparison based on information in your database.")])])])]),t._v(" "),a("p",[a("strong",[t._v("Example")])]),t._v(" "),a("p",[t._v("In this example it is demonstrated how Split works by showing several styles. The comments will show the result set for each of the different performed Split options. Finally it is demonstrated how to loop over the returned string array.")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" Test\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" textArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v("\n\n    textArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tech on the Net"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'Result: {"Tech", "on", "the", "Net"}')]),t._v("\n\n    textArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"172.23.56.4"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'Result: {"172", "23", "56", "4"}')]),t._v("\n\n    textArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A;B;C;D"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('";"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'Result: {"A", "B", "C", "D"}')]),t._v("\n\n    textArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A;B;C;D"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('";"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'Result: {"A;B;C;D"}')]),t._v("\n\n    textArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A;B;C;D"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('";"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'Result: {"A", "B;C;D"}')]),t._v("\n\n    textArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A;B;C;D"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('";"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'Result: {"A", "B", "C;D"}')]),t._v("\n\n    textArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A;B;C;D"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('";"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'Result: {"A", "B", "C", "D"}')]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'You can iterate over the created array")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" counter "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Long")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" counter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print textArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("counter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"iterating-elements-of-an-array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterating-elements-of-an-array"}},[t._v("#")]),t._v(" Iterating elements of an array")]),t._v(" "),a("h3",{attrs:{id:"for-next"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-next"}},[t._v("#")]),t._v(" For...Next")]),t._v(" "),a("p",[t._v("Using the iterator variable as the index number is the fastest way to iterate the elements of an array:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" items "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\nitems "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'assumes value can be implicitly converted to a String:")]),t._v("\n    Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n")])])]),a("p",[t._v("Nested loops can be used to iterate multi-dimensional arrays:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v("\nitems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nitems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nitems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nitems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" outer "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" inner "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" outer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" inner "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'assumes value can be implicitly converted to a String:")]),t._v("\n        Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("outer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" inner"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"for-each-next"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-each-next"}},[t._v("#")]),t._v(" For Each...Next")]),t._v(" "),a("p",[t._v("A "),a("code",[t._v("For Each...Next")]),t._v(" loop can also be used to iterate arrays, if performance doesn't matter:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" items "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\nitems "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'must be variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Each")]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("In")]),t._v(" items\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'assumes value can be implicitly converted to a String:")]),t._v("\n    Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print item\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n")])])]),a("p",[t._v("A "),a("code",[t._v("For Each")]),t._v(" loop will iterate all dimensions from outer to inner (the same order as the elements are laid out in memory), so there is no need for nested loops:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v("\nitems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nitems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nitems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nitems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'must be Variant")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Each")]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("In")]),t._v(" items\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'assumes value can be implicitly converted to a String:")]),t._v("\n    Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print item\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n")])])]),a("p",[t._v("Note that "),a("code",[t._v("For Each")]),t._v(" loops are best used to iterate "),a("code",[t._v("Collection")]),t._v(" objects, if performance matters.")]),t._v(" "),a("p",[t._v("All 4 snippets above produce the same output:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\n0\n 1\n 2\n 3\n\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);