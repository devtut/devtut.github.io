(window.webpackJsonp=window.webpackJsonp||[]).push([[3073],{3481:function(t,s,a){"use strict";a.r(s);var n=a(31),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"file-and-i-o-operations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#file-and-i-o-operations"}},[t._v("#")]),t._v(" File and I/O Operations")]),t._v(" "),a("h2",{attrs:{id:"writing-a-string-to-a-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#writing-a-string-to-a-file"}},[t._v("#")]),t._v(" Writing a string to a file")]),t._v(" "),a("p",[t._v("A string can be written to a file with an instance of the "),a("code",[t._v("File")]),t._v(" class.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("file "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tmp.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'w'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NaNaNaNa\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Batman!\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close\n\n")])])]),a("p",[t._v("The "),a("code",[t._v("File")]),t._v(" class also offers a shorthand for the "),a("code",[t._v("new")]),t._v(" and "),a("code",[t._v("close")]),t._v(" operations with the "),a("code",[t._v("open")]),t._v(" method.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("open"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tmp.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'w'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NaNaNaNa\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Batman!\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("For simple write operations, a string can be also written directly to a file with "),a("code",[t._v("File.write")]),t._v(". "),a("strong",[t._v("Note that this will overwrite the file by default.")])]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tmp.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NaNaNaNa\\n"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Batman!\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("To specify a different mode on "),a("code",[t._v("File.write")]),t._v(", pass it as the value of a key called "),a("code",[t._v("mode")]),t._v(" in a hash as another parameter.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tmp.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NaNaNaNa\\n"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Batman!\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"open-and-closing-a-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#open-and-closing-a-file"}},[t._v("#")]),t._v(" Open and closing a file")]),t._v(" "),a("p",[t._v("Manually open and close a file.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Using new method")]),t._v("\nf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"r"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# reading")]),t._v("\nf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"w"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# writing")]),t._v("\nf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# appending")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Using open method")]),t._v("\nf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" open"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"r"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Remember to close files")]),t._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close\n\n")])])]),a("p",[t._v("Automatically close a file using a block.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("open"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.txt"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"r"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# do something with file f")]),t._v("\n  puts f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for example, read it")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"get-a-single-char-of-input"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-a-single-char-of-input"}},[t._v("#")]),t._v(" get a single char of input")]),t._v(" "),a("p",[t._v("Unlike "),a("code",[t._v("gets.chomp")]),t._v(" this will not wait for a newline.")]),t._v(" "),a("p",[t._v("First part of the stdlib must be included")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'io/console'")]),t._v("\n\n")])])]),a("p",[t._v("Then a helper method can be written:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_char")])]),t._v("\n  input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("STDIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getch\n  control_c_code "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\u0003"')]),t._v("\n  exit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" control_c_code\n  input\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("Its' imporant to exit if "),a("code",[t._v("control+c")]),t._v(" is pressed.")]),t._v(" "),a("h2",{attrs:{id:"reading-from-stdin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reading-from-stdin"}},[t._v("#")]),t._v(" Reading from STDIN")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Get two numbers from STDIN, separated by a newline, and output the result")]),t._v("\nnumber1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gets\nnumber2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" gets\nputs number1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" number2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_i\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## run with: $ ruby a_plus_b.rb")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## or:       $ echo -e "1\\n2" | ruby a_plus_b.rb')]),t._v("\n\n")])])]),a("h2",{attrs:{id:"reading-from-arguments-with-argv"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reading-from-arguments-with-argv"}},[t._v("#")]),t._v(" Reading from arguments with ARGV")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("number1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ARGV")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nnumber2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ARGV")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nputs number1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" number2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_i\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## run with: $ ruby a_plus_b.rb 1 2")]),t._v("\n\n")])])]),a("h4",{attrs:{id:"parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Flag")]),t._v(" "),a("th",[t._v("Meaning")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v('"r"')]),t._v(" "),a("td",[t._v("Read-only, starts at beginning of file  (default mode).")])]),t._v(" "),a("tr",[a("td",[t._v('"r+"')]),t._v(" "),a("td",[t._v("Read-write, starts at beginning of file.")])]),t._v(" "),a("tr",[a("td",[t._v('"w"')]),t._v(" "),a("td",[t._v("Write-only, truncates existing file to zero length or creates a new file for writing.")])]),t._v(" "),a("tr",[a("td",[t._v('"w+"')]),t._v(" "),a("td",[t._v("Read-write, truncates existing file to zero length or creates a new file for reading and writing.")])]),t._v(" "),a("tr",[a("td",[t._v('"a"')]),t._v(" "),a("td",[t._v("Write-only, starts at end of file if file exists, otherwise creates a new file for writing.")])]),t._v(" "),a("tr",[a("td",[t._v('"a+"')]),t._v(" "),a("td",[t._v("Read-write, starts at end of file if file exists, otherwise creates a new file for reading and writing.")])]),t._v(" "),a("tr",[a("td",[t._v('"b"')]),t._v(" "),a("td",[t._v("Binary file mode. Suppresses EOL <-> CRLF conversion on Windows. And sets external encoding to ASCII-8BIT unless explicitly specified. (This flag may only appear in conjunction with the above flags. For example, "),a("code",[t._v('File.new("test.txt", "rb")')]),t._v(" would open "),a("code",[t._v("test.txt")]),t._v(" in "),a("code",[t._v("read-only")]),t._v(" mode as a "),a("code",[t._v("binary")]),t._v(" file.)")])]),t._v(" "),a("tr",[a("td",[t._v('"t"')]),t._v(" "),a("td",[t._v("Text file mode. (This flag may only appear in conjunction with the above flags. For example, "),a("code",[t._v('File.new("test.txt", "wt")')]),t._v(" would open "),a("code",[t._v("test.txt")]),t._v(" in "),a("code",[t._v("write-only")]),t._v(" mode as a "),a("code",[t._v("text")]),t._v(" file.)")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);