(window.webpackJsonp=window.webpackJsonp||[]).push([[1198],{1606:function(a,t,s){"use strict";s.r(t);var e=s(31),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"io"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#io"}},[a._v("#")]),a._v(" IO")]),a._v(" "),s("h2",{attrs:{id:"getting-the-a-out-of-io-a"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getting-the-a-out-of-io-a"}},[a._v("#")]),a._v(" Getting the 'a' \"out of\" 'IO a'")]),a._v(" "),s("p",[a._v('A common question is "I have a value of '),s("code",[a._v("IO a")]),a._v(", but I want to do something to that "),s("code",[a._v("a")]),a._v(' value: how do I get access to it?" How can one operate on data that comes from the outside world (for example, incrementing a number typed by the user)?')]),a._v(" "),s("p",[a._v("The point is that if you use a pure function on data obtained impurely, then the result is still impure. It depends on what the user did! A value of type "),s("code",[a._v("IO a")]),a._v(' stands for a "side-effecting computation resulting in a value of type '),s("code",[a._v("a")]),a._v('" which can '),s("strong",[a._v("only")]),a._v(" be run by (a) composing it into "),s("code",[a._v("main")]),a._v(' and (b) compiling and executing your program. For that reason, there is no way within pure Haskell world to "get the '),s("code",[a._v("a")]),a._v(' out".')]),a._v(" "),s("p",[a._v("Instead, we want to build a new computation, a new "),s("code",[a._v("IO")]),a._v(" value, which makes use of the "),s("code",[a._v("a")]),a._v(" value "),s("strong",[a._v("at runtime")]),a._v(". This is another way of "),s("strong",[a._v("composing")]),a._v(" "),s("code",[a._v("IO")]),a._v(" values and so again we can use "),s("code",[a._v("do")]),a._v("-notation:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- assuming")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("myComputation")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("getMessage")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("getMessage")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"My computation resulted in: "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("show")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("int")]),a._v("\n \n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("newComputation")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("newComputation")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("myComputation")]),a._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- we \"bind\" the result of myComputation to a name, 'int'")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("getMessage")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("int")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- 'int' holds a value of type Int")]),a._v("\n\n")])])]),s("p",[a._v("Here we're using a pure function ("),s("code",[a._v("getMessage")]),a._v(") to turn an "),s("code",[a._v("Int")]),a._v(" into a "),s("code",[a._v("String")]),a._v(", but we're using "),s("code",[a._v("do")]),a._v(" notation to make it be applied to the result of an "),s("code",[a._v("IO")]),a._v(" computation "),s("code",[a._v("myComputation")]),a._v(" "),s("strong",[a._v("when")]),a._v(" (after) that computation runs. The result is a bigger "),s("code",[a._v("IO")]),a._v(" computation, "),s("code",[a._v("newComputation")]),a._v(". This technique of using pure functions in an impure context is called "),s("strong",[a._v("lifting")]),a._v(".")]),a._v(" "),s("h2",{attrs:{id:"io-defines-your-program-s-main-action"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#io-defines-your-program-s-main-action"}},[a._v("#")]),a._v(" IO defines your program's "),s("code",[a._v("main")]),a._v(" action")]),a._v(" "),s("p",[a._v("To make a Haskell program executable you must provide a file with a "),s("code",[a._v("main")]),a._v(" function of type "),s("code",[a._v("IO ()")])]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello world!"')]),a._v("\n\n")])])]),s("p",[a._v("When Haskell is compiled it examines the "),s("code",[a._v("IO")]),a._v(" data here and turns it into a executable. When we run this program it will print "),s("code",[a._v("Hello world!")]),a._v(".")]),a._v(" "),s("p",[a._v("If you have values of type "),s("code",[a._v("IO a")]),a._v(" other than "),s("code",[a._v("main")]),a._v(" they won't do anything.")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("other")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("other")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"I won\'t get printed"')]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello world!"')]),a._v("\n\n")])])]),s("p",[a._v("Compiling this program and running it will have the same effect as the last example. The code in "),s("code",[a._v("other")]),a._v(" is ignored.")]),a._v(" "),s("p",[a._v("In order to make the code in "),s("code",[a._v("other")]),a._v(" have runtime effects you have to "),s("strong",[a._v("compose")]),a._v(" it into "),s("code",[a._v("main")]),a._v(". No "),s("code",[a._v("IO")]),a._v(" values not eventually composed into "),s("code",[a._v("main")]),a._v(" will have any runtime effect. To compose two "),s("code",[a._v("IO")]),a._v(" values sequentially you can use "),s("code",[a._v("do")]),a._v("-notation:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("other")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("other")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"I will get printed... but only at the point where I\'m composed into main"')]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" \n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello world!"')]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("other")]),a._v("\n\n")])])]),s("p",[a._v("When you compile and run "),s("strong",[a._v("this")]),a._v(" program it outputs")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Hello")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("world")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("I")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("will")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("get")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("printed")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("but")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("only")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("at")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("the")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("point")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("I'")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("composed")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("into")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v("\n\n")])])]),s("p",[a._v("Note that the order of operations is described by how "),s("code",[a._v("other")]),a._v(" was composed into "),s("code",[a._v("main")]),a._v(" and not the definition order.")]),a._v(" "),s("h2",{attrs:{id:"checking-for-end-of-file-conditions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#checking-for-end-of-file-conditions"}},[a._v("#")]),a._v(" Checking for end-of-file conditions")]),a._v(" "),s("p",[a._v("A bit counter-intuitive to the way most other languages' standard I/O libraries do it, Haskell's "),s("code",[a._v("isEOF")]),a._v(" does not require you to perform a read operation before checking for an EOF condition; the runtime will do it for you.")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token import-statement"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" System"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("IO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("isEOF")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("eofTest")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("eofTest")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("end")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("isEOF")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("end")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"End-of-file reached at line "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("show")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"."')]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("eofTest")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("eofTest")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n\n")])])]),s("p",[a._v("Input:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Line")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("#")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Line")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("#")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Line")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("#")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n\n")])])]),s("p",[a._v("Output:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("End")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("of")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("file")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("reached")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("at")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n\n")])])]),s("h2",{attrs:{id:"reading-all-contents-of-standard-input-into-a-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reading-all-contents-of-standard-input-into-a-string"}},[a._v("#")]),a._v(" Reading all contents of standard input into a string")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("input")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getContents")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStr")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("input")]),a._v("\n\n")])])]),s("p",[a._v("Input:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("This")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("is")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("an")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("example")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("sentence")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("And")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("this")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("one")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("is")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("too")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\n\n")])])]),s("p",[a._v("Output:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("This")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("is")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("an")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("example")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("sentence")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("And")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("this")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("one")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("is")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("too")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\n\n")])])]),s("p",[a._v("Note: This program will actually print parts of the output before all of the input has been fully read in. This means that, if, for example, you use "),s("code",[a._v("getContents")]),a._v(" over a 50MiB file, Haskell's lazy evaluation and garbage collector will ensure that only the parts of the file that are currently needed (read: indispensable for further execution) will be loaded into memory. Thus, the 50MiB file won't be loaded into memory at once.")]),a._v(" "),s("h2",{attrs:{id:"role-and-purpose-of-io"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#role-and-purpose-of-io"}},[a._v("#")]),a._v(" Role and Purpose of IO")]),a._v(" "),s("p",[a._v("Haskell is a pure language, meaning that expressions cannot have side effects. A side effect is anything that the expression or function does other than produce a value, for example, modify a global counter or print to standard output.")]),a._v(" "),s("p",[a._v("In Haskell, side-effectful computations (specifically, those which can have an effect on the real world) are modelled using "),s("code",[a._v("IO")]),a._v(". Strictly speaking, "),s("code",[a._v("IO")]),a._v(" is a type constructor, taking a type and producing a type. For example, "),s("code",[a._v("IO Int")]),a._v(" is the type of an I/O computation producing an "),s("code",[a._v("Int")]),a._v(" value. The "),s("code",[a._v("IO")]),a._v(" type is "),s("strong",[a._v("abstract")]),a._v(", and the interface provided for "),s("code",[a._v("IO")]),a._v(" ensures that certain illegal values (that is, functions with non-sensical types) cannot exist, by ensuring that all built-in functions which perform IO have a return type enclosed in "),s("code",[a._v("IO")]),a._v(".")]),a._v(" "),s("p",[a._v("When a Haskell program is run, the computation represented by the Haskell value named "),s("code",[a._v("main")]),a._v(", whose type can be "),s("code",[a._v("IO x")]),a._v(" for any type "),s("code",[a._v("x")]),a._v(", is executed.")]),a._v(" "),s("h3",{attrs:{id:"manipulating-io-values"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#manipulating-io-values"}},[a._v("#")]),a._v(" Manipulating IO values")]),a._v(" "),s("p",[a._v("There are many functions in the standard library providing typical "),s("code",[a._v("IO")]),a._v(" actions that a general purpose programming language should perform, such as reading and writing to file handles. General "),s("code",[a._v("IO")]),a._v(" actions are created and combined primarily with two functions:")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("\n(>>=) :: IO a -> (a -> IO b) -> IO b\n\n")])])]),s("p",[a._v("This function (typically called "),s("strong",[a._v("bind")]),a._v(") takes an "),s("code",[a._v("IO")]),a._v(" action and a function which returns an "),s("code",[a._v("IO")]),a._v(" action, and produces the "),s("code",[a._v("IO")]),a._v(" action which is the result of applying the function to the value produced by the first "),s("code",[a._v("IO")]),a._v(" action.")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("\nreturn :: a -> IO a\n\n")])])]),s("p",[a._v("This function takes any value (i.e., a pure value) and returns the IO computation which does no IO and produces the given value. In other words, it is a no-op I/O action.")]),a._v(" "),s("p",[a._v("There are additional general functions which are often used, but all can be written in terms of the two above. For example, "),s("code",[a._v("(>>) :: IO a -> IO b -> IO b")]),a._v(" is similar to "),s("code",[a._v("(>>=)")]),a._v(" but the result of the first action is ignored.")]),a._v(" "),s("p",[a._v("A simple program greeting the user using these functions:")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('\nmain :: IO ()\n main =\n   putStrLn "What is your name?" >>\n   getLine >>= \\name ->\n   putStrLn ("Hello " ++ name ++ "!")\n\n')])])]),s("p",[a._v("This program also uses "),s("code",[a._v("putStrLn :: String -> IO ()")]),a._v(" and "),s("code",[a._v("getLine :: IO String")]),a._v(".")]),a._v(" "),s("p",[a._v("Note: the types of certain functions above are actually more general than those types given (namely "),s("code",[a._v(">>=")]),a._v(", "),s("code",[a._v(">>")]),a._v(" and "),s("code",[a._v("return")]),a._v(").")]),a._v(" "),s("h3",{attrs:{id:"io-semantics"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#io-semantics"}},[a._v("#")]),a._v(" IO semantics")]),a._v(" "),s("p",[a._v("The "),s("code",[a._v("IO")]),a._v(" type in Haskell has very similar semantics to that of imperative programming languages. For example, when one writes "),s("code",[a._v("s1 ; s2")]),a._v(" in an imperative language to indicate executing statement "),s("code",[a._v("s1")]),a._v(", then statement "),s("code",[a._v("s2")]),a._v(", one can write "),s("code",[a._v("s1 >> s2")]),a._v(" to model the same thing in Haskell.")]),a._v(" "),s("p",[a._v("However, the semantics of "),s("code",[a._v("IO")]),a._v(" diverge slightly of what would be expected coming from an imperative background. The "),s("code",[a._v("return")]),a._v(" function "),s("strong",[a._v("does not")]),a._v(" interrupt control flow - it has no effect on the program if another "),s("code",[a._v("IO")]),a._v(" action is run in sequence. For example, "),s("code",[a._v('return () >> putStrLn "boom"')]),a._v(' correctly prints "boom" to standard output.')]),a._v(" "),s("p",[a._v("The formal semantics of "),s("code",[a._v("IO")]),a._v(" can given in terms of simple equalities involving the functions in the previous section:")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("\nreturn x >>= f ≡ f x, ∀ f x\n y >>= return ≡ return y, ∀ y\n (m >>= f) >>= g ≡ m >>= (\\x -> (f x >>= g)), ∀ m f g\n\n")])])]),s("p",[a._v("These laws are typically referred to as left identity, right identity, and composition, respectively. They can be stated more naturally in terms of the function")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("\n(>=>) :: (a -> IO b) -> (b -> IO c) -> a -> IO c\n (f >=> g) x = (f x) >>= g\n\n")])])]),s("p",[a._v("as follows:")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("\nreturn >=> f ≡ f, ∀ f\n f >=> return ≡ f, ∀ f\n (f >=> g) >=> h ≡ f >=> (g >=> h), ∀ f g h\n\n")])])]),s("h3",{attrs:{id:"lazy-io"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lazy-io"}},[a._v("#")]),a._v(" Lazy IO")]),a._v(" "),s("p",[a._v("Functions performing I/O computations are typically strict, meaning that all preceding actions in a sequence of actions must be completed before the next action is begun. Typically this is useful and expected behaviour - "),s("code",[a._v('putStrLn "X" >> putStrLn "Y"')]),a._v(' should print "XY". However, certain library functions perform I/O lazily, meaning that the I/O actions required to produce the value are only performed when the value is actually consumed. Examples of such functions are '),s("code",[a._v("getContents")]),a._v(" and "),s("code",[a._v("readFile")]),a._v(". Lazy I/O can drastically reduce the performance of a Haskell program, so when using library functions, care should be taken to note which functions are lazy.")]),a._v(" "),s("h3",{attrs:{id:"io-and-do-notation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#io-and-do-notation"}},[a._v("#")]),a._v(" IO and "),s("code",[a._v("do")]),a._v(" notation")]),a._v(" "),s("p",[a._v("Haskell provides a simpler method of combining different IO values into larger IO values. This special syntax is known as "),s("code",[a._v("do")]),a._v(" notation* and is simply syntactic sugar for usages of the "),s("code",[a._v(">>=")]),a._v(", "),s("code",[a._v(">>")]),a._v(" and "),s("code",[a._v("return")]),a._v(" functions.")]),a._v(" "),s("p",[a._v("The program in the previous section can be written in two different ways using "),s("code",[a._v("do")]),a._v(" notation, the first being layout-sensitive and the second being  layout insensitive:")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('\nmain = do\n   putStrLn "What is your name?"\n   name <- getLine\n   putStrLn ("Hello " ++ name ++ "!")\n\n\n main = do {\n   putStrLn "What is your name?" ;\n   name <- getLine ;\n   putStrLn ("Hello " ++ name ++ "!")\n   }\n\n')])])]),s("p",[a._v("All three programs are exactly equivalent.")]),a._v(" "),s("p",[a._v("*Note that "),s("code",[a._v("do")]),a._v(" notation is also applicable to a broader class of type constructors called "),s("strong",[a._v("monads")]),a._v(".")]),a._v(" "),s("h2",{attrs:{id:"reading-a-line-from-standard-input"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reading-a-line-from-standard-input"}},[a._v("#")]),a._v(" Reading a line from standard input")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v("\n\n")])])]),s("p",[a._v("Input:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("This")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("is")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("an")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n\n")])])]),s("p",[a._v("Output:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("This")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("is")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("an")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n\n")])])]),s("h2",{attrs:{id:"reading-words-from-an-entire-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reading-words-from-an-entire-file"}},[a._v("#")]),a._v(" Reading words from an entire file")]),a._v(" "),s("p",[a._v("In Haskell, it often makes sense "),s("strong",[a._v("not to bother with file handles")]),a._v(" at all, but simply read or write an entire file straight from disk to memory"),s("sup",[a._v("†")]),a._v(", and do all the partitioning/processing of the text with the pure string data structure. This avoids mixing IO and program logic, which can greatly help avoiding bugs.")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- | The interesting part of the program, which actually processes data")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("--   but doesn't do any IO!")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("reverseWords")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("reverseWords")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("reverse")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("words")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- | A simple wrapper that only fetches the data from disk, lets")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("--   'reverseWords' do its job, and puts the result to stdout.")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("content")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("readFile")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"loremipsum.txt"')]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("mapM_")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("reverseWords")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("content")]),a._v("\n\n")])])]),s("p",[a._v("If "),s("code",[a._v("loremipsum.txt")]),a._v(" contains")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Lorem")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ipsum")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("dolor")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("sit")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("amet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("consectetur")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("adipiscing")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("elit")]),a._v("\n\n")])])]),s("p",[a._v("then the program will output")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("elit")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("adipiscing")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("consectetur")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("amet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("sit")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("dolor")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ipsum")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Lorem")]),a._v("\n\n")])])]),s("p",[a._v("Here, "),s("a",{attrs:{href:"http://hackage.haskell.org/package/base-4.9.0.0/docs/Control-Monad.html#v:mapM_",target:"_blank",rel:"noopener noreferrer"}},[s("code",[a._v("mapM_")]),s("OutboundLink")],1),a._v(" went through the list of all words in the file, and printed each of them to a separate line with "),s("a",{attrs:{href:"http://hackage.haskell.org/package/base-4.9.0.0/docs/Prelude.html#v:putStrLn",target:"_blank",rel:"noopener noreferrer"}},[s("code",[a._v("putStrLn")]),s("OutboundLink")],1),a._v(".")]),a._v(" "),s("p",[s("sup",[a._v("†")]),s("sub",[a._v("If you think this is wasteful on memory, you have a point. Actually, Haskell's laziness can often avoid that the entire file needs to reside in memory simultaneously... but beware, this kind of lazy IO causes its own set of problems. For performance-critical applications, it often makes sense to enforce the entire file to be read at once, strictly; you can do this with "),s("a",{attrs:{href:"http://hackage.haskell.org/package/text-1.2.2.1/docs/Data-Text-IO.html#v:readFile",target:"_blank",rel:"noopener noreferrer"}},[a._v("the "),s("code",[a._v("Data.Text")]),a._v(" version of "),s("code",[a._v("readFile")]),a._v("."),s("OutboundLink")],1)])]),a._v(" "),s("h2",{attrs:{id:"writing-to-stdout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#writing-to-stdout"}},[a._v("#")]),a._v(" Writing to stdout")]),a._v(" "),s("p",[a._v("Per the "),s("a",{attrs:{href:"https://www.haskell.org/onlinereport/haskell2010/haskellch7.html#x14-1430007.1",target:"_blank",rel:"noopener noreferrer"}},[a._v("Haskell 2010 Language Specification"),s("OutboundLink")],1),a._v(" the following are standard IO functions available in Prelude, so no imports are required to use them.")]),a._v(" "),s("h3",{attrs:{id:"putchar-char-io-writes-a-char-to-stdout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#putchar-char-io-writes-a-char-to-stdout"}},[a._v("#")]),a._v(" "),s("code",[a._v("putChar :: Char -> IO ()")]),a._v(" - writes a "),s("code",[a._v("char")]),a._v(" to "),s("code",[a._v("stdout")])]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Prelude")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putChar")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token char string"}},[a._v("'a'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("aPrelude")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- Note, no new line")]),a._v("\n\n")])])]),s("h3",{attrs:{id:"putstr-string-io-writes-a-string-to-stdout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#putstr-string-io-writes-a-string-to-stdout"}},[a._v("#")]),a._v(" "),s("code",[a._v("putStr :: String -> IO ()")]),a._v(" - writes a "),s("code",[a._v("String")]),a._v(" to "),s("code",[a._v("stdout")])]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Prelude")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStr")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"This is a string!"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("This")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("is")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("string")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Prelude")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- Note, no new line")]),a._v("\n\n")])])]),s("h3",{attrs:{id:"putstrln-string-io-writes-a-string-to-stdout-and-adds-a-new-line"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#putstrln-string-io-writes-a-string-to-stdout-and-adds-a-new-line"}},[a._v("#")]),a._v(" "),s("code",[a._v("putStrLn :: String -> IO ()")]),a._v(" - writes a "),s("code",[a._v("String")]),a._v(" to "),s("code",[a._v("stdout")]),a._v(" and adds a new line")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Prelude")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hi there, this is another String!"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Hi")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("there")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("this")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("is")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("another")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\n\n")])])]),s("h3",{attrs:{id:"print-show-a-a-io-writes-a-an-instance-of-show-to-stdout"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#print-show-a-a-io-writes-a-an-instance-of-show-to-stdout"}},[a._v("#")]),a._v(" "),s("code",[a._v("print :: Show a => a -> IO ()")]),a._v(" - writes "),s("code",[a._v("a")]),a._v(" an instance of "),s("code",[a._v("Show")]),a._v(" to "),s("code",[a._v("stdout")])]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Prelude")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hi"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hi"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Prelude")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Prelude")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token char string"}},[a._v("'a'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token char string"}},[a._v("'a'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Prelude")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token char string"}},[a._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- Maybe is an instance of the `Show` type class")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token char string"}},[a._v("'a'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Prelude")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v("\n\n")])])]),s("p",[a._v("Recall that you can instantiate "),s("code",[a._v("Show")]),a._v(" for your own types using "),s("code",[a._v("deriving")]),a._v(":")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- In ex.hs")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Person")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Person")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("name")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("deriving")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Show")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Person")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Alex"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- Person is an instance of `Show`, thanks to `deriving`")]),a._v("\n\n")])])]),s("p",[a._v("Loading & running in GHCi:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Prelude")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("load")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hs")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("of")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Compiling")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ex")]),a._v("             "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("interpreted")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Ok")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("modules")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("loaded")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Main")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- from ex.hs")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Person")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("name")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Alex"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Main")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\n")])])]),s("h2",{attrs:{id:"parsing-and-constructing-an-object-from-standard-input"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parsing-and-constructing-an-object-from-standard-input"}},[a._v("#")]),a._v(" Parsing and constructing an object from standard input")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("readFloat")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("readFloat")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("read")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStr")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Type the first number: "')]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("first")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("readFloat")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStr")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Type the second number: "')]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("second")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("readFloat")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("show")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("first")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('" + "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("show")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("second")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('" = "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("show")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("first")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("second")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),s("p",[a._v("Input:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Type")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("the")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("first")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("number")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("9.5")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Type")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("the")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("second")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("number")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2.02")]),a._v("\n\n")])])]),s("p",[a._v("Output:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[a._v("9.5")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2.02")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("7.48")]),a._v("\n\n")])])]),s("h2",{attrs:{id:"reading-from-file-handles"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reading-from-file-handles"}},[a._v("#")]),a._v(" Reading from file handles")]),a._v(" "),s("p",[a._v("Like in several other parts of the I/O library, functions that implicitly use a standard stream have a counterpart in "),s("code",[a._v("System.IO")]),a._v(" that performs the same job,  but with an extra parameter at the left, of type "),s("code",[a._v("Handle")]),a._v(", that represents the stream being handled. For instance, "),s("code",[a._v("getLine :: IO String")]),a._v(" has a counterpart "),s("code",[a._v("hGetLine :: Handle -> IO String")]),a._v(".")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token import-statement"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" System"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("IO")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Handle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("FilePath")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IOMode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ReadMode")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" \n                  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("openFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hGetLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hPutStr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hClose")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hIsEOF")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("stderr")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token import-statement"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" Control"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Monad")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("when")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("dumpFile")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Handle")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("FilePath")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Integer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("dumpFile")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("handle")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("filename")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("lineNumber")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- show file contents line by line")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("end")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hIsEOF")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("handle")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("when")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("not")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("end")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hGetLine")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("handle")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("filename")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('":"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("show")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("lineNumber")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('": "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("dumpFile")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("handle")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("filename")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("lineNumber")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hPutStr")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("stderr")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Type a filename: "')]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("filename")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("handle")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("openFile")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("filename")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ReadMode")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("dumpFile")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("handle")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("filename")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hClose")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("handle")]),a._v("\n\n")])])]),s("p",[a._v("Contents of file "),s("code",[a._v("example.txt")]),a._v(":")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("This")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("is")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("an")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Hello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("world")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("This")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("is")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("another")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n\n")])])]),s("p",[a._v("Input:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Type")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("filename")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("txt")]),a._v("\n\n")])])]),s("p",[a._v("Output:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("txt")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("This")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("is")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("an")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("txt")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Hello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("world")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("txt")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("This")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("is")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("another")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("example")]),a._v("\n\n")])])]),s("h2",{attrs:{id:"reading-from-stdin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reading-from-stdin"}},[a._v("#")]),a._v(" Reading from "),s("code",[a._v("stdin")])]),a._v(" "),s("p",[a._v("As-per the "),s("a",{attrs:{href:"https://www.haskell.org/onlinereport/haskell2010/haskellch7.html#x14-1430007.1",target:"_blank",rel:"noopener noreferrer"}},[a._v("Haskell 2010 Language Specification"),s("OutboundLink")],1),a._v(", the following are standard IO functions available in Prelude, so no imports are required to use them.")]),a._v(" "),s("h3",{attrs:{id:"getchar-io-char-read-a-char-from-stdin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getchar-io-char-read-a-char-from-stdin"}},[a._v("#")]),a._v(" "),s("code",[a._v("getChar :: IO Char")]),a._v(" - read a "),s("code",[a._v("Char")]),a._v(" from "),s("code",[a._v("stdin")])]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- MyChar.hs")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("myChar")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getChar")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("myChar")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- In your shell")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("runhaskell")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("MyChar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("hs")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- you enter a and press enter")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token char string"}},[a._v("'a'")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- the program prints 'a'")]),a._v("\n\n")])])]),s("h3",{attrs:{id:"getline-io-string-read-a-string-from-stdin-sans-new-line-character"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getline-io-string-read-a-string-from-stdin-sans-new-line-character"}},[a._v("#")]),a._v(" "),s("code",[a._v("getLine :: IO String")]),a._v(" - read a "),s("code",[a._v("String")]),a._v(" from "),s("code",[a._v("stdin")]),a._v(", sans new line character")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Prelude")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Hello")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("there")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- user enters some text and presses enter")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello there!"')]),a._v("\n\n")])])]),s("h3",{attrs:{id:"read-read-a-string-a-convert-a-string-to-a-value"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#read-read-a-string-a-convert-a-string-to-a-value"}},[a._v("#")]),a._v(" "),s("code",[a._v("read :: Read a => String -> a")]),a._v(" - convert a String to a value")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Prelude")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("read")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"1"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Prelude")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("read")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"1"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Float")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.0")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Prelude")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("read")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"True"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bool")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v("\n\n")])])]),s("p",[a._v("Other, less common functions are:")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("getContents :: IO String")]),a._v(" - returns all user input as a single string, which is read lazily as it is needed")]),a._v(" "),s("li",[s("code",[a._v("interact :: (String -> String) -> IO ()")]),a._v(" - takes a function of type String->String as its argument. The entire input from the standard input device is passed to this function as its argument")])])])}),[],!1,null,null,null);t.default=n.exports}}]);