(window.webpackJsonp=window.webpackJsonp||[]).push([[260],{668:function(e,t,a){"use strict";a.r(t);var n=a(31),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"ormlite-in-android"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ormlite-in-android"}},[e._v("#")]),e._v(" ORMLite in android")]),e._v(" "),a("h2",{attrs:{id:"android-ormlite-over-sqlite-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#android-ormlite-over-sqlite-example"}},[e._v("#")]),e._v(" Android OrmLite over SQLite example")]),e._v(" "),a("p",[a("strong",[e._v("ORMLite")]),e._v(" is an Object Relational Mapping package that provides simple and lightweight functionality for persisting Java objects to SQL databases while avoiding the complexity and overhead of more standard ORM packages.")]),e._v(" "),a("p",[e._v("Speaking for Android, OrmLite is implemented over the out-of-the-box supported database, SQLite. It makes direct calls to the API to access SQLite.")]),e._v(" "),a("h3",{attrs:{id:"gradle-setup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gradle-setup"}},[e._v("#")]),e._v(" Gradle setup")]),e._v(" "),a("p",[e._v("To get started you should include the package to the build gradle.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n// https://mvnrepository.com/artifact/com.j256.ormlite/ormlite-android\ncompile group: 'com.j256.ormlite', name: 'ormlite-android', version: '5.0'\nPOJO configuration\n\n")])])]),a("p",[e._v("Then you should configure a POJO to be persisted to the database. Here care must be taken to the annotations:")]),e._v(" "),a("li",[e._v("Add the @DatabaseTable annotation to the top of each class. You can\nalso use @Entity.")]),e._v(" "),a("li",[e._v("Add the @DatabaseField annotation right before each field to be\npersisted. You can also use @Column and others.")]),e._v(" "),a("li",[e._v("Add a no-argument constructor to each class with at least package\nvisibility.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\n@DatabaseTable(tableName = "form_model")\n public class FormModel implements Serializable {\n\n    @DatabaseField(generatedId = true)\n    private Long id;\n    @DatabaseField(dataType = DataType.SERIALIZABLE)\n    ArrayList<ReviewItem> reviewItems;\n\n    @DatabaseField(index = true)\n    private String username;\n\n    @DatabaseField\n    private String createdAt;\n\n    public FormModel() {\n    }\n\n    public FormModel(ArrayList<ReviewItem> reviewItems, String username, String createdAt) {\n        this.reviewItems = reviewItems;\n        this.username = username;\n        this.createdAt = createdAt;\n    }\n}\n\n')])])]),a("p",[e._v("At the example above there is one table (form_model) with 4 fields.")]),e._v(" "),a("p",[e._v("id field is auto generated index.")]),e._v(" "),a("p",[e._v("username is an index to the database.")]),e._v(" "),a("p",[e._v("More information about the annotation can be found at the "),a("a",{attrs:{href:"http://ormlite.com/javadoc/ormlite-core/doc-files/ormlite_2.html#Local-Annotations",target:"_blank",rel:"noopener noreferrer"}},[e._v("official documentation"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"database-helper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#database-helper"}},[e._v("#")]),e._v(" Database Helper")]),e._v(" "),a("p",[e._v("To continue with, you will need to create a database helper class which should extend the OrmLiteSqliteOpenHelper class.")]),e._v(" "),a("p",[e._v("This class creates and upgrades the database when your application is installed and can also provide the DAO classes used by your other classes.")]),e._v(" "),a("p",[e._v("DAO stands for Data Access Object and it provides all the scrum functionality and specializes in the handling a single persisted class.")]),e._v(" "),a("p",[e._v("The helper class must implement the following two methods:")]),e._v(" "),a("li",[a("p",[e._v("onCreate(SQLiteDatabase sqliteDatabase, ConnectionSource\nconnectionSource);")]),e._v("\nonCreate creates the database when your app is first installed\n")]),e._v(" "),a("li",[a("p",[e._v("onUpgrade(SQLiteDatabase database, ConnectionSource connectionSource,\nint oldVersion, int newVersion);")]),e._v("\nonUpgrade handles the upgrading of the database tables when you upgrade your app to a new version\n")]),e._v(" "),a("p",[e._v("Database Helper class example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\n public class OrmLite extends OrmLiteSqliteOpenHelper {\n    \n        //Database name\n        private static final String DATABASE_NAME = "gaia";\n        //Version of the database. Changing the version will call {@Link OrmLite.onUpgrade}\n        private static final int DATABASE_VERSION = 2;\n    \n        /**\n         * The data access object used to interact with the Sqlite database to do C.R.U.D operations.\n         */\n        private Dao<FormModel, Long> todoDao;\n    \n    \n    \n        public OrmLite(Context context) {\n            super(context, DATABASE_NAME, null, DATABASE_VERSION,\n                    /**\n                     * R.raw.ormlite_config is a reference to the ormlite_config2.txt file in the\n                     * /res/raw/ directory of this project\n                     * */\n                    R.raw.ormlite_config2);\n        }\n    \n        @Override\n        public void onCreate(SQLiteDatabase database, ConnectionSource connectionSource) {\n            try {\n    \n                /**\n                 * creates the database table\n                 */\n                TableUtils.createTable(connectionSource, FormModel.class);\n    \n            } catch (SQLException e) {\n                e.printStackTrace();\n            } catch (java.sql.SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        /*\n            It is called when you construct a SQLiteOpenHelper with version newer than the version of the opened database.\n         */\n        @Override\n        public void onUpgrade(SQLiteDatabase database, ConnectionSource connectionSource,\n                              int oldVersion, int newVersion) {\n            try {\n                /**\n                 * Recreates the database when onUpgrade is called by the framework\n                 */\n                TableUtils.dropTable(connectionSource, FormModel.class, false);\n                onCreate(database, connectionSource);\n    \n            } catch (SQLException | java.sql.SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    \n        /**\n         * Returns an instance of the data access object\n         * @return\n         * @throws SQLException\n         */\n        public Dao<FormModel, Long> getDao() throws SQLException {\n            if(todoDao == null) {\n                try {\n                    todoDao = getDao(FormModel.class);\n                } catch (java.sql.SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n            return todoDao;\n        }\n    }\n\n')])])]),a("h3",{attrs:{id:"persisting-object-to-sqlite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#persisting-object-to-sqlite"}},[e._v("#")]),e._v(" Persisting Object to SQLite")]),e._v(" "),a("p",[e._v("Finally, the class that persists the object to the database.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n    public class ReviewPresenter {\n    Dao<FormModel, Long> simpleDao;\n\n\n    public ReviewPresenter(Application application) {\n        this.application = (GaiaApplication) application;\n        simpleDao = this.application.getHelper().getDao();\n    }\n\n    public void storeFormToSqLite(FormModel form) {\n\n        try {\n            simpleDao.create(form);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        List<FormModel> list = null;\n        try {\n// query for all of the data objects in the database\n            list = simpleDao.queryForAll();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n// our string builder for building the content-view\n        StringBuilder sb = new StringBuilder();\n        int simpleC = 1;\n        for (FormModel simple : list) {\n            sb.append('#').append(simpleC).append(\": \").append(simple.getUsername()).append('\\n');\n            simpleC++;\n        }\n        System.out.println(sb.toString());\n    }\n    \n    //Query to database to get all forms by username\n    public List<FormModel> getAllFormsByUsername(String username) {\n        List<FormModel> results = null;\n        try {\n            results = simpleDao.queryBuilder().where().eq(\"username\", PreferencesManager.getInstance().getString(Constants.USERNAME)).query();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return results;\n    }\n}\n\n")])])]),a("p",[e._v("The accessor of the DOA at the constructor of the above class is defined as:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\nprivate OrmLite dbHelper = null;\n\n/*\nProvides the SQLite Helper Object among the application\n */\npublic OrmLite getHelper() {\n    if (dbHelper == null) {\n        dbHelper = OpenHelperManager.getHelper(this, OrmLite.class);\n    }\n    return dbHelper;\n}\n\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);