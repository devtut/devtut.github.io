(window.webpackJsonp=window.webpackJsonp||[]).push([[2414],{2822:function(s,a,t){"use strict";t.r(a);var e=t(31),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[s._v("#")]),s._v(" Variables")]),s._v(" "),t("h2",{attrs:{id:"scalars"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scalars"}},[s._v("#")]),s._v(" Scalars")]),s._v(" "),t("p",[s._v("Scalars are Perl's most basic data type. They're marked with the sigil "),t("code",[s._v("$")]),s._v(" and hold a single value of one of three types:")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("a number")]),s._v(" ("),t("code",[s._v("3")]),s._v(", "),t("code",[s._v("42")]),s._v(", "),t("code",[s._v("3.141")]),s._v(", etc.)")]),s._v(" "),t("li",[t("strong",[s._v("a string")]),s._v(" ("),t("code",[s._v("'hi'")]),s._v(", "),t("code",[s._v('"abc"')]),s._v(", etc.)")]),s._v(" "),t("li",[t("strong",[s._v("a reference")]),s._v(" to a variable (see other examples).")])]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$integer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# number")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$string")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# string")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$reference")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("             "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# reference to $string")]),s._v("\n\n")])])]),t("p",[t("strong",[s._v("Perl converts between numbers and strings on the fly")]),s._v(", based on what a particular operator expects.")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$number")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'41'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# string '41'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$meaning")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$number")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# number  42")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$sadness")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'20 apples'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# string '20 apples'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$danger")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$sadness")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# number '40', raises warning")]),s._v("\n\n")])])]),t("p",[s._v("When converting a string into a number, Perl takes as many digits from the front of a string as it can – hence why "),t("code",[s._v("20 apples")]),s._v(" is converted into "),t("code",[s._v("20")]),s._v(" in the last line.")]),s._v(" "),t("p",[s._v("Based on whether you want to treat the contents of a scalar as a string or a number, you need to use different operators. Do not mix them.")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# String comparison                   # Number comparison")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Potato'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("eq")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Potato'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Potato'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("ne")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Pomato'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Camel'")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("lt")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Potato'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("41")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Zombie'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("gt")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Potato'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("43")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# String concatenation                # Number summation")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Banana'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'phone'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                   "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# String repetition                   # Number multiplication ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'nan'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("x")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                            "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),t("p",[s._v("Attempting to use string operations on numbers will not raise warnings; attempting to use number operations on non-numeric strings will. Do be aware that some non-digit strings such as "),t("code",[s._v("'inf'")]),s._v(", "),t("code",[s._v("'nan'")]),s._v(", "),t("code",[s._v("'0 but true'")]),s._v(" count as numbers.")]),s._v(" "),t("h2",{attrs:{id:"array-references"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array-references"}},[s._v("#")]),s._v(" Array References")]),s._v(" "),t("p",[s._v("Array References are scalars ("),t("code",[s._v("$")]),s._v(") which refer to Arrays.")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@array")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Creating array, assigning value from a list")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$array_reference")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),t("p",[s._v("These can be created more short-hand as follows:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$other_array_reference")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),t("p",[s._v("Modifying / Using array references require dereferencing them first.")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@contents")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$array_reference")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("               "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Prefix notation")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@contents")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@$array_reference")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Braces can be left out")]),s._v("\n\n")])])]),t("p",[s._v("New postfix dereference syntax, available by default from v5.24")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token vstring string"}},[s._v("v5.24")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@contents")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$array_reference")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# New postfix notation ")]),s._v("\n\n")])])]),t("p",[s._v("When accessing an arrayref's contents by index you can use the "),t("code",[s._v("->")]),s._v(" syntactical sugar.")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@array")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("qw(one two three)")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$arrayref")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("qw(one two three)")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$one")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$one")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$arrayref")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),t("p",[s._v("Unlike arrays, arrayrefs can be nested:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@array")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ONE array of FOUR elements: (1, 0, 0, 1)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@matrix")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# an array of two arrayrefs")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$matrix")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# an arrayref of arrayrefs")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# There is no namespace conflict between scalars, arrays and hashes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# so @matrix and $matrix _both_ exist at this point and hold different values.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@diagonal_1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$matrix")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$matrix")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# uses @matrix")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@diagonal_2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$matrix")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$matrix")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# uses $matrix")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Since chained []- and {}-access can only happen on references, you can")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# omit some of those arrows.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$corner_1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$matrix")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# uses @matrix;")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$corner_2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$matrix")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# uses $matrix;  ")]),s._v("\n\n")])])]),t("p",[s._v("When used as Boolean, references are always true.")]),s._v(" "),t("h2",{attrs:{id:"arrays"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arrays"}},[s._v("#")]),s._v(" Arrays")]),s._v(" "),t("p",[s._v("Arrays store an ordered sequence of values. You can access the contents by index, or iterate over them. The values will stay in the order you filled them in.")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@numbers_to_ten")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# More conveniently: (1..10)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@chars_of_hello")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'h'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'e'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'l'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'l'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'o'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@word_list")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hello'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'World'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Note the sigil: access an @array item with $array[index]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$second_char_of_hello")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$chars_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 'e'")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Use negative indices to count from the end (with -1 being last)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$last_char_of_hello")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$chars_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Assign an array to a scalar to get the length of the array")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$length_of_array")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@chars_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 5")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can use $# to get the last index of an array, and confuse Stack Overflow")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$last_index_of_array")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#chars_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 4")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can also access multiple elements of an array at the same time")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# This is called "array slice"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Since this returns multiple values, the sigil to use here on the RHS is @")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@some_chars_of_hello")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@chars_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ('H', 'e', 'l')")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@out_of_order_chars")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@chars_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ('e', 'o', 'l')")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# In Python you can say array[1:-1] to get all elements but first and last")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Not so in Perl: (1..-1) is an empty list. Use $# instead")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@empty_list")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@chars_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ()")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@inner_chars_of_hello")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@chars_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#chars_of_hello")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ('e','l','l')")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Access beyond the end of the array yields undef, not an error")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$undef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$chars_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# undef    ")]),s._v("\n\n")])])]),t("p",[s._v("Arrays are mutable:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" utf8"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# necessary because this snippet is utf-8")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$chars_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'u'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     ('h','u','l','l','o')")]),s._v("\npush "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@chars_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'!'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'!'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     ('h','u','l','l','o','!','!')")]),s._v("\npop "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@chars_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     ('h','u','l','l','o','!')")]),s._v("\nshift "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@chars_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         ('u','l','l','o','!')")]),s._v("\nunshift "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@chars_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'¡'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'H'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ('¡','H','u','l','l','o','!')")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@chars_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'O'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'L'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'A'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ('¡','H','O','L','A',undef,'!') whoops! ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delete")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$chars_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ('¡','H','O','L','A',      '!')")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Setting elements beyond the end of an array does not result in an error")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# The array is extended with undef\'s as necessary. This is "autovivification."')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ()")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'x'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# (undef, undef, undef, 'x')")]),s._v("\n\n")])])]),t("p",[s._v("Finally, you can loop over the contents of an array:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token vstring string"}},[s._v("v5.10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# necessary for 'say'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$number")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@numbers_to_ten")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$number")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])]),t("p",[s._v("When used as booleans, arrays are true if they are not empty.")]),s._v(" "),t("h2",{attrs:{id:"scalar-references"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scalar-references"}},[s._v("#")]),s._v(" Scalar References")]),s._v(" "),t("p",[s._v("A "),t("strong",[s._v("reference")]),s._v(" is a scalar variable (one prefixed by "),t("code",[s._v("$")]),s._v(" ) which “refers to” some other data.")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$value")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$reference")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => Hello")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$reference")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => SCALAR(0x2683310)")]),s._v("\n\n")])])]),t("p",[s._v("To get the referred-to data, you "),t("strong",[s._v("de-reference")]),s._v(" it.")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$reference")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Explicit prefix syntax")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$$reference")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The braces can be left out (confusing)")]),s._v("\n\n")])])]),t("p",[s._v("New postfix dereference syntax, available by default from v5.24")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token vstring string"}},[s._v("v5.24")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$reference")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# New postfix notation")]),s._v("\n\n")])])]),t("p",[s._v('This "de-referenced value" can then be changed like it was the original variable.')]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$reference")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=~")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[s._v("s/Hello/World/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$reference")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => World")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => World")]),s._v("\n\n")])])]),t("p",[s._v("A reference is always "),t("strong",[s._v("truthy")]),s._v(" – even if the value it refers to is falsy (like "),t("code",[s._v("0")]),s._v(" or "),t("code",[s._v('""')]),s._v(").")]),s._v(" "),t("h3",{attrs:{id:"you-may-want-a-scalar-reference-if"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#you-may-want-a-scalar-reference-if"}},[s._v("#")]),s._v(" You may want a Scalar Reference If:")]),s._v(" "),t("li",[s._v("\nYou want to pass a string to a function, and have it modify that string for you without it being a return value.\n")]),s._v(" "),t("li",[s._v("\nYou wish to explicitly avoid Perl implicitly copying the contents of a large string at some point in your function passing ( especially relevant on older Perls without copy-on-write strings )\n")]),s._v(" "),t("li",[s._v("\nYou wish to disambiguate string-like values with specific meaning, from strings that convey content, for example:\n"),t("ul",[s._v("\n- Disambiguate a file name from file content\n- Disambiguate returned content from a returned error string\n"),t("p",[s._v("You wish to implement a lightweight inside out object model, where objects handed to calling code don't carry user visible metadata:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("our")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%objects")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$next_id")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sub")]),s._v(" new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$object_id")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$next_id")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$objects")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$object_id")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Assign data for object")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$ref")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$object_id")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" bless"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$ref")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MyClass"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"typeglobs-typeglob-refs-filehandles-and-constants"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typeglobs-typeglob-refs-filehandles-and-constants"}},[s._v("#")]),s._v(" Typeglobs, typeglob refs, filehandles and constants")]),s._v(" "),t("p",[s._v("A typeglob "),t("code",[s._v("*foo")]),s._v(" holds references to the contents of "),t("strong",[s._v("global")]),s._v(" variables with that name: "),t("code",[s._v("$foo")]),s._v(", "),t("code",[s._v("@foo")]),s._v(", "),t("code",[s._v("$foo")]),s._v(", "),t("code",[s._v("&foo")]),s._v(", etc. You can access it like an hash and assign to manipulate the symbol tables directly (evil!).")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token vstring string"}},[s._v("v5.10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# necessary for say")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("our")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$foo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("our")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$bar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" ref "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("*foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("SCALAR"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# SCALAR")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("*foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("SCALAR"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# bar")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("*bar")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("*foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$bar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# bar")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$bar")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'egg'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# egg")]),s._v("\n\n")])])]),t("p",[s._v("Typeglobs are more commonly handled when dealing with files. "),t("code",[s._v("open")]),s._v(", for example, produces a reference to a typeglob when asked to create a non-global filehandle:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token vstring string"}},[s._v("v5.10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# necessary for say")]),s._v("\nopen"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'> utf-8'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/tmp/log'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("or")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("die")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# open for writing with encoding")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$log")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Log opened'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can dereference this globref, but it's not very useful.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" ref "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# GLOB")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("IO"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'undef'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# undef")]),s._v("\n\nclose "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$log")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("or")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("die")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),t("p",[s._v("Typeglobs can also be used to make global read-only variables, though "),t("a",{attrs:{href:"http://perldoc.perl.org/constant.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("use constant")]),t("OutboundLink")],1),s._v(" is in broader use.")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Global constant creation")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("*TRUE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("our")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$TRUE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$TRUE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$TRUE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# dies, "Modification of a read-only value attempted"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# use constant instead defines a parameterless function, therefore it's not global,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# can be used without sigils, can be imported, but does not interpolate easily.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" constant "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("FALSE "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" FALSE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("&FALSE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${\\FALSE}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 0 (ugh)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("*FALSE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("CODE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CODE(0xMA1DBABE)")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Of course, neither is truly constant when you can manipulate the symbol table...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("*TRUE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" constant "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("EVIL "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("*FALSE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("*EVIL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"hashes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashes"}},[s._v("#")]),s._v(" Hashes")]),s._v(" "),t("p",[s._v("Hashes can be understood as lookup-tables. You can access its contents by specifiying a key for each of them. Keys must be strings. If they're not, they will be converted to strings.")]),s._v(" "),t("p",[s._v("If you give the hash simply a known key, it will serve you its value.")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Elements are in (key, value, key, value) sequence")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%inhabitants_of")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"London"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8674000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Paris"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2244000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# You can save some typing and gain in clarity by using the "fat comma"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# syntactical sugar. It behaves like a comma and quotes what's on the left.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%translations_of_hello")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("spanish "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hola'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" german "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hallo'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" swedish "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hej'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n\n")])])]),t("p",[s._v("In the following example, note the brackets and sigil: you access an element of "),t("code",[s._v("%hash")]),s._v(" using "),t("code",[s._v("$hash{key}")]),s._v(" because the "),t("strong",[s._v("value")]),s._v(" you want is a scalar. Some consider it good practice to quote the key while others find this style visually noisy. Quoting is only required for keys that could be mistaken for expressions like "),t("code",[s._v("$hash{'some-key'}")])]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$greeting")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$translations_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'spanish'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),t("p",[s._v("While Perl by default will try to use barewords as strings, "),t("code",[s._v("+")]),s._v(" modifier can also be used to indicate to Perl that key should not be interpolated but executed with result of execution being used as a key:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%employee")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'John Doe'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" shift "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'night'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# this example will print 'night'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$employee")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("shift"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# but this one will execute [shift][1], extracting first element from @_,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# and use result as a key")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$employee")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("shift"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),t("p",[s._v("Like with arrays, you can access multiple hash elements at the same time. This is called a "),t("strong",[s._v("hash slice")]),s._v(". The resulting value is a list, so use the "),t("code",[s._v("@")]),s._v(" sigil:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@words")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@translations_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'spanish'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'german'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ('Hola', 'Hallo')")]),s._v("\n\n")])])]),t("p",[s._v("Iterate over the keys of an hash with "),t("code",[s._v("keys")]),s._v(" "),t("code",[s._v("keys")]),s._v(" will return items in a random order. Combine with "),t("code",[s._v("sort")]),s._v(" if you wish.")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$lang")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sort keys "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%translations_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$translations_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$lang")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])]),t("p",[s._v("If you do not actually need the keys like in the previous example, "),t("code",[s._v("values")]),s._v(" returns the hash's values directly:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$translation")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("values "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%translations_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$translation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])]),t("p",[s._v("You can also use a while loop with "),t("code",[s._v("each")]),s._v(" to iterate over the hash. This way, you will get both the key and the value at the same time, without a separate value lookup. Its use is however discouraged, as "),t("a",{attrs:{href:"http://blogs.perl.org/users/rurban/2014/04/do-not-use-each.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[s._v("each")]),s._v(" can break in mistifying ways."),t("OutboundLink")],1)]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# DISCOURAGED")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$lang")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$translation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" each "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%translations_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$translation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])]),t("p",[s._v("Access to unset elements returns undef, not an error:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$italian")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$translations_of_hello")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'italian'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# undef")]),s._v("\n\n")])])]),t("p",[t("code",[s._v("map")]),s._v(" and list flattening can be used to create hashes out of arrays. This is a popular way to create a 'set' of values, e.g. to quickly check whether a value is in "),t("code",[s._v("@elems")]),s._v(". This operation usually takes O(n) time (i.e. proportional to the number of elements) but can be done in constant time (O(1)) by turning the list into a hash:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@elems")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("qw(x y x z t)")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" map "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$_")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@elems")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# (x, 1, y, 1, t, 1)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$y_membership")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'y'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$w_membership")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'w'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# undef")]),s._v("\n\n")])])]),t("p",[s._v("This requires some explanation. The contents of "),t("code",[s._v("@elems")]),s._v(" get read into a list, which is processed by "),t("code",[s._v("map")]),s._v(". "),t("code",[s._v("map")]),s._v(" accepts a code block that gets called for each value of its input list; the value of the element is available for use in "),t("code",[s._v("$_")]),s._v(". Our code block returns "),t("strong",[s._v("two")]),s._v(" list elements for each input element: "),t("code",[s._v("$_")]),s._v(", the input element, and "),t("code",[s._v("1")]),s._v(", just some value. Once you account for list flattening, the outcome is that "),t("code",[s._v("map { $_ => 1 } @elems")]),s._v(" turns "),t("code",[s._v("qw(x y x z t)")]),s._v(" into "),t("code",[s._v("(x => 1, y => 1, x => 1, z => 1, t => 1)")]),s._v(".")]),s._v(" "),t("p",[s._v("As those elements get assigned into the hash, odd elements become hash keys and even elements become hash values. When a key is specified multiple times in a list to be assigned to a hash, the "),t("strong",[s._v("last")]),s._v(" value wins. This effectively discards duplicates.")]),s._v(" "),t("p",[s._v("A faster way to turn a list into a hash uses assignment to a hash slice. It uses the "),t("code",[s._v("x")]),s._v(" operator to multiply the single-element list "),t("code",[s._v("(1)")]),s._v(" by the size of "),t("code",[s._v("@elems")]),s._v(", so there is a "),t("code",[s._v("1")]),s._v(" value for each of the keys in the slice on the left hand side:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@elems")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("qw(x y x z t)")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@elems")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("x")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@elems")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),t("p",[s._v("The following application of hashes also exploits the fact that hashes and lists can often be used interchangeably to implement named function args:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sub")]),s._v(" hash_args")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%args")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@_")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%defaults")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" bar "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%overrides")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("__unsafe "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%settings")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%defaults")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%args")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%overrides")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This function can then be called like this:")]),s._v("\nhash_args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("foo "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" bar "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# (foo => 5, bar => 3, __unsafe ==> 0)")]),s._v("\nhash_args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# (foo => 1, bar => 0, __unsafe ==> 0)")]),s._v("\nhash_args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("__unsafe "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# (foo => 1, bar => 0, __unsafe ==> 0)")]),s._v("\n\n")])])]),t("p",[s._v("When used as booleans, hashes are true if they are not empty.")]),s._v(" "),t("h2",{attrs:{id:"hash-references"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hash-references"}},[s._v("#")]),s._v(" Hash References")]),s._v(" "),t("p",[s._v("Hash references are scalars which contain a pointer to the memory location containing the data of a hash.  Because the scalar points directly to the hash itself, when it is passed to a subroutine, changes made to the hash are not local to the subroutine as with a regular hash, but instead are global.")]),s._v(" "),t("p",[s._v("First, let's examine what happens when you pass a normal hash to a subroutine and modify it within there:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" strict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" warnings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" Data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("Dumper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sub")]),s._v(" modify")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%hash")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@_")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$hash")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("new_value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" Dumper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Within the subroutine"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" Dumper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%hash")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%example_hash")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    old_value   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nmodify"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%example_hash")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" Dumper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"After exiting the subroutine"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" Dumper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%example_hash")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),t("p",[s._v("Which results in:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$VAR1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Within the subroutine'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$VAR1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'new_value'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'old_value'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$VAR1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'After exiting the subroutine'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$VAR1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'old_value'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),t("p",[s._v("Notice that after we exit the subroutine, the hash remains unaltered; all changes to it were local to the modify subroutine, because we passed a copy of the hash, not the hash itself.")]),s._v(" "),t("p",[s._v("In comparison, when you pass a hashref, you are passing the address to the original hash, so any changes made within the subroutine will be made to the original hash:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" strict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" warnings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" Data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("Dumper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sub")]),s._v(" modify")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$hashref")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" shift"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# De-reference the hash to add a new value")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$hashref")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("new_value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" Dumper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Within the subroutine"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" Dumper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$hashref")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Create a hashref")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$example_ref")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    old_value   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Pass a hashref to a subroutine")]),s._v("\nmodify"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$example_ref")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" Dumper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"After exiting the subroutine"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" Dumper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$example_ref")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),t("p",[s._v("This will result in:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$VAR1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Within the subroutine'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$VAR1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'new_value'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'old_value'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$VAR1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'After exiting the subroutine'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$VAR1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'new_value'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'old_value'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"sigils"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sigils"}},[s._v("#")]),s._v(" Sigils")]),s._v(" "),t("p",[s._v("Perl has a number of sigils:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$scalar")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# individual value")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@array")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sequence of values")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%hash")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'it'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ciao'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'en'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'fr'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'salut'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# unordered key-value pairs")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("&function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'arguments'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# subroutine")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("*typeglob")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# symbol table entry")]),s._v("\n\n")])])]),t("p",[s._v("These look like sigils, but aren't:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# \\ returns the reference of what's on the right (so, a reference to @array)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# this is the index of the last element of @array")]),s._v("\n\n")])])]),t("p",[s._v("You can use braces after the sigil if you should be so inclined. Occasionally, this improves readability.")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),t("p",[s._v("While you use different sigils to define variables of different types, the same variable can be accessed in different ways based on what sigils you use.")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%hash")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# we use % because we are looking at an entire hash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$hash")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("it"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# we want a single value, however, that's singular, so we use $")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# likewise for an array. notice the change in brackets.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# we want multiple values of an array, so we instead use @")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@hash")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'it'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'en'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# similarly for hashes (this gives the values: 'ciao', 'hello')")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%hash")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'it'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'fr'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# we want an hash with just some of the keys, so we use %")]),s._v("\n                  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# (this gives key-value pairs: 'it', 'ciao', 'fr', 'salut')")]),s._v("\n\n")])])]),t("p",[s._v("This is especially true of references. In order to use a referenced value you can combine sigils together.")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@array")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This is an array")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$reference_to_an_array")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# A reference to an array is a singular value")]),s._v("\npush "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# push expects an array")]),s._v("\npush "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@$reference_to_an_array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# the @ sigil means what's on the right is an array")]),s._v("\n                                     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# and what's on the right is $reference_to_an_array")]),s._v("\n                                     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# hence: first a @, then a $")]),s._v("\n\n")])])]),t("p",[s._v("Here's a perhaps less confusing way to think about it. As we saw earlier, you can use braces to wrap what's on the right of a sigil. So you can think of "),t("code",[s._v("@{}")]),s._v(" as something that takes an array reference and gives you the referenced array.")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# pop does not like array references")]),s._v("\npop "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$reference_to_an_array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ERROR in Perl 5.20+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# but if we use @{}, then...")]),s._v("\npop "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$reference_to_an_array")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# this works!")]),s._v("\n\n")])])]),t("p",[s._v("As it turns out, "),t("code",[s._v("@{}")]),s._v(" actually accepts an expression:")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$values")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undef")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" pop "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$values")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ERROR: can't use undef as an array reference")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" pop "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$values")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# undef // [5] gives [5], so this prints 5")]),s._v("\n\n")])])]),t("p",[s._v("...and the same trick works for other sigils, too.")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This is not an example of good Perl. It is merely a demonstration of this language feature")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$hashref")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undef")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$key")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$hashref")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This doesn\'t crash"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])]),t("p",[s._v('...but if the "argument" to a sigil is simple, you can leave the braces away.')]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$$scalar_reference")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" pop "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@$array_reference")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" keys "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%$hash_reference")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),t("p",[s._v("Things can get excessively extravagant. This works, but please Perl responsibly.")]),s._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%hash")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("it "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ciao'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" en "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hi'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" fr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'salut'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$reference")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%hash")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$reference_to_a_reference")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$reference")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$italian")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$hash")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("it"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Direct access ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@greets")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@$reference")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'it'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'en'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Dereference, then access as array")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%subhash")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%$$reference_to_a_reference")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'en'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'fr'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Dereference ×2 then access as hash")]),s._v("\n\n")])])]),t("p",[s._v('For most normal use, you can just use subroutine names without a sigil. (Variables without a sigil are typically called "barewords".) The '),t("code",[s._v("&")]),s._v(" sigil is only useful in a limited number of cases.")]),s._v(" "),t("li",[s._v("\nMaking a reference to a subroutine:\n"),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sub")]),s._v(" many_bars")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'bar'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("x")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$_")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$reference")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("&many_bars")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$reference")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# barbarbar")]),s._v("\n\n")])])])]),s._v(" "),t("li",[s._v("\nCalling a function ignoring its prototype.\n")]),s._v(" "),t("li",[s._v("\nCombined with goto, as a slightly weird function call that has the current call frame replaced with the caller. Think the linux `exec()` API call, but for functions.\n")]),s._v(" "),t("h4",{attrs:{id:"syntax"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[s._v("#")]),s._v(" Syntax")]),s._v(" "),t("ul",[t("li",[s._v("my  # Lexical declaration")]),s._v(" "),t("li",[s._v("our # Global declaration")]),s._v(" "),t("li",[s._v("$foo # Scalar")]),s._v(" "),t("li",[s._v("@foo # Array")]),s._v(" "),t("li",[s._v("$#foo # Array Last-Index")]),s._v(" "),t("li",[s._v("%foo # Hash")]),s._v(" "),t("li",[s._v("${$foo} # Scalar De-Reference")]),s._v(" "),t("li",[s._v("@{$foo} # Array  De-Reference")]),s._v(" "),t("li",[s._v("$#{$foo} # Array-DeRef Last-Index")]),s._v(" "),t("li",[s._v("%{$foo} # Hash De-Reference")]),s._v(" "),t("li",[s._v("$foo[$index]    # Array get indexed")]),s._v(" "),t("li",[s._v("${$foo}[$index] # Array De-Reference and get indexed.")]),s._v(" "),t("li",[s._v("$foo->[$index]  # Array De-Reference and get indexed ( Simplified )")]),s._v(" "),t("li",[s._v("$foo{$key}  # Hash get value for key")]),s._v(" "),t("li",[s._v("${$foo}{$key} # Hash Dereference and get value for key")]),s._v(" "),t("li",[s._v("$foo->{$key}  # Hash Dereference and get value for key ( Simplified )")]),s._v(" "),t("li",[s._v("$x # Reference to Scalar")]),s._v(" "),t("li",[s._v("@x # Reference to Array")]),s._v(" "),t("li",[s._v("%x # Reference to Hash")]),s._v(" "),t("li",[s._v("=[ ] # Reference to Anonymous Array (Inline)")]),s._v(" "),t("li",[s._v("={ } # Reference to Anonymous Hash (Inline)")])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);