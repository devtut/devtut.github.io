(window.webpackJsonp=window.webpackJsonp||[]).push([[561],{969:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"data-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-types"}},[t._v("#")]),t._v(" Data Types")]),t._v(" "),a("h2",{attrs:{id:"fixed-width-integer-types-since-c99"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fixed-width-integer-types-since-c99"}},[t._v("#")]),t._v(" Fixed Width Integer Types (since C99)")]),t._v(" "),a("p",[t._v("The header "),a("code",[t._v("<stdint.h>")]),t._v(" provides several fixed-width integer type definitions. These types are "),a("strong",[t._v("optional")]),t._v(" and only provided if the platform has an integer type of the corresponding width, and if the corresponding signed type has a two's complement representation of negative values.")]),t._v(" "),a("p",[t._v("See the remarks section for usage hints of fixed width types.")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* commonly used types include */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" u32 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* exactly 32-bits wide */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v(" u8 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* exactly 8-bits wide */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int64_t")]),t._v(" i64 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* exactly 64 bit in two's complement representation */")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"interpreting-declarations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interpreting-declarations"}},[t._v("#")]),t._v(" Interpreting Declarations")]),t._v(" "),a("p",[t._v("A distinctive syntactic peculiarity of C is that declarations mirror the use of the declared object as it would be in a normal expression.")]),t._v(" "),a("p",[t._v("The following set of operators with identical precedence and associativity are reused in declarators, namely:")]),t._v(" "),a("ul",[a("li",[t._v("the unary "),a("code",[t._v("*")]),t._v(' "dereference" operator which denotes a pointer;')]),t._v(" "),a("li",[t._v("the binary "),a("code",[t._v("[]")]),t._v(' "array subscription" operator which denotes an array;')]),t._v(" "),a("li",[t._v("the (1+n)-ary "),a("code",[t._v("()")]),t._v(' "function call" operator which denotes a function;')]),t._v(" "),a("li",[t._v("the "),a("code",[t._v("()")]),t._v(" grouping parentheses which override the precedence and associativity of the rest of the listed operators.")])]),t._v(" "),a("p",[t._v("The above three operators have the following precedence and associativity:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Operator")]),t._v(" "),a("th",[t._v("Relative Precedence")]),t._v(" "),a("th",[t._v("Associativity")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("[]")]),t._v(" (array subscription)")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Left-to-right")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("()")]),t._v(" (function call)")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("Left-to-right")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("*")]),t._v(" (dereference)")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("Right-to-left")])])])]),t._v(" "),a("p",[t._v("When interpreting declarations, one has to start from the identifier outwards and apply the adjacent operators in the correct order as per the above table. Each application of an operator can be substituted with the following English words:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Expression")]),t._v(" "),a("th",[t._v("Interpretation")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("thing[X]")])]),t._v(" "),a("td",[t._v("an array of size "),a("code",[t._v("X")]),t._v(" of...")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("thing(t1, t2, t3)")])]),t._v(" "),a("td",[t._v("a function taking "),a("code",[t._v("t1")]),t._v(", "),a("code",[t._v("t2")]),t._v(", "),a("code",[t._v("t3")]),t._v(" and returning...")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("*thing")])]),t._v(" "),a("td",[t._v("a pointer to...")])])])]),t._v(" "),a("p",[t._v("It follows that the beginning of the English interpretation will always start with the identifier and will end with the type that stands on the left-hand side of the declaration.")]),t._v(" "),a("h3",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[a("code",[t._v("[]")]),t._v(" takes precedence over "),a("code",[t._v("*")]),t._v(", so the interpretation is:\n"),a("code",[t._v("names")]),t._v(" is an array of size 20 of a pointer to "),a("code",[t._v("char")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("place"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("In case of using parentheses to override the precedence, the "),a("code",[t._v("*")]),t._v(" is applied first: "),a("code",[t._v("place")]),t._v(" is a pointer to an array of size 10 of "),a("code",[t._v("char")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("There is no precedence to worry about here: "),a("code",[t._v("fn")]),t._v(" is a function taking "),a("code",[t._v("long")]),t._v(", "),a("code",[t._v("short")]),t._v(" and returning "),a("code",[t._v("int")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("The "),a("code",[t._v("()")]),t._v(" is applied first: "),a("code",[t._v("fn")]),t._v(" is a function taking "),a("code",[t._v("void")]),t._v(" and returning a pointer to "),a("code",[t._v("int")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("Overriding the precedence of "),a("code",[t._v("()")]),t._v(": "),a("code",[t._v("fp")]),t._v(" is a pointer to a function taking "),a("code",[t._v("void")]),t._v(" and returning "),a("code",[t._v("int")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("Multidimensional arrays are not an exception to the rule; the "),a("code",[t._v("[]")]),t._v(" operators are applied in left-to-right order according to the associativity in the table: "),a("code",[t._v("arr")]),t._v(" is an array of size 5 of an array of size 8 of "),a("code",[t._v("int")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("The two dereference operators have equal precedence, so the associativity takes effect. The operators are applied in right-to-left order: "),a("code",[t._v("ptr")]),t._v(" is a pointer to a pointer to an "),a("code",[t._v("int")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"multiple-declarations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multiple-declarations"}},[t._v("#")]),t._v(" Multiple Declarations")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("The declared objects in the above example are:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("fn")]),t._v(": a function taking "),a("code",[t._v("void")]),t._v(" and returning "),a("code",[t._v("int")]),t._v(";")]),t._v(" "),a("li",[a("code",[t._v("ptr")]),t._v(": a pointer to an "),a("code",[t._v("int")]),t._v(";")]),t._v(" "),a("li",[a("code",[t._v("fp")]),t._v(": a pointer to a function taking "),a("code",[t._v("int")]),t._v(" and returning "),a("code",[t._v("int")]),t._v(";")]),t._v(" "),a("li",[a("code",[t._v("arr")]),t._v(": an array of size 10 of an array of size 20 of "),a("code",[t._v("int")]),t._v(";")]),t._v(" "),a("li",[a("code",[t._v("num")]),t._v(": "),a("code",[t._v("int")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"alternative-interpretation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#alternative-interpretation"}},[t._v("#")]),t._v(" Alternative Interpretation")]),t._v(" "),a("p",[t._v("Because declarations mirror use, a declaration can also be interpreted in terms of the operators that could be applied over the object and the final resulting type of that expression. The type that stands on the left-hand side is the final result that is yielded after applying all operators.")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n * Subscripting "arr" and dereferencing it yields a "char" result.\n * Particularly: *arr[5] is of type "char".\n */')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n * Calling "fn" yields an "int" result.\n * Particularly: fn(\'b\') is of type "int".\n */')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n * Dereferencing "fp" and then calling it yields an "int" result.\n * Particularly: (*fp)() is of type "int".\n */')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n * Subscripting "strings" twice and dereferencing it yields a "char" result.\n * Particularly: *strings[5][15] is of type "char"\n */')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("strings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"integer-types-and-constants"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#integer-types-and-constants"}},[t._v("#")]),t._v(" Integer types and constants")]),t._v(" "),a("p",[t._v("Signed integers can be of these types (the "),a("code",[t._v("int")]),t._v(" after "),a("code",[t._v("short")]),t._v(", or "),a("code",[t._v("long")]),t._v(" is optional):")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("signed")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* required to be 1 byte, see remarks for further information. */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("signed")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" si "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32767")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* required to be at least 16 bits. */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("signed")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32767")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* required to be at least 16 bits */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("signed")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" li "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2147483647")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* required to be at least 32 bits. */")]),t._v("\n\n")])])]),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("signed")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" li "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2147483647")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* required to be at least 64 bits */")]),t._v("\n\n")])])]),a("p",[t._v("Each of these signed integer types has an unsigned version.")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65535")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2767")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("For all types but "),a("code",[t._v("char")]),t._v(" the "),a("code",[t._v("signed")]),t._v(" version is assumed if the "),a("code",[t._v("signed")]),t._v(" or "),a("code",[t._v("unsigned")]),t._v(" part is omitted. The type "),a("code",[t._v("char")]),t._v(" constitutes a third character type, different from "),a("code",[t._v("signed char")]),t._v(" and "),a("code",[t._v("unsigned char")]),t._v(" and the signedness (or not) depends on the platform.")]),t._v(" "),a("p",[t._v("Different types of integer constants (called "),a("strong",[t._v("literals")]),t._v(" in C jargon) can be written in different bases, and different width, based on their prefix or suffix.")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* the following variables are initialized to the same value: */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* decimal constant (base10) */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("052")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* octal constant (base8) */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xaf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* hexadecimal constants (base16) */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" X "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0XAf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* (letters 'a' through 'f' (case insensitive) represent 10 through 15) */")]),t._v("\n\n")])])]),a("p",[t._v("Decimal constants are always "),a("code",[t._v("signed")]),t._v(". Hexadecimal constants start with "),a("code",[t._v("0x")]),t._v(" or "),a("code",[t._v("0X")]),t._v(" and octal constants start just with a "),a("code",[t._v("0")]),t._v(". The latter two are "),a("code",[t._v("signed")]),t._v(" or "),a("code",[t._v("unsigned")]),t._v(" depending on whether the value fits into the signed type or not.")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* suffixes to describe width and signedness : */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* no suffix represent int, or long int */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ui "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65535u")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* u or U represent unsigned int, or long int */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" li "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65536l")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* l or L represent long int */")]),t._v("\n\n")])])]),a("p",[t._v("Without a suffix the constant has the first type that fits its value, that is a decimal constant that is larger than "),a("code",[t._v("INT_MAX")]),t._v(" is of type "),a("code",[t._v("long")]),t._v(" if possible, or "),a("code",[t._v("long long")]),t._v(" otherwise.")]),t._v(" "),a("p",[t._v("The header file "),a("code",[t._v("<limits.h>")]),t._v(" describes the limits of integers as follows. Their implementation-defined values shall be equal or greater in magnitude (absolute value) to those shown below, with the same sign.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Macro")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Value")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("CHAR_BIT")])]),t._v(" "),a("td",[t._v("smallest object that is not a bit-field (byte)")]),t._v(" "),a("td",[t._v("8")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("SCHAR_MIN")])]),t._v(" "),a("td",[a("code",[t._v("signed char")])]),t._v(" "),a("td",[t._v("-127 / -(2"),a("sup",[t._v("7")]),t._v(" - 1)")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("SCHAR_MAX")])]),t._v(" "),a("td",[a("code",[t._v("signed char")])]),t._v(" "),a("td",[t._v("+127 / 2"),a("sup",[t._v("7")]),t._v(" - 1")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("UCHAR_MAX")])]),t._v(" "),a("td",[a("code",[t._v("unsigned char")])]),t._v(" "),a("td",[t._v("255 / 2"),a("sup",[t._v("8")]),t._v(" - 1")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("CHAR_MIN")])]),t._v(" "),a("td",[a("code",[t._v("char")])]),t._v(" "),a("td",[t._v("see below")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("CHAR_MAX")])]),t._v(" "),a("td",[a("code",[t._v("char")])]),t._v(" "),a("td",[t._v("see below")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("SHRT_MIN")])]),t._v(" "),a("td",[a("code",[t._v("short int")])]),t._v(" "),a("td",[t._v("-32767 / -(2"),a("sup",[t._v("15")]),t._v(" - 1)")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("SHRT_MAX")])]),t._v(" "),a("td",[a("code",[t._v("short int")])]),t._v(" "),a("td",[t._v("+32767 / 2"),a("sup",[t._v("15")]),t._v(" - 1")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("USHRT_MAX")])]),t._v(" "),a("td",[a("code",[t._v("unsigned short int")])]),t._v(" "),a("td",[t._v("65535 / 2"),a("sup",[t._v("16")]),t._v(" - 1")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("INT_MIN")])]),t._v(" "),a("td",[a("code",[t._v("int")])]),t._v(" "),a("td",[t._v("-32767 / -(2"),a("sup",[t._v("15")]),t._v(" - 1)")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("INT_MAX")])]),t._v(" "),a("td",[a("code",[t._v("int")])]),t._v(" "),a("td",[t._v("+32767 / 2"),a("sup",[t._v("15")]),t._v(" - 1")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("UINT_MAX")])]),t._v(" "),a("td",[a("code",[t._v("unsigned int")])]),t._v(" "),a("td",[t._v("65535 / 2"),a("sup",[t._v("16")]),t._v(" - 1")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("LONG_MIN")])]),t._v(" "),a("td",[a("code",[t._v("long int")])]),t._v(" "),a("td",[t._v("-2147483647 / -(2"),a("sup",[t._v("31")]),t._v(" - 1)")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("LONG_MAX")])]),t._v(" "),a("td",[a("code",[t._v("long int")])]),t._v(" "),a("td",[t._v("+2147483647 / 2"),a("sup",[t._v("31")]),t._v(" - 1")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("ULONG_MAX")])]),t._v(" "),a("td",[a("code",[t._v("unsigned long int")])]),t._v(" "),a("td",[t._v("4294967295 / 2"),a("sup",[t._v("32")]),t._v(" - 1")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Macro")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Value")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("LLONG_MIN")])]),t._v(" "),a("td",[a("code",[t._v("long long int")])]),t._v(" "),a("td",[t._v("-9223372036854775807 / -(2"),a("sup",[t._v("63")]),t._v(" - 1)")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("LLONG_MAX")])]),t._v(" "),a("td",[a("code",[t._v("long long int")])]),t._v(" "),a("td",[t._v("+9223372036854775807 / 2"),a("sup",[t._v("63")]),t._v(" - 1")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("ULLONG_MAX")])]),t._v(" "),a("td",[a("code",[t._v("unsigned long long int")])]),t._v(" "),a("td",[t._v("18446744073709551615 / 2"),a("sup",[t._v("64")]),t._v(" - 1")])])])]),t._v(" "),a("p",[t._v("If the value of an object of type "),a("code",[t._v("char")]),t._v(" sign-extends when used in an expression, the value of "),a("code",[t._v("CHAR_MIN")]),t._v(" shall be the same as that of "),a("code",[t._v("SCHAR_MIN")]),t._v(" and the value of "),a("code",[t._v("CHAR_MAX")]),t._v(" shall be the same as that of "),a("code",[t._v("SCHAR_MAX")]),t._v(" . If the value of an object of type "),a("code",[t._v("char")]),t._v(" does not sign-extend when used in an expression, the value of "),a("code",[t._v("CHAR_MIN")]),t._v(" shall be 0 and the value of "),a("code",[t._v("CHAR_MAX")]),t._v(" shall be the same as that of "),a("code",[t._v("UCHAR_MAX")]),t._v(".")]),t._v(" "),a("p",[t._v("The C99 standard added a new header, "),a("code",[t._v("<stdint.h>")]),t._v(", which contains definitions for fixed width integers. See the fixed width integer example for a more in-depth explanation.")]),t._v(" "),a("h2",{attrs:{id:"floating-point-constants"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#floating-point-constants"}},[t._v("#")]),t._v(" Floating Point Constants")]),t._v(" "),a("p",[t._v("The C language has three mandatory real floating point types, "),a("code",[t._v("float")]),t._v(", "),a("code",[t._v("double")]),t._v(", and "),a("code",[t._v("long double")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.314f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* suffix f or F denotes type float */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.314")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* no suffix denotes double */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" ld "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.314l")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* suffix l or L denotes long double */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* the different parts of a floating point definition are optional */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* valid, fractional part is optional */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* valid, whole-number part is optional */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* they can also defined in scientific notation */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" sd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2e3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* decimal fraction 1.2 is scaled by 10^3, that is 1200.0 */")]),t._v("\n\n")])])]),a("p",[t._v("The header "),a("code",[t._v("<float.h>")]),t._v(" defines various limits for floating point operations.")]),t._v(" "),a("p",[t._v("Floating point arithmetic is implementation defined. However, most modern platforms (arm, x86, x86_64, MIPS) use "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/IEEE_floating_point",target:"_blank",rel:"noopener noreferrer"}},[t._v("IEEE 754"),a("OutboundLink")],1),t._v(" floating point operations.")]),t._v(" "),a("p",[t._v("C also has three optional complex floating point types that are derived from the above.")]),t._v(" "),a("h2",{attrs:{id:"string-literals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-literals"}},[t._v("#")]),t._v(" String Literals")]),t._v(" "),a("p",[t._v("A string literal in C is a sequence of chars, terminated by a literal zero.")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello, world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* string literal */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* string literals can be used to initialize arrays */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" a1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* a1 is char[4] holding {'a','b','c','\\0'} */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" a2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* same as a1 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" a3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* a1 is char[3] holding {'a','b','c'}, missing the '\\0' */")]),t._v("\n\n")])])]),a("p",[t._v("String literals are "),a("strong",[t._v("not modifiable")]),t._v(" (and in fact may be placed in read-only memory such as .rodata). Attempting to alter their values results in undefined behaviour.")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foobar"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'F'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* undefined behaviour */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* it's good practice to denote string literals as such, by using `const` */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foobar"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'F'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* compiler error! */")]),t._v("\n\n")])])]),a("p",[t._v("Multiple string literals are concatenated at compile time, which means you can write construct like these.")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* only two narrow or two wide string literals may be concatenated */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* since C99, more than two can be concatenated */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* concatenation is implementation defined */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('", "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* common usages are concatenations of format strings */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" fmt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%"')]),t._v(" PRId16"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* PRId16 macro since C99 */")]),t._v("\n\n")])])]),a("p",[t._v("String literals, same as character constants, support different character sets.")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* normal string literal, of type char[] */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* wide character string literal, of type wchar_t[] */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("wchar_t")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" L"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* UTF-8 string literal, of type char[] */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" u8"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 16-bit wide string literal, of type char16_t[] */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("char16_t")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" s4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" u"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 32-bit wide string literal, of type char32_t[] */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("char32_t")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" s5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" U"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),a("ul",[a("li",[t._v("While "),a("code",[t._v("char")]),t._v(" is required to be 1 byte, 1 byte is "),a("strong",[t._v("not")]),t._v(" required to be 8 bits (often also called an "),a("strong",[t._v("octet")]),t._v("), even though most of modern computer platforms define it as 8 bits. The implementation's number of bits per "),a("code",[t._v("char")]),t._v(" is provided by the "),a("code",[t._v("CHAR_BIT")]),t._v(" macro, defined in "),a("code",[t._v("<limits.h>")]),t._v(". "),a("a",{attrs:{href:"http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("POSIX"),a("OutboundLink")],1),t._v(" does require 1 byte to be 8 bits.")]),t._v(" "),a("li",[t._v("Fixed width integer types should be use sparsely, C's built-in types are designed to be natural on every architecture, the fixed width types should only be used if you explicitly need a specifically sized integer (for example for networking).")])])])}),[],!1,null,null,null);s.default=n.exports}}]);