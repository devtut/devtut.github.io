(window.webpackJsonp=window.webpackJsonp||[]).push([[3072],{3480:function(t,s,e){"use strict";e.r(s);var a=e(31),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"exceptions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exceptions"}},[t._v("#")]),t._v(" Exceptions")]),t._v(" "),e("h2",{attrs:{id:"creating-a-custom-exception-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-custom-exception-type"}},[t._v("#")]),t._v(" Creating a custom exception type")]),t._v(" "),e("p",[t._v("A custom exception is any class that extends "),e("code",[t._v("Exception")]),t._v(" or a subclass of "),e("code",[t._v("Exception")]),t._v(".")]),t._v(" "),e("p",[t._v("In general, you should always extend "),e("code",[t._v("StandardError")]),t._v(" or a descendant. The "),e("code",[t._v("Exception")]),t._v(" family are usually for virtual-machine or system errors, rescuing them can prevent a forced interruption from working as expected.")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Defines a new custom exception called FileNotFound")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileNotFound")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("StandardError")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token method-definition"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("read_file")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exist"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FileNotFound")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"File '),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v(' not found"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\nread_file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"missing.txt"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> raises FileNotFound.new("File `missing.txt` not found")')]),t._v("\nread_file"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"valid.txt"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> reads and returns the content of the file")]),t._v("\n\n")])])]),e("p",[t._v("It's common to name exceptions by adding the "),e("code",[t._v("Error")]),t._v(" suffix at the end:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("ConnectionError")])]),t._v(" "),e("li",[e("code",[t._v("DontPanicError")])])]),t._v(" "),e("p",[t._v("However, when the error is self-explanatory, you don't need to add the "),e("code",[t._v("Error")]),t._v(" suffix because would be redundant:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("FileNotFound")]),t._v(" vs "),e("code",[t._v("FileNotFoundError")])]),t._v(" "),e("li",[e("code",[t._v("DatabaseExploded")]),t._v(" vs "),e("code",[t._v("DatabaseExplodedError")])])]),t._v(" "),e("h2",{attrs:{id:"handling-multiple-exceptions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#handling-multiple-exceptions"}},[t._v("#")]),t._v(" Handling multiple exceptions")]),t._v(" "),e("p",[t._v("You can handle multiple errors in the same "),e("code",[t._v("rescue")]),t._v(" declaration:")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# an execution that may fail")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FirstError")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SecondError")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" e\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# do something if a FirstError or SecondError occurs")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),e("p",[t._v("You can also add multiple "),e("code",[t._v("rescue")]),t._v(" declarations:")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# an execution that may fail")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FirstError")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" e\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# do something if a FirstError occurs")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SecondError")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" e\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# do something if a SecondError occurs")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" e\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# do something if a StandardError occurs")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),e("p",[t._v("The order of the "),e("code",[t._v("rescue")]),t._v(" blocks is relevant: the first match is the one executed. Therefore, if you put "),e("code",[t._v("StandardError")]),t._v(" as the first condition and all your exceptions inherit from "),e("code",[t._v("StandardError")]),t._v(", then the other "),e("code",[t._v("rescue")]),t._v(" statements will never be executed.")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# an execution that may fail")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" e\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# this will swallow all the errors")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FirstError")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" e\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# do something if a FirstError occurs")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SecondError")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" e\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# do something if a SecondError occurs")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),e("p",[t._v("Some blocks have implicit exception handling like "),e("code",[t._v("def")]),t._v(", "),e("code",[t._v("class")]),t._v(", and "),e("code",[t._v("module")]),t._v(". These blocks allow you to skip the "),e("code",[t._v("begin")]),t._v(" statement.")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token method-definition"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CustomError")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ensure")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"handling-an-exception"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#handling-an-exception"}},[t._v("#")]),t._v(" Handling an exception")]),t._v(" "),e("p",[t._v("Use the "),e("code",[t._v("begin/rescue")]),t._v(" block to catch (rescue) an exception and handle it:")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# an execution that may fail")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# something to execute in case of failure")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),e("p",[t._v("A "),e("code",[t._v("rescue")]),t._v(" clause is analogous to a "),e("code",[t._v("catch")]),t._v(" block in a curly brace language like C# or Java.")]),t._v(" "),e("p",[t._v("A bare "),e("code",[t._v("rescue")]),t._v(" like this rescues "),e("code",[t._v("StandardError")]),t._v(".")]),t._v(" "),e("p",[t._v("Note: Take care to avoid catching "),e("code",[t._v("Exception")]),t._v(" instead of the default "),e("code",[t._v("StandardError")]),t._v(". The "),e("code",[t._v("Exception")]),t._v(" class includes "),e("code",[t._v("SystemExit")]),t._v(" and "),e("code",[t._v("NoMemoryError")]),t._v(" and other serious exceptions that you usually don't want to catch. Always consider catching "),e("code",[t._v("StandardError")]),t._v(" (the default) instead.")]),t._v(" "),e("p",[t._v("You can also specify the exception class that should be rescued:")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# an excecution that may fail")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CustomError")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# something to execute in case of CustomError")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or descendant")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),e("p",[t._v("This rescue clause will not catch any exception that is not a "),e("code",[t._v("CustomError")]),t._v(".")]),t._v(" "),e("p",[t._v("You can also store the exception in a specific variable:")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# an excecution that may fail")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CustomError")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" error\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# error contains the exception")]),t._v("\n  puts error"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# provide human-readable details about what went wrong.")]),t._v("\n  puts error"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("backtrace"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inspect "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# return an array of strings that represent the call stack")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),e("p",[t._v("If you failed to handle an exception, you can raise it any time in a rescue block.")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#here goes your code")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" e\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#failed to handle ")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" e\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),e("p",[t._v("If you want to retry your "),e("code",[t._v("begin")]),t._v(" block, call "),e("code",[t._v("retry")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#here goes your code")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("StandardError")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" e\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#for some reason you want to retry you code")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("retry")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),e("p",[t._v("You can be stuck in a loop if you catch an exception in every retry. To avoid this, limit your "),e("code",[t._v("retry_count")]),t._v(" to a certain number of tries.")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[t._v("retry_count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# an excecution that may fail")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" retry_count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n        retry_count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" retry_count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("retry")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#retry limit exceeds, do something else")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),e("p",[t._v("You can also provide an "),e("code",[t._v("else")]),t._v(" block or an "),e("code",[t._v("ensure")]),t._v(" block. An "),e("code",[t._v("else")]),t._v(" block will be executed when the "),e("code",[t._v("begin")]),t._v(" block completes without an exception thrown. An "),e("code",[t._v("ensure")]),t._v(" block will always be executed. An "),e("code",[t._v("ensure")]),t._v(" block is analogous to a "),e("code",[t._v("finally")]),t._v(" block in a curly brace language like C# or Java.")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# an execution that may fail")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# something to execute in case of failure")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# something to execute in case of success")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ensure")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# something to always execute")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),e("p",[t._v("If you are inside a "),e("code",[t._v("def")]),t._v(", "),e("code",[t._v("module")]),t._v(" or "),e("code",[t._v("class")]),t._v(" block, there is no need to use the begin statement.")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token method-definition"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"raising-an-exception"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#raising-an-exception"}},[t._v("#")]),t._v(" Raising an exception")]),t._v(" "),e("p",[t._v("To raise an exception use "),e("code",[t._v("Kernel#raise")]),t._v(" passing the exception class and/or message:")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("StandardError")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# raises a StandardError.new")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("StandardError")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"An error"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# raises a StandardError.new("An error")')]),t._v("\n\n")])])]),e("p",[t._v("You can also simply pass an error message. In this case, the message is wrapped into a "),e("code",[t._v("RuntimeError")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"An error"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# raises a RuntimeError.new("An error")')]),t._v("\n\n")])])]),e("p",[t._v("Here's an example:")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token method-definition"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subject"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ArgumentError")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"`subject` is missing"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" subject"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("empty"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n  puts "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello '),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("subject"),e("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\nhello "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => ArgumentError: `subject` is missing")]),t._v("\nhello"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Simone"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# => "Hello Simone"')]),t._v("\n\n")])])]),e("h2",{attrs:{id:"adding-information-to-custom-exceptions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#adding-information-to-custom-exceptions"}},[t._v("#")]),t._v(" Adding information to (custom) exceptions")]),t._v(" "),e("p",[t._v("It may be helpful to include additional information with an exception, e.g. for logging purposes or to allow conditional handling when the exception is caught:")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomError")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("StandardError")]),t._v("\n  attr_reader "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":safe_to_retry")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token method-definition"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("initialize")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("safe_to_retry "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" message "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Something went wrong'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@safe_to_retry")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" safe_to_retry\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),e("p",[t._v("Raising the exception:")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CustomError")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),e("p",[t._v("Catching the exception and accessing the additional information provided:")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# do stuff")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rescue")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CustomError")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" e\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("retry")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("safe_to_retry\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),e("h4",{attrs:{id:"remarks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),e("p",[t._v("An "),e("strong",[t._v("exception")]),t._v(" is an object that represents the occurrence of an exceptional condition. In other words, it indicates that something went wrong.")]),t._v(" "),e("p",[t._v("In Ruby, "),e("strong",[t._v("exceptions")]),t._v(" are often referred to as "),e("strong",[t._v("errors")]),t._v(". That's because the base "),e("code",[t._v("Exception")]),t._v(" class exists as a top-level exception object element, but user-defined execution exceptions are generally "),e("code",[t._v("StandardError")]),t._v(" or descendants.")])])}),[],!1,null,null,null);s.default=n.exports}}]);