(window.webpackJsonp=window.webpackJsonp||[]).push([[2602],{3010:function(t,a,s){"use strict";s.r(a);var e=s(31),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"loops"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loops"}},[t._v("#")]),t._v(" Loops")]),t._v(" "),s("p",[t._v('A loop is a sequence of instruction(s) that is continually repeated until a certain condition is reached. Being able to have your program repeatedly execute a block of code is one of the most basic but useful tasks in programming. A loop lets you write a very simple statement to produce a significantly greater result simply by repetition. If the condition has been reached, the next instruction "falls through" to the next sequential instruction or branches outside the loop.')]),t._v(" "),s("h2",{attrs:{id:"foreach"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#foreach"}},[t._v("#")]),t._v(" Foreach")]),t._v(" "),s("p",[s("code",[t._v("ForEach")]),t._v(" has two different meanings in PowerShell. One is a "),s("a",{attrs:{href:"https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.core/about/about_language_keywords",target:"_blank",rel:"noopener noreferrer"}},[t._v("keyword"),s("OutboundLink")],1),t._v(" and the other is an alias for the "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/powershell/1067/loops/3665/foreach-object#t=201609240419334042438",target:"_blank",rel:"noopener noreferrer"}},[t._v("ForEach-Object"),s("OutboundLink")],1),t._v(" cmdlet. The former is described here.")]),t._v(" "),s("p",[t._v("This example demonstrates printing all items in an array to the console host:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$Names")]),t._v(" = @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Amy'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Bob'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Celine'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'David'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ForEach")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$Name")]),t._v(" in "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$Names")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Write-Host")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hi, my name is '),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$Name")]),t._v('!"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("This example demonstrates capturing the output of a ForEach loop:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$Numbers")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ForEach")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$Number")]),t._v(" in 1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("20"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$Number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Alternatively, Write-Output $Number")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("Like the last example, this example, instead, demonstrates creating an array prior to storing the loop:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$Numbers")]),t._v(" = @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ForEach")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$Number")]),t._v(" in 1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("20"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$Numbers")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$Number")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"for"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for"}},[t._v("#")]),t._v(" For")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" = 0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-le")]),t._v(" 5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v("+"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v('"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("A typical use of the for loop is to operate on a subset of the values in an array.\nIn most cases, if you want to iterate all values in an array, consider using a foreach statement.")]),t._v(" "),s("h2",{attrs:{id:"foreach-method"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#foreach-method"}},[t._v("#")]),t._v(" ForEach() Method")]),t._v(" "),s("p",[t._v("Instead of the "),s("code",[t._v("ForEach-Object")]),t._v(" cmdlet, the here is also the possibility to use a "),s("code",[t._v("ForEach")]),t._v(" method directly on object arrays like so")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("10"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ForEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$_")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$_")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("or - if desired - the parentheses around the script block can be omitted")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("10"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ForEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$_")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$_")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n\n")])])]),s("p",[t._v("Both will result in the output below")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[t._v("1\n4\n9\n16\n25\n36\n49\n64\n81\n100  \n\n")])])]),s("h2",{attrs:{id:"foreach-object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#foreach-object"}},[t._v("#")]),t._v(" ForEach-Object")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("ForEach-Object")]),t._v(" cmdlet works similarly to the "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/powershell/1067/loops/3429/foreach#t=201609240419334042438",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("foreach")]),s("OutboundLink")],1),t._v(" statement, but takes its input from the pipeline.")]),t._v(" "),s("h3",{attrs:{id:"basic-usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#basic-usage"}},[t._v("#")]),t._v(" Basic usage")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ForEach-Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    code_block\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("Example:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$names")]),t._v(" = @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Any"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bob"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Celine"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"David"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$names")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ForEach-Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hi, my name is '),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$_")]),t._v('!"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[s("code",[t._v("Foreach-Object")]),t._v(" has two default aliases, "),s("code",[t._v("foreach")]),t._v(" and "),s("code",[t._v("%")]),t._v(" (shorthand syntax). Most common is "),s("code",[t._v("%")]),t._v(" because "),s("code",[t._v("foreach")]),t._v(" can be confused with the "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/powershell/1067/loops/3429/foreach",target:"_blank",rel:"noopener noreferrer"}},[t._v("foreach statement"),s("OutboundLink")],1),t._v(". Examples:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$names")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hi, my name is '),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$_")]),t._v('!"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$names")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("foreach")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hi, my name is '),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$_")]),t._v('!"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\n")])])]),s("h3",{attrs:{id:"advanced-usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#advanced-usage"}},[t._v("#")]),t._v(" Advanced usage")]),t._v(" "),s("p",[s("code",[t._v("Foreach-Object")]),t._v(" stands out from the alternative "),s("code",[t._v("foreach")]),t._v(" solutions because it's a cmdlet which means it's designed to use the pipeline. Because of this, it has support for three scriptblocks just like a cmdlet or advanced function:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Begin")]),t._v(": Executed once before looping through the items that arrive from the pipeline. Usually used to create functions for use in the loop, creating variables, opening connections (database, web +) etc.")]),t._v(" "),s("li",[s("strong",[t._v("Process")]),t._v(': Executed once per item arrived from the pipeline. "Normal" foreach codeblock. This is the default used in the examples above when the parameter isn\'t specified.')]),t._v(" "),s("li",[s("strong",[t._v("End")]),t._v(": Executed once after processing all items. Usually used to close connections, generate a report etc.")])]),t._v(" "),s("p",[t._v("Example:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Any"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bob"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Celine"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"David"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ForEach-Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Begin")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$results")]),t._v(" = @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Process")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Create and store message")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$results")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hi, my name is '),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$_")]),t._v('!"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Count messages and output")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Write-Host")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Total messages: '),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$results")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v('"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$results")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"continue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#continue"}},[t._v("#")]),t._v(" Continue")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Continue")]),t._v(" operator works in "),s("code",[t._v("For")]),t._v(", "),s("code",[t._v("ForEach")]),t._v(", "),s("code",[t._v("While")]),t._v(" and "),s("code",[t._v("Do")]),t._v(" loops. It skips the current iteration of the loop, jumping to the top of the innermost loop.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" =0\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-lt")]),t._v(" 20"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v("+"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-eq")]),t._v(" 7"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Write-Host")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$I")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("The above will output 1 to 20 to the console but miss out the number 7.")]),t._v(" "),s("p",[s("strong",[t._v("Note")]),t._v(": When using a pipeline loop you should use "),s("code",[t._v("return")]),t._v(" instead of "),s("code",[t._v("Continue")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"break"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#break"}},[t._v("#")]),t._v(" Break")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("break")]),t._v(" operator will exit a program loop immediately. It can be used in "),s("code",[t._v("For")]),t._v(", "),s("code",[t._v("ForEach")]),t._v(", "),s("code",[t._v("While")]),t._v(" and "),s("code",[t._v("Do")]),t._v(" loops or in a "),s("code",[t._v("Switch")]),t._v(" Statement.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" = 0\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-lt")]),t._v(" 15"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v("+"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-eq")]),t._v(" 7"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Write-Host")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("The above will count to 15 but stop as soon as 7 is reached.")]),t._v(" "),s("p",[s("strong",[t._v("Note")]),t._v(": When using a pipeline loop, "),s("code",[t._v("break")]),t._v(" will behave as "),s("code",[t._v("continue")]),t._v(". To simulate "),s("code",[t._v("break")]),t._v(" in the pipeline loop you need to incorporate some additional logic, cmdlet, etc. It is easier to stick with non-pipeline loops if you need to use "),s("code",[t._v("break")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("Break Labels")])]),t._v(" "),s("p",[t._v("Break can also call a label that was placed in front of the instantiation of a loop:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" = 0\n:mainLoop "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("While")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-lt")]),t._v(" 15"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Write-Host")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ForegroundColor "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Cyan'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$j")]),t._v(" = 0\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("While")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$j")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-lt")]),t._v(" 15"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Write-Host")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$j")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ForegroundColor "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Magenta'")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$k")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$j")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Write-Host")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$k")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ForegroundColor "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Green'")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$k")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-gt")]),t._v(" 100"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" mainLoop\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$j")]),t._v("+"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v("+"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[s("strong",[t._v("Note:")]),t._v(" This code will increment "),s("code",[t._v("$i")]),t._v(" to "),s("code",[t._v("8")]),t._v(" and "),s("code",[t._v("$j")]),t._v(" to "),s("code",[t._v("13")]),t._v(" which will cause "),s("code",[t._v("$k")]),t._v(" to equal "),s("code",[t._v("104")]),t._v(". Since "),s("code",[t._v("$k")]),t._v(" exceed "),s("code",[t._v("100")]),t._v(", the code will then break out of both loops.")]),t._v(" "),s("h2",{attrs:{id:"while"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#while"}},[t._v("#")]),t._v(" While")]),t._v(" "),s("p",[t._v("A while loop will evaluate a condition and if true will perform an action. As long as the condition evaluates to true the action will continue to be performed.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  code_block\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("The following example creates a loop that will count down from 10 to 0")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" = 10\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-ge")]),t._v(" 0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v("-"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("Unlike the "),s("a",{attrs:{href:"//stackoverflow.com/documentation/powershell/1067/loops/3884/do#t=201703011018154712687"}},[s("code",[t._v("Do")])]),t._v("-While loop the condition is evaluated prior to the action's first execution. The action will not be performed if the initial condition evaluates to false.")]),t._v(" "),s("p",[t._v("Note: When evaluating the condition, PowerShell will treat the existence of a return object as true. This can be used in several ways but below is an example to monitor for a process. This example will spawn a notepad process and then sleep the current shell as long as that process is running. When you manually close the notepad instance the while condition will fail and the loop will break.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Start-Process")]),t._v(" notepad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exe\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get-Process")]),t._v(" notepad "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ErrorAction SilentlyContinue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Start-Sleep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Milliseconds 500\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"do"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#do"}},[t._v("#")]),t._v(" Do")]),t._v(" "),s("p",[t._v("Do-loops are useful when you always want to run a codeblock at least once. A Do-loop will evaluate the condition after executing the codeblock, unlike a while-loop which does it before executing the codeblock.")]),t._v(" "),s("p",[t._v("You can use do-loops in two ways:")]),t._v(" "),s("li",[t._v("\nLoop **while** the condition is true:\n"),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Do")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    code_block\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])])]),t._v(" "),s("li",[t._v("\nLoop **until** the condition is true, in other words, loop while the condition is false:\n"),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Do")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    code_block\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("until")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])])]),t._v(" "),s("p",[t._v("Real Examples:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" = 0\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Do")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v("+"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Number '),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v('"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-ne")]),t._v(" 3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Do")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v("+"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Number '),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v('"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("until")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-eq")]),t._v(" 3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("Do-While and Do-Until are antonymous loops. If the code inside the same, the condition will be reversed. The example above illustrates this behaviour.")]),t._v(" "),s("h4",{attrs:{id:"syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),s("li",[t._v("\nfor ( "),s("Initialization",[t._v("; "),s("Condition",[t._v("; "),s("Repetition",[t._v(" ) { "),s("Script_Block",[t._v(" }\n")])],1)],1)],1)],1),t._v(" "),s("li",[s("Collection",[t._v(" | Foreach-Object { "),s("Script_Block_with_",{attrs:{$__as_current_item:""}},[t._v(" }\n")])],1)],1),t._v(" "),s("li",[t._v("\nforeach ( "),s("Item",[t._v(" in "),s("Collection",[t._v(" ) { "),s("Script_Block",[t._v(" }\n")])],1)],1)],1),t._v(" "),s("li",[t._v("\nwhile ( "),s("Condition",[t._v(" ){ "),s("Script_Block",[t._v(" }\n")])],1)],1),t._v(" "),s("li",[t._v("\ndo { "),s("Script_Block",[t._v(" } while ( "),s("Condition",[t._v(" )\n")])],1)],1),t._v(" "),s("li",[t._v("\ndo { "),s("Script_Block",[t._v(" } until ( "),s("Condition",[t._v(" )\n")])],1)],1),t._v(" "),s("li",[s("Collection",[t._v(".foreach( { "),s("Script_Block_with_",{attrs:{$__as_current_item:""}},[t._v(" } )\n")])],1)],1),t._v(" "),s("h4",{attrs:{id:"remarks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),s("h3",{attrs:{id:"foreach-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#foreach-2"}},[t._v("#")]),t._v(" Foreach")]),t._v(" "),s("p",[t._v("There are multiple ways to run a foreach-loop in PowerShell and they all bring their own advantages and disadvantages:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Solution")]),t._v(" "),s("th",[t._v("Advantages")]),t._v(" "),s("th",[t._v("Disadvantages")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Foreach statement")]),t._v(" "),s("td",[t._v("Fastest. Works best with static collections (stored in a variable).")]),t._v(" "),s("td",[t._v("No pipeline input or output")])]),t._v(" "),s("tr",[s("td",[t._v("ForEach() Method")]),t._v(" "),s("td",[t._v("Same scriptblock syntax as "),s("code",[t._v("Foreach-Object")]),t._v(", but faster. Works best with static collections (stored in a variable). Supports pipeline output.")]),t._v(" "),s("td",[t._v("No support for pipeline input. Requires PowerShell 4.0 or greater")])]),t._v(" "),s("tr",[s("td",[t._v("Foreach-Object (cmdlet)")]),t._v(" "),s("td",[t._v("Supports pipeline input and output. Supports begin and end-scriptblocks for initialization and closing of connections etc. Most flexible solution.")]),t._v(" "),s("td",[t._v("Slowest")])])])]),t._v(" "),s("h3",{attrs:{id:"performance"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#performance"}},[t._v("#")]),t._v(" Performance")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$foreach")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Measure-Command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("foreach")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" in "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1000000"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$foreachmethod")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Measure-Command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1000000"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ForEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$_")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$_")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$foreachobject")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Measure-Command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1000000"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ForEach-Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$_")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$_")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Foreach: '),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$foreach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TotalSeconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v('"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Foreach method: '),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$foreachmethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TotalSeconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v('"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ForEach-Object: '),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$foreachobject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TotalSeconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v('"')]),t._v("\n\nExample output:\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Foreach")]),t._v(": 1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("9039875\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Foreach")]),t._v(" method: 4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("7559563\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ForEach-Object")]),t._v(": 10"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("7543821\n\n")])])]),s("p",[t._v("While "),s("code",[t._v("Foreach-Object")]),t._v(" is the slowest, it's pipeline-support might be useful as it lets you process items as they arrive (while reading a file, receiving data etc.). This can be very useful when working with big data and low memory as you don't need to load all the data to memory before processing.")])])}),[],!1,null,null,null);a.default=n.exports}}]);