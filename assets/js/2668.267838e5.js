(window.webpackJsonp=window.webpackJsonp||[]).push([[2668],{3076:function(t,e,n){"use strict";n.r(e);var a=n(31),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"comments-and-documentation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#comments-and-documentation"}},[t._v("#")]),t._v(" Comments and Documentation")]),t._v(" "),n("h2",{attrs:{id:"programmatically-accessing-docstrings"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#programmatically-accessing-docstrings"}},[t._v("#")]),t._v(" Programmatically accessing docstrings")]),t._v(" "),n("p",[t._v("Docstrings are - unlike regular comments - stored as an attribute of the function they document, meaning that you can access them programmatically.")]),t._v(" "),n("h3",{attrs:{id:"an-example-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#an-example-function"}},[t._v("#")]),t._v(" An example function")]),t._v(" "),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""This is a function that does nothing at all"""')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n\n")])])]),n("p",[t._v("The docstring can be accessed using the "),n("code",[t._v("__doc__")]),t._v(" attribute:")]),t._v(" "),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__doc__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),n("blockquote"),t._v(" "),n("p",[t._v("This is a function that does nothing at all")]),t._v(" "),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("help")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),n("blockquote"),t._v(" "),n("p",[t._v("Help on function "),n("code",[t._v("func")]),t._v(" in module "),n("code",[t._v("__main__")]),t._v(":\n"),n("code",[t._v("func()")]),t._v("\n     This is a function that does nothing at all")]),t._v(" "),n("h3",{attrs:{id:"another-example-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#another-example-function"}},[t._v("#")]),t._v(" Another example function")]),t._v(" "),n("p",[n("code",[t._v("function.__doc__")]),t._v(" is just the actual docstring as a string, while the "),n("code",[t._v("help")]),t._v(" function provides general information about a function, including the docstring. Here's a more helpful example:")]),t._v(" "),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("greet")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" greeting"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""Print a greeting to the user `name`\n\n    Optional parameter `greeting` can change what they\'re greeted with."""')]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{} {}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("help")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greet"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),n("blockquote"),t._v(" "),n("p",[t._v("Help on function "),n("code",[t._v("greet")]),t._v(" in module "),n("code",[t._v("__main__")]),t._v(":\n"),n("code",[t._v("greet(name, greeting='Hello')")])]),n("p",[t._v("    Print a greeting to the user "),n("code",[t._v("name")]),n("br"),t._v("\n    Optional parameter "),n("code",[t._v("greeting")]),t._v(" can change what they're greeted with.")]),n("p"),t._v(" "),n("h3",{attrs:{id:"advantages-of-docstrings-over-regular-comments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#advantages-of-docstrings-over-regular-comments"}},[t._v("#")]),t._v(" Advantages of docstrings over regular comments")]),t._v(" "),n("p",[t._v("Just putting no docstring or a regular comment in a function makes it a lot less helpful.")]),t._v(" "),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("greet")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" greeting"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Print a greeting to the user `name`")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optional parameter `greeting` can change what they're greeted with.")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{} {}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greet"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__doc__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),n("blockquote"),t._v(" "),n("p",[t._v("None")]),t._v(" "),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("help")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greet"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),n("blockquote"),t._v(" "),n("p",[t._v("Help on function greet in module "),n("strong",[t._v("main")]),t._v(":\n"),n("code",[t._v("greet(name, greeting='Hello')")])]),t._v(" "),n("h2",{attrs:{id:"single-line-inline-and-multiline-comments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#single-line-inline-and-multiline-comments"}},[t._v("#")]),t._v(" Single line, inline and multiline comments")]),t._v(" "),n("p",[t._v("Comments are used to explain code when the basic code itself isn't clear.")]),t._v(" "),n("p",[t._v("Python ignores comments, and so will not execute code in there, or raise syntax errors for plain english sentences.")]),t._v(" "),n("p",[t._v("Single-line comments begin with the hash character ("),n("code",[t._v("#")]),t._v(") and are terminated by\nthe end of line.")]),t._v(" "),n("ul",[n("li",[t._v("Single line comment:")])]),t._v(" "),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This is a single line comment in Python")]),t._v("\n\n")])])]),n("ul",[n("li",[t._v("Inline comment:")])]),t._v(" "),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# This line prints "Hello World"')]),t._v("\n\n")])])]),n("ul",[n("li",[t._v("Comments spanning multiple lines have "),n("code",[t._v('"""')]),t._v(" or "),n("code",[t._v("'''")]),t._v(" on either end. This is the same as a multiline string, but they can be used as comments:")])]),t._v(" "),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\nThis type of comment spans multiple lines.\nThese are mostly used for documentation of functions, classes and modules.\n"""')]),t._v("\n\n")])])]),n("h2",{attrs:{id:"write-documentation-using-docstrings"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#write-documentation-using-docstrings"}},[t._v("#")]),t._v(" Write documentation using docstrings")]),t._v(" "),n("p",[t._v("A "),n("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0257/",target:"_blank",rel:"noopener noreferrer"}},[t._v("docstring"),n("OutboundLink")],1),t._v(" is a "),n("a",{attrs:{href:"https://stackoverflow.com/documentation/python/4144/comments-and-documentation/14491/single-line-inline-and-multiline-comments#t=201704151842281210539",target:"_blank",rel:"noopener noreferrer"}},[t._v("multi-line comment"),n("OutboundLink")],1),t._v(" used to document modules, classes, functions and methods. It has to be the first statement of the component it describes.")]),t._v(" "),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""Greet someone.\n\n    Print a greeting ("Hello") for the person with the given name.\n    """')]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Greeter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""An object used to greet people.\n\n    It contains multiple greeting functions for several languages\n    and times of the  day.\n    """')]),t._v("\n\n")])])]),n("p",[t._v("The value of the docstring can be "),n("a",{attrs:{href:"https://stackoverflow.com/documentation/python/4144/comments-and-documentation/19891/programmatically-accessing-docstrings",target:"_blank",rel:"noopener noreferrer"}},[t._v("accessed within the program"),n("OutboundLink")],1),t._v(" and is - for example - used by the "),n("code",[t._v("help")]),t._v(" command.")]),t._v(" "),n("h3",{attrs:{id:"syntax-conventions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#syntax-conventions"}},[t._v("#")]),t._v(" Syntax conventions")]),t._v(" "),n("h3",{attrs:{id:"pep-257"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pep-257"}},[t._v("#")]),t._v(" PEP 257")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0257/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PEP 257"),n("OutboundLink")],1),t._v(" defines a syntax standard for docstring comments. It basically allows two types:")]),t._v(" "),n("ul",[n("li",[t._v("One-line Docstrings:")])]),t._v(" "),n("p",[t._v("According to PEP 257, they should be used with short and simple functions. Everything is placed in one line, e.g:")]),t._v(" "),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""Say hello to your friends."""')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello my friends!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),n("p",[t._v("The docstring shall end with a period, the verb should be in the imperative form.")]),t._v(" "),n("ul",[n("li",[t._v("Multi-line Docstrings:")])]),t._v(" "),n("p",[t._v("Multi-line docstring should be used for longer, more complex functions, modules or classes.")]),t._v(" "),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" language"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"en"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""Say hello to a person.\n\n    Arguments:\n    name: the name of the person\n    language: the language in which the person should be greeted\n    """')]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("language"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),n("p",[t._v("They start with a short summary (equivalent to the content of a one-line docstring) which can be on the same line as the quotation marks or on the next line, give additional detail and list parameters and return values.")]),t._v(" "),n("p",[t._v("Note PEP 257 defines "),n("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0257/#multi-line-docstrings",target:"_blank",rel:"noopener noreferrer"}},[t._v("what information should be given"),n("OutboundLink")],1),t._v(" within a docstring, it doesn't define in which format it should be given. This was the reason for other parties and documentation parsing tools to specify their own standards for documentation, some of which are listed below and in "),n("a",{attrs:{href:"https://stackoverflow.com/questions/5334531/using-javadoc-for-python-documentation",target:"_blank",rel:"noopener noreferrer"}},[t._v("this question"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("h3",{attrs:{id:"sphinx"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sphinx"}},[t._v("#")]),t._v(" Sphinx")]),t._v(" "),n("p",[n("a",{attrs:{href:"http://www.sphinx-doc.org/en/stable/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sphinx"),n("OutboundLink")],1),t._v(" is a tool to generate HTML based documentation for Python projects based on docstrings. Its markup language used is "),n("a",{attrs:{href:"http://docutils.sourceforge.net/rst.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("reStructuredText"),n("OutboundLink")],1),t._v(". They define their own standards for documentation, pythonhosted.org hosts a "),n("a",{attrs:{href:"https://pythonhosted.org/an_example_pypi_project/sphinx.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("very good description of them"),n("OutboundLink")],1),t._v(". The Sphinx format is for example used by the "),n("a",{attrs:{href:"https://www.jetbrains.com/pycharm/",target:"_blank",rel:"noopener noreferrer"}},[t._v("pyCharm IDE"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("p",[t._v("A function would be documented like this using the Sphinx/reStructuredText format:")]),t._v(" "),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" language"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"en"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""Say hello to a person.\n\n    :param name: the name of the person\n    :type name: str\n    :param language: the language in which the person should be greeted\n    :type language: str\n    :return: a number\n    :rtype: int\n    """')]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("language"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n\n")])])]),n("h3",{attrs:{id:"google-python-style-guide"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#google-python-style-guide"}},[t._v("#")]),t._v(" Google Python Style Guide")]),t._v(" "),n("p",[t._v("Google has published "),n("a",{attrs:{href:"https://google.github.io/styleguide/pyguide.html?showone=Comments#Comments",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Python Style Guide"),n("OutboundLink")],1),t._v(" which defines coding conventions for Python, including documentation comments. In comparison to the Sphinx/reST many people say that documentation according to Google's guidelines is better human-readable.")]),t._v(" "),n("p",[t._v("The "),n("a",{attrs:{href:"https://pythonhosted.org/an_example_pypi_project/sphinx.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("pythonhosted.org page mentioned above"),n("OutboundLink")],1),t._v(" also provides some examples for good documentation according to the Google Style Guide.")]),t._v(" "),n("p",[t._v("Using the "),n("a",{attrs:{href:"https://sphinxcontrib-napoleon.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Napoleon"),n("OutboundLink")],1),t._v(" plugin, Sphinx can also parse documentation in the Google Style Guide-compliant format.")]),t._v(" "),n("p",[t._v("A function would be documented like this using the Google Style Guide format:")]),t._v(" "),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" language"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"en"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""Say hello to a person.\n\n    Args:\n        name: the name of the person as string\n        language: the language code string\n\n    Returns:\n        A number.\n    """')]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("language"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n\n")])])]),n("h4",{attrs:{id:"syntax"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),n("ul",[n("li",[n("h1",{attrs:{id:"this-is-a-single-line-comment"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#this-is-a-single-line-comment"}},[t._v("#")]),t._v(" This is a single line comment")])]),t._v(" "),n("li",[t._v('print("")  # This is an inline comment\n')]),n("li",[t._v('"""'),n("br"),t._v("\nThis is "),n("br"),t._v("\na multi-line comment"),n("br"),t._v('\n"""')])]),t._v(" "),n("h4",{attrs:{id:"remarks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),n("p",[t._v("Developers should follow the "),n("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0257/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PEP257 - Docstring Conventions"),n("OutboundLink")],1),t._v(" guidelines. In some cases, style guides (such as "),n("a",{attrs:{href:"https://google.github.io/styleguide/pyguide.html?showone=Comments#Comments",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Style Guide ones"),n("OutboundLink")],1),t._v(") or documentation rendering third-parties (such as "),n("a",{attrs:{href:"http://www.sphinx-doc.org/en/stable/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sphinx"),n("OutboundLink")],1),t._v(") may detail additional conventions for docstrings.")])])}),[],!1,null,null,null);e.default=s.exports}}]);