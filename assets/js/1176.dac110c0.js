(window.webpackJsonp=window.webpackJsonp||[]).push([[1176],{1584:function(e,a,t){"use strict";t.r(a);var n=t(31),r=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"containers-data-map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#containers-data-map"}},[e._v("#")]),e._v(" Containers - Data.Map")]),e._v(" "),t("h2",{attrs:{id:"monoid-instance"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#monoid-instance"}},[e._v("#")]),e._v(" Monoid instance")]),e._v(" "),t("p",[t("code",[e._v("Map k v")]),e._v(" provides a "),t("a",{attrs:{href:"https://stackoverflow.com/documentation/haskell/1879/type-classes/7940/monoid#t=201608211304123263501",target:"_blank",rel:"noopener noreferrer"}},[e._v("Monoid"),t("OutboundLink")],1),e._v(" instance with the following semantics:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("mempty")]),e._v(" is the empty "),t("code",[e._v("Map")]),e._v(", i.e. the same as "),t("a",{attrs:{href:"https://hackage.haskell.org/package/containers-0.5.7.1/docs/Data-Map-Lazy.html#v:empty",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("Map.empty")]),t("OutboundLink")],1)]),e._v(" "),t("li",[t("code",[e._v("m1 <> m2")]),e._v(" is the left-biased union of "),t("code",[e._v("m1")]),e._v(" and "),t("code",[e._v("m2")]),e._v(", i.e. if any key is present both in "),t("code",[e._v("m1")]),e._v(" and "),t("code",[e._v("m2")]),e._v(", then the value from "),t("code",[e._v("m1")]),e._v(" is picked for "),t("code",[e._v("m1 <> m2")]),e._v(". This operation is also available outside the "),t("code",[e._v("Monoid")]),e._v(" instance as "),t("a",{attrs:{href:"https://hackage.haskell.org/package/containers-0.5.7.1/docs/Data-Map-Lazy.html#v:union",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("Map.union")]),t("OutboundLink")],1),e._v(".")])]),e._v(" "),t("h2",{attrs:{id:"constructing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructing"}},[e._v("#")]),e._v(" Constructing")]),e._v(" "),t("p",[e._v("We can create a Map from a list of tuples like this:")]),e._v(" "),t("p",[e._v("A Map can also be constructed with a single value:")]),e._v(" "),t("p",[e._v("There is also the "),t("code",[e._v("empty")]),e._v(" function.")]),e._v(" "),t("p",[e._v("Data.Map also supports typical set operations such as "),t("a",{attrs:{href:"https://hackage.haskell.org/package/containers-0.5.7.1/docs/Data-Map-Lazy.html#v:union",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("union")]),t("OutboundLink")],1),e._v(", "),t("a",{attrs:{href:"https://hackage.haskell.org/package/containers-0.5.7.1/docs/Data-Map-Lazy.html#v:difference",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("difference")]),t("OutboundLink")],1),e._v(" and "),t("a",{attrs:{href:"https://hackage.haskell.org/package/containers-0.5.7.1/docs/Data-Map-Lazy.html#v:intersection",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("intersection")]),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"checking-if-empty"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#checking-if-empty"}},[e._v("#")]),e._v(" Checking If Empty")]),e._v(" "),t("p",[e._v("We use the "),t("code",[e._v("null")]),e._v(" function to check if a given Map is empty:")]),e._v(" "),t("h2",{attrs:{id:"finding-values"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#finding-values"}},[e._v("#")]),e._v(" Finding Values")]),e._v(" "),t("p",[e._v("There are "),t("a",{attrs:{href:"https://hackage.haskell.org/package/containers-0.5.7.1/docs/Data-Map-Lazy.html#g:4",target:"_blank",rel:"noopener noreferrer"}},[e._v("many"),t("OutboundLink")],1),e._v(" querying operations on maps.")]),e._v(" "),t("p",[t("code",[e._v("member :: Ord k => k -> Map k a -> Bool")]),e._v(" yields "),t("code",[e._v("True")]),e._v(" if the key of type "),t("code",[e._v("k")]),e._v(" is in "),t("code",[e._v("Map k a")]),e._v(":")]),e._v(" "),t("p",[t("code",[e._v("notMember")]),e._v(" is similar:")]),e._v(" "),t("p",[e._v("You can also use "),t("a",{attrs:{href:"https://hackage.haskell.org/package/containers-0.5.7.1/docs/Data-Map-Lazy.html#v:findWithDefault",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("findWithDefault :: Ord k => a -> k -> Map k a -> a")]),t("OutboundLink")],1),e._v(" to yield a default value if the key isn't present:")]),e._v(" "),t("h2",{attrs:{id:"inserting-elements"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inserting-elements"}},[e._v("#")]),e._v(" Inserting Elements")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://hackage.haskell.org/package/containers-0.5.7.1/docs/Data-Map-Lazy.html#g:6",target:"_blank",rel:"noopener noreferrer"}},[e._v("Inserting"),t("OutboundLink")],1),e._v(" elements is simple:")]),e._v(" "),t("h2",{attrs:{id:"deleting-elements"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#deleting-elements"}},[e._v("#")]),e._v(" Deleting Elements")]),e._v(" "),t("h2",{attrs:{id:"importing-the-module"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#importing-the-module"}},[e._v("#")]),e._v(" Importing the Module")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("Data.Map")]),e._v(" module in the "),t("a",{attrs:{href:"https://hackage.haskell.org/package/containers",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("containers")]),e._v(" package"),t("OutboundLink")],1),e._v(" provides a "),t("code",[e._v("Map")]),e._v(" structure that has both strict and lazy implementations.")]),e._v(" "),t("p",[e._v("When using "),t("code",[e._v("Data.Map")]),e._v(", one usually imports it qualified to avoid clashes with functions already defined in Prelude:")]),e._v(" "),t("div",{staticClass:"language-hs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-hs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[e._v("Map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("empty")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("-- give me an empty Map")]),e._v("\n\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);