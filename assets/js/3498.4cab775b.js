(window.webpackJsonp=window.webpackJsonp||[]).push([[3498],{3906:function(t,s,e){"use strict";e.r(s);var a=e(31),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"visual-basic-14-0-features"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#visual-basic-14-0-features"}},[t._v("#")]),t._v(" Visual Basic 14.0 Features")]),t._v(" "),e("p",[t._v("Visual Basic 14 is the version of Visual Basic that was shipped as part of Visual Studio 2015.")]),t._v(" "),e("p",[t._v("This version was rewritten from scratch in about 1.3 million lines of VB. Many features were added to remove common irritations and to make common coding patterns cleaner.")]),t._v(" "),e("p",[t._v("The version number of Visual Basic went straight from 12 to 14, skipping 13. This was done to keep VB in line with the version numbering of Visual Studio itself.")]),t._v(" "),e("h2",{attrs:{id:"null-conditional-operator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#null-conditional-operator"}},[t._v("#")]),t._v(" Null conditional operator")]),t._v(" "),e("p",[t._v("To avoid verbose null checking, the "),e("strong",[e("code",[t._v("?.")])]),t._v(" operator has been introduced in the language.")]),t._v(" "),e("p",[t._v("The old verbose syntax:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" myObject "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("IsNot")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("Nothing")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AndAlso")]),t._v(" myObject"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n\n")])])]),e("p",[t._v("Can be now replaced by the concise:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" myObject"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n\n")])])]),e("p",[t._v("The "),e("code",[t._v("?")]),t._v(" operator is particularly powerful when you have a chain of properties. Consider the following:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" fooInstance "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" Foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("Nothing")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" s "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v("\n\n")])])]),e("p",[t._v("Normally you would have to write something like this:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" fooInstance "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("IsNot")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("Nothing")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AndAlso")]),t._v(" fooInstance"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BarInstance "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("IsNot")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("Nothing")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n    s "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fooInstance"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BarInstance"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Baz\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Else")]),t._v("\n    s "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("Nothing")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n\n")])])]),e("p",[t._v("But with the "),e("code",[t._v("?")]),t._v(" operator this can be replaced with just:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[t._v("s "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fooInstance"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BarInstance"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Baz\n\n")])])]),e("h2",{attrs:{id:"string-interpolation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string-interpolation"}},[t._v("#")]),t._v(" String interpolation")]),t._v(" "),e("p",[t._v("This new feature makes the string concatenation more readable. This syntax will be compiled to its equivalent "),e("code",[t._v("String.Format")]),t._v(" call.")]),t._v(" "),e("p",[t._v("Without string interpolation:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Format"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, {0}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),e("p",[t._v("With string interpolation:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token string"}},[t._v('$"Hello, {name}"')]),t._v("\n\n")])])]),e("p",[t._v("The two lines are equivalent and both get compiled to a call to "),e("code",[t._v("String.Format")]),t._v(".")]),t._v(" "),e("p",[t._v("As in "),e("code",[t._v("String.Format")]),t._v(", the brackets can contain any single expression (call to a method, property, a null coalescing operator et cetera).")]),t._v(" "),e("p",[t._v("String Interpolation is the preferred method over "),e("code",[t._v("String.Format")]),t._v(" because it prevents some runtime errors from occurring. Consider the following "),e("code",[t._v("String.Format")]),t._v(" line:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Format"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The number of people is {0}/{1}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" numPeople"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),e("p",[t._v("This will compile, but will cause a runtime error as the compiler does not check that the number of arguments match the placeholders.")]),t._v(" "),e("h2",{attrs:{id:"read-only-auto-properties"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#read-only-auto-properties"}},[t._v("#")]),t._v(" Read-Only Auto-Properties")]),t._v(" "),e("p",[t._v("Read-only properties were always possible in VB.NET in this format:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Class")]),t._v(" Foo\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Private")]),t._v(" _MyProperty "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bar"')]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReadOnly")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Property")]),t._v(" MyProperty "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Get")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Return")]),t._v(" _MyProperty\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Get")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Property")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Class")]),t._v("\n\n")])])]),e("p",[t._v("The new version of Visual Basic allows a short hand for the property declaration like so:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Class")]),t._v(" Foo\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReadOnly")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Property")]),t._v(" MyProperty "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bar"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Class")]),t._v("\n\n")])])]),e("p",[t._v("The actual implementation that is generated by the compiler is exactly the same for both examples. The new method to write it is just a short hand. The compiler will still generate a private field with the format: "),e("code",[t._v("_<PropertyName>")]),t._v(" to back the read-only property.")]),t._v(" "),e("h2",{attrs:{id:"nameof-operator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nameof-operator"}},[t._v("#")]),t._v(" NameOf operator")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("NameOf")]),t._v(" operator resolves namespaces, types, variables and member names at compile time and replaces them with the string equivalent.")]),t._v(" "),e("p",[t._v("One of the use cases:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" MySub"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("variable "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" variable "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Is")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("Nothing")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Throw")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("New")]),t._v(" ArgumentNullException"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"variable"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),e("p",[t._v("The old syntax will expose the risk of renaming the variable and leaving the hard-coded string to the wrong value.")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" MySub"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("variable "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" variable "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Is")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("Nothing")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Throw")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("New")]),t._v(" ArgumentNullException"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NameOf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("variable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),e("p",[t._v("With "),e("code",[t._v("NameOf")]),t._v(", renaming the variable only will raise a compiler error. This will also allow the renaming tool to rename both with a single effort.")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("NameOf")]),t._v(" operator only uses the last component of the reference in the brackets. This is important when handling something like namespaces in the "),e("code",[t._v("NameOf")]),t._v(" operator.")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Imports")]),t._v(" System\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Module")]),t._v(" Module1\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" WriteIO"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NameOf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IO"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'displays "IO"')]),t._v("\n        Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NameOf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("System"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IO"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'displays "IO"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Module")]),t._v("\n\n")])])]),e("p",[t._v("The operator also uses the name of the reference that is typed in without resolving any name changing imports. For example:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Imports")]),t._v(" OldList "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" System"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Collections"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ArrayList\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Module")]),t._v(" Module1\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" WriteList"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NameOf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OldList"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'displays "OldList"')]),t._v("\n        Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NameOf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("System"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Collections"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ArrayList"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'displays "ArrayList"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Module")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"multiline-string-literals"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#multiline-string-literals"}},[t._v("#")]),t._v(" Multiline string literals")]),t._v(" "),e("p",[t._v("VB now allows string literals that split over multiple lines.")]),t._v(" "),e("p",[t._v("Old syntax:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" text "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Line1"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" Environment"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("NewLine "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Line2"')]),t._v("\n\n")])])]),e("p",[t._v("New syntax:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" text "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Line 1\nLine 2"')]),t._v("\n\n")])])]),e("h2",{attrs:{id:"partial-modules-and-interfaces"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#partial-modules-and-interfaces"}},[t._v("#")]),t._v(" Partial Modules and Interfaces")]),t._v(" "),e("p",[t._v("Similar to partial classes the new version of Visual Basic is now able to handle partial modules and partial interfaces. The syntax and behaviour is exactly the same as it would be for partial classes.")]),t._v(" "),e("p",[t._v("A partial module example:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Partial")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Module")]),t._v(" Module1\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" Main"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Write"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ping -> "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    TestFunktion"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Module")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Partial")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Module")]),t._v(" Module1\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Private")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" TestFunktion"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Pong"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Module")]),t._v("\n\n")])])]),e("p",[t._v("And a partial interface:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Partial")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Interface")]),t._v(" Interface1\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" Methode1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Interface")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Partial")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Interface")]),t._v(" Interface1\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" Methode2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Interface")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Class")]),t._v(" Class1\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Implements")]),t._v(" Interface1\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" Methode1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Implements")]),t._v(" Interface1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Methode1\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Throw")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("New")]),t._v(" NotImplementedException"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" Methode2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Implements")]),t._v(" Interface1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Methode2\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Throw")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("New")]),t._v(" NotImplementedException"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Class")]),t._v("\n\n")])])]),e("p",[t._v("Just like for partial classes the definitions for the partial modules and interfaces have to be located in the same namespace and the same assembly. This is because the partial parts of the modules and interfaces are merged during the compilation and the compiled assembly does not contain any indication that the original definition of the module or interface was split.")]),t._v(" "),e("h2",{attrs:{id:"comments-after-implicit-line-continuation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#comments-after-implicit-line-continuation"}},[t._v("#")]),t._v(" Comments after implicit line continuation")]),t._v(" "),e("p",[t._v("VB 14.0 introduces the ability to add comments after implicit line continuation.")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" number "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    From c "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Char")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Comment")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("In")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dj58kwd92n4"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Comment")]),t._v("\n    Where "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Char")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IsNumber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Comment")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Select")]),t._v(" c "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Comment")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"region-directive-improvements"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#region-directive-improvements"}},[t._v("#")]),t._v(" #Region directive improvements")]),t._v(" "),e("p",[t._v("#Region directive can now be placed inside methods and can even span over methods, classes and modules.")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token directive comment"}},[t._v('#Region "A Region Spanning A Class and Ending Inside Of A Method In A Module"')]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Class")]),t._v(" FakeClass\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Nothing to see here, just a fake class.")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Class")]),t._v("\n\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Module")]),t._v(" Extensions\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("''' <summary>")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("''' Checks the path of files or directories and returns [TRUE] if it exists.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("''' </summary>")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("''' <param name=\"Path\">[Sting] Path of file or directory to check.</param>")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("''' <returns>[Boolean]</returns>")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Extension"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Function")]),t._v(" PathExists"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ByVal")]),t._v(" Path "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Boolean")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" My"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Computer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FileSystem"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FileExists"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" My"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Computer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FileSystem"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DirectoryExists"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Function")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("''' <summary>")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("''' Returns the version number from the specified assembly using the assembly's strong name.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("''' </summary>")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("''' <param name=\"Assy\">[Assembly] Assembly to get the version info from.</param>")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("''' <returns>[String]</returns>")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Extension"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Friend")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Function")]),t._v(" GetVersionFromAssembly"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ByVal")]),t._v(" Assy "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" Assembly"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token directive comment"}},[t._v("#End Region")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Return")]),t._v(" Split"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Split"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Assy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FullName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"="')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Function")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Module")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"exception-handling"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exception-handling"}},[t._v("#")]),t._v(" Exception handling")]),t._v(" "),e("p",[t._v("During coding, unexpected errors do arise frequently enough, which requires debugging and testing. But sometimes the errors are indeed expected and to bypass it, there is the "),e("code",[t._v("Try..Catch..Throw..Finally..End Try")]),t._v(" block.")]),t._v(" "),e("p",[t._v("To manage an error correctly, the code is put into a "),e("code",[t._v("Try..Catch")]),t._v(" block, whereby the "),e("code",[t._v("Catch")]),t._v(", as the name states, will catch all the exceptions that arise in this block.")]),t._v(" "),e("p",[t._v("And in case of exception, we have the possibility to "),e("code",[t._v("Throw")]),t._v(" the error, that is return it to notify the user or manage it internally in the code itself.")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("Finally")]),t._v(" part is the final code that, whatever the outcome be, if there is an exception or not, the code will run before going out of the block.")]),t._v(" "),e("p",[t._v("In case we need to pop-out of the clock, there is the "),e("code",[t._v("Exit Try")]),t._v(" statement that can be used. But here also, the code in the "),e("code",[t._v("Finally")]),t._v(" section will be executed before ending.")]),t._v(" "),e("p",[t._v("The syntax is simple;")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Try")]),t._v("\n    [ tryStatements ]\n    [ "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Exit")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Try")]),t._v(" ]\n[ "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Catch")]),t._v(" [ exception [ "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" ] ] [ "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("When")]),t._v(" expression ]\n    [ catchStatements ]\n    [ "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Exit")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Try")]),t._v(" ] ]\n[ "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Catch")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" ]\n[ "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Finally")]),t._v("\n    [ finallyStatements ] ]\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Try")]),t._v("\n\n")])])]),e("p",[t._v("where only the "),e("code",[t._v("Try")]),t._v(" and "),e("code",[t._v("End Try")]),t._v(" is compulsory. The rest can be ignored but as a good practice, do include the "),e("code",[t._v("Finally")]),t._v(" part, even if it would be left blank.")]),t._v(" "),e("p",[t._v("Coming to the exception, there are different type of exception that can be caught. They are ready made exceptions available from the .Net Framework, as below;")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Exception Class")]),t._v(" "),e("th",[t._v("Brief Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("System.IO.IOException")]),t._v(" "),e("td",[t._v("Handles I/O errors")])]),t._v(" "),e("tr",[e("td",[t._v("System.IndexOutOfRangeException")]),t._v(" "),e("td",[t._v("Refers to an array index out of range")])]),t._v(" "),e("tr",[e("td",[t._v("System.ArrayTypeMismatchException")]),t._v(" "),e("td",[t._v("When type is mismatched with the array type")])]),t._v(" "),e("tr",[e("td",[t._v("System.NullReferenceException")]),t._v(" "),e("td",[t._v("Handles errors generated from referencing a null object.")])]),t._v(" "),e("tr",[e("td",[t._v("System.DivideByZeroException")]),t._v(" "),e("td",[t._v("Handles errors generated from dividing a dividend with zero.")])]),t._v(" "),e("tr",[e("td",[t._v("System.InvalidCastException")]),t._v(" "),e("td",[t._v("Handles errors generated during typecasting.")])]),t._v(" "),e("tr",[e("td",[t._v("System.OutOfMemoryException")]),t._v(" "),e("td",[t._v("Handles errors generated from insufficient free memory.")])]),t._v(" "),e("tr",[e("td",[t._v("System.StackOverflowException")]),t._v(" "),e("td",[t._v("Handles errors generated from stack overflow.")])]),t._v(" "),e("tr",[e("td",[t._v("---")]),t._v(" "),e("td",[t._v("---")])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);