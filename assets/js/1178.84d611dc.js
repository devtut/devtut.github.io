(window.webpackJsonp=window.webpackJsonp||[]).push([[1178],{1586:function(a,t,s){"use strict";s.r(t);var e=s(31),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"creating-custom-data-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-custom-data-types"}},[a._v("#")]),a._v(" Creating Custom Data Types")]),a._v(" "),s("h2",{attrs:{id:"creating-a-data-type-with-value-constructor-parameters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-data-type-with-value-constructor-parameters"}},[a._v("#")]),a._v(" Creating a data type with value constructor parameters")]),a._v(" "),s("p",[a._v("Value constructors are functions that return a value of a data type. Because of this, just like any other function, they can take one or more parameters:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Foo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bar")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Biz")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n\n")])])]),s("p",[a._v("Let's check the type of the "),s("code",[a._v("Bar")]),a._v(" value constructor.")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bar")]),a._v("\n\n")])])]),s("p",[a._v("prints")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bar")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Foo")]),a._v("\n\n")])])]),s("p",[a._v("which proves that "),s("code",[a._v("Bar")]),a._v(" is indeed a function.")]),a._v(" "),s("h3",{attrs:{id:"creating-variables-of-our-custom-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-variables-of-our-custom-type"}},[a._v("#")]),a._v(" Creating variables of our custom type")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bar")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Biz")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Goodbye"')]),a._v("\n\n")])])]),s("h2",{attrs:{id:"creating-a-data-type-with-type-parameters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-data-type-with-type-parameters"}},[a._v("#")]),a._v(" Creating a data type with type parameters")]),a._v(" "),s("p",[a._v("Type constructors can take one or more type parameters:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Foo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bar")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Biz")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v("\n\n")])])]),s("p",[a._v("Type parameters in Haskell must begin with a lowercase letter. Our custom data type is not a real type yet. In order to create values of our type, we must substitute all type parameters with actual types. Because "),s("code",[a._v("a")]),a._v(" and "),s("code",[a._v("b")]),a._v(" can be of any type, our value constructors are polymorphic functions.")]),a._v(" "),s("h3",{attrs:{id:"creating-variables-of-our-custom-type-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-variables-of-our-custom-type-2"}},[a._v("#")]),a._v(" Creating variables of our custom type")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bar")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- x :: Foo [Char] Integer")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Biz")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Goodbye"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("6.0")]),a._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- y :: Fractional b => Foo [Char] b")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("z")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Biz")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("True")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("False")]),a._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- z :: Foo Bool Bool")]),a._v("\n\n")])])]),s("h2",{attrs:{id:"creating-a-simple-data-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-simple-data-type"}},[a._v("#")]),a._v(" Creating a simple data type")]),a._v(" "),s("p",[a._v("The easiest way to create a custom data type in Haskell is to use the "),s("code",[a._v("data")]),a._v(" keyword:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Foo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bar")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Biz")]),a._v("\n\n")])])]),s("p",[a._v("The name of the type is specified between "),s("code",[a._v("data")]),a._v(" and "),s("code",[a._v("=")]),a._v(", and is called a "),s("strong",[a._v("type constructor")]),a._v(". After "),s("code",[a._v("=")]),a._v(" we specify all "),s("strong",[a._v("value constructors")]),a._v(" of our data type, delimited by the "),s("code",[a._v("|")]),a._v(" sign. There is a rule in Haskell that all type and value constructors must begin with a capital letter. The above declaration can be read as follows:")]),a._v(" "),s("blockquote"),a._v(" "),s("p",[a._v("Define a type called "),s("code",[a._v("Foo")]),a._v(", which has two possible values: "),s("code",[a._v("Bar")]),a._v(" and "),s("code",[a._v("Biz")]),a._v(".")]),a._v(" "),s("h3",{attrs:{id:"creating-variables-of-our-custom-type-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-variables-of-our-custom-type-3"}},[a._v("#")]),a._v(" Creating variables of our custom type")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Bar")]),a._v("\n\n")])])]),s("p",[a._v("The above statement creates a variable named "),s("code",[a._v("x")]),a._v(" of type "),s("code",[a._v("Foo")]),a._v(". Let's verify this by checking its type.")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("\n\n")])])]),s("p",[a._v("prints")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Foo")]),a._v("\n\n")])])]),s("h2",{attrs:{id:"custom-data-type-with-record-parameters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#custom-data-type-with-record-parameters"}},[a._v("#")]),a._v(" Custom data type with record parameters")]),a._v(" "),s("p",[a._v("Assume we want to create a data type Person, which has a first and last name, an age, a phone number, a street, a zip code and a town.")]),a._v(" "),s("p",[a._v("We could write")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Person")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Person")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n\n")])])]),s("p",[a._v("If we want now to get the phone number, we need to make a function")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("getPhone")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Person")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("getPhone")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Person")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("_")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("_")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("_")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("phone")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("_")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("_")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("_")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("phone")]),a._v("\n\n")])])]),s("p",[a._v("Well, this is no fun.\nWe can do better using parameters:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Person'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Person'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("firstName")]),a._v("     "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n                       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("lastName")]),a._v("      "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n                       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("age")]),a._v("           "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("\n                       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("phone")]),a._v("         "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("\n                       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("street")]),a._v("        "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n                       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("code")]),a._v("          "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n                       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("town")]),a._v("          "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),s("p",[a._v("Now we get the function "),s("code",[a._v("phone")]),a._v(" where")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("t")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("phone")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("phone")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Person'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("\n\n")])])]),s("p",[a._v("We can now do whatever we want, eg:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("printPhone")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Person'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("printPhone")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("show")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("phone")]),a._v("\n\n")])])]),s("p",[a._v("We can also bind the phone number by "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/haskell/3799/syntax-in-functions/13141/pattern-matching#t=201607261759012281747",target:"_blank",rel:"noopener noreferrer"}},[a._v("Pattern Matching"),s("OutboundLink")],1),a._v(":")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("getPhone'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Person'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("getPhone'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Person")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("phone")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("p")]),a._v("\n\n")])])]),s("p",[a._v("For easy use of the parameters see "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/haskell/1274/common-ghc-language-extensions/13072/recordwildcards#t=201607261756186184772",target:"_blank",rel:"noopener noreferrer"}},[a._v("RecordWildCards"),s("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);