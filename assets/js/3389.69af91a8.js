(window.webpackJsonp=window.webpackJsonp||[]).push([[3389],{3796:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"tslint-assuring-code-quality-and-consistency"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tslint-assuring-code-quality-and-consistency"}},[t._v("#")]),t._v(" TSLint - assuring code quality and consistency")]),t._v(" "),a("p",[t._v("TSLint performs static analysis of code and detect errors and potential problems in code.")]),t._v(" "),a("h2",{attrs:{id:"configuration-for-fewer-programming-errors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration-for-fewer-programming-errors"}},[t._v("#")]),t._v(" Configuration for fewer programming errors")]),t._v(" "),a("p",[t._v("This tslint.json example contains a set of configuration to enforce more typings, catch common errors or otherwise confusing constructs that are prone to producing bugs and following more the "),a("a",{attrs:{href:"https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines",target:"_blank",rel:"noopener noreferrer"}},[t._v("Coding Guidelines for TypeScript Contributors"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("To enforce this rules, include tslint in your build process and check your code before compiling it with tsc.")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rules"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TypeScript Specific")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"member-access"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Requires explicit visibility declarations for class members.")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"no-any"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Diallows usages of any as a type declaration.")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Functionality")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"label-position"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Only allows labels in sensible locations.")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"no-bitwise"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Disallows bitwise operators.")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"no-eval"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Disallows eval function invocations.")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"no-null-keyword"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Disallows use of the null keyword literal.")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"no-unsafe-finally"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Disallows control flow statements, such as return, continue, break and throws in finally blocks.")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"no-var-keyword"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Disallows usage of the var keyword.")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"radix"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Requires the radix parameter to be specified when calling parseInt.")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"triple-equals"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Requires === and !== in place of == and !=.")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"use-isnan"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enforces use of the isNaN() function to check for NaN references instead of a comparison to the NaN constant.")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Style")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"class-name"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enforces PascalCased class and interface names. ")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"interface-name"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"never-prefix"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Requires interface names to begin with a capital ‘I’")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"no-angle-bracket-type-assertion"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Requires the use of as Type for type assertions instead of <Type>.")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one-variable-per-declaration"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Disallows multiple variable definitions in the same declaration statement.")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"quotemark"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"double"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"avoid-escape"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Requires double quotes for string literals.")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"semicolon"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"always"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enforces consistent semicolon usage at the end of every statement.")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"variable-name"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ban-keywords"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"check-format"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"allow-leading-underscore"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Checks variable names for various errors. Disallows the use of certain TypeScript keywords (any, Number, number, String, string, Boolean, boolean, undefined) as variable or parameter. Allows only camelCased or UPPER_CASED variable names. Allows underscores at the beginning (only has an effect if “check-format” specified).")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"basic-tslint-json-setup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basic-tslint-json-setup"}},[t._v("#")]),t._v(" Basic tslint.json setup")]),t._v(" "),a("p",[t._v("This is a basic "),a("code",[t._v("tslint.json")]),t._v(" setup which")]),t._v(" "),a("ul",[a("li",[t._v("prevents use of "),a("code",[t._v("any")])]),t._v(" "),a("li",[t._v("requires curly braces for "),a("code",[t._v("if")]),t._v("/"),a("code",[t._v("else")]),t._v("/"),a("code",[t._v("for")]),t._v("/"),a("code",[t._v("do")]),t._v("/"),a("code",[t._v("while")]),t._v(" statements")]),t._v(" "),a("li",[t._v("requires double quotes ("),a("code",[t._v('"')]),t._v(") to be used for strings")])]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rules"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"no-any"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"curly"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"quotemark"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"double"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"using-a-predefined-ruleset-as-default"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-a-predefined-ruleset-as-default"}},[t._v("#")]),t._v(" Using a predefined ruleset as default")]),t._v(" "),a("p",[a("code",[t._v("tslint")]),t._v(" can extend an existing rule set and is shipped with the defaults "),a("code",[t._v("tslint:recommended")]),t._v(" and "),a("code",[t._v("tslint:latest")]),t._v(".")]),t._v(" "),a("blockquote"),t._v(" "),a("p",[a("code",[t._v("tslint:recommended")]),t._v(" is a stable, somewhat opinionated set of rules which we encourage for general TypeScript programming. This configuration follows semver, so it will not have breaking changes across minor or patch releases.\n"),a("code",[t._v("tslint:latest")]),t._v(" extends tslint:recommended and is continuously updated to include configuration for the latest rules in every TSLint release. Using this config may introduce breaking changes across minor releases as new rules are enabled which cause lint failures in your code. When TSLint reaches a major version bump, tslint:recommended will be updated to be identical to tslint:latest.")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.npmjs.com/package/tslint",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docs"),a("OutboundLink")],1),t._v(" and "),a("a",{attrs:{href:"https://github.com/palantir/tslint/tree/master/src/configs",target:"_blank",rel:"noopener noreferrer"}},[t._v("source code of predfined ruleset"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("So one can simply use:")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"extends"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tslint:recommended"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("to have a sensible starting configuration.")]),t._v(" "),a("p",[t._v("One can then overwrite rules from that preset via "),a("code",[t._v("rules")]),t._v(", e.g. for node developers it made sense to set "),a("code",[t._v("no-console")]),t._v(" to "),a("code",[t._v("false")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"extends"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tslint:recommended"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rules"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"no-console"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"installation-and-setup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installation-and-setup"}},[t._v("#")]),t._v(" Installation and setup")]),t._v(" "),a("p",[t._v("To install "),a("a",{attrs:{href:"https://github.com/palantir/tslint",target:"_blank",rel:"noopener noreferrer"}},[t._v("tslint"),a("OutboundLink")],1),t._v(" run command")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[t._v("npm install "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("g tslint\n\n")])])]),a("p",[t._v("Tslint is configured via file "),a("code",[t._v("tslint.json")]),t._v(". To initialize default configuration run command")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[t._v("tslint "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("init\n\n")])])]),a("p",[t._v("To check file for possible errors in file run command")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[t._v("tslint filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ts\n\n")])])]),a("h2",{attrs:{id:"sets-of-tslint-rules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sets-of-tslint-rules"}},[t._v("#")]),t._v(" Sets of TSLint Rules")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/Microsoft/tslint-microsoft-contrib",target:"_blank",rel:"noopener noreferrer"}},[t._v("tslint-microsoft-contrib"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/buzinas/tslint-eslint-rules",target:"_blank",rel:"noopener noreferrer"}},[t._v("tslint-eslint-rules"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/mgechev/codelyzer",target:"_blank",rel:"noopener noreferrer"}},[t._v("codelyzer"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("Yeoman genearator supports all these presets and can be extends also:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/greybax/generator-tslint",target:"_blank",rel:"noopener noreferrer"}},[t._v("generator-tslint"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);