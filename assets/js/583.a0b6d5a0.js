(window.webpackJsonp=window.webpackJsonp||[]).push([[583],{992:function(t,a,e){"use strict";e.r(a);var s=e(31),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"memory-management"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#memory-management"}},[t._v("#")]),t._v(" Memory management")]),t._v(" "),e("p",[t._v("For managing dynamically allocated memory, the standard C library provides the functions "),e("code",[t._v("malloc()")]),t._v(", "),e("code",[t._v("calloc()")]),t._v(", "),e("code",[t._v("realloc()")]),t._v(" and "),e("code",[t._v("free()")]),t._v(". In C99 and later, there is also "),e("code",[t._v("aligned_alloc()")]),t._v(".  Some systems also provide "),e("code",[t._v("alloca()")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"freeing-memory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#freeing-memory"}},[t._v("#")]),t._v(" Freeing Memory")]),t._v(" "),e("p",[t._v("It is possible to release dynamically allocated memory by calling "),e("a",{attrs:{href:"http://linux.die.net/man/3/free",target:"_blank",rel:"noopener noreferrer"}},[t._v("free()"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* allocation of memory */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("perror")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"malloc failed"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* release of memory */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* note that after free(p), even using the *value* of the pointer p\n   has undefined behavior, until a new value is stored into it. */")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* reusing/re-purposing the pointer itself */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* This is valid, has defined behaviour */")]),t._v("\n\n")])])]),e("p",[t._v("The memory pointed to by "),e("code",[t._v("p")]),t._v(" is reclaimed (either by the libc implementation or by the underlying OS) after the call to "),e("code",[t._v("free()")]),t._v(", so accessing that freed memory block via "),e("code",[t._v("p")]),t._v(" will lead to "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/c/364/undefined-behavior#t=201607290847035891683",target:"_blank",rel:"noopener noreferrer"}},[t._v("undefined behavior"),e("OutboundLink")],1),t._v(". Pointers that reference memory elements that have been freed are commonly called "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Dangling_pointer",target:"_blank",rel:"noopener noreferrer"}},[t._v("dangling pointers"),e("OutboundLink")],1),t._v(", and present a security risk. Furthermore, the C standard states that even "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/c/364/undefined-behavior/2775/read-value-of-pointer-that-was-freed#t=201608050732042665317",target:"_blank",rel:"noopener noreferrer"}},[t._v("accessing the value"),e("OutboundLink")],1),t._v(" of a dangling pointer has undefined behavior. Note that the pointer "),e("code",[t._v("p")]),t._v(" itself can be re-purposed as shown above.")]),t._v(" "),e("p",[t._v("Please note that you can only call "),e("code",[t._v("free()")]),t._v(" on pointers that have directly been returned from the "),e("code",[t._v("malloc()")]),t._v(", "),e("code",[t._v("calloc()")]),t._v(", "),e("code",[t._v("realloc()")]),t._v(" and "),e("code",[t._v("aligned_alloc()")]),t._v(" functions, or where documentation tells you the memory has been allocated that way (functions like "),e("code",[t._v("strdup ()")]),t._v(" are notable examples). Freeing a pointer that is,")]),t._v(" "),e("ul",[e("li",[t._v("obtained by using the "),e("code",[t._v("&")]),t._v(" operator on a variable, or")]),t._v(" "),e("li",[t._v("in the middle of an allocated block,")])]),t._v(" "),e("p",[t._v("is forbidden. Such an error will usually not be diagnosed by your compiler but will lead the program execution in an undefined state.")]),t._v(" "),e("p",[t._v("There are two common strategies to prevent such instances of undefined behavior.")]),t._v(" "),e("p",[t._v("The first and preferable is simple - have "),e("code",[t._v("p")]),t._v(" itself cease to exist when it is no longer needed, for example:")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("something_is_needed")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("perror")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"malloc failed"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* do whatever is needed with p */")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("By calling "),e("code",[t._v("free()")]),t._v(" directly before the end of the containing block (i.e. the "),e("code",[t._v("}")]),t._v("), "),e("code",[t._v("p")]),t._v(" itself ceases to exist. The compiler will give a compilation error on any attempt to use "),e("code",[t._v("p")]),t._v(" after that.")]),t._v(" "),e("p",[t._v("A second approach is to also invalidate the pointer itself after releasing the memory to which it points:")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// you may also use 0 instead of NULL")]),t._v("\n\n")])])]),e("p",[t._v("Arguments for this approach:")]),t._v(" "),e("li",[t._v("\nOn many platforms, an attempt to dereference a null pointer will cause instant crash: Segmentation fault. Here, we get at least a stack trace pointing to the variable that was used after being freed.\nWithout setting pointer to `NULL` we have dangling pointer. The program will very likely still crash, but later, because the memory to which the pointer points will silently be corrupted. Such bugs are difficult to trace because they can result in a call stack that completely unrelated to the initial problem.\nThis approach hence follows the [fail-fast concept](https://en.wikipedia.org/wiki/Fail-fast).\n")]),t._v(" "),e("li",[t._v("\nIt is safe to free a null pointer. The [C Standard specifies](http://port70.net/%7Ensz/c/c89/c89-draft.html#4.10.3.2) that `free(NULL)` has no effect:\n"),e("blockquote",[t._v("\nThe free function causes the space pointed to by ptr to be deallocated, that is, made available for further allocation. If ptr is a null pointer, no action occurs. Otherwise, if the argument does not match a pointer earlier returned by the `calloc`, `malloc`, or `realloc` function, or if the space has been deallocated by a call to `free` or `realloc`, the behavior is undefined.\n")])]),t._v(" "),e("ul",[e("li",[t._v("Sometimes the first approach cannot be used (e.g. memory is allocated in one function, and deallocated much later in a completely different function)")])]),t._v(" "),e("h2",{attrs:{id:"allocating-memory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#allocating-memory"}},[t._v("#")]),t._v(" Allocating Memory")]),t._v(" "),e("h3",{attrs:{id:"standard-allocation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#standard-allocation"}},[t._v("#")]),t._v(" Standard Allocation")]),t._v(" "),e("p",[t._v("The C dynamic memory allocation functions are defined in the "),e("code",[t._v("<stdlib.h>")]),t._v(" header. If one wishes to allocate memory space for an object dynamically, the following code can be used:")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("perror")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"malloc() failed"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("This computes the number of bytes that ten "),e("code",[t._v("int")]),t._v("s occupy in memory, then requests that many bytes from "),e("code",[t._v("malloc")]),t._v(" and assigns the result (i.e., the starting address of the memory chunk that was just created using "),e("code",[t._v("malloc")]),t._v(")  to a pointer named "),e("code",[t._v("p")]),t._v(".")]),t._v(" "),e("p",[t._v("It is good practice to use "),e("code",[t._v("sizeof")]),t._v(" to compute the amount of memory to request since the result of "),e("code",[t._v("sizeof")]),t._v(" is implementation defined (except for "),e("strong",[t._v("character types")]),t._v(", which are "),e("code",[t._v("char")]),t._v(", "),e("code",[t._v("signed char")]),t._v(" and "),e("code",[t._v("unsigned char")]),t._v(", for which "),e("code",[t._v("sizeof")]),t._v(" is defined to always give "),e("code",[t._v("1")]),t._v(").")]),t._v(" "),e("p",[e("strong",[t._v("Because "),e("code",[t._v("malloc")]),t._v(" might not be able to service the request, it might return a null pointer. It is important to check for this to prevent later attempts to dereference the null pointer.")])]),t._v(" "),e("p",[t._v("Memory dynamically allocated using "),e("code",[t._v("malloc()")]),t._v(" may be resized using "),e("code",[t._v("realloc()")]),t._v(" or, when no longer needed, released using "),e("code",[t._v("free()")]),t._v(".")]),t._v(" "),e("p",[t._v("Alternatively, declaring "),e("code",[t._v("int array[10];")]),t._v(" would allocate the same amount of memory.  However, if it is declared inside a function without the keyword "),e("code",[t._v("static")]),t._v(", it will only be usable within the function it is declared in and the functions it calls (because the array will be allocated on the stack and the space will be released for reuse when the function returns). Alternatively, if it is defined with "),e("code",[t._v("static")]),t._v(" inside a function, or if it is defined outside any function, then its lifetime is the lifetime of the program. Pointers can also be returned from a function, however a function in C can not return an array.")]),t._v(" "),e("h3",{attrs:{id:"zeroed-memory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#zeroed-memory"}},[t._v("#")]),t._v(" Zeroed Memory")]),t._v(" "),e("p",[t._v("The memory returned by "),e("code",[t._v("malloc")]),t._v(" may not be initialized to a reasonable value, and care should be taken to zero the memory with "),e("code",[t._v("memset")]),t._v(" or to immediately copy a suitable value into it. Alternatively, "),e("code",[t._v("calloc")]),t._v(" returns a block of the desired size where all bits are initialized to "),e("code",[t._v("0")]),t._v(". This need not be the same as the representation of floating-point zero or a null pointer constant.")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("calloc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("perror")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"calloc() failed"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[e("sub",[e("strong",[t._v("A note on "),e("code",[t._v("calloc")]),t._v(":")]),t._v(" Most (commonly used) implementations will optimise "),e("code",[t._v("calloc()")]),t._v(" for performance, so it will be "),e("a",{attrs:{href:"http://stackoverflow.com/a/2688522/130580",target:"_blank",rel:"noopener noreferrer"}},[t._v("faster"),e("OutboundLink")],1),t._v(" than calling "),e("code",[t._v("malloc()")]),t._v(", then "),e("code",[t._v("memset()")]),t._v(", even though the net effect is identical.")])]),t._v(" "),e("h3",{attrs:{id:"aligned-memory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aligned-memory"}},[t._v("#")]),t._v(" Aligned Memory")]),t._v(" "),e("p",[t._v("C11 introduced a new function "),e("code",[t._v("aligned_alloc()")]),t._v(" which allocates space with the given alignment. It can be used if the memory to be allocated is needed to be aligned at certain boundaries which can't be satisfied by "),e("code",[t._v("malloc()")]),t._v(" or "),e("code",[t._v("calloc()")]),t._v(". "),e("code",[t._v("malloc()")]),t._v(" and "),e("code",[t._v("calloc()")]),t._v(" functions allocate memory that's suitably aligned for "),e("strong",[t._v("any")]),t._v(" object type (i.e. the alignment is "),e("code",[t._v("alignof(max_align_t)")]),t._v("). But with "),e("code",[t._v("aligned_alloc()")]),t._v(" greater alignments can be requested.")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Allocates 1024 bytes with 256 bytes alignment. */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("aligned_alloc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ptr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("perror")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aligned_alloc()"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ptr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[t._v("The C11 standard imposes two restrictions: 1) the "),e("strong",[t._v("size")]),t._v(" (second argument) requested must be an integral multiple of the "),e("strong",[t._v("alignment")]),t._v(" (first argument) and 2) the value of "),e("strong",[t._v("alignment")]),t._v(" should be a valid alignment supported by the implementation. Failure to meet either of them results in "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/c/364/undefined-behavior",target:"_blank",rel:"noopener noreferrer"}},[t._v("undefined behavior"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"reallocating-memory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reallocating-memory"}},[t._v("#")]),t._v(" Reallocating Memory")]),t._v(" "),e("p",[t._v("You may need to expand or shrink your pointer storage space after you have allocated memory to it.  The "),e("code",[t._v("void *realloc(void *ptr, size_t size)")]),t._v(" function deallocates the old object pointed to by "),e("code",[t._v("ptr")]),t._v(" and returns a pointer to an object that has the size specified by "),e("code",[t._v("size")]),t._v(". "),e("code",[t._v("ptr")]),t._v(" is the pointer to a memory block previously allocated with "),e("code",[t._v("malloc")]),t._v(", "),e("code",[t._v("calloc")]),t._v(" or "),e("code",[t._v("realloc")]),t._v(" (or a null pointer) to be reallocated. The maximal possible contents of the original memory is preserved. If the new size is larger, any additional memory beyond the old size are uninitialized. If the new size is shorter, the contents of the shrunken part is lost. If "),e("code",[t._v("ptr")]),t._v(" is NULL, a new block is allocated and a pointer to it is returned by the function.")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("perror")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"malloc() failed"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" EXIT_FAILURE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n    p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Reallocate array to a larger size, storing the result into a\n     * temporary pointer in case realloc() fails. */")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("temporary "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("realloc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("temporary"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* realloc() failed, the original allocation was not free'd yet. */")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" temporary"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("perror")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"realloc() failed"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Clean up. */")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" EXIT_FAILURE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("      \n\n        p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temporary"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* From here on, array can be used with the new size it was \n     * realloc'ed to, until it is free'd. */")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The values of p[0] to p[9] are preserved, so this will print:\n       42 15\n    */")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d %d\\n"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" EXIT_SUCCESS"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("The reallocated object may or may not have the same address as "),e("code",[t._v("*p")]),t._v(". Therefore it is important to capture the return value from "),e("code",[t._v("realloc")]),t._v(" which contains the new address if the call is successful.")]),t._v(" "),e("p",[t._v("Make sure you assign the return value of "),e("code",[t._v("realloc")]),t._v(" to a "),e("code",[t._v("temporary")]),t._v(" instead of the original "),e("code",[t._v("p")]),t._v(". "),e("code",[t._v("realloc")]),t._v(" will return null in case of any failure, which would overwrite the pointer. This would lose your data and create a memory leak.")]),t._v(" "),e("h2",{attrs:{id:"realloc-ptr-0-is-not-equivalent-to-free-ptr"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#realloc-ptr-0-is-not-equivalent-to-free-ptr"}},[t._v("#")]),t._v(" realloc(ptr, 0) is not equivalent to free(ptr)")]),t._v(" "),e("p",[e("code",[t._v("realloc")]),t._v(" is "),e("strong",[t._v("conceptually equivalent")]),t._v(" to "),e("code",[t._v("malloc + memcpy + free")]),t._v(" on the other pointer.")]),t._v(" "),e("p",[t._v("If the size of the space requested is zero, the behavior of "),e("code",[t._v("realloc")]),t._v(" is implementation-defined. This is similar for all memory allocation functions that receive a "),e("code",[t._v("size")]),t._v(" parameter of value "),e("code",[t._v("0")]),t._v(". Such functions may in fact return a non-null pointer, but that must never be dereferenced.")]),t._v(" "),e("p",[t._v("Thus, "),e("code",[t._v("realloc(ptr,0)")]),t._v(" is not equivalent to "),e("code",[t._v("free(ptr)")]),t._v(". It may")]),t._v(" "),e("ul",[e("li",[t._v('be a "lazy" implementation and just return '),e("code",[t._v("ptr")])]),t._v(" "),e("li",[e("code",[t._v("free(ptr)")]),t._v(", allocate a dummy element and return that")]),t._v(" "),e("li",[e("code",[t._v("free(ptr)")]),t._v(" and return "),e("code",[t._v("0")])]),t._v(" "),e("li",[t._v("just return "),e("code",[t._v("0")]),t._v(" for failure and do nothing else.")])]),t._v(" "),e("p",[t._v("So in particular the latter two cases are indistinguishable by application code.")]),t._v(" "),e("p",[t._v("This means "),e("code",[t._v("realloc(ptr,0)")]),t._v(" may not really free/deallocate the memory, and thus it should never be used as a replacement for "),e("code",[t._v("free")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"multidimensional-arrays-of-variable-size"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#multidimensional-arrays-of-variable-size"}},[t._v("#")]),t._v(" Multidimensional arrays of variable size")]),t._v(" "),e("p",[t._v("Since C99, C has variable length arrays, VLA, that model arrays with bounds that are only known at initialization time. While you have to be careful not to allocate too large VLA (they might smash your stack), using "),e("strong",[t._v("pointers to VLA")]),t._v(" and using them in "),e("code",[t._v("sizeof")]),t._v(" expressions is fine.")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sumAll")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" A"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" ret "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" j "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("j"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          ret "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" A"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ret"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("argc"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" argc"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" m "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" argc"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("matrix"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// initialize matrix somehow")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" res "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sumAll")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" matrix"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"result is %g\\n"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("matrix"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("Here "),e("code",[t._v("matrix")]),t._v(" is a pointer to elements of type "),e("code",[t._v("double[m]")]),t._v(", and the "),e("code",[t._v("sizeof")]),t._v(" expression with "),e("code",[t._v("double[n][m]")]),t._v(" ensures that it contains space for "),e("code",[t._v("n")]),t._v(" such elements.")]),t._v(" "),e("p",[t._v("All this space is allocated contiguously and can thus be deallocated by a single call to "),e("code",[t._v("free")]),t._v(".")]),t._v(" "),e("p",[t._v("The presence of VLA in the language also affects the possible declarations of arrays and pointers in function headers. Now, a general integer expression is permitted inside the "),e("code",[t._v("[]")]),t._v(" of array parameters. For both functions the expressions in "),e("code",[t._v("[]")]),t._v(" use parameters that have declared before in the parameter list. For "),e("code",[t._v("sumAll")]),t._v(" these are the lengths that the user code expects for the matrix. As for all array function parameters in C the innermost dimension is rewritten to a pointer type, so this is equivalent to the declaration")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n double sumAll(size_t n, size_t m, double (*A)[m]);\n\n")])])]),e("p",[t._v("That is, "),e("code",[t._v("n")]),t._v(" is not really part of the function interface, but the information can be useful for documentation and it could also be used by bounds checking compilers to warn about out-of-bounds access.")]),t._v(" "),e("p",[t._v("Likwise, for "),e("code",[t._v("main")]),t._v(", the expression "),e("code",[t._v("argc+1")]),t._v(" is the minimal length that the C standard prescribes for the "),e("code",[t._v("argv")]),t._v(" argument.")]),t._v(" "),e("p",[t._v("Note that officially VLA support is optional in C11, but we know of no compiler that implements C11 and that doesn't have them. You could test with the macro "),e("code",[t._v("__STDC_NO_VLA__")]),t._v(" if you must.")]),t._v(" "),e("h2",{attrs:{id:"alloca-allocate-memory-on-stack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#alloca-allocate-memory-on-stack"}},[t._v("#")]),t._v(" alloca: allocate memory on stack")]),t._v(" "),e("p",[e("strong",[t._v("Caveat:")]),t._v(" "),e("code",[t._v("alloca")]),t._v(" is only mentioned here for the sake of completeness. It is entirely non-portable (not covered by any of the common standards) and has a number of potentially dangerous features that make it un-safe for the unaware. Modern C code should replace it with "),e("strong",[t._v("Variable Length Arrays")]),t._v(" (VLA).")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://linux.die.net/man/3/alloca",target:"_blank",rel:"noopener noreferrer"}},[t._v("Manual page"),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<alloca.h>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// glibc version of stdlib.h include alloca.h by default")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("data "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloca")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n      function body;\n    */")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// data is automatically freed")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("Allocate memory on the stack frame of the caller, the space referenced by the returned pointer is automatically "),e("a",{attrs:{href:"https://linux.die.net/man/3/free",target:"_blank",rel:"noopener noreferrer"}},[t._v("free"),e("OutboundLink")],1),t._v("'d when the caller function finishes.")]),t._v(" "),e("p",[t._v("While this function is convenient for automatic memory management, be aware that requesting large allocation could cause a stack overflow, and that you cannot use "),e("a",{attrs:{href:"https://linux.die.net/man/3/free",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("free")]),e("OutboundLink")],1),t._v(" with memory allocated with "),e("a",{attrs:{href:"https://linux.die.net/man/3/alloca",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("alloca")]),e("OutboundLink")],1),t._v(" (which could cause more issue with stack overflow).")]),t._v(" "),e("p",[t._v("For these reason it is not recommended to use "),e("a",{attrs:{href:"https://linux.die.net/man/3/alloca",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("alloca")]),e("OutboundLink")],1),t._v(" inside a loop nor a recursive function.")]),t._v(" "),e("p",[t._v("And because the memory is "),e("a",{attrs:{href:"https://linux.die.net/man/3/free",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("free")]),e("OutboundLink")],1),t._v("'d upon function return you cannot return the pointer as a function result ("),e("a",{attrs:{href:"http://stackoverflow.com/documentation/c/364/undefined-behavior",target:"_blank",rel:"noopener noreferrer"}},[t._v("the behavior would be undefined"),e("OutboundLink")],1),t._v(").")]),t._v(" "),e("h3",{attrs:{id:"summary"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[t._v("#")]),t._v(" Summary")]),t._v(" "),e("ul",[e("li",[t._v("call identical to "),e("a",{attrs:{href:"https://linux.die.net/man/3/malloc",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("malloc")]),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("automatically free'd upon function return")]),t._v(" "),e("li",[t._v("incompatible with "),e("a",{attrs:{href:"https://linux.die.net/man/3/free",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("free")]),e("OutboundLink")],1),t._v(","),e("a",{attrs:{href:"https://linux.die.net/man/3/realloc",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("realloc")]),e("OutboundLink")],1),t._v(" functions ("),e("a",{attrs:{href:"http://stackoverflow.com/documentation/c/364/undefined-behavior",target:"_blank",rel:"noopener noreferrer"}},[t._v("undefined behavior"),e("OutboundLink")],1),t._v(")")]),t._v(" "),e("li",[t._v("pointer cannot be returned as a function result ("),e("a",{attrs:{href:"http://stackoverflow.com/documentation/c/364/undefined-behavior",target:"_blank",rel:"noopener noreferrer"}},[t._v("undefined behavior"),e("OutboundLink")],1),t._v(")")]),t._v(" "),e("li",[t._v("allocation size limited by stack space, which (on most machines) is a lot smaller than the heap space available for use by "),e("code",[t._v("malloc()")])]),t._v(" "),e("li",[t._v("avoid using "),e("code",[t._v("alloca()")]),t._v(" and VLAs (variable length arrays) in a single function")]),t._v(" "),e("li",[e("code",[t._v("alloca()")]),t._v(" is not as portable as "),e("code",[t._v("malloc()")]),t._v(" et al")])]),t._v(" "),e("h3",{attrs:{id:"recommendation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#recommendation"}},[t._v("#")]),t._v(" Recommendation")]),t._v(" "),e("ul",[e("li",[t._v("Do not use "),e("code",[t._v("alloca()")]),t._v(" in new code")])]),t._v(" "),e("p",[t._v("Modern alternative.")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n      function body;\n    */")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// data is automatically freed")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("This works where "),e("code",[t._v("alloca()")]),t._v(" does, and works in places where "),e("code",[t._v("alloca()")]),t._v(" doesn't (inside loops, for example).  It does assume either a C99 implementation or a C11 implementation that does not define "),e("code",[t._v("__STDC_NO_VLA__")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"user-defined-memory-management"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#user-defined-memory-management"}},[t._v("#")]),t._v(" User-defined memory management")]),t._v(" "),e("p",[e("code",[t._v("malloc()")]),t._v(" often calls underlying operating system functions to obtain pages of memory. But there is nothing special about the function and it can be implemented in straight C by declaring a large static array and allocating from it (there is a slight difficulty in ensuring correct alignment, in practice aligning to 8 bytes is almost always adequate).")]),t._v(" "),e("p",[t._v("To implement a simple scheme, a control block is stored in the region of memory immediately before the pointer to be returned from the call. This means that "),e("code",[t._v("free()")]),t._v(" may be implemented by subtracting from the returned pointer and reading off the control information, which is typically the block size plus some information that allows it to be put back in the free list - a linked list of unallocated blocks.")]),t._v(" "),e("p",[t._v("When the user requests an allocation, the free list is searched until a block of identical or larger size to the amount requested is found, then if necessary it is split. This can lead to memory fragmentation if the user is continually making many allocations and frees of unpredictable size and and at unpredictable intervals (not all real programs behave like that, the simple scheme is often adequate for small programs).")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* typical control block */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("block")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* size of block */")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("block")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* next block in free list */")]),t._v(" \n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("block")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("prev"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* back pointer to previous block in memory */")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("padding"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* need 16 bytes to make multiple of 8 */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("block")]),t._v(" arena"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* allocate from here */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("block")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("firstfree"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[t._v("Many programs require large numbers of allocations of small objects of the same size. This is very easy to implement. Simply use a block with a next pointer. So if a block of 32 bytes is required:")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" block\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" block "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" payload"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" block arena"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" block "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" head"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        arena"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("arena"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    arena"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* last one, null */")]),t._v("\n    head "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("block"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("block_alloc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("answer "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("answer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        head "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" answer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("block_free")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" block "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("block "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ptr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    block"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    head "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" block"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("This scheme is extremely fast and efficient, and can be made generic with a certain loss of clarity.")]),t._v(" "),e("h4",{attrs:{id:"syntax"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),e("ul",[e("li",[t._v("void "),e("em",[t._v("aligned_alloc(size_t alignment, size_t size); /")]),t._v(" Only since C11 */")]),t._v(" "),e("li",[t._v("void *calloc(size_t nelements, size_t size);")]),t._v(" "),e("li",[t._v("void free(void *ptr);")]),t._v(" "),e("li",[t._v("void *malloc(size_t size);")]),t._v(" "),e("li",[t._v("void *realloc(void *ptr, size_t size);")]),t._v(" "),e("li",[t._v("void "),e("em",[t._v("alloca(size_t size); /")]),t._v(" from alloca.h, not standard, not portable, dangerous. */")])]),t._v(" "),e("h4",{attrs:{id:"parameters"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("name")]),t._v(" "),e("th",[t._v("description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("size ("),e("code",[t._v("malloc")]),t._v(", "),e("code",[t._v("realloc")]),t._v(" and "),e("code",[t._v("aligned_alloc")]),t._v(")")]),t._v(" "),e("td",[t._v("total size of the memory in bytes. For "),e("code",[t._v("aligned_alloc")]),t._v(" the size must be a integral multiple of alignment.")])]),t._v(" "),e("tr",[e("td",[t._v("size ("),e("code",[t._v("calloc")]),t._v(")")]),t._v(" "),e("td",[t._v("size of each element")])]),t._v(" "),e("tr",[e("td",[t._v("nelements")]),t._v(" "),e("td",[t._v("number of elements")])]),t._v(" "),e("tr",[e("td",[t._v("ptr")]),t._v(" "),e("td",[t._v("pointer to allocated memory previously returned by "),e("code",[t._v("malloc")]),t._v(", "),e("code",[t._v("calloc")]),t._v(", "),e("code",[t._v("realloc")]),t._v(" or "),e("code",[t._v("aligned_alloc")])])]),t._v(" "),e("tr",[e("td",[t._v("alignment")]),t._v(" "),e("td",[t._v("alignment of allocated memory")])])])]),t._v(" "),e("h4",{attrs:{id:"remarks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),e("p",[t._v("Note that "),e("code",[t._v("aligned_alloc()")]),t._v(" is only defined for C11 or later.")]),t._v(" "),e("p",[t._v("Systems such as those based on "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/posix",target:"_blank",rel:"noopener noreferrer"}},[t._v("POSIX"),e("OutboundLink")],1),t._v(" provide other ways of allocating aligned memory (e.g. "),e("a",{attrs:{href:"http://pubs.opengroup.org/onlinepubs/9699919799/functions/posix_memalign.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("posix_memalign()")]),e("OutboundLink")],1),t._v("), and also have other memory management options (e.g. "),e("a",{attrs:{href:"http://pubs.opengroup.org/onlinepubs/9699919799/functions/mmap.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("mmap()")]),e("OutboundLink")],1),t._v(").")])])}),[],!1,null,null,null);a.default=n.exports}}]);