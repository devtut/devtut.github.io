(window.webpackJsonp=window.webpackJsonp||[]).push([[768],{1174:function(s,t,a){"use strict";a.r(t);var e=a(31),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"assemblyinfo-cs-examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assemblyinfo-cs-examples"}},[s._v("#")]),s._v(" AssemblyInfo.cs Examples")]),s._v(" "),a("h2",{attrs:{id:"global-and-local-assemblyinfo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#global-and-local-assemblyinfo"}},[s._v("#")]),s._v(" Global and local AssemblyInfo")]),s._v(" "),a("p",[s._v("Having a global allows for better DRYness, you need only put values that are different into AssemblyInfo.cs for projects that have variance.   This use assumes your product has more than one visual studio project.")]),s._v(" "),a("p",[s._v("GlobalAssemblyInfo.cs")]),s._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Reflection")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Runtime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("InteropServices")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//using Stackoverflow domain as a made up example    ")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// It is common, and mostly good, to use one GlobalAssemblyInfo.cs that is added ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// as a link to many projects of the same product, details below")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Change these attribute values in local assembly info to modify the information.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token attribute"}},[a("span",{pre:!0,attrs:{class:"token target keyword"}},[s._v("assembly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AssemblyProduct")]),a("span",{pre:!0,attrs:{class:"token attribute-arguments"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Stackoverflow Q&A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token attribute"}},[a("span",{pre:!0,attrs:{class:"token target keyword"}},[s._v("assembly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AssemblyCompany")]),a("span",{pre:!0,attrs:{class:"token attribute-arguments"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Stackoverflow"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token attribute"}},[a("span",{pre:!0,attrs:{class:"token target keyword"}},[s._v("assembly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AssemblyCopyright")]),a("span",{pre:!0,attrs:{class:"token attribute-arguments"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Copyright Â© Stackoverflow 2016"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// The following GUID is for the ID of the typelib if this project is exposed to COM")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("assembly"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Guid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"4e4f2d33-aaab-48ea-a63d-1f0a8e3c935f"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token attribute"}},[a("span",{pre:!0,attrs:{class:"token target keyword"}},[s._v("assembly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ComVisible")]),a("span",{pre:!0,attrs:{class:"token attribute-arguments"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//not going to expose ;)")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Version information for an assembly consists of the following four values:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// roughly translated from I reckon it is for SO, note that they most likely ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// dynamically generate this file")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//      Major Version  - Year 6 being 2016")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//      Minor Version  - The month")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//      Day Number     - Day of month")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//      Revision       - Build number")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// You can specify all the values or you can default the Build and Revision Numbers ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// by using the '*' as shown below: [assembly: AssemblyVersion(\"year.month.day.*\")]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("assembly"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("AssemblyVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2016.7.00.00"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token attribute"}},[a("span",{pre:!0,attrs:{class:"token target keyword"}},[s._v("assembly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AssemblyFileVersion")]),a("span",{pre:!0,attrs:{class:"token attribute-arguments"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2016.7.27.3839"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n")])])]),a("p",[s._v("AssemblyInfo.cs - one for each project")]),s._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//then the following might be put into a separate Assembly file per project, e.g.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("assembly"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("AssemblyTitle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Stackoveflow.Redis"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n")])])]),a("p",[s._v("You can add the GlobalAssemblyInfo.cs to the local project using the "),a("a",{attrs:{href:"https://stackoverflow.com/questions/62353/what-are-the-best-practices-for-using-assembly-attributes",target:"_blank",rel:"noopener noreferrer"}},[s._v("following procedure"),a("OutboundLink")],1),s._v(":")]),s._v(" "),a("ol",[a("li",[s._v("Select Add/Existing Item... in the context menu of the project")]),s._v(" "),a("li",[s._v("Select GlobalAssemblyInfo.cs\n")]),a("li",[s._v("Expand the Add-Button by clicking on\nthat little down-arrow on the right hand")]),s._v(" "),a("li",[s._v('Select "Add As Link" in the\nbuttons drop down list')])]),s._v(" "),a("h2",{attrs:{id:"assemblyversion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assemblyversion"}},[s._v("#")]),s._v(" [AssemblyVersion]")]),s._v(" "),a("p",[s._v("This attribute applies a version to the assembly.")]),s._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token attribute"}},[a("span",{pre:!0,attrs:{class:"token target keyword"}},[s._v("assembly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AssemblyVersion")]),a("span",{pre:!0,attrs:{class:"token attribute-arguments"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1.0.*"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n")])])]),a("p",[s._v("The "),a("code",[s._v("*")]),s._v(' character is used to auto-increment a portion of the version automatically every time you compile (often used for the "build" number)')]),s._v(" "),a("h2",{attrs:{id:"assemblytitle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assemblytitle"}},[s._v("#")]),s._v(" [AssemblyTitle]")]),s._v(" "),a("p",[s._v("This attribute is used to give a name to this particular assembly.")]),s._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token attribute"}},[a("span",{pre:!0,attrs:{class:"token target keyword"}},[s._v("assembly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AssemblyTitle")]),a("span",{pre:!0,attrs:{class:"token attribute-arguments"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MyProduct"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"assemblyproduct"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assemblyproduct"}},[s._v("#")]),s._v(" [AssemblyProduct]")]),s._v(" "),a("p",[s._v("This attribute is used to describe the product that this particular assembly is for. Multiple assemblies can be components of the same product, in which case they can all share the same value for this attribute.")]),s._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token attribute"}},[a("span",{pre:!0,attrs:{class:"token target keyword"}},[s._v("assembly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AssemblyProduct")]),a("span",{pre:!0,attrs:{class:"token attribute-arguments"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MyProduct"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"automated-versioning"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#automated-versioning"}},[s._v("#")]),s._v(" Automated versioning")]),s._v(" "),a("p",[s._v("Your code in source control has version numbers either by default (SVN ids or Git SHA1 hashes) or explicitly (Git tags). Rather than manually updating versions in AssemblyInfo.cs you can use a build time process to write the version from your source control system into your AssemblyInfo.cs files and thus onto your assemblies.")]),s._v(" "),a("p",[s._v("The "),a("a",{attrs:{href:"https://www.nuget.org/packages/GitVersionTask/",target:"_blank",rel:"noopener noreferrer"}},[s._v("GitVersionTask"),a("OutboundLink")],1),s._v(" or "),a("a",{attrs:{href:"https://www.nuget.org/packages/SemVer.Git.Fody/",target:"_blank",rel:"noopener noreferrer"}},[s._v("SemVer.Git.Fody"),a("OutboundLink")],1),s._v(" NuGet packages are examples of the above. To use GitVersionTask, for instance, after installing the package in your project remove the "),a("code",[s._v("Assembly*Version")]),s._v(" attributes from your AssemblyInfo.cs files. This puts GitVersionTask in charge of versioning your assemblies.")]),s._v(" "),a("p",[s._v("Note that Semantic Versioning is increasingly the "),a("strong",[s._v("de facto")]),s._v(" standard so these methods recommend using source control tags that follow SemVer.")]),s._v(" "),a("h2",{attrs:{id:"common-fields"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#common-fields"}},[s._v("#")]),s._v(" Common fields")]),s._v(" "),a("p",[s._v("It's good practice to complete your AssemblyInfo's default fields. The information may be picked up by installers and will then appear when using Programs and Features (Windows 10) to uninstall or change a program.")]),s._v(" "),a("p",[s._v("The minimum should be:")]),s._v(" "),a("ul",[a("li",[s._v("AssemblyTitle - usually the namespace, "),a("strong",[s._v("i.e.")]),s._v(" MyCompany.MySolution.MyProject")]),s._v(" "),a("li",[s._v("AssemblyCompany - the legal entities full name")]),s._v(" "),a("li",[s._v("AssemblyProduct - marketing may have a view here")]),s._v(" "),a("li",[s._v("AssemblyCopyright - keep it up to date as it looks scruffy otherwise")])]),s._v(" "),a("p",[s._v("'AssemblyTitle' becomes the 'File description' when examining the DLL's Properties Details tab.")]),s._v(" "),a("h2",{attrs:{id:"internalsvisibleto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#internalsvisibleto"}},[s._v("#")]),s._v(" [InternalsVisibleTo]")]),s._v(" "),a("p",[s._v("If you want to make "),a("code",[s._v("internal")]),s._v(" classes or functions of an assembly accessable from another assembly you declare this by "),a("code",[s._v("InternalsVisibleTo")]),s._v(" and the assembly name that is allowed to access.")]),s._v(" "),a("p",[s._v("In this example code in the assembly "),a("code",[s._v("MyAssembly.UnitTests")]),s._v(" is allowed to call "),a("code",[s._v("internal")]),s._v(" elements from "),a("code",[s._v("MyAssembly")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token attribute"}},[a("span",{pre:!0,attrs:{class:"token target keyword"}},[s._v("assembly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InternalsVisibleTo")]),a("span",{pre:!0,attrs:{class:"token attribute-arguments"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MyAssembly.UnitTests"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n")])])]),a("p",[s._v("This is especially useful for unit testing to prevent unnecessary "),a("code",[s._v("public")]),s._v(" declarations.")]),s._v(" "),a("h2",{attrs:{id:"reading-assembly-attributes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reading-assembly-attributes"}},[s._v("#")]),s._v(" Reading Assembly Attributes")]),s._v(" "),a("p",[s._v("Using .NET's rich reflection APIs, you can gain access to an assembly's metadata. For example, you can get "),a("code",[s._v("this")]),s._v(" assembly's title attribute with the following code")]),s._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Linq")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("System"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Reflection")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token range operator"}},[s._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Assembly")]),s._v(" assembly "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token type-expression class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Assembly"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")])]),s._v(" titleAttribute "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" assembly"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token generic-method"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("GetCustomAttributes")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("AssemblyTitleAttribute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("FirstOrDefault")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token interpolation-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('$"This assembly title is ')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token expression language-csharp"}},[s._v("titleAttribute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("?.")]),s._v("Title")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"assemblyconfiguration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assemblyconfiguration"}},[s._v("#")]),s._v(" [AssemblyConfiguration]")]),s._v(" "),a("p",[s._v("AssemblyConfiguration: The AssemblyConfiguration attribute must have the configuration that was used to build the assembly.\nUse conditional compilation to properly include different assembly configurations.\nUse the block similar to the example below. Add as many different configurations as you commonly use.")]),s._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token preprocessor property"}},[s._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("if")]),s._v(" (DEBUG)")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("assembly"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("AssemblyConfiguration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Debug"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token preprocessor property"}},[s._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("else")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("assembly"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("AssemblyConfiguration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Release"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token preprocessor property"}},[s._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n\n")])])]),a("h2",{attrs:{id:"assemblykeyfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assemblykeyfile"}},[s._v("#")]),s._v(" [AssemblyKeyFile]")]),s._v(" "),a("p",[s._v("Whenever we want our assembly to install in GAC then it is must to have a strong name. For strong naming assembly we have to create a public key.\nTo generate the "),a("code",[s._v(".snk")]),s._v(" file.")]),s._v(" "),a("p",[s._v("To create a strong name key file")]),s._v(" "),a("blockquote"),s._v(" "),a("ol",[s._v("\n- Developers command prompt for VS2015 (with administrator Access)\n- At the command prompt, type cd C:\\Directory_Name and press ENTER.\n- At the command prompt, type sn -k KeyFileName.snk, and then press ENTER.\n")]),s._v(" "),a("p",[s._v("once the keyFileName.snk is created at specified directory then give refernce in your project . give "),a("code",[s._v("AssemblyKeyFileAttribute")]),s._v(" attribute the path to "),a("code",[s._v("snk")]),s._v(" file to generate the key when we build our class library.")]),s._v(" "),a("blockquote"),s._v(" "),a("p",[s._v("Properties  -> AssemblyInfo.cs")]),s._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token attribute"}},[a("span",{pre:!0,attrs:{class:"token target keyword"}},[s._v("assembly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AssemblyKeyFile")]),a("span",{pre:!0,attrs:{class:"token attribute-arguments"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('@"c:\\Directory_Name\\KeyFileName.snk"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n")])])]),a("p",[s._v("Thi will create a strong name assembly after build. After creating your strong name assembly you can then install it in GAC")]),s._v(" "),a("p",[s._v("Happy Coding ð")]),s._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[s._v("#")]),s._v(" Remarks")]),s._v(" "),a("p",[s._v("The filename "),a("code",[s._v("AssemblyInfo.cs")]),s._v(" is used by convention as the source file where developers place metadata attributes that describe the entire assembly they are building.")])])}),[],!1,null,null,null);t.default=n.exports}}]);