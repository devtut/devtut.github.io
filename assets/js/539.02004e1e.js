(window.webpackJsonp=window.webpackJsonp||[]).push([[539],{947:function(t,a,e){"use strict";e.r(a);var s=e(31),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"using-cat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#using-cat"}},[t._v("#")]),t._v(" Using cat")]),t._v(" "),e("h2",{attrs:{id:"concatenate-files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concatenate-files"}},[t._v("#")]),t._v(" Concatenate files")]),t._v(" "),e("p",[t._v("This is the primary purpose of "),e("code",[t._v("cat")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" file1 file2 file3 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" file_all\n\n")])])]),e("p",[e("code",[t._v("cat")]),t._v(" can also be used similarly to concatenate files as part of a pipeline, e.g.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" file1 file2 file3 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" foo\n\n")])])]),e("h2",{attrs:{id:"printing-the-contents-of-a-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#printing-the-contents-of-a-file"}},[t._v("#")]),t._v(" Printing the Contents of a File")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" file.txt\n\n")])])]),e("p",[t._v("will print the contents of a file.")]),t._v(" "),e("p",[t._v("If the file contains non-ASCII characters, you can display those characters symbolically with "),e("code",[t._v("cat -v")]),t._v(". This can be quite useful for situations where control characters would otherwise be invisible.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" -v unicode.txt\n\n")])])]),e("p",[t._v("Very often, for interactive use, you are better off using an interactive pager like "),e("code",[t._v("less")]),t._v(" or "),e("code",[t._v("more")]),t._v(", though. ("),e("code",[t._v("less")]),t._v(" is far more powerful than "),e("code",[t._v("more")]),t._v(" and it is advised to use "),e("code",[t._v("less")]),t._v(" more often than "),e("code",[t._v("more")]),t._v(".)")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("less")]),t._v(" file.txt\n\n")])])]),e("p",[t._v("To pass the contents of a file as input to a command. An approach usually seen as better ("),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cat_(Unix)#Useless_use_of_cat",target:"_blank",rel:"noopener noreferrer"}},[t._v("UUOC"),e("OutboundLink")],1),t._v(") is to use redirection.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("tr")]),t._v(" A-Z a-z "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file.txt   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# as an alternative to cat file.txt | tr A-Z a-z")]),t._v("\n\n")])])]),e("p",[t._v("In case the content needs to be listed backwards from its end the command "),e("code",[t._v("tac")]),t._v(" can be used:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("tac")]),t._v(" file.txt\n\n")])])]),e("p",[t._v("If you want to print the contents with line numbers, then use "),e("code",[t._v("-n")]),t._v(" with "),e("code",[t._v("cat")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" -n file.txt\n\n")])])]),e("p",[t._v("To display the contents of a file in a completely unambiguous byte-by-byte form, a hex dump is the standard solution. This is good for very brief snippets of a file, such as when you don't know the precise encoding. The standard hex dump utility is "),e("code",[t._v("od -cH")]),t._v(", though the representation is slightly cumbersome; common replacements include "),e("code",[t._v("xxd")]),t._v(" and "),e("code",[t._v("hexdump")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("printf")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hëllö wörld'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" xxd\n0000000: 48c3 ab6c 6cc3 b620 77c3 b672 6c64       H"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("ll"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" w"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("rld\n\n")])])]),e("h2",{attrs:{id:"write-to-a-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#write-to-a-file"}},[t._v("#")]),t._v(" Write to a file")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("file\n\n")])])]),e("p",[t._v("It will let you write the text on terminal which will be saved in a file named "),e("strong",[t._v("file")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v("file\n\n")])])]),e("p",[t._v("will do the same, except it will append the text to the end of the file.")]),t._v(" "),e("p",[t._v("N.B: "),e("kbd",[t._v("Ctrl+D")]),t._v(" to end writing text on terminal (Linux)")]),t._v(" "),e("p",[t._v("A here document can be used to inline the contents of a file into a command line or a script:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("END"),e("span",{pre:!0,attrs:{class:"token bash punctuation"}},[t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("file")]),t._v("\nHello, World.\nEND")]),t._v("\n\n")])])]),e("p",[t._v("The token after the "),e("code",[t._v("<<")]),t._v(" redirection symbol is an arbitrary string which needs to occur alone on a line (with no leading or trailing whitespace) to indicate the end of the here document. You can add quoting to prevent the shell from performing command substitution and variable interpolation:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fnord'\nNothing in `here` will be $changed\nfnord")]),t._v("\n\n")])])]),e("p",[t._v("(Without the quotes, "),e("code",[t._v("here")]),t._v(" would be executed as a command, and "),e("code",[t._v("$changed")]),t._v(" would be substituted with the value of the variable "),e("code",[t._v("changed")]),t._v(" -- or nothing, if it was undefined.)")]),t._v(" "),e("h2",{attrs:{id:"display-line-numbers-with-output"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#display-line-numbers-with-output"}},[t._v("#")]),t._v(" Display line numbers with output")]),t._v(" "),e("p",[t._v("Use the "),e("code",[t._v("--number")]),t._v(" flag to print line numbers before each line. Alternatively, "),e("code",[t._v("-n")]),t._v(" does the same thing.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" --number "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("\n\n "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  line "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  line "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("  line "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("  line "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\n")])])]),e("p",[t._v("To skip empty lines when counting lines, use the "),e("code",[t._v("--number-nonblank")]),t._v(", or simply "),e("code",[t._v("-b")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" -b "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("\n\n "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  line "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  line "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("  line "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("  line "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"read-from-standard-input"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#read-from-standard-input"}},[t._v("#")]),t._v(" Read from standard input")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" file.txt\n\n")])])]),e("p",[t._v("Output is same as "),e("code",[t._v("cat file.txt")]),t._v(", but it reads the contents of the file from standard input instead of directly from the file.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("printf")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"first line'),e("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("Second line"),e("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" -n\n\n")])])]),e("p",[t._v("The echo command before "),e("code",[t._v("|")]),t._v(" outputs two lines. The cat command acts on the output to add line numbers.")]),t._v(" "),e("h2",{attrs:{id:"show-non-printable-characters"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#show-non-printable-characters"}},[t._v("#")]),t._v(" Show non printable characters")]),t._v(" "),e("p",[t._v("This is useful to see if there are any non-printable characters, or non-ASCII characters.")]),t._v(" "),e("p",[t._v("e.g. If you have copy-pasted the code from web, you may have quotes like "),e("code",[t._v("”")]),t._v(" instead of standard "),e("code",[t._v('"')]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" -v file.txt\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" -vE file.txt "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Useful in detecting trailing spaces.")]),t._v("\n\n")])])]),e("p",[t._v("e.g.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'”     '")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" -vE "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo | will be replaced by actual file.")]),t._v("\nM-bM-^@M-^"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("     $\n\n")])])]),e("p",[t._v("You may also want to use "),e("code",[t._v("cat -A")]),t._v(" (A for All) that is equivalent to "),e("code",[t._v("cat -vET")]),t._v(".\nIt will display TAB characters (displayed as "),e("code",[t._v("^I")]),t._v("), non printable characters and end of each line:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'” `'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" -A\nM-bM-^@M-^"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("^I`$\n\n")])])]),e("h2",{attrs:{id:"concatenate-gzipped-files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concatenate-gzipped-files"}},[t._v("#")]),t._v(" Concatenate gzipped files")]),t._v(" "),e("p",[t._v("Files compressed by "),e("code",[t._v("gzip")]),t._v(" can be directly concatenated into larger gzipped files.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" file1.gz file2.gz file3.gz "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" combined.gz\n\n")])])]),e("p",[t._v("This is a property of "),e("code",[t._v("gzip")]),t._v(" that is less efficient than concatenating the input files and gzipping the result:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" file1 file2 file3 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("gzip")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" combined.gz\n\n")])])]),e("p",[t._v("A complete demonstration:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello world!'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" hello.txt\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Howdy world!'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" howdy.txt\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("gzip")]),t._v(" hello.txt\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("gzip")]),t._v(" howdy.txt\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" hello.txt.gz howdy.txt.gz "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" greetings.txt.gz\n\ngunzip greetings.txt.gz\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" greetings.txt\n\n")])])]),e("p",[t._v("Which results in")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("Hello world"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\nHowdy world"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n\n")])])]),e("p",[t._v("Notice that "),e("code",[t._v("greetings.txt.gz")]),t._v(" is a *"),e("strong",[t._v("*single file**")]),t._v(" and is decompressed as the *"),e("strong",[t._v("*single file**")]),t._v(" "),e("code",[t._v("greeting.txt")]),t._v(". Contrast this with "),e("code",[t._v("tar -czf hello.txt howdy.txt > greetings.tar.gz")]),t._v(", which keeps the files separate inside the tarball.")]),t._v(" "),e("h4",{attrs:{id:"syntax"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),e("ul",[e("li",[t._v("cat [OPTIONS]... [FILE]...")])]),t._v(" "),e("h4",{attrs:{id:"parameters"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Option")]),t._v(" "),e("th",[t._v("Details")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("-n")]),t._v(" "),e("td",[t._v("Print line numbers")])]),t._v(" "),e("tr",[e("td",[t._v("-v")]),t._v(" "),e("td",[t._v("Show non-printing characters using ^ and M- notation except LFD and TAB")])]),t._v(" "),e("tr",[e("td",[t._v("-T")]),t._v(" "),e("td",[t._v("Show TAB characters as ^I")])]),t._v(" "),e("tr",[e("td",[t._v("-E")]),t._v(" "),e("td",[t._v("Show linefeed(LF) characters as $")])]),t._v(" "),e("tr",[e("td",[t._v("-e")]),t._v(" "),e("td",[t._v("Same as -vE")])]),t._v(" "),e("tr",[e("td",[t._v("-b")]),t._v(" "),e("td",[t._v("Number nonempty output lines, overrides -n")])]),t._v(" "),e("tr",[e("td",[t._v("-A")]),t._v(" "),e("td",[t._v("equivalent to -vET")])]),t._v(" "),e("tr",[e("td",[t._v("-s")]),t._v(" "),e("td",[t._v("suppress repeated empty output lines, s refers to squeeze")])])])]),t._v(" "),e("h4",{attrs:{id:"remarks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),e("p",[e("code",[t._v("cat")]),t._v(" can read from both files and standard inputs and concatenates them to standard output")])])}),[],!1,null,null,null);a.default=n.exports}}]);