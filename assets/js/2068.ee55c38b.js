(window.webpackJsonp=window.webpackJsonp||[]).push([[2068],{2478:function(t,s,a){"use strict";a.r(s);var n=a(31),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"string-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-functions"}},[t._v("#")]),t._v(" String Functions")]),t._v(" "),a("h2",{attrs:{id:"quotename"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quotename"}},[t._v("#")]),t._v(" Quotename")]),t._v(" "),a("p",[t._v("Returns a Unicode string surrounded by delimiters to make it a valid SQL Server delimited identifier.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[t._v("character string. A string of Unicode data, up to 128 characters ("),a("code",[t._v("sysname")]),t._v("). If an input string is longer than 128 characters function returns "),a("code",[t._v("null")]),t._v(".")]),t._v(" "),a("li",[t._v("quote character. "),a("strong",[t._v("Optional")]),t._v(". A single character to use as a delimiter. Can be a single quotation mark ("),a("code",[t._v("'")]),t._v(" or ``), a left or right bracket ("),a("code",[t._v("{")]),t._v(","),a("code",[t._v("[")]),t._v(","),a("code",[t._v("(")]),t._v(","),a("code",[t._v("<")]),t._v(" or "),a("code",[t._v(">")]),t._v(","),a("code",[t._v(")")]),t._v(","),a("code",[t._v("]")]),t._v(","),a("code",[t._v("}")]),t._v(") or a double quotation mark ("),a("code",[t._v('"')]),t._v("). Any other value will return null. Default value is square brackets.")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" QUOTENAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'what''s my name?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns [what's my name?]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" QUOTENAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'what''s my name?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'['")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns [what's my name?]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" QUOTENAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'what''s my name?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("']'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns [what's my name?]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" QUOTENAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'what''s my name?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'what''s my name?'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" QUOTENAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'what''s my name?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('-- Returns "what\'s my name?"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" QUOTENAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'what''s my name?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("')'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns (what's my name?)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" QUOTENAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'what''s my name?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'('")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns (what's my name?)")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" QUOTENAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'what''s my name?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns <what's my name?>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" QUOTENAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'what''s my name?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'>'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns <what's my name?>")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" QUOTENAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'what''s my name?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns {what's my name?}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" QUOTENAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'what''s my name?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'}'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns {what's my name?}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" QUOTENAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'what''s my name?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'`'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns `what's my name?`")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"replace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replace"}},[t._v("#")]),t._v(" Replace")]),t._v(" "),a("p",[t._v("Returns a string ("),a("code",[t._v("varchar")]),t._v(" or "),a("code",[t._v("nvarchar")]),t._v(") where all occurrences of a specified sub string is replaced with another sub string.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[t._v("string expression. This is the string that would be searched. It can be a character or binary data type.")]),t._v(" "),a("li",[t._v("pattern. This is the sub string that would be replaced. It can be a character or binary data type. The pattern argument cannot be an empty string.")]),t._v(" "),a("li",[t._v("replacement. This is the sub string that would replace the pattern sub string. It can be a character or binary data.")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REPLACE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This is my string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'is'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'XX'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'ThXX XX my string'.")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("Notes:")])]),t._v(" "),a("ul",[a("li",[t._v("If string expression is not of type "),a("code",[t._v("varchar(max)")]),t._v(" or "),a("code",[t._v("nvarchar(max)")]),t._v(", the "),a("code",[t._v("replace")]),t._v(" function truncates the return value at 8,000 chars.")]),t._v(" "),a("li",[t._v("Return data type depends on input data types - returns "),a("code",[t._v("nvarchar")]),t._v(" if one of the input values is "),a("code",[t._v("nvarchar")]),t._v(", or "),a("code",[t._v("varchar")]),t._v(" otherwise.")]),t._v(" "),a("li",[t._v("Return "),a("code",[t._v("NULL")]),t._v(" if any of the input parameters is "),a("code",[t._v("NULL")])])]),t._v(" "),a("h2",{attrs:{id:"substring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#substring"}},[t._v("#")]),t._v(" Substring")]),t._v(" "),a("p",[t._v("Returns a substring that starts with the char that's in the specified start index and the specified max length.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[t._v("Character expression. The character expression can be of any data type that can be implicitly converted to "),a("code",[t._v("varchar")]),t._v(" or "),a("code",[t._v("nvarchar")]),t._v(", except for "),a("code",[t._v("text")]),t._v(" or "),a("code",[t._v("ntext")]),t._v(".")]),t._v(" "),a("li",[t._v("Start index. A number ("),a("code",[t._v("int")]),t._v(" or "),a("code",[t._v("bigint")]),t._v(") that specifies the start index of the requested substring. ("),a("strong",[t._v("Note:")]),t._v(" strings in sql server are base 1 index, meaning that the first character of the string is index 1). This number can be less then 1. In this case, If the sum of start index and max length is greater then 0, the return string would be a string starting from the first char of the character expression and with the length of (start index + max length - 1). If it's less then 0, an empty string would be returned.")]),t._v(" "),a("li",[t._v("Max length. An integer number between 0 and "),a("code",[t._v("bigint")]),t._v(" max value (9,223,372,036,854,775,807). If the max length parameter is negative, an error will be raised.")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" SUBSTRING"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This is my string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 'is my'")]),t._v("\n\n")])])]),a("p",[t._v("If the max length + start index is more then the number of characters in the string, the entier string is returned.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" SUBSTRING"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello World'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 'Hello World'")]),t._v("\n\n")])])]),a("p",[t._v("If the start index is bigger then the number of characters in the string, an empty string is returned.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" SUBSTRING"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello World'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns ''")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"string-split"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-split"}},[t._v("#")]),t._v(" String_Split")]),t._v(" "),a("p",[t._v("Splits a string expression using a character separator. Note that "),a("code",[t._v("STRING_SPLIT()")]),t._v(" is a table-valued function and therefore must be used within "),a("code",[t._v("FROM")]),t._v(" clause.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[t._v("string. Any character type expression ("),a("code",[t._v("char")]),t._v(", "),a("code",[t._v("nchar")]),t._v(", "),a("code",[t._v("varchar")]),t._v(" or "),a("code",[t._v("nvarchar")]),t._v(")")]),t._v(" "),a("li",[t._v("seperator. A single character expression of any type ("),a("code",[t._v("char(1)")]),t._v(", "),a("code",[t._v("nchar(1)")]),t._v(", "),a("code",[t._v("varchar(1)")]),t._v(" or "),a("code",[t._v("nvarchar(1)")]),t._v(").")])]),t._v(" "),a("p",[t._v("Returns a single column table where each row contains a fragment of the string. The name of the columns is "),a("code",[t._v("value")]),t._v(", and the datatype is "),a("code",[t._v("nvarchar")]),t._v(" if any of the parameters is either "),a("code",[t._v("nchar")]),t._v(" or "),a("code",[t._v("nvarchar")]),t._v(", otherwise "),a("code",[t._v("varchar")]),t._v(".")]),t._v(" "),a("p",[t._v("The following example splits a string using space as a separator:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" STRING_SPLIT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Lorem ipsum dolor sit amet.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("Result:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-----")]),t._v("\nLorem\nipsum\ndolor\nsit\namet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n")])])]),a("p",[t._v("Remarks:")]),t._v(" "),a("blockquote"),t._v(" "),a("p",[t._v("The "),a("code",[t._v("STRING_SPLIT")]),t._v(" function is available only under compatibility level "),a("strong",[t._v("130")]),t._v(". If your database compatibility level is lower than 130, SQL Server will not be able to find and execute "),a("code",[t._v("STRING_SPLIT")]),t._v(" function. You can change the compatibility level of a database using the following command:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATABASE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("database_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" COMPATIBILITY_LEVEL "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("130")]),t._v("\n\n")])])]),a("p",[t._v("Older versions of sql server does not have a built in split string function.\nThere are many user defined functions that handles the problem of splitting a string.\nYou can read Aaron Bertrand's article "),a("a",{attrs:{href:"http://sqlperformance.com/2012/07/t-sql-queries/split-strings",target:"_blank",rel:"noopener noreferrer"}},[t._v("Split strings the right way – or the next best way"),a("OutboundLink")],1),t._v(" for a comprehensive comparison of some of them.")]),t._v(" "),a("h2",{attrs:{id:"left"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#left"}},[t._v("#")]),t._v(" Left")]),t._v(" "),a("p",[t._v("Returns a sub string starting with the left most char of a string and up to the maximum length specified.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[t._v("character expression. The character expression can be of any data type that can be implicitly converted to "),a("code",[t._v("varchar")]),t._v(" or "),a("code",[t._v("nvarchar")]),t._v(", except for "),a("code",[t._v("text")]),t._v(" or "),a("code",[t._v("ntext")])]),a("li",[t._v("max length. An integer number between 0 and "),a("code",[t._v("bigint")]),t._v(" max value (9,223,372,036,854,775,807)."),a("br"),t._v("\nIf the max length parameter is negative, an error will be raised.")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This is my string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- result: 'This'")]),t._v("\n\n")])])]),a("p",[t._v("If the max length is more then the number of characters in the string, the entier string is returned.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This is my string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- result: 'This is my string'")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"right"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#right"}},[t._v("#")]),t._v(" Right")]),t._v(" "),a("p",[t._v("Returns a sub string that is the right most part of the string, with the specified max length.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[t._v("character expression. The character expression can be of any data type that can be implicitly converted to "),a("code",[t._v("varchar")]),t._v(" or "),a("code",[t._v("nvarchar")]),t._v(", except for "),a("code",[t._v("text")]),t._v(" or "),a("code",[t._v("ntext")])]),a("li",[t._v("max length. An integer number between 0 and "),a("code",[t._v("bigint")]),t._v(" max value (9,223,372,036,854,775,807).\nIf the max length parameter is negative, an error will be raised.")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RIGHT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This is my string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 'string'")]),t._v("\n\n")])])]),a("p",[t._v("If the max length is more then the number of characters in the string, the entier string is returned.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RIGHT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This is my string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 'This is my string'")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"soundex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#soundex"}},[t._v("#")]),t._v(" Soundex")]),t._v(" "),a("p",[t._v("Returns a four-character code ("),a("code",[t._v("varchar")]),t._v(") to evaluate the phonetic similarity of two strings.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[t._v("character expression. An alphanumeric expression of character data.")])]),t._v(" "),a("p",[t._v("The soundex function creates a four-character code that is based on how the character expression would sound when spoken. the first char is the the upper case version of the first character of the parameter, the rest 3 characters are numbers representing the letters in the expression (except a, e, i, o, u, h, w and y that are ignored).")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" SOUNDEX "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Smith'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'S530'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" SOUNDEX "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Smythe'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'S530'")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"format"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#format"}},[t._v("#")]),t._v(" Format")]),t._v(" "),a("p",[t._v("Returns a "),a("code",[t._v("NVARCHAR")]),t._v(" value formatted with the specified format and culture (if specified). This is primarily used for converting date-time types to strings.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("value")]),t._v(". An expression of a supported data type to format. valid types are listed below.")]),t._v(" "),a("li",[a("code",[t._v("format")]),t._v(". An "),a("code",[t._v("NVARCHAR")]),t._v(" format pattern. See Microsoft official documentation for "),a("a",{attrs:{href:"https://msdn.microsoft.com/library/dwhawy9k.aspx",target:"_blank",rel:"noopener noreferrer"}},[t._v("standard"),a("OutboundLink")],1),t._v(" and "),a("a",{attrs:{href:"https://msdn.microsoft.com/library/0c899ak8.aspx",target:"_blank",rel:"noopener noreferrer"}},[t._v("custom"),a("OutboundLink")],1),t._v(" format strings.")]),t._v(" "),a("li",[a("code",[t._v("culture")]),t._v(". "),a("strong",[t._v("Optional")]),t._v(". "),a("code",[t._v("nvarchar")]),t._v(" argument specifying a culture. The default value is the culture of the current session.")])]),t._v(" "),a("p",[a("strong",[t._v("DATE")])]),t._v(" "),a("p",[t._v("Using standard format strings:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECLARE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@d")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATETIME")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2016-07-31'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'en-US'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'US English Result'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '7/31/2016'")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'en-gb'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Great Britain English Result'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '31/07/2016'")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'de-de'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'German Result'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '31.07.2016'")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zh-cn'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Simplified Chinese (PRC) Result'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '2016/7/31'")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'D'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'en-US'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'US English Result'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'Sunday, July 31, 2016'")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'D'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'en-gb'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Great Britain English Result'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '31 July 2016'")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'D'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'de-de'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'German Result'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'Sonntag, 31. Juli 2016'")]),t._v("\n\n")])])]),a("p",[t._v("Using custom format strings:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dd/MM/yyyy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'en-US'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'DateTime Result'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '31/07/2016'")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123456789")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'###-##-####'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Custom Number Result'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '123-45-6789',")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dddd, MMMM dd, yyyy hh:mm:ss tt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'en-US'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'US'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'Sunday, July 31, 2016 12:00:00 AM'")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dddd, MMMM dd, yyyy hh:mm:ss tt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hi-IN'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hindi'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns रविवार, जुलाई 31, 2016 12:00:00 पूर्वाह्न")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dddd'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'en-US'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'US'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'Sunday'")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dddd'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hi-IN'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hindi'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'रविवार'")]),t._v("\n\n")])])]),a("p",[a("code",[t._v("FORMAT")]),t._v(" can also be used for formatting "),a("code",[t._v("CURRENCY")]),t._v(","),a("code",[t._v("PERCENTAGE")]),t._v(" and "),a("code",[t._v("NUMBERS")]),t._v(".")]),t._v(" "),a("p",[a("strong",[t._v("CURRENCY")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECLARE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Price1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Price1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'en-US'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'CURRENCY IN US Culture'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '$40.00'      ")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Price1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'de-DE'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'CURRENCY IN GERMAN Culture'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '40,00 €'")]),t._v("\n\n")])])]),a("p",[t._v("We can specify the number of digits after the decimal.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECLARE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Price")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECIMAL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("40.356")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Price")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'C'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Default'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '$40.36'")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Price")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'C0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'With 0 Decimal'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '$40'")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Price")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'C1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'With 1 Decimal'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '$40.4'")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Price")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'C2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'With 2 Decimal'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '$40.36'")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("PERCENTAGE")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\n  DECLARE @Percentage float = 0.35674\n   SELECT FORMAT( @Percentage, 'P') AS '% Default', -- Returns '35.67 %'\n   FORMAT( @Percentage, 'P0') AS '% With 0 Decimal', -- Returns '36 %'\n   FORMAT( @Percentage, 'P1') AS '% with 1 Decimal'  -- Returns '35.7 %'\n\n")])])]),a("p",[a("strong",[t._v("NUMBER")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECLARE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Number")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECIMAL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("454545.389")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'N'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'en-US'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Number Format in US'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '454,545.39'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'N'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'en-IN'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Number Format in INDIA'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '4,54,545.39'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#.0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'With 1 Decimal'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '454545.4'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#.00'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'With 2 Decimal'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '454545.39'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#,##.00'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'With Comma and 2 Decimal'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '454,545.39'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'##.00'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Without Comma and 2 Decimal'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '454545.39'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FORMAT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'000000000'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Left-padded to nine digits'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '000454545'")]),t._v("\n\n")])])]),a("p",[t._v("Valid value types list: ("),a("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/hh213505.aspx#Anchor_3",target:"_blank",rel:"noopener noreferrer"}},[t._v("source"),a("OutboundLink")],1),t._v(")")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v("Category         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Type")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Net "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-------------------------------------------")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Numeric")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bigint")]),t._v("           Int64\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Numeric")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("              Int32\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Numeric")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("smallint")]),t._v("         Int16\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Numeric")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("tinyint")]),t._v("          Byte\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Numeric")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("decimal")]),t._v("          SqlDecimal\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Numeric")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("numeric")]),t._v("          SqlDecimal\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Numeric")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Double")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Numeric")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("real")]),t._v("             Single\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Numeric")]),t._v("          smallmoney       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Decimal")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Numeric")]),t._v("          money            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Decimal")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Date")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Time")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("date")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DateTime")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Date")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Time")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("time")]),t._v("             TimeSpan\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Date")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Time")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("datetime")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DateTime")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Date")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Time")]),t._v("    smalldatetime    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DateTime")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Date")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Time")]),t._v("    datetime2        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DateTime")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Date")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Time")]),t._v("    datetimeoffset   DateTimeOffset\n\n")])])]),a("p",[a("strong",[t._v("Important Notes:")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("FORMAT")]),t._v(" returns "),a("code",[t._v("NULL")]),t._v(" for errors other than a culture that is not valid. For example, "),a("code",[t._v("NULL")]),t._v(" is returned if the value specified in format is not valid.")]),t._v(" "),a("li",[a("code",[t._v("FORMAT")]),t._v(" relies on the presence of the .NET Framework Common Language Runtime (CLR).")]),t._v(" "),a("li",[a("code",[t._v("FORMAT")]),t._v(" relies upon CLR formatting rules which dictate that colons and periods must be escaped. Therefore, when the format string (second parameter) contains a colon or period, the colon or period must be escaped with backslash when an input value (first parameter) is of the time data type.")])]),t._v(" "),a("p",[t._v("See also "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/sql-server/1471/dates/8084/date-time-formatting-using-format",target:"_blank",rel:"noopener noreferrer"}},[t._v("Date & Time Formatting using FORMAT"),a("OutboundLink")],1),t._v(" documentation example.")]),t._v(" "),a("h2",{attrs:{id:"string-escape"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-escape"}},[t._v("#")]),t._v(" String_escape")]),t._v(" "),a("p",[t._v("Escapes special characters in texts and returns text ("),a("code",[t._v("nvarchar(max)")]),t._v(") with escaped characters.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("li",[t._v("\ntext. is a `nvarchar` expression representing the string that should be escaped.\n")]),t._v(" "),a("li",[t._v("\ntype. Escaping rules that will be applied. Currently the only supported value is `'json'`.\n")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" STRING_ESCAPE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\   /  \n\\\\    \"     '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'json'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns '\\\\\\t\\/\\n\\\\\\\\\\t\\\"\\t'")]),t._v("\n\n")])])]),a("p",[t._v("List of characters that will be escaped:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v("Special "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("character")]),t._v("    Encoded sequence\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-------------------------------------")]),t._v("\nQuotation mark "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v('"'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v('   \\"\nReverse solidus '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\\"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \\\\\nSolidus "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          \\"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\nBackspace            \\b\nForm feed            \\f\nNew line             \\n\nCarriage "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("      \\r\nHorizontal tab       \\t\n\n\nControl "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("character")]),t._v("    Encoded sequence\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("------------------------------------")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("            \\u0000\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("            \\u0001\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           \\u001f\n\n")])])]),a("h2",{attrs:{id:"ascii"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ascii"}},[t._v("#")]),t._v(" ASCII")]),t._v(" "),a("p",[t._v("Returns an int value representing the ASCII code of the leftmost character of a string.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ASCII"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'t'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 116")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ASCII"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'T'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 84")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ASCII"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 84")]),t._v("\n\n")])])]),a("p",[t._v("If the string is Unicode and the leftmost character is not ASCII but representable in the current collation, a value greater than 127 can be returned:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ASCII"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("N"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ï'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 239 when `SERVERPROPERTY('COLLATION') = 'SQL_Latin1_General_CP1_CI_AS'`")]),t._v("\n\n")])])]),a("p",[t._v("If the string is Unicode and the leftmost character cannot be represented in the current collation, the int value of 63 is returned: (which represents question mark in ASCII):")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ASCII"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("N"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'߷'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 63")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ASCII"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2039")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 63")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"char"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#char"}},[t._v("#")]),t._v(" Char")]),t._v(" "),a("p",[t._v("Returns a char represented by an int ASCII code.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("116")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 't'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("84")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'T'")]),t._v("\n\n")])])]),a("p",[t._v("This can be used to introduce new line/line feed "),a("code",[t._v("CHAR(10)")]),t._v(", carriage returns "),a("code",[t._v("CHAR(13)")]),t._v(", etc. See "),a("a",{attrs:{href:"http://www.asciitable.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("AsciiTable.com"),a("OutboundLink")],1),t._v(" for reference.")]),t._v(" "),a("p",[t._v("If the argument value is not between 0 and 255, the CHAR function returns "),a("code",[t._v("NULL")]),t._v("."),a("br"),t._v("\nThe return data type of the "),a("code",[t._v("CHAR")]),t._v(" function is "),a("code",[t._v("char(1)")])]),t._v(" "),a("h2",{attrs:{id:"concat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concat"}},[t._v("#")]),t._v(" Concat")]),t._v(" "),a("p",[t._v("Returns a string that is the result of two or more strings joined together.   "),a("code",[t._v("CONCAT")]),t._v(" accepts two or more arguments.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" CONCAT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' is'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' my'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 'This is my string'")]),t._v("\n\n")])])]),a("p",[t._v("Note: Unlike concatenating strings using the string concatenation operator ("),a("code",[t._v("+")]),t._v("), when passing a null value to the "),a("code",[t._v("concat")]),t._v(" function it will implicitly convert it to an empty string:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" CONCAT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' is'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' my'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 'This is my string'")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' is'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' my'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' string'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns NULL.")]),t._v("\n\n")])])]),a("p",[t._v("Also arguments of a non-string type will be implicitly converted to a string:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" CONCAT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' is my '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rd string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 'This is my 3rd string'")]),t._v("\n\n")])])]),a("p",[t._v("Non-string type variables will also be converted to string format, no need to manually covert or cast it to string:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECLARE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Age")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" CONCAT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ram is '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' years old'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 'Ram is 23 years old'")]),t._v("\n\n")])])]),a("p",[t._v("Older versions do not support "),a("code",[t._v("CONCAT")]),t._v(" function and must use the string concatenation operator ("),a("code",[t._v("+")]),t._v(") instead. Non-string types must be cast or converted to string types in order to concatenate them this way.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This is the number '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" CAST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--returns 'This is the number 42'")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"ltrim"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ltrim"}},[t._v("#")]),t._v(" LTrim")]),t._v(" "),a("p",[t._v("Returns a character expression ("),a("code",[t._v("varchar")]),t._v(" or "),a("code",[t._v("nvarchar")]),t._v(") after removing all leading white spaces, i.e., white spaces from the left through to the first non-white space character.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[t._v("character expression. Any expression of character or binary data that can be implicitly converted to "),a("code",[t._v("varcher")]),t._v(", except "),a("code",[t._v("text")]),t._v(", "),a("code",[t._v("ntext")]),t._v(" and "),a("code",[t._v("image")]),t._v(".")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" LTRIM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'    This is my string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'This is my string'")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"rtrim"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rtrim"}},[t._v("#")]),t._v(" RTrim")]),t._v(" "),a("p",[t._v("Returns a character expression ("),a("code",[t._v("varchar")]),t._v(" or "),a("code",[t._v("nvarchar")]),t._v(") after removing all trailing white spaces, i.e., spaces from the right end of the string up until the first non-white space character to the left.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[t._v("character expression. Any expression of character or binary data that can be implicitly converted to "),a("code",[t._v("varcher")]),t._v(", except "),a("code",[t._v("text")]),t._v(", "),a("code",[t._v("ntext")]),t._v(" and "),a("code",[t._v("image")]),t._v(".")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" RTRIM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This is my string     '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'This is my string'")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"patindex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#patindex"}},[t._v("#")]),t._v(" PatIndex")]),t._v(" "),a("p",[t._v("Returns the starting position of the first occurrence of a the specified pattern in the specified expression.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("li",[t._v("\npattern. A character expression the contains the sequence to be found. Limited to A maximum length of 8000 chars. Wildcards (`%`, `_`) can be used in the pattern. If the pattern does not start with a wildcard, it may only match whatever is in the beginning of the expression. If it doesn't end with a wildcard, it may only match whatever is in the end of the expression.\n")]),t._v(" "),a("li",[t._v("\nexpression. Any string data type.\n")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" PATINDEX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%ter%'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'interesting'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 3. ")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" PATINDEX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%t_r%t%'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'interesting'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 3. ")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" PATINDEX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ter%'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'interesting'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 0, since 'ter' is not at the start. ")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" PATINDEX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'inter%'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'interesting'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 1. ")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" PATINDEX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%ing'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'interesting'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 9. ")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"space"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#space"}},[t._v("#")]),t._v(" Space")]),t._v(" "),a("p",[t._v("Returns a string ("),a("code",[t._v("varchar")]),t._v(") of repeated spaces.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[t._v("integer expression. Any integer expression, up to 8000. If negative, "),a("code",[t._v("null")]),t._v(" is returned. if 0, an empty string is returned. (To return a string longer then 8000 spaces, use Replicate.")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" SPACE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns NULL")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" SPACE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns an empty string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" SPACE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '   ' (a string containing 3 spaces)")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"difference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#difference"}},[t._v("#")]),t._v(" Difference")]),t._v(" "),a("p",[t._v("Returns an integer ("),a("code",[t._v("int")]),t._v(") value that indicates the difference between the soundex values of two character expressions.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[t._v("character expression 1.")]),t._v(" "),a("li",[t._v("character expression 2.")])]),t._v(" "),a("p",[t._v("Both parameters are alphanumeric expressions of character data.")]),t._v(" "),a("p",[t._v("The integer returned is the number of chars in the soundex values of the parameters that are the same, so 4 means that the expressions are very similar and 0 means that they are very different.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v("  SOUNDEX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Green'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- G650")]),t._v("\n        SOUNDEX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Greene'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- G650")]),t._v("\n        DIFFERENCE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Green'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Greene'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 4")]),t._v("\n        \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v("  SOUNDEX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Blotchet-Halls'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- B432")]),t._v("\n        SOUNDEX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Greene'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- G650")]),t._v("\n        DIFFERENCE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Blotchet-Halls'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Greene'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 0")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"len"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#len"}},[t._v("#")]),t._v(" Len")]),t._v(" "),a("p",[t._v("Returns the number of characters of a string."),a("br"),t._v("\nNote: the "),a("code",[t._v("LEN")]),t._v(" function ignores trailing spaces:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'My string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 9")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'My string   '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 9")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'   My string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 12")]),t._v("\n\n")])])]),a("p",[t._v("If the length including trailing spaces is desired there are several techniques to achieve this, although each has its drawbacks. One technique is to append a single character to the string, and then use the "),a("code",[t._v("LEN")]),t._v(" minus one:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECLARE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@str")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'My string   '")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@str")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 12")]),t._v("\n\n")])])]),a("p",[t._v("The drawback to this is if the type of the string variable or column is of the maximum length, the append of the extra character is discarded, and the resulting length will still not count trailing spaces. To address that, the following modified version solves the problem, and gives the correct results in all cases at the expense of a small amount of additional execution time, and because of this (correct results, including with surrogate pairs, and reasonable execution speed) appears to be the best technique to use:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONVERT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NVARCHAR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MAX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n")])])]),a("p",[t._v("Another technique is to use the"),a("code",[t._v("DATALENGTH")]),t._v(" function.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECLARE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@str")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'My string   '")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" DATALENGTH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 12")]),t._v("\n\n")])])]),a("p",[t._v("It's important to note though that "),a("code",[t._v("DATALENGTH")]),t._v(" returns the length in bytes of the string in memory. This will be different for "),a("code",[t._v("varchar")]),t._v(" vs. "),a("code",[t._v("nvarchar")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECLARE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@str")]),t._v(" nvarchar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'My string   '")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" DATALENGTH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 24")]),t._v("\n\n")])])]),a("p",[t._v("You can adjust for this by dividing the datalength of the string by the datalength of a single character (which must be of the same type). The example below does this, and also handles the case where the target string happens to be empty, thus avoiding a divide by zero.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECLARE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@str")]),t._v(" nvarchar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'My string   '")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" DATALENGTH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" DATALENGTH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'x'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 12")]),t._v("\n\n")])])]),a("p",[t._v("Even this, though, has a problem in SQL Server 2012 and above. It will produce incorrect results when the string contains surrogate pairs (some characters can occupy more bytes than other characters in the same string).")]),t._v(" "),a("p",[t._v("Another technique is to use "),a("code",[t._v("REPLACE")]),t._v(" to convert spaces to a non-space character, and take the "),a("code",[t._v("LEN")]),t._v(" of the result. This gives correct results in all cases, but has very poor execution speed with long strings.")]),t._v(" "),a("h2",{attrs:{id:"lower"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lower"}},[t._v("#")]),t._v(" Lower")]),t._v(" "),a("p",[t._v("Returns a character expression ("),a("code",[t._v("varchar")]),t._v(" or "),a("code",[t._v("nvarchar")]),t._v(") after converting all uppercase characters to lowercase.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[t._v("Character expression. Any expression of character or binary data that can be implicitly converted to "),a("code",[t._v("varchar")]),t._v(".")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" LOWER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This IS my STRING'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'this is my string'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECLARE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" N"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This IS my STRING'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" LOWER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'this is my string'")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"upper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#upper"}},[t._v("#")]),t._v(" Upper")]),t._v(" "),a("p",[t._v("Returns a character expression ("),a("code",[t._v("varchar")]),t._v(" or "),a("code",[t._v("nvarchar")]),t._v(") after converting all lowercase characters to uppercase.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[t._v("Character expression. Any expression of character or binary data that can be implicitly converted to "),a("code",[t._v("varchar")]),t._v(".")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" UPPER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This IS my STRING'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'THIS IS MY STRING'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECLARE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" N"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This IS my STRING'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" UPPER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'THIS IS MY STRING'")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"unicode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unicode"}},[t._v("#")]),t._v(" Unicode")]),t._v(" "),a("p",[t._v("Returns the integer value representing the Unicode value of the first character of the input expression.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[t._v("Unicode character expression. Any valid "),a("code",[t._v("nchar")]),t._v(" or "),a("code",[t._v("nvarchar")]),t._v(" expression.")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" UNICODE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("N"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ɛ'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 400")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DECLARE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Unicode")]),t._v(" nvarchar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" N"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ɛ is a char'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" UNICODE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Unicode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 400")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"nchar"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nchar"}},[t._v("#")]),t._v(" NChar")]),t._v(" "),a("p",[t._v("Returns the Unicode character(s) ("),a("code",[t._v("nchar(1)")]),t._v(" or "),a("code",[t._v("nvarchar(2)")]),t._v(") corresponding to the integer argument it receives, as defined by the Unicode standard.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[t._v("integer expression. Any integer expression that is a positive number between 0 and 65535, or if the collation of the database supports supplementary character (CS) flag, the supported range is between 0 to 1114111. If the integer expression does not fall inside this range, "),a("code",[t._v("null")]),t._v(" is returned.")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("257")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'ā'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NCHAR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'Ɛ'")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"reverse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reverse"}},[t._v("#")]),t._v(" Reverse")]),t._v(" "),a("p",[t._v("Returns a string value in reversed order.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[t._v("string expression. Any string or binary data that can be implicitly converted to "),a("code",[t._v("varchar")]),t._v(".")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Select")]),t._v(" REVERSE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Sql Server'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'revreS lqS'")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"replicate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replicate"}},[t._v("#")]),t._v(" Replicate")]),t._v(" "),a("p",[t._v("Repeats a string value a specified number of times.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[t._v("string expression. String expression can be a character string or binary data.")]),t._v(" "),a("li",[t._v("integer expression. Any integer type, including "),a("code",[t._v("bigint")]),t._v(". If negative, "),a("code",[t._v("null")]),t._v(" is returned. If 0, an empty string is returned.")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" REPLICATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns NULL")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" REPLICATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns ''")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" REPLICATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'aaaaa'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" REPLICATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 'AbcAbcAbc'")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("Note:")]),t._v(" If string expression is not of type "),a("code",[t._v("varchar(max)")]),t._v(" or "),a("code",[t._v("nvarchar(max)")]),t._v(", the return value will not exceed 8000 chars. Replicate will stop before adding the string that will cause the return value to exceed that limit:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("REPLICATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a b c d e f g h i j k l'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("350")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 7981")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("REPLICATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a b c d e f g h i j k l'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("max"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("350")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns 8050")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"str"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#str"}},[t._v("#")]),t._v(" Str")]),t._v(" "),a("p",[t._v("Returns character data ("),a("code",[t._v("varchar")]),t._v(") converted from numeric data.")]),t._v(" "),a("p",[t._v("Parameters:")]),t._v(" "),a("ol",[a("li",[t._v("float expression. An approximate numeric data type with a decimal point.")]),t._v(" "),a("li",[t._v("length. "),a("strong",[t._v("optional.")]),t._v(" The total length of the string expression that would return, including digits, decimal point and leading spaces (if needed). The default value is 10.")]),t._v(" "),a("li",[t._v("decimal. "),a("strong",[t._v("optional.")]),t._v(" The number of digits to the right of the decimal point. If higher then 16, the result would be truncated to sixteen places to the right of the decimal point.")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" STR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '         1'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" STR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '  1'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" STR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '1.2'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" STR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns ' 1.20'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" STR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '1.200'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" STR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns ' 1.00'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" STR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Returns '         1'")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"charindex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#charindex"}},[t._v("#")]),t._v(" CharIndex")]),t._v(" "),a("p",[t._v("Returns the start index of a the first occurrence of string expression inside another string expression.")]),t._v(" "),a("p",[t._v("Parameters list:")]),t._v(" "),a("ol",[a("li",[t._v("String to find (up to 8000 chars)")]),t._v(" "),a("li",[t._v("String to search (any valid character data type and length, including binary)")]),t._v(" "),a("li",[t._v("(Optional) index to start. A number of type int or big int. If omitted or less then 1, the search starts at the beginning of the string.")])]),t._v(" "),a("p",[t._v("If the string to search is "),a("code",[t._v("varchar(max)")]),t._v(", "),a("code",[t._v("nvarchar(max)")]),t._v(" or "),a("code",[t._v("varbinary(max)")]),t._v(", the "),a("code",[t._v("CHARINDEX")]),t._v(" function will return a "),a("code",[t._v("bigint")]),t._v(" value. Otherwise, it will return an "),a("code",[t._v("int")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" CHARINDEX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'is'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'this is my string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" CHARINDEX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'is'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'this is my string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 6")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" CHARINDEX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' is'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'this is my string'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- returns 5")]),t._v("\n\n")])])]),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),a("p",[t._v("List of string functions (Alphabetically sorted):")]),t._v(" "),a("li",[t._v("\n[Ascii](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14342/ascii)\n")]),t._v(" "),a("li",[t._v("\n[Char](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14344/char)\n")]),t._v(" "),a("li",[t._v("\n[Charindex](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14343/charindex)\n")]),t._v(" "),a("li",[t._v("\n[Concat](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14346/concat)\n")]),t._v(" "),a("li",[t._v("\n[Difference](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/17326/difference)\n")]),t._v(" "),a("li",[t._v("\n[Format](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/17327/format)\n")]),t._v(" "),a("li",[t._v("\n[Left](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14339/left)\n")]),t._v(" "),a("li",[t._v("\n[Len](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14345/len)\n")]),t._v(" "),a("li",[t._v("\n[Lower](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14347/lower)\n")]),t._v(" "),a("li",[t._v("\n[Ltrim](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14349/ltrim)\n")]),t._v(" "),a("li",[t._v("\n[Nchar](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14352/nchar)\n")]),t._v(" "),a("li",[t._v("\n[Patindex](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14638/patindex)\n")]),t._v(" "),a("li",[t._v("\n[Quotename](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/15914/quotename)\n")]),t._v(" "),a("li",[t._v("\n[Replace](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14964/replace)\n")]),t._v(" "),a("li",[t._v("\n[Replicate](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14643/replicate)\n")]),t._v(" "),a("li",[t._v("\n[Reverse](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14637/reverse)\n")]),t._v(" "),a("li",[t._v("\n[Right](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14340/right)\n")]),t._v(" "),a("li",[t._v("\n[Rtrim](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14350/rtrim)\n")]),t._v(" "),a("li",[t._v("\n[Soundex](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/17325/soundex)\n")]),t._v(" "),a("li",[t._v("\n[Space](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14642/space)\n")]),t._v(" "),a("li",[t._v("\n[Str](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/15913/str)\n")]),t._v(" "),a("li",[t._v("\n[String_escape](http://stackoverflow.com/documentation/sql-server/4113/string-functions/17987/string-escape)\n")]),t._v(" "),a("li",[t._v("\n[String_split](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/15779/string-split)\n")]),t._v(" "),a("li",[t._v("\n[Stuff](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14965/stuff)\n")]),t._v(" "),a("li",[t._v("\n[Substring](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14341/substring)\n")]),t._v(" "),a("li",[t._v("\n[Unicode](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14351/unicode)\n")]),t._v(" "),a("li",[t._v("\n[Upper](http://stackoverflow.com/documentation/sql-server/4113/varchar-functions/14348/upper)\n")])])}),[],!1,null,null,null);s.default=e.exports}}]);