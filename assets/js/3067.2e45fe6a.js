(window.webpackJsonp=window.webpackJsonp||[]).push([[3067],{3475:function(t,a,s){"use strict";s.r(a);var e=s(31),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"dynamic-evaluation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-evaluation"}},[t._v("#")]),t._v(" Dynamic Evaluation")]),t._v(" "),s("h2",{attrs:{id:"instance-evaluation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#instance-evaluation"}},[t._v("#")]),t._v(" Instance evaluation")]),t._v(" "),s("p",[t._v("The "),s("a",{attrs:{href:"http://ruby-doc.org/core/BasicObject.html#method-i-instance_eval",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("instance_eval")]),s("OutboundLink")],1),t._v(" method is available on all objects. It evaluates code in the context of the receiver:")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("object "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\n\nobject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance_eval "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@variable")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":value")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\nobject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance_variable_get "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@variable")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => :value")]),t._v("\n\n")])])]),s("p",[s("code",[t._v("instance_eval")]),t._v(" sets "),s("code",[t._v("self")]),t._v(" to "),s("code",[t._v("object")]),t._v(" for the duration of the code block:")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance_eval "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" object "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => true")]),t._v("\n\n")])])]),s("p",[t._v("The receiver is also passed to the block as its only argument:")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance_eval "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("argument"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" argument "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" object "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => true")]),t._v("\n\n")])])]),s("p",[t._v("The "),s("a",{attrs:{href:"http://ruby-doc.org/core/BasicObject.html#method-i-instance_exec",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("instance_exec")]),s("OutboundLink")],1),t._v(" method differs in this regard: it passes its arguments to the block instead.")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance_exec "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@variable")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  instance_variable_get name  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => :value")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"evaluating-a-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#evaluating-a-string"}},[t._v("#")]),t._v(" Evaluating a String")]),t._v(" "),s("p",[t._v("Any "),s("code",[t._v("String")]),t._v(" can be evaluated at runtime.")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Example")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token method-definition"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":foo")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\neval "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Example.foo"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> :foo")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"evaluating-inside-a-binding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#evaluating-inside-a-binding"}},[t._v("#")]),t._v(" Evaluating Inside a Binding")]),t._v(" "),s("p",[t._v("Ruby keeps track of local variables and "),s("code",[t._v("self")]),t._v(" variable via an object called binding. We can get binding of a scope with calling "),s("code",[t._v("Kernel#binding")]),t._v(" and evaluate string inside a binding via "),s("code",[t._v("Binding#eval")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" proc "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  local_variable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":local")]),t._v("\n  binding\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("call\n\nb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eval "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"local_variable"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> :local")]),t._v("\n\n")])])]),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token method-definition"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fake_class_eval")])]),t._v(" klass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" source "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("block\n  class_binding "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" klass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":eval")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"binding"')]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" block\n    class_binding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("local_variable_set "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":_fake_class_eval_block")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" block\n    class_binding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eval "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"_fake_class_eval_block.call"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    class_binding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eval source\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Example")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\nfake_class_eval "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string heredoc-string"}},[s("span",{pre:!0,attrs:{class:"token delimiter symbol"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<<-")]),t._v("BLOCK")]),t._v("\n  def self.foo\n    :foo\n  end\n"),s("span",{pre:!0,attrs:{class:"token delimiter symbol"}},[t._v("BLOCK")])]),t._v("\n\nfake_class_eval "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Example")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token method-definition"}},[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":bar")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> :foo")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bar "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> :bar")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"dynamically-creating-methods-from-strings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dynamically-creating-methods-from-strings"}},[t._v("#")]),t._v(" Dynamically Creating Methods from Strings")]),t._v(" "),s("p",[t._v("Ruby offers "),s("a",{attrs:{href:"http://ruby-doc.org/core-2.3.1/Module.html#method-i-define_method",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("define_method")]),s("OutboundLink")],1),t._v(" as a private method on modules and classes for defining new instance methods. However, the 'body' of the method must be a "),s("code",[t._v("Proc")]),t._v(" or another existing method.")]),t._v(" "),s("p",[t._v("One way to create a method from raw string data is to use "),s("code",[t._v("eval")]),t._v(" to create a Proc from the code:")]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("xml "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string heredoc-string"}},[s("span",{pre:!0,attrs:{class:"token delimiter symbol"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<<")]),t._v("ENDXML")]),t._v('\n<methods>\n  <method name="go">puts "I\'m going!"</method>\n  <method name="stop">7*6</method>\n</methods>\n'),s("span",{pre:!0,attrs:{class:"token delimiter symbol"}},[t._v("ENDXML")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token method-definition"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_method")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    body "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" eval"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Proc.new{ '),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("code"),s("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v(' }"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("define_method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("require")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'nokogiri'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# gem install nokogiri")]),t._v("\ndoc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Nokogiri")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XML")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xml"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndoc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xpath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'//method'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("each")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("meth"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_method"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" meth"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" meth"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\nf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\np "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance_methods"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [:go, :stop]")]),t._v("\np f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("public_methods"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [:go, :stop]")]),t._v("\nf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("go                           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> "I\'m going!"')]),t._v("\np f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stop                       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> 42")]),t._v("\n\n")])])]),s("h4",{attrs:{id:"syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),s("ul",[s("li",[t._v('eval "source"')]),t._v(" "),s("li",[t._v('eval "source", binding')]),t._v(" "),s("li",[t._v('eval "source", proc')]),t._v(" "),s("li",[t._v('binding.eval "source" # equal to '),s("code",[t._v('eval "source", binding')])])]),t._v(" "),s("h4",{attrs:{id:"parameters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Parameter")]),t._v(" "),s("th",[t._v("Details")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v('"source"')])]),t._v(" "),s("td",[t._v("Any Ruby source code")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("binding")])]),t._v(" "),s("td",[t._v("An instance of "),s("a",{attrs:{href:"http://ruby-doc.org/core-2.2.0/Binding.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("Binding")]),s("OutboundLink")],1),t._v(" class")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("proc")])]),t._v(" "),s("td",[t._v("An instance of "),s("a",{attrs:{href:"http://ruby-doc.org/core-2.2.0/Proc.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("Proc")]),s("OutboundLink")],1),t._v(" class")])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);