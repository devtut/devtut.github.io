(window.webpackJsonp=window.webpackJsonp||[]).push([[2971],{3379:function(t,a,s){"use strict";s.r(a);var e=s(31),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"the-logical-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-logical-class"}},[t._v("#")]),t._v(" The logical class")]),t._v(" "),s("p",[t._v("Logical is a mode (and an implicit class) for vectors.")]),t._v(" "),s("h2",{attrs:{id:"logical-operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#logical-operators"}},[t._v("#")]),t._v(" Logical operators")]),t._v(" "),s("p",[t._v("There are two sorts of logical operators: those that accept and return vectors of any length (elementwise operators: "),s("code",[t._v("!")]),t._v(", "),s("code",[t._v("|")]),t._v(", "),s("code",[t._v("&")]),t._v(", "),s("code",[t._v("xor()")]),t._v(") and those that only evaluate the first element in each argument ("),s("code",[t._v("&&")]),t._v(", "),s("code",[t._v("||")]),t._v("). The second sort is primarily used as the "),s("code",[t._v("cond")]),t._v(" argument to the "),s("code",[t._v("if")]),t._v(" function.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Logical Operator")]),t._v(" "),s("th",[t._v("Meaning")]),t._v(" "),s("th",[t._v("Syntax")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("!")]),t._v(" "),s("td",[t._v("Not")]),t._v(" "),s("td",[t._v("!x")])]),t._v(" "),s("tr",[s("td",[t._v("&")]),t._v(" "),s("td",[t._v("element-wise (vectorized) and")]),t._v(" "),s("td",[t._v("x & y")])]),t._v(" "),s("tr",[s("td",[t._v("&&")]),t._v(" "),s("td",[t._v("and (single element only)")]),t._v(" "),s("td",[t._v("x && y")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td",[t._v("element-wise (vectorized) or")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("xor")]),t._v(" "),s("td",[t._v("element-wise (vectorized) exclusive OR")]),t._v(" "),s("td",[t._v("xor(x,y)")])])])]),t._v(" "),s("p",[t._v("Note that the "),s("code",[t._v("||")]),t._v(" operator evaluates the left condition and if the left condition is TRUE the right side is never evaluated. This can save time if the first is the result of a complex operation. The "),s("code",[t._v("&&")]),t._v(" operator will likewise return FALSE without evaluation of the second argument when the first element of the first argument is FALSE.")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" stop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"X is too small"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nError"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" X is too small\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" stop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"X is too small"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),t._v("\n\n")])])]),s("p",[t._v("To check whether a value is a logical you can use the "),s("code",[t._v("is.logical()")]),t._v(" function.")]),t._v(" "),s("h2",{attrs:{id:"coercion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#coercion"}},[t._v("#")]),t._v(" Coercion")]),t._v(" "),s("p",[t._v("To coerce a variable to a logical use the "),s("code",[t._v("as.logical()")]),t._v(" function.")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" z "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" z\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("FALSE")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" class"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"numeric"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" as.logical"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),t._v("\n\n")])])]),s("p",[t._v("When applying "),s("code",[t._v("as.numeric()")]),t._v(" to a logical, a double will be returned. "),s("code",[t._v("NA")]),t._v(" is a logical value and a logical operator with an "),s("code",[t._v("NA")]),t._v(" will return "),s("code",[t._v("NA")]),t._v(" if the outcome is ambiguous.")]),t._v(" "),s("h2",{attrs:{id:"interpretation-of-nas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interpretation-of-nas"}},[t._v("#")]),t._v(" Interpretation of NAs")]),t._v(" "),s("p",[t._v("See "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/r/3388",target:"_blank",rel:"noopener noreferrer"}},[t._v("Missing values"),s("OutboundLink")],1),t._v(" for details.")]),t._v(" "),s("div",{staticClass:"language-r extra-class"},[s("pre",{pre:!0,attrs:{class:"language-r"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NA")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NA")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("FALSE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NA")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("FALSE")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NA")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("FALSE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NA")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NA")]),t._v("\n\n")])])]),s("h4",{attrs:{id:"remarks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),s("h3",{attrs:{id:"shorthand"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shorthand"}},[t._v("#")]),t._v(" Shorthand")]),t._v(" "),s("p",[s("code",[t._v("TRUE")]),t._v(", "),s("code",[t._v("FALSE")]),t._v(" and "),s("code",[t._v("NA")]),t._v(" are the only values for logical vectors; and all three are reserved words. "),s("code",[t._v("T")]),t._v(" and "),s("code",[t._v("F")]),t._v(" can be shorthand for "),s("code",[t._v("TRUE")]),t._v(" and "),s("code",[t._v("FALSE")]),t._v(" in a clean R session, but neither "),s("code",[t._v("T")]),t._v(" nor "),s("code",[t._v("F")]),t._v(" are reserved, so assignment of non-default values to those names can set users up for difficulties.")])])}),[],!1,null,null,null);a.default=r.exports}}]);