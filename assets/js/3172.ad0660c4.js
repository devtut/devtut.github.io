(window.webpackJsonp=window.webpackJsonp||[]).push([[3172],{3580:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"rails-best-practices"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rails-best-practices"}},[t._v("#")]),t._v(" Rails Best Practices")]),t._v(" "),a("h2",{attrs:{id:"fat-model-skinny-controller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fat-model-skinny-controller"}},[t._v("#")]),t._v(" Fat Model, Skinny Controller")]),t._v(" "),a("p",[t._v("“Fat Model, Skinny Controller” refers to how the M and C parts of MVC ideally work together. Namely, any non-response-related logic should go in the model, ideally in a nice, testable method. Meanwhile, the “skinny” controller is simply a nice interface between the view and model.")]),t._v(" "),a("p",[t._v("In practice, this can require a range of different types of refactoring, but it all comes down to one idea: by moving any logic that isn’t about the response to the model (instead of the controller), not only have you promoted reuse where possible but you’ve also made it possible to test your code outside of the context of a request.")]),t._v(" "),a("p",[t._v("Let’s look at a simple example. Say you have code like this:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("index")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@published_posts")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Post")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'published_at <= ?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@unpublished_posts")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Post")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'published_at IS NULL OR published_at > ?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("You can change it to this:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("index")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@published_posts")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Post")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("published\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@unpublished_posts")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Post")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpublished\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("Then, you can move the logic to your post model, where it might look like this:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("scope "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":published")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timestamp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'published_at <= ?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" timestamp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nscope "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":unpublished")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timestamp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'published_at IS NULL OR published_at > ?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" timestamp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"domain-objects-no-more-fat-models"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#domain-objects-no-more-fat-models"}},[t._v("#")]),t._v(" Domain Objects (No More Fat Models)")]),t._v(" "),a("p",[t._v('"Fat Model, Skinny Controller" is a very good first step, but it doesn\'t scale well once your codebase starts to grow.')]),t._v(" "),a("p",[t._v("Let's think on the "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Single_responsibility_principle",target:"_blank",rel:"noopener noreferrer"}},[t._v("Single Responsibility"),a("OutboundLink")],1),t._v(" of models. What is the single responsibility of models? Is it to hold business logic? Is it to hold non-response-related logic?")]),t._v(" "),a("p",[t._v("No. Its responsibility is to handle the persistence layer and its abstraction.")]),t._v(" "),a("p",[t._v("Business logic, as well as any non-response-related logic and non-persistence-related logic, should go in domain objects.")]),t._v(" "),a("p",[t._v('Domain objects are classes designed to have only one responsibility in the domain of the problem. Let your classes "'),a("a",{attrs:{href:"https://8thlight.com/blog/uncle-bob/2011/09/30/Screaming-Architecture.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scream Their Architecture"),a("OutboundLink")],1),t._v('" for the problems they solve.')]),t._v(" "),a("p",[t._v("In practice, you should strive towards skinny models, skinny views and skinny controllers. The architecture of your solution shouldn't be influenced by the framework you're choosing.")]),t._v(" "),a("p",[a("strong",[t._v("For example")])]),t._v(" "),a("p",[t._v("Let's say you're a marketplace which charges a fixed 15% commission to your customers via Stripe. If you charge a fixed 15% commission, that means that your commission changes depending on the order's amount because Stripe charges 2.9% + 30¢.")]),t._v(" "),a("p",[t._v("The amount you charge as commission should be: "),a("code",[t._v("amount*0.15 - (amount*0.029 + 0.30)")]),t._v(".")]),t._v(" "),a("p",[t._v("Don't write this logic in the model:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# app/models/order.rb")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ActiveRecord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Base")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SERVICE_COMMISSION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.15")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("STRIPE_PERCENTAGE_COMMISSION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.029")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("STRIPE_FIXED_COMMISSION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.30")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commission")])]),t._v("\n    amount"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SERVICE_COMMISSION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" stripe_commission  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stripe_commission")])]),t._v("\n    amount"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("STRIPE_PERCENTAGE_COMMISSION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("STRIPE_FIXED_COMMISSION")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("As soon as you integrate with a new payment method, you won't be able to scale this functionality inside this model.")]),t._v(" "),a("p",[t._v("Also, as soon as you start to integrate more business logic, your "),a("code",[t._v("Order")]),t._v(" object will start to lose "),a("a",{attrs:{href:"https://thebojan.ninja/2015/04/08/high-cohesion-loose-coupling/",target:"_blank",rel:"noopener noreferrer"}},[t._v("cohesion"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("Prefer domain objects, with the calculation of the commission completely abstracted from the responsibility of persisting orders:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# app/models/order.rb")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ActiveRecord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Base")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# No reference to commission calculation")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# lib/commission.rb")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Commission")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SERVICE_COMMISSION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.15")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("calculate")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("payment_method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("amount"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SERVICE_COMMISSION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" payment_commission"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("payment_method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("payment_commission")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("payment_method"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# There are better ways to implement a static registry,")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# this is only for illustration purposes.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("const_get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("payment_method"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('Commission"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("calculate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# lib/stripe_commission.rb")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StripeCommission")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("STRIPE_PERCENTAGE_COMMISSION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.029")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("STRIPE_FIXED_COMMISSION")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.30")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("calculate")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("amount"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("STRIPE_PERCENTAGE_COMMISSION")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("STRIPE_PERCENTAGE_COMMISSION")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# app/controllers/orders_controller.rb")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrdersController")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ApplicationController")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@order")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Order")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("order_params"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@order")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("commission "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Commission")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("calculate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Stripe"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@order")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("Using domain objects has the following architectural advantages:")]),t._v(" "),a("ul",[a("li",[t._v("it's extremely easy to unit test, as no fixtures or factories are required to instantiate the objects with the logic.")]),t._v(" "),a("li",[t._v("works with everything that accepts the message "),a("code",[t._v("amount")]),t._v(".")]),t._v(" "),a("li",[t._v("keeps each domain object small, with clearly defined responsibilities, and with higher cohesion.")]),t._v(" "),a("li",[t._v("easily scales with new payment methods by "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Open/closed_principle",target:"_blank",rel:"noopener noreferrer"}},[t._v("addition, not modification"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[t._v("stops the tendency to have an ever-growing "),a("code",[t._v("User")]),t._v(" object in each Ruby on Rails application.")])]),t._v(" "),a("p",[t._v("I personally like to put domain objects in "),a("code",[t._v("lib")]),t._v(". If you do so, remember to add it to "),a("code",[t._v("autoload_paths")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# config/application.rb")]),t._v("\nconfig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("autoload_paths "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Rails")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("join"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lib'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("You may also prefer to create domain objects more action-oriented, following the Command/Query pattern. In such case, putting these objects in "),a("code",[t._v("app/commands")]),t._v(" might be a better place as all "),a("code",[t._v("app")]),t._v(" subdirectories are automatically added to the autoload path.")]),t._v(" "),a("h2",{attrs:{id:"convention-over-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#convention-over-configuration"}},[t._v("#")]),t._v(" Convention Over Configuration")]),t._v(" "),a("p",[t._v("In Rails, you find yourself looking at "),a("strong",[t._v("controllers, views, and models")]),t._v(" for your database.")]),t._v(" "),a("p",[t._v("To reduce the need for heavy configuration, Rails implements rules to ease up working with the application. You may define your own rules but for the beginning (and for later on) it's a good idea to stick to conventions that Rails offers.")]),t._v(" "),a("p",[t._v("These conventions will speed up development, keep your code concise and readable, and allow you an easy navigation inside your application.")]),t._v(" "),a("p",[t._v("Conventions also lower the barriers to entry for beginners. There are so many conventions in Rails that a beginner doesn’t even need to know about, but can just benefit from in ignorance. It’s possible to create great applications without knowing why everything is the way it is.")]),t._v(" "),a("p",[a("strong",[t._v("For Example")])]),t._v(" "),a("p",[t._v("If you have a database table called "),a("code",[t._v("orders")]),t._v(" with the primary key "),a("code",[t._v("id")]),t._v(", the matching model is called "),a("code",[t._v("order")]),t._v(" and the controller that handles all the logic is named "),a("code",[t._v("orders_controller")]),t._v(". The view is split in different actions: if the controller has a "),a("code",[t._v("new")]),t._v(" and "),a("code",[t._v("edit")]),t._v(" action, there is also a "),a("code",[t._v("new")]),t._v(" and "),a("code",[t._v("edit")]),t._v(" view.")]),t._v(" "),a("p",[a("strong",[t._v("For Example")])]),t._v(" "),a("p",[t._v("To create an app you simply run "),a("code",[t._v("rails new app_name")]),t._v(". This will generate roughly 70 files and folders that comprise the infrastructure and foundation for your Rails app.")]),t._v(" "),a("p",[t._v("It includes:")]),t._v(" "),a("ul",[a("li",[t._v("Folders to hold your models (database layer), controllers, and views")]),t._v(" "),a("li",[t._v("Folders to hold unit tests for your application")]),t._v(" "),a("li",[t._v("Folders to hold your web assets like Javascript and CSS files")]),t._v(" "),a("li",[t._v("Default files for HTTP 400 responses (i.e. file not found)")]),t._v(" "),a("li",[t._v("Many others")])]),t._v(" "),a("h2",{attrs:{id:"beware-of-default-scope"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beware-of-default-scope"}},[t._v("#")]),t._v(" Beware of  default_scope")]),t._v(" "),a("p",[t._v("ActiveRecord includes "),a("code",[t._v("default_scope")]),t._v(", to automatically scope a model by default.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Post")]),t._v("\n  default_scope "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("published"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("created_at"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":desc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("The above code will serve posts which are already published when you perform any query on the model.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Post")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("all "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# will only list published posts ")]),t._v("\n\n")])])]),a("p",[t._v("That scope, while innocuous-looking, has multiple hidden side-effect that you may not want.")]),t._v(" "),a("h3",{attrs:{id:"default-scope-and-order"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#default-scope-and-order"}},[t._v("#")]),t._v(" "),a("code",[t._v("default_scope")]),t._v(" and "),a("code",[t._v("order")])]),t._v(" "),a("p",[t._v("Since you declared an "),a("code",[t._v("order")]),t._v(" in the "),a("code",[t._v("default_scope")]),t._v(", calling "),a("code",[t._v("order")]),t._v(" on "),a("code",[t._v("Post")]),t._v(" will be added as additional orders instead of overriding the default.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Post")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("updated_at"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":desc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"posts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"posts"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"posts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"published"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'t'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"posts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"created_at"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"posts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"updated_at"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DESC")]),t._v("\n\n")])])]),a("p",[t._v("This is probably not the behavior you wanted; you can override this by excluding the "),a("code",[t._v("order")]),t._v(" from the scope first")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Post")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("except"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":order")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("updated_at"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":desc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"posts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"posts"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"posts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"published"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'t'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"posts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"updated_at"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DESC")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"default-scope-and-model-initialization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#default-scope-and-model-initialization"}},[t._v("#")]),t._v(" "),a("code",[t._v("default_scope")]),t._v(" and model initialization")]),t._v(" "),a("p",[t._v("As with any other "),a("code",[t._v("ActiveRecord::Relation")]),t._v(", "),a("code",[t._v("default_scope")]),t._v(" will alter the default state of models initialized from it.")]),t._v(" "),a("p",[t._v("In the above example, "),a("code",[t._v("Post")]),t._v(" has "),a("code",[t._v("where(published: true)")]),t._v(" set by default, and so new models from "),a("code",[t._v("Post")]),t._v(" will also have it set.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Post")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => <Post published: true>")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"unscoped"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unscoped"}},[t._v("#")]),t._v(" "),a("code",[t._v("unscoped")])]),t._v(" "),a("p",[a("code",[t._v("default_scope")]),t._v(" can nominally be cleared by calling "),a("code",[t._v("unscoped")]),t._v(" first, but this also has side-effects. Take, for example, an STI model:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Post")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Document")]),t._v("\n  default_scope "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("published"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("created_at"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":desc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("By default, queries against "),a("code",[t._v("Post")]),t._v(" will be scoped to "),a("code",[t._v("type")]),t._v(" columns containing "),a("code",[t._v("'Post'")]),t._v(". But "),a("code",[t._v("unscoped")]),t._v(" will clear this along with your own "),a("code",[t._v("default_scope")]),t._v(", so if you use "),a("code",[t._v("unscoped")]),t._v(" you have to remember to account for this as well.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Post")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unscoped"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Post'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("updated_at"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":desc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"unscoped-and-model-associations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unscoped-and-model-associations"}},[t._v("#")]),t._v(" "),a("code",[t._v("unscoped")]),t._v(" and Model Associations")]),t._v(" "),a("p",[t._v("Consider a relationship between "),a("code",[t._v("Post")]),t._v(" and "),a("code",[t._v("User")])]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Post")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ApplicationRecord")]),t._v("\n  belongs_to "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":user")]),t._v("\n  default_scope "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("published"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("created_at"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":desc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ApplicationRecord")]),t._v("\n  has_many "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":posts")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("By getting an individual "),a("code",[t._v("User")]),t._v(", you can see the posts related to it:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("find"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nuser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("posts\n\n")])])]),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"posts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"posts"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"posts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"published"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'t'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AND")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"posts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"user_id"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"posts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"created_at"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DESC")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"user_id"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])]),a("p",[t._v("But you want to clear the "),a("code",[t._v("default_scope")]),t._v(" from the "),a("code",[t._v("posts")]),t._v(" relation, so you use "),a("code",[t._v("unscoped")])]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("posts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unscoped\n\n")])])]),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"posts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"posts"')]),t._v("\n\n")])])]),a("p",[t._v("This wipes out the "),a("code",[t._v("user_id")]),t._v(" condition as well as the "),a("code",[t._v("default_scope")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"an-example-use-case-for-default-scope"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#an-example-use-case-for-default-scope"}},[t._v("#")]),t._v(" An example use-case for "),a("code",[t._v("default_scope")])]),t._v(" "),a("p",[t._v("Despite all of that, there are situations where using "),a("code",[t._v("default_scope")]),t._v(" is justifiable.")]),t._v(" "),a("p",[t._v("Consider a multi-tenant system where multiple subdomains are served from the same application but with isolated data. One way to achieve this isolation is through "),a("code",[t._v("default_scope")]),t._v(". The downsides in other cases become upsides here.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationRecord")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ActiveRecord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Base")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inherited")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subclass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unless")]),t._v(" subclass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("superclass "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unless")]),t._v(" subclass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("column_names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tenant_id'")]),t._v("\n\n    subclass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("class_eval "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n      default_scope "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tenant_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Tenant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("All you need to do is set "),a("code",[t._v("Tenant.current_id")]),t._v(" to something early in the request, and any table that contains "),a("code",[t._v("tenant_id")]),t._v(" will automatically become scoped without any additional code. Instantiating records will automatically inherit the tenant id they were created under.")]),t._v(" "),a("p",[t._v("The important thing about this use-case is that the scope is set once per request, and it doesn't change. The only cases you will need "),a("code",[t._v("unscoped")]),t._v(" here are special cases like background workers that run outside of a request scope.")]),t._v(" "),a("h2",{attrs:{id:"don-t-repeat-yourself-dry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#don-t-repeat-yourself-dry"}},[t._v("#")]),t._v(" Don't Repeat Yourself (DRY)")]),t._v(" "),a("p",[t._v("To help to maintain clean code, Rails follows the principle of DRY.")]),t._v(" "),a("p",[t._v("It involves whenever possible, re-using as much code as possible rather than duplicating similar code in multiple places (for example, using partials). This reduces "),a("strong",[t._v("errors")]),t._v(", keeps your code "),a("strong",[t._v("clean")]),t._v(" and enforces the principle of "),a("strong",[t._v("writing code once")]),t._v(" and then reusing it. It is also easier and more efficient to update code in one place than to update multiple parts of the same code. Thus making your code more modular and robust.")]),t._v(" "),a("p",[t._v("Also "),a("strong",[t._v("Fat Model, Skinny Controller")]),t._v(" is DRY, because you write the code in your model and in the controller only do the call, like:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Post model")]),t._v("\nscope "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":unpublished")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timestamp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'published_at IS NULL OR published_at > ?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" timestamp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Any controller")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("index")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@unpublished_posts")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Post")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpublished\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("others")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@unpublished_posts")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Post")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unpublished\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("This also helps lead to an API driven structure where internal methods are hidden and changes are achieved through passing parameters in an API fashion.")]),t._v(" "),a("h2",{attrs:{id:"you-ain-t-gonna-need-it-yagni"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#you-ain-t-gonna-need-it-yagni"}},[t._v("#")]),t._v(" You Ain’t Gonna Need it (YAGNI)")]),t._v(" "),a("p",[t._v("If you can say “YAGNI” (You ain’t gonna need it) about a feature, you better not implement it. There can be a lot of development time saved through focussing onto simplicity.\nImplementing such features anyway can lead to problems:")]),t._v(" "),a("h3",{attrs:{id:"problems"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#problems"}},[t._v("#")]),t._v(" Problems")]),t._v(" "),a("h3",{attrs:{id:"overengineering"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overengineering"}},[t._v("#")]),t._v(" Overengineering")]),t._v(" "),a("p",[t._v("If a product is more complicated than it has to be, it is over engineered. Usually these “not yet used” features will never be used in the intended way they were written and have to be refactored if they ever get used.\nPremature optimisations, especially performance optimisations, often lead to design decisions which will be proved wrong in the future.")]),t._v(" "),a("h3",{attrs:{id:"code-bloat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#code-bloat"}},[t._v("#")]),t._v(" Code Bloat")]),t._v(" "),a("p",[t._v("Code Bloat means unnecessary complicated code. This can occur for example by abstraction, redundancy or incorrect application of design patterns. The code base becomes difficult to understand, confusing and expensive to maintain.")]),t._v(" "),a("h3",{attrs:{id:"feature-creep"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#feature-creep"}},[t._v("#")]),t._v(" Feature Creep")]),t._v(" "),a("p",[t._v("Feature Creep refers to adding new features that go beyond the core functionality of the product and lead to an unnecessarily high complexity of the product.")]),t._v(" "),a("h3",{attrs:{id:"long-development-time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#long-development-time"}},[t._v("#")]),t._v(" Long development time")]),t._v(" "),a("p",[t._v("The time which could be used to develop necessary features is spent to develop unnecessary features. The product takes longer to deliver.")]),t._v(" "),a("h3",{attrs:{id:"solutions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solutions"}},[t._v("#")]),t._v(" Solutions")]),t._v(" "),a("h3",{attrs:{id:"kiss-keep-it-simple-stupid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kiss-keep-it-simple-stupid"}},[t._v("#")]),t._v(" KISS - Keep it simple, stupid")]),t._v(" "),a("p",[t._v("According to KISS, most systems work the best if they are designed simple. Simplicity should be a primary design goal to reduce complexity. It can be achieved by following the “Single Responsibility Principle” for example.")]),t._v(" "),a("h3",{attrs:{id:"yagni-you-ain-t-gonna-need-it"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yagni-you-ain-t-gonna-need-it"}},[t._v("#")]),t._v(" YAGNI – You Ain’t Gonna Need it")]),t._v(" "),a("p",[t._v("Less is more. Think about every feature, is it really needed? If you can think of any way that it’s YAGNI, leave it away. It’s better to develop it when it’s needed.")]),t._v(" "),a("h3",{attrs:{id:"continuous-refactoring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#continuous-refactoring"}},[t._v("#")]),t._v(" Continuous Refactoring")]),t._v(" "),a("p",[t._v("The product is being improved steadily. With refactoring, we can make sure that the product is being done according to best practice and does not degenerate to a patch work.")])])}),[],!1,null,null,null);s.default=n.exports}}]);