(window.webpackJsonp=window.webpackJsonp||[]).push([[2410],{2819:function(s,t,a){"use strict";a.r(t);var e=a(31),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"strings-and-quoting-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#strings-and-quoting-methods"}},[s._v("#")]),s._v(" Strings and quoting methods")]),s._v(" "),a("h2",{attrs:{id:"string-literal-quoting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-literal-quoting"}},[s._v("#")]),s._v(" String Literal Quoting")]),s._v(" "),a("p",[s._v("String literals imply no escaping or interpolation ( with the exception of quoting string terminators )")]),s._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'This is a string literal\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# emits a literal \\ and n to terminal")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'This literal contains a \\'postraphe '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# emits the ' but not its preceding \\")]),s._v("\n\n")])])]),a("p",[s._v("You can use alternative quoting mechanisms to avoid clashes:")]),s._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("q/This is is a literal \\' <-- 2 characters /")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# prints both \\ and '")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("q^This is is a literal \\' <-- 2 characters ^")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# also")]),s._v("\n\n")])])]),a("p",[s._v('Certain chosen quote characters are "balanced"')]),s._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" This is a literal "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" I contain "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" parens"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# prints inner { }")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"double-quoting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#double-quoting"}},[s._v("#")]),s._v(" Double-quoting")]),s._v(" "),a("p",[s._v("Double-quoted strings use "),a("strong",[s._v("interpolation")]),s._v(" and "),a("strong",[s._v("escaping")]),s._v(" – unlike single-quoted strings. To double-quote a string, use either double quotes "),a("code",[s._v('"')]),s._v(" or the "),a("code",[s._v("qq")]),s._v(" operator.")]),s._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$greeting")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello!\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$greeting")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => Hello! (followed by a linefeed)")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$bush")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"They misunderestimated me."')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('qq/As Bush once said: "$bush"\\n/')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => As Bush once said: "They misunderestimated me." (with linefeed)')]),s._v("\n\n")])])]),a("p",[s._v("The "),a("code",[s._v("qq")]),s._v(" is useful here, to avoid having to escape the quotation marks. Without it, we would have to write...")]),s._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"As Bush once said: \\"$bush\\"\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),a("p",[s._v("... which just isn't as nice.")]),s._v(" "),a("p",[s._v("Perl doesn't limit you to using a slash "),a("code",[s._v("/")]),s._v(" with "),a("code",[s._v("qq")]),s._v("; you can use any (visible) character.")]),s._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" feature "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'say'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("qq/You can use slashes.../")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("qq{...or braces...}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("qq^...or hats...^")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("qq|...or pipes...|")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# say qq ...but not whitespace. ;")]),s._v("\n\n")])])]),a("p",[s._v("You can also interpolate arrays into strings.")]),s._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" feature "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'say'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@letters")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I like these letters: @letters."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => I like these letters: a b c.")]),s._v("\n\n")])])]),a("p",[s._v("By default the values are space-separated – because the special variable "),a("code",[s._v('$"')]),s._v(" defaults to a single space. This can, of course, be changed.")]),s._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" feature "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'say'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@letters")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("local")]),s._v(" $"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" = "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"; say "')]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@letters")]),s._v('"'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a, b, c")]),s._v("\n\n")])])]),a("p",[s._v("If you prefer, you have the option to "),a("code",[s._v("use English")]),s._v(" and change "),a("code",[s._v("$LIST_SEPARATOR")]),s._v(" instead:")]),s._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token vstring string"}},[s._v("v5.18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# English should be avoided on older Perls")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" English"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@letters")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("local")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$LIST_SEPARATOR")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"My favourite letters:\\n\\n@letters"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])]),a("p",[s._v("For anything more complex than this, you should use a loop instead.")]),s._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"My favourite letters:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$letter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@letters")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" - $letter"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])]),a("p",[s._v("Interpolation does "),a("strong",[s._v("not")]),s._v(" work with hashes.")]),s._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" feature "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'say'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("%hash")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This doesn\'t work: %hash"')]),s._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This doesn't work: %hash")]),s._v("\n\n")])])]),a("p",[s._v("Some code abuses interpolation of references – "),a("strong",[s._v("avoid it")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" feature "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'say'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2 + 2 == @{[ 2 + 2 ]}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2 + 2 = 4 (avoid this)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("say")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2 + 2 == ${\\( 2 + 2 )}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2 + 2 = 4 (avoid this)")]),s._v("\n\n")])])]),a("p",[s._v('The so-called "cart operator" causes perl to dereference '),a("code",[s._v("@{ ... }")]),s._v(" the array reference "),a("code",[s._v("[ ... ]")]),s._v(" that contains the expression that you want to interpolate, "),a("code",[s._v("2 + 2")]),s._v(". When you use this trick, Perl builds an anonymous array, then dereferences it and discards it.")]),s._v(" "),a("p",[s._v("The "),a("code",[s._v("${\\( ... )}")]),s._v(" version is somewhat less wasteful, but it still requires allocating memory and it is even harder to read.")]),s._v(" "),a("p",[s._v("Instead, consider writing:")]),s._v(" "),a("ul",[a("li",[a("code",[s._v('say "2 + 2 == " . 2 + 2;')])]),s._v(" "),a("li",[a("code",[s._v('my $result = 2 + 2; say "2 + 2 == $result"')])])]),s._v(" "),a("h2",{attrs:{id:"heredocs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#heredocs"}},[s._v("#")]),s._v(" Heredocs")]),s._v(" "),a("p",[s._v("Large Multi-Line strings are burdensome to write.")]),s._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$variable")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'EOF'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nthis block of text is interpreted literally"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\nno "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'quotes matter, they'")]),s._v("re just text\nonly the trailing left"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("aligned EOF matters"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(".")]),s._v("\nEOF\n\n")])])]),a("p",[s._v("NB: Make sure you ignore stack-overflows syntax highlighter: It is very wrong.")]),s._v(" "),a("p",[s._v("And Interpolated Heredocs work the same way.")]),s._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$variable")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I Want it to End"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nthis block of text is interpreted"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(".")]),s._v("\nquotes"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("nare interpreted"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$interpolations")]),s._v("\nget interpolated"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v(" \nbut still"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" left"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("aligned "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I Want it to End"')]),s._v(" matters"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(".")]),s._v("\nI Want it to End\n\n")])])]),a("p",[s._v('Pending in 5.26.0* is an "Indented Heredoc" Syntax which trims left-padding off for you')]),s._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$variable")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MuchNicer"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    this block of text is interpreted"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(".")]),s._v("\n    quotes"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("\\")]),s._v("nare interpreted"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("and")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$interpolations")]),s._v("\n    get interpolated"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v(" \n    but still"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" left"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("aligned "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I Want it to End"')]),s._v(" matters"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(".")]),s._v("\nMuchNicer\n\n")])])]),a("h2",{attrs:{id:"removing-trailing-newlines"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#removing-trailing-newlines"}},[s._v("#")]),s._v(" Removing trailing newlines")]),s._v(" "),a("p",[s._v("The function "),a("code",[s._v("chomp")]),s._v(" will remove "),a("strong",[s._v("one")]),s._v(" newline character, if present, from each scalar passed to it. "),a("code",[s._v("chomp")]),s._v(" will mutate the original string and will return the number of characters removed")]),s._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$str")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World\\n\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$removed")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" chomp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "Hello World\\n"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$removed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1    ")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# chomp again, removing another newline")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$removed")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" chomp "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "Hello World"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$removed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1    ")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# chomp again, but no newline to remove")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$removed")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" chomp "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "Hello World"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$removed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 0    ")]),s._v("\n\n")])])]),a("p",[s._v("You can also "),a("code",[s._v("chomp")]),s._v(" more than one string at once:")]),s._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@strs")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"World!\\n\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# one newline in first string, two in second")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$removed")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" chomp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@strs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# @strs is now  ("Hello", "World!\\n")')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$removed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$removed")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" chomp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@strs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# @strs is now ("Hello", "World!")')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$removed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1  ")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$removed")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" chomp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@strs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# @strs is still ("Hello", "World!")')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$removed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 0")]),s._v("\n\n")])])]),a("p",[s._v("But usually, no one worries about how many newlines were removed, so "),a("code",[s._v("chomp")]),s._v(" is usually seen in void context, and usually due to having read lines from a file:")]),s._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$line")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" readline "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$fh")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    chomp "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$line")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# now do something with $line")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("my")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@lines")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" readline "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$fh2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nchomp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@lines")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# remove newline from end of each line")]),s._v("\n\n")])])]),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[s._v("#")]),s._v(" Remarks")]),s._v(" "),a("p",[s._v("The version syntax doesn't allow us to guard off versions that don't exist yet, so this is a reminder for somebody to go back and edit them in once it lands(  RE: Perl 5.26 ). The version guards rather need to have a \"future\" classification for tentative features that might be available to people brave enough to do a source checkout.")])])}),[],!1,null,null,null);t.default=n.exports}}]);