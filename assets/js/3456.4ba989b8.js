(window.webpackJsonp=window.webpackJsonp||[]).push([[3456],{3864:function(t,s,a){"use strict";a.r(s);var n=a(31),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"console"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console"}},[t._v("#")]),t._v(" Console")]),t._v(" "),a("h2",{attrs:{id:"console-readline"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-readline"}},[t._v("#")]),t._v(" Console.ReadLine()")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" input "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ReadLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[a("code",[t._v("Console.ReadLine()")]),t._v(" will read the console input from the user, up until the next newline is detected (usually upon pressing the Enter or Return key). Code execution is paused in the current thread until a newline is provided. Afterwards, the next line of code will be executed.")]),t._v(" "),a("h2",{attrs:{id:"console-writeline"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-writeline"}},[t._v("#")]),t._v(" Console.WriteLine()")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" Int32 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v("\nConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' Variable '")]),t._v("\nConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' Integer '")]),t._v("\nConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14159")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' Floating-point number '")]),t._v("\nConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' String '")]),t._v("\nConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' Outputs the value from calling myObject.ToString()")]),t._v("\n\n")])])]),a("p",[t._v("The "),a("code",[t._v("Console.WriteLine()")]),t._v(" method will print the given argument(s) "),a("strong",[t._v("with")]),t._v(" a newline attached at the end. This will print any object supplied, including, but not limited to, strings, integers, variables, floating-point numbers.")]),t._v(" "),a("p",[t._v("When writing objects that are not explicitly called out by the various "),a("code",[t._v("WriteLine")]),t._v(" overloads (that is, you are using the overload that expects a value of type "),a("code",[t._v("Object")]),t._v(", WriteLine will use the "),a("code",[t._v(".ToString()")]),t._v(" method to generate a "),a("code",[t._v("String")]),t._v(" to actually write. Your custom objects should OverRide the "),a("code",[t._v(".ToString")]),t._v(" method and produce something more meaningful than the default implementation (which typically just writes the fully qualified type name).")]),t._v(" "),a("h2",{attrs:{id:"console-read"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-read"}},[t._v("#")]),t._v(" Console.Read()")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" inputCode "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[a("code",[t._v("Console.Read()")]),t._v(" awaits input from the user and, upon receipt, returns an integer value corresponding with the character code of the entered character. If the input stream is ended in some way before input can be obtained, -1 is returned instead.")]),t._v(" "),a("h2",{attrs:{id:"console-readkey"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-readkey"}},[t._v("#")]),t._v(" Console.ReadKey()")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" inputChar "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" ConsoleKeyInfo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ReadKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[a("code",[t._v("Console.ReadKey()")]),t._v(" awaits input from the user and, upon receipt, returns an object of class "),a("code",[t._v("ConsoleKeyInfo")]),t._v(", which holds information relevant to the character which the user provided as input. For detail regarding the information provided, visit the "),a("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/system.consolekeyinfo.aspx",target:"_blank",rel:"noopener noreferrer"}},[t._v("MSDN documentation"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"prototype-of-command-line-prompt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prototype-of-command-line-prompt"}},[t._v("#")]),t._v(" Prototype of command line prompt")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Module")]),t._v(" MainPrompt\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Const")]),t._v(" PromptSymbol "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"TLA > "')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Const")]),t._v(" ApplicationTitle "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GetType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Project"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BaseClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Assembly"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FullName\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REM")]),t._v(" Or you can use a custom string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REM")]),t._v(' Public Const ApplicationTitle As String = "Short name of the application"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" Main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Statement "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" BrokenDownStatement "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Command "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Args "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Result "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v("\n\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ForegroundColor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ConsoleColor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Cyan\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Title "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ApplicationTitle "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" command line console"')]),t._v("\n\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Welcome to "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ApplicationTitle "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"console frontend"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This package is version "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GetType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Project"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BaseClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Assembly"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GetName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ToString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PromptSymbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("While")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n        Statement "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ReadLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        BrokenDownStatement "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Statement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" Args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BrokenDownStatement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        Command "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BrokenDownStatement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" BrokenDownStatement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n            Args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BrokenDownStatement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Case")]),t._v(" Command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ToLower\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"example"')]),t._v("\n                Result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DoSomething"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Example"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"exit"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"quit"')]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Exit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Do")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ver"')]),t._v("\n                Result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This package is version "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GetType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Project"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BaseClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Assembly"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("GetName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ToString\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Else")]),t._v("\n                Result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Command not acknowldged: -"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" Command "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Select")]),t._v("\n        Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" Result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PromptSymbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Loop")]),t._v("\n\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I am exiting, time is "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" DateTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ToString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"u"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Goodbye"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Environment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Module")]),t._v("\n\n")])])]),a("p",[t._v("This prototype generate a basic command line interpreter.")]),t._v(" "),a("p",[t._v("It automatically get the application name and version to communicate to the user.\nFor each input line, it recognize the command and an arbitrary list of arguments, all separated by space.")]),t._v(" "),a("p",[t._v("As a basic example, this code understand "),a("strong",[t._v("ver")]),t._v(", "),a("strong",[t._v("quit")]),t._v(" and "),a("strong",[t._v("exit")]),t._v(" commands.")]),t._v(" "),a("p",[t._v("The parameter "),a("strong",[t._v("Project.BaseClass")]),t._v(" is a class of your project where the Assembly details are set.")]),t._v(" "),a("h2",{attrs:{id:"console-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console-write"}},[t._v("#")]),t._v(" Console.Write()")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" Int32 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v("\nConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' Variable '")]),t._v("\nConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' Integer '")]),t._v("\nConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14159")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' Floating-point number '")]),t._v("\nConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' String '")]),t._v("\n\n")])])]),a("p",[t._v("The "),a("code",[t._v("Console.Write()")]),t._v(" method is identical to the "),a("code",[t._v("Console.WriteLine()")]),t._v(" method except that it prints the given argument(s) "),a("strong",[t._v("without")]),t._v(" a newline attached at the end. This method can be made functionally identical to "),a("code",[t._v("WriteLine")]),t._v(" by adding a newline string to the end of any arguments provided:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[t._v("Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"this is the value"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" Environment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("NewLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);