(window.webpackJsonp=window.webpackJsonp||[]).push([[1136],{1544:function(e,t,i){"use strict";i.r(t);var n=i(31),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"ignoring-files-and-folders"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#ignoring-files-and-folders"}},[e._v("#")]),e._v(" Ignoring Files and Folders")]),e._v(" "),i("p",[e._v("This topic illustrates how to avoid adding unwanted files (or file changes) in a Git repo. There are several ways (global or local "),i("code",[e._v(".gitignore")]),e._v(", "),i("code",[e._v(".git/exclude")]),e._v(", "),i("code",[e._v("git update-index --assume-unchanged")]),e._v(", and "),i("code",[e._v("git update-index --skip-tree")]),e._v("), but keep in mind Git is managing "),i("strong",[e._v("content")]),e._v(", which means: ignoring actually ignores a folder "),i("strong",[e._v("content")]),e._v(" (i.e. files). An empty folder would be ignored by default, since it cannot be added anyway.")]),e._v(" "),i("h2",{attrs:{id:"ignoring-files-and-directories-with-a-gitignore-file"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#ignoring-files-and-directories-with-a-gitignore-file"}},[e._v("#")]),e._v(" Ignoring files and directories with a .gitignore file")]),e._v(" "),i("p",[e._v("You can make Git ignore certain files and directories — that is, exclude them from being tracked by Git — by creating one or more "),i("a",{attrs:{href:"https://git-scm.com/docs/gitignore",target:"_blank",rel:"noopener noreferrer"}},[i("code",[e._v(".gitignore")]),i("OutboundLink")],1),e._v(" files in your repository.")]),e._v(" "),i("p",[e._v("In software projects, "),i("code",[e._v(".gitignore")]),e._v(" typically contains a listing of files and/or directories that are generated during the build process or at runtime.  Entries in the "),i("code",[e._v(".gitignore")]),e._v(" file may include names or paths pointing to:")]),e._v(" "),i("ol",[i("li",[e._v("temporary resources e.g. caches, log files, compiled code, etc.")]),e._v(" "),i("li",[e._v("local configuration files that should not be shared with other developers")]),e._v(" "),i("li",[e._v("files containing secret information, such as login passwords, keys and credentials")])]),e._v(" "),i("p",[e._v("When created in the top level directory, the rules will apply recursively to all files and sub-directories throughout the entire repository. When created in a sub-directory, the rules will apply to that specific directory and its sub-directories.")]),e._v(" "),i("p",[e._v("When a file or directory is ignored, it will not be:")]),e._v(" "),i("ol",[i("li",[e._v("tracked by Git")]),e._v(" "),i("li",[e._v("reported by commands such as "),i("code",[e._v("git status")]),e._v(" or "),i("code",[e._v("git diff")])]),e._v(" "),i("li",[e._v("staged with commands such as "),i("code",[e._v("git add -A")])])]),e._v(" "),i("p",[e._v("In the unusual case that you need to ignore tracked files, special care should be taken. See: "),i("a",{attrs:{href:"http://stackoverflow.com/documentation/git/245/using-a-gitignore-file/1777/ignore-files-that-have-already-been-committed-to-a-git-repository#t=201607211343212958337",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ignore files that have already been committed to a Git repository"),i("OutboundLink")],1),e._v(".")]),e._v(" "),i("h3",{attrs:{id:"examples"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),i("p",[e._v("Here are some generic examples of rules in a "),i("code",[e._v(".gitignore")]),e._v(" file, based on "),i("a",{attrs:{href:"https://en.wikipedia.org/wiki/Glob_(programming)",target:"_blank",rel:"noopener noreferrer"}},[e._v("glob file patterns"),i("OutboundLink")],1),e._v(":")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Lines starting with `#` are comments.")]),e._v("\n\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Ignore files called 'file.ext'")]),e._v("\nfile.ext\n\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Comments can't be on the same line as rules!")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The following line ignores files called 'file.ext # not a comment'")]),e._v("\nfile.ext # not a comment \n\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Ignoring files with full path.")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This matches files in the root directory and subdirectories too.")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# i.e. otherfile.ext will be ignored anywhere on the tree.")]),e._v("\ndir/otherdir/file.ext\notherfile.ext\n\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Ignoring directories")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Both the directory itself and its contents will be ignored.")]),e._v("\nbin/\ngen/\n\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Glob pattern can also be used here to ignore paths with certain characters.")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For example, the below rule will match both build/ and Build/")]),e._v("\n[bB]uild/\n\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Without the trailing slash, the rule will match a file and/or")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a directory, so the following would ignore both a file named `gen`")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and a directory named `gen`, as well as any contents of that directory")]),e._v("\nbin\ngen\n\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Ignoring files by extension")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# All files with these extensions will be ignored in")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# this directory and all its sub-directories.")]),e._v("\n*.apk\n*.class\n\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# It's possible to combine both forms to ignore files with certain")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# extensions in certain directories. The following rules would be")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# redundant with generic rules defined above.")]),e._v("\njava/*.apk\ngen/*.class\n\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To ignore files only at the top level directory, but not in its")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# subdirectories, prefix the rule with a `/`")]),e._v("\n/*.apk\n/*.class\n\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To ignore any directories named DirectoryA ")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in any depth use ** before DirectoryA")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Do not forget the last /, ")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Otherwise it will ignore all files named DirectoryA, rather than directories")]),e._v("\n**/DirectoryA/\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This would ignore ")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# DirectoryA/")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# DirectoryB/DirectoryA/ ")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# DirectoryC/DirectoryB/DirectoryA/")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# It would not ignore a file named DirectoryA, at any level")]),e._v("\n\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To ignore any directory named DirectoryB within a ")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# directory named DirectoryA with any number of ")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# directories in between, use ** between the directories")]),e._v("\nDirectoryA/**/DirectoryB/\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This would ignore ")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# DirectoryA/DirectoryB/ ")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# DirectoryA/DirectoryQ/DirectoryB/ ")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# DirectoryA/DirectoryQ/DirectoryW/DirectoryB/")]),e._v("\n\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To ignore a set of files, wildcards can be used, as can be seen above.")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A sole '*' will ignore everything in your folder, including your .gitignore file.")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To exclude specific files when using wildcards, negate them.")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# So they are excluded from the ignore list:")]),e._v("\n!.gitignore \n\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Use the backslash as escape character to ignore files with a hash (#)")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# (supported since 1.6.2.1)")]),e._v("\n\\#*#\n\n")])])]),i("p",[e._v("Most "),i("code",[e._v(".gitignore")]),e._v(" files are standard across various languages, so to get started, here is set of "),i("a",{attrs:{href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"}},[e._v("sample "),i("code",[e._v(".gitignore")]),e._v(" files"),i("OutboundLink")],1),e._v(" listed by language from which to clone or copy/modify into your project.  Alternatively, for a fresh project you may consider auto-generating a starter file using an "),i("a",{attrs:{href:"https://www.gitignore.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("online tool"),i("OutboundLink")],1),e._v(".")]),e._v(" "),i("h3",{attrs:{id:"other-forms-of-gitignore"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#other-forms-of-gitignore"}},[e._v("#")]),e._v(" Other forms of .gitignore")]),e._v(" "),i("p",[i("code",[e._v(".gitignore")]),e._v(" files are intended to be committed as part of the repository. If you want to ignore certain files without committing the ignore rules, here are some options:")]),e._v(" "),i("ul",[i("li",[e._v("Edit the "),i("code",[e._v(".git/info/exclude")]),e._v(" file (using the same syntax as "),i("code",[e._v(".gitignore")]),e._v("). The rules will be global in the scope of the repository;")]),e._v(" "),i("li",[e._v("Set up "),i("a",{attrs:{href:"http://stackoverflow.com/documentation/git/245/ignoring-files-and-folders/1222/a-global-gitignore-file",target:"_blank",rel:"noopener noreferrer"}},[e._v("a global gitignore file"),i("OutboundLink")],1),e._v(" that will apply ignore rules to all your local repositories:")])]),e._v(" "),i("p",[e._v("Furthermore, you can ignore local changes to tracked files without changing the global git configuration with:")]),e._v(" "),i("ul",[i("li",[i("code",[e._v("git update-index --skip-worktree [<file>...]")]),e._v(":  for minor local modifications")]),e._v(" "),i("li",[i("code",[e._v("git update-index --assume-unchanged [<file>...]")]),e._v(": for production ready, non-changing files upstream")])]),e._v(" "),i("p",[e._v("See "),i("a",{attrs:{href:"http://stackoverflow.com/a/13631525/4531270",target:"_blank",rel:"noopener noreferrer"}},[e._v("more details on differences between the latter flags"),i("OutboundLink")],1),e._v(" and the "),i("a",{attrs:{href:"https://git-scm.com/docs/git-update-index",target:"_blank",rel:"noopener noreferrer"}},[i("code",[e._v("git update-index")]),e._v(" documentation"),i("OutboundLink")],1),e._v(" for further options.")]),e._v(" "),i("h3",{attrs:{id:"cleaning-up-ignored-files"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#cleaning-up-ignored-files"}},[e._v("#")]),e._v(" Cleaning up ignored files")]),e._v(" "),i("p",[e._v("You can use "),i("code",[e._v("git clean -X")]),e._v(" to cleanup ignored files:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("git clean -Xn #display a list of ignored files\ngit clean -Xf #remove the previously displayed files\n\n")])])]),i("p",[e._v("Note: "),i("code",[e._v("-X")]),e._v(" (caps) cleans up "),i("strong",[e._v("only")]),e._v(" ignored files. Use "),i("code",[e._v("-x")]),e._v(" (no caps) to also remove untracked files.")]),e._v(" "),i("p",[e._v("See "),i("a",{attrs:{href:"https://stackoverflow.com/documentation/git/1254/git-clean",target:"_blank",rel:"noopener noreferrer"}},[e._v("the "),i("code",[e._v("git clean")]),e._v(" documentation"),i("OutboundLink")],1),e._v(" for more details.")]),e._v(" "),i("p",[e._v("See "),i("a",{attrs:{href:"https://git-scm.com/docs/gitignore",target:"_blank",rel:"noopener noreferrer"}},[e._v("the Git manual"),i("OutboundLink")],1),e._v(" for more details.")]),e._v(" "),i("h2",{attrs:{id:"checking-if-a-file-is-ignored"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#checking-if-a-file-is-ignored"}},[e._v("#")]),e._v(" Checking if a file is ignored")]),e._v(" "),i("p",[e._v("The "),i("a",{attrs:{href:"https://git-scm.com/docs/git-check-ignore",target:"_blank",rel:"noopener noreferrer"}},[i("code",[e._v("git check-ignore")]),i("OutboundLink")],1),e._v(" command reports on files ignored by Git.")]),e._v(" "),i("p",[e._v("You can pass filenames on the command line, and "),i("code",[e._v("git check-ignore")]),e._v(" will list the filenames that are ignored. For example:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("$ cat .gitignore\n*.o\n"),i("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git check-ignore example.o Readme.md")]),e._v("\nexample.o\n\n")])])]),i("p",[e._v("Here, only *.o files are defined in .gitignore, so Readme.md is not listed in the output of "),i("code",[e._v("git check-ignore")]),e._v(".")]),e._v(" "),i("p",[e._v("If you want to see line of which .gitignore is responsible for ignoring a file, add -v to the git check-ignore command:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[i("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git check-ignore"),i("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" -v")]),e._v(" example.o Readme.md")]),e._v("\n.gitignore:1:*.o        example.o\n\n")])])]),i("p",[e._v("From Git 1.7.6 onwards you can also use "),i("code",[e._v("git status --ignored")]),e._v(" in order to see ignored files. You can find more info on this in the "),i("a",{attrs:{href:"https://git-scm.com/docs/git-status",target:"_blank",rel:"noopener noreferrer"}},[e._v("official documentation"),i("OutboundLink")],1),e._v(" or in "),i("a",{attrs:{href:"http://stackoverflow.com/documentation/git/245/ignoring-files-and-folders/19445/finding-files-ignored-by-gitignore#t=201611211142389191756",target:"_blank",rel:"noopener noreferrer"}},[e._v("Finding files ignored by .gitignore"),i("OutboundLink")],1),e._v(".")]),e._v(" "),i("h2",{attrs:{id:"exceptions-in-a-gitignore-file"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#exceptions-in-a-gitignore-file"}},[e._v("#")]),e._v(" Exceptions in a .gitignore file")]),e._v(" "),i("p",[e._v("If you ignore files by using a pattern but have exceptions, prefix an exclamation mark(!) to the exception. For example:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("*.txt\n!important.txt\n\n")])])]),i("p",[e._v("The above example instructs Git to ignore all files with the "),i("code",[e._v(".txt")]),e._v(" extension except for files named "),i("code",[e._v("important.txt")]),e._v(".")]),e._v(" "),i("p",[e._v("If the file is in an ignored folder, you can "),i("strong",[e._v("NOT")]),e._v(" re-include it so easily:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("folder/\n!folder/*.txt\n\n")])])]),i("p",[e._v("In this example all .txt files in the folder would remain ignored.")]),e._v(" "),i("p",[e._v("The right way is re-include the folder itself on a separate line, then ignore all files in "),i("code",[e._v("folder")]),e._v(" by "),i("code",[e._v("*")]),e._v(", finally re-include the "),i("code",[e._v("*.txt")]),e._v(" in "),i("code",[e._v("folder")]),e._v(", as the following:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("!folder/\nfolder/*\n!folder/*.txt\n\n")])])]),i("p",[i("strong",[e._v("Note")]),e._v(": For file names beginning with an exclamation mark, add two exclamation marks or escape with the "),i("code",[e._v("\\")]),e._v(" character:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("!!includethis\n\\!excludethis\n\n")])])]),i("h2",{attrs:{id:"a-global-gitignore-file"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#a-global-gitignore-file"}},[e._v("#")]),e._v(" A global .gitignore file")]),e._v(" "),i("p",[e._v("To have Git ignore certain files across all repositories you can "),i("a",{attrs:{href:"https://help.github.com/articles/ignoring-files/#create-a-global-gitignore",target:"_blank",rel:"noopener noreferrer"}},[e._v("create a global .gitignore"),i("OutboundLink")],1),e._v(" with the following command in your terminal or command prompt:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[i("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git config"),i("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --global")]),e._v(" core.excludesfile <Path_To_Global_gitignore_file>")]),e._v("\n\n")])])]),i("p",[e._v("Git will now use this in addition to each repository's own "),i("a",{attrs:{href:"https://git-scm.com/docs/gitignore",target:"_blank",rel:"noopener noreferrer"}},[e._v(".gitignore"),i("OutboundLink")],1),e._v(" file. Rules for this are:")]),e._v(" "),i("ul",[i("li",[e._v("If the local "),i("code",[e._v(".gitignore")]),e._v(" file explicitly includes a file while the global "),i("code",[e._v(".gitignore")]),e._v(" ignores it, the local "),i("code",[e._v(".gitignore")]),e._v(" takes priority (the file will be included)")]),e._v(" "),i("li",[e._v("If the repository is cloned on multiple machines, then the global "),i("code",[e._v(".gigignore")]),e._v(" must be loaded on all machines or at least include it, as the ignored files will be pushed up to the repo while the PC with the global "),i("code",[e._v(".gitignore")]),e._v(" wouldn't update it. This is why a repo specific "),i("code",[e._v(".gitignore")]),e._v(" is a better idea than a global one if the project is worked on by a team")])]),e._v(" "),i("p",[e._v("This file is a good place to keep platform, machine or user specific ignores, e.g. OSX "),i("code",[e._v(".DS_Store")]),e._v(", Windows "),i("code",[e._v("Thumbs.db")]),e._v(" or Vim "),i("code",[e._v("*.ext~")]),e._v(" and "),i("code",[e._v("*.ext.swp")]),e._v(" ignores if you don't want to keep those in the repository. So one team member working on OS X can add all "),i("code",[e._v(".DS_STORE")]),e._v(" and "),i("code",[e._v("_MACOSX")]),e._v(" (which is actually useless), while another team member on Windows can ignore all "),i("code",[e._v("thumbs.bd")])]),e._v(" "),i("h2",{attrs:{id:"ignore-files-that-have-already-been-committed-to-a-git-repository"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#ignore-files-that-have-already-been-committed-to-a-git-repository"}},[e._v("#")]),e._v(" Ignore files that have already been committed to a Git repository")]),e._v(" "),i("p",[e._v("If you have already added a file to your Git repository and now want to "),i("strong",[e._v("stop tracking it")]),e._v(" (so that it won't be present in future commits), you can remove it from the index:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("git rm --cached <file>\n\n")])])]),i("p",[e._v("This will remove the file from the repository and prevent further changes from being tracked by Git. The "),i("code",[e._v("--cached")]),e._v(" option will make sure that the file is not physically deleted.")]),e._v(" "),i("p",[e._v("Note that previously added contents of the file will still be visible via the Git history.")]),e._v(" "),i("p",[e._v("Keep in mind that if anyone else pulls from the repository after you removed the file from the index, "),i("strong",[e._v("their copy will be physically deleted")]),e._v(".")]),e._v(" "),i("p",[e._v('You can make Git pretend that the working directory version of the file is up to date and read the index version instead (thus ignoring changes in it) with "'),i("a",{attrs:{href:"https://www.kernel.org/pub/software/scm/git/docs/git-update-index.html#_skip_worktree_bit",target:"_blank",rel:"noopener noreferrer"}},[e._v("skip worktree"),i("OutboundLink")],1),e._v('" bit:')]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("git update-index --skip-worktree <file>\n\n")])])]),i("p",[e._v("Writing is not affected by this bit, content safety is still first priority. You will never lose your precious ignored changes; on the other hand this bit conflicts with stashing: to remove this bit, use")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("git update-index --no-skip-worktree <file>\n\n")])])]),i("p",[e._v("It is sometimes "),i("strong",[i("strong",[e._v("wrongly")])]),e._v(" recommended to lie to Git and have it assume that file is unchanged without examining it.  It looks at first glance as ignoring any further changes to the file, without removing it from its index:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("git update-index --assume-unchanged <file>\n\n")])])]),i("p",[e._v("This will force git to ignore any change made in the file (keep in mind that if you pull any changes to this file, or you stash it, "),i("strong",[e._v("your ignored changes will be lost")]),e._v(")")]),e._v(" "),i("p",[e._v('If you want git to "care" about this file again, run the following command:')]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("git update-index --no-assume-unchanged <file>\n\n")])])]),i("h2",{attrs:{id:"ignore-files-locally-without-committing-ignore-rules"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#ignore-files-locally-without-committing-ignore-rules"}},[e._v("#")]),e._v(" Ignore files locally without committing ignore rules")]),e._v(" "),i("p",[i("code",[e._v(".gitignore")]),e._v(" ignores files locally, but it is intended to be committed to the repository and shared with other contributors and users. You can set a global "),i("code",[e._v(".gitignore")]),e._v(", but then all your repositories would share those settings.")]),e._v(" "),i("p",[e._v("If you want to ignore certain files in a repository locally and not make the file part of any repository, edit "),i("code",[e._v(".git/info/exclude")]),e._v(" inside your repository.")]),e._v(" "),i("p",[e._v("For example:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# these files are only ignored on this repo")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# these rules are not shared with anyone")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# as they are personal                                              ")]),e._v("\ngtk_tests.py\ngui/gtk/tests/*\nlocalhost\npushReports.py\nserver/\n\n")])])]),i("h2",{attrs:{id:"ignoring-a-file-in-any-directory"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#ignoring-a-file-in-any-directory"}},[e._v("#")]),e._v(" Ignoring a file in any directory")]),e._v(" "),i("p",[e._v("To ignore a file "),i("code",[e._v("foo.txt")]),e._v(" in "),i("strong",[e._v("any")]),e._v(" directory you should just write its name:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("foo.txt # matches all files "),i("span",{pre:!0,attrs:{class:"token string"}},[e._v("'foo.txt'")]),e._v(" in any directory\n\n")])])]),i("p",[e._v("If you want to ignore the file only in part of the tree, you can specify the subdirectories of a specific directory with "),i("code",[e._v("**")]),e._v(" pattern:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("bar/**/foo.txt # matches all files "),i("span",{pre:!0,attrs:{class:"token string"}},[e._v("'foo.txt'")]),e._v(" in "),i("span",{pre:!0,attrs:{class:"token string"}},[e._v("'bar'")]),e._v(" and all subdirectories\n\n")])])]),i("p",[e._v("Or you can create a "),i("code",[e._v(".gitignore")]),e._v(" file in the "),i("code",[e._v("bar/")]),e._v(" directory. Equivalent to the previous example would be creating file "),i("code",[e._v("bar/.gitignore")]),e._v(" with these contents:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("foo.txt # matches all files "),i("span",{pre:!0,attrs:{class:"token string"}},[e._v("'foo.txt'")]),e._v(" in any directory under bar/\n\n")])])]),i("h2",{attrs:{id:"ignoring-subsequent-changes-to-a-file-without-removing-it"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#ignoring-subsequent-changes-to-a-file-without-removing-it"}},[e._v("#")]),e._v(" Ignoring subsequent changes to a file (without removing it)")]),e._v(" "),i("p",[e._v("Sometimes you want to have a file held in Git but ignore subsequent changes.")]),e._v(" "),i("p",[e._v("Tell Git to ignore changes to a file or directory using "),i("code",[e._v("update-index")]),e._v(":")]),e._v(" "),i("p",[e._v("The above command instructs Git to assume "),i("code",[e._v("my-file.txt")]),e._v(" hasn't been changed, and not to check or report changes. The file is still present in the repository.")]),e._v(" "),i("p",[e._v("This can be useful for providing defaults and allowing local environment overrides, e.g.:")]),e._v(" "),i("h2",{attrs:{id:"ignoring-files-in-subfolders-multiple-gitignore-files"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#ignoring-files-in-subfolders-multiple-gitignore-files"}},[e._v("#")]),e._v(" Ignoring files in subfolders (Multiple gitignore files)")]),e._v(" "),i("p",[e._v("Suppose you have a repository structure like this:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("examples/\n    output.log\nsrc/\n    <files not shown>\n    output.log\nREADME.md\n\n")])])]),i("p",[i("code",[e._v("output.log")]),e._v(" in the examples directory is valid and required for the project to gather an understanding while the one beneath "),i("code",[e._v("src/")]),e._v(" is created while debugging and should not be in the history or part of the repository.")]),e._v(" "),i("p",[e._v("There are two ways to ignore this file. You can place an absolute path into the "),i("code",[e._v(".gitignore")]),e._v(" file at the root of the working directory:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# /.gitignore")]),e._v("\nsrc/output.log\n\n")])])]),i("p",[e._v("Alternatively, you can create a "),i("code",[e._v(".gitignore")]),e._v(" file in the "),i("code",[e._v("src/")]),e._v(" directory and ignore the file that is relative to this "),i("code",[e._v(".gitignore")]),e._v(":")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# /src/.gitignore")]),e._v("\noutput.log\n\n")])])]),i("h2",{attrs:{id:"prefilled-gitignore-templates"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#prefilled-gitignore-templates"}},[e._v("#")]),e._v(" Prefilled .gitignore Templates")]),e._v(" "),i("p",[e._v("If you are unsure which rules to list in your "),i("code",[e._v(".gitignore")]),e._v(" file, or you just want to add generally accepted exceptions to your project, you can choose or generate a "),i("code",[e._v(".gitignore")]),e._v(" file:")]),e._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"https://www.gitignore.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.gitignore.io/"),i("OutboundLink")],1)]),e._v(" "),i("li",[i("a",{attrs:{href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/github/gitignore"),i("OutboundLink")],1)])]),e._v(" "),i("p",[e._v("Many hosting services such as GitHub and BitBucket offer the ability to generate "),i("code",[e._v(".gitignore")]),e._v(" files based upon the programming languages and IDEs you may be using:")]),e._v(" "),i("p",[i("a",{attrs:{href:"http://i.stack.imgur.com/WfT5z.png",target:"_blank",rel:"noopener noreferrer"}},[i("img",{attrs:{src:"http://i.stack.imgur.com/WfT5z.png",alt:"GitHub .gitignore dropdown"}}),i("OutboundLink")],1)]),e._v(" "),i("h2",{attrs:{id:"create-an-empty-folder"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#create-an-empty-folder"}},[e._v("#")]),e._v(" Create an Empty Folder")]),e._v(" "),i("p",[e._v("It is not possible to add and commit an empty folder in Git due to the fact that Git manages "),i("em",[e._v("files")]),e._v(" and attaches their directory to them, which slims down commits and improves speed. To get around this, there are two methods:")]),e._v(" "),i("p",[e._v("Method one: "),i("code",[e._v(".gitkeep")])]),e._v(" "),i("p",[e._v("One hack to get around this is to use a "),i("code",[e._v(".gitkeep")]),e._v(" file to register the folder for Git. To do this, just create the required directory and add a "),i("code",[e._v(".gitkeep")]),e._v(" file to the folder. This file is blank and doesn't serve any purpose other than to just register the folder. To do this in Windows (which has awkward file naming conventions) just open git bash in the directory and run the command:")]),e._v(" "),i("blockquote"),e._v(" "),i("p",[e._v("$ touch .gitkeep")]),e._v(" "),i("p",[e._v("This command just makes a blank "),i("code",[e._v(".gitkeep")]),e._v(" file in the current directory")]),e._v(" "),i("p",[e._v("Method two: "),i("code",[e._v("dummy.txt")])]),e._v(" "),i("p",[e._v("Another hack for this is very similar to the above and the same steps can be followed, but instead of a "),i("code",[e._v(".gitkeep")]),e._v(", just use a "),i("code",[e._v("dummy.txt")]),e._v(" instead. This has the added bonus of being able to easily create it in Windows using the context menu. And you get to leave funny messages in them too.You can also use "),i("code",[e._v(".gitkeep")]),e._v(" file to track the empty directory. "),i("code",[e._v(".gitkeep")]),e._v(" normally is an empty file that is added to track the empty directoy.")]),e._v(" "),i("h2",{attrs:{id:"finding-files-ignored-by-gitignore"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#finding-files-ignored-by-gitignore"}},[e._v("#")]),e._v(" Finding files ignored by .gitignore")]),e._v(" "),i("p",[e._v("You can list all files ignored by git in current directory with command:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("git status --ignored\n\n")])])]),i("p",[e._v("So if we have repository structure like this:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v(".git\n.gitignore\n./example_1\n./dir/example_2\n./example_2\n\n")])])]),i("p",[e._v("...and .gitignore file containing:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("example_2\n\n")])])]),i("p",[e._v("...than result of the command will be:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[i("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git status"),i("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --ignored")])]),e._v("\n\nOn branch master\n\nInitial commit\n\nUntracked files:\n  (use "),i("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git add <file>..."')]),e._v(" to include in what will be committed)\n\n.gitignore\n.example_1\n\nIgnored files:\n  (use "),i("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git add -f <file>..."')]),e._v(" to include in what will be committed)\n\ndir/\nexample_2\n\n")])])]),i("p",[e._v("If you want to list recursively ignored files in directories, you have to use additional parameter - "),i("code",[e._v("--untracked-files=all")])]),e._v(" "),i("p",[e._v("Result will look like this:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[i("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git status"),i("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --ignored")]),i("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --untracked")]),e._v("-files=all")]),e._v("\nOn branch master\n\nInitial commit\n\nUntracked files:\n  (use "),i("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git add <file>..."')]),e._v(" to include in what will be committed)\n\n.gitignore\nexample_1\n\nIgnored files:\n  (use "),i("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git add -f <file>..."')]),e._v(" to include in what will be committed)\n\ndir/example_2\nexample_2\n\n")])])]),i("h2",{attrs:{id:"ignoring-only-part-of-a-file-stub"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#ignoring-only-part-of-a-file-stub"}},[e._v("#")]),e._v(" Ignoring only part of a file [stub]")]),e._v(" "),i("p",[e._v("Sometimes you may want to have local changes in a file you don't want to commit or publish. Ideally local settings should be concentrated in a separate file that can be placed into "),i("code",[e._v(".gitignore")]),e._v(", but sometimes as a short-term solution it can be helpful to have something local in a checked-in file.")]),e._v(" "),i("p",[e._v('You can make Git "unsee" those lines using clean filter. They won\'t even show up in diffs.')]),e._v(" "),i("p",[e._v("Suppose here is snippet from file "),i("code",[e._v("file1.c")]),e._v(":")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("struct settings s;\ns.host = "),i("span",{pre:!0,attrs:{class:"token string"}},[e._v('"localhost"')]),e._v(";\ns.port = 5653;\ns.auth = 1;\ns.port = 15653; // NOCOMMIT\ns.debug = 1; // NOCOMMIT\ns.auth = 0; // NOCOMMIT\n\n")])])]),i("p",[e._v("You don't want to publish "),i("code",[e._v("NOCOMMIT")]),e._v(" lines anywhere.")]),e._v(" "),i("p",[e._v('Create "nocommit" filter by adding this to Git config file like '),i("code",[e._v(".git/config")]),e._v(":")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("[filter "),i("span",{pre:!0,attrs:{class:"token string"}},[e._v('"nocommit"')]),e._v("]\n    clean=grep -v NOCOMMIT\n\n")])])]),i("p",[e._v("Add (or create) this to "),i("code",[e._v(".git/info/attributes")]),e._v(" or "),i("code",[e._v(".gitmodules")]),e._v(":")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("file1.c filter=nocommit\n\n")])])]),i("p",[e._v("And your NOCOMMIT lines are hidden from Git.")]),e._v(" "),i("p",[e._v("Caveats:")]),e._v(" "),i("ul",[i("li",[e._v("Using clean filter slows down processing of files, especially on Windows.")]),e._v(" "),i("li",[e._v("The ignored line may disappear from file when Git updates it. It can be counteracted with a smudge filter, but it is trickier.")]),e._v(" "),i("li",[e._v("Not tested on Windows")])]),e._v(" "),i("h2",{attrs:{id:"ignoring-changes-in-tracked-files-stub"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#ignoring-changes-in-tracked-files-stub"}},[e._v("#")]),e._v(" Ignoring changes in tracked files. [stub]")]),e._v(" "),i("p",[i("a",{attrs:{href:"https://git-scm.com/docs/gitignore",target:"_blank",rel:"noopener noreferrer"}},[e._v(".gitignore"),i("OutboundLink")],1),e._v(" and "),i("code",[e._v(".git/info/exclude")]),e._v(" work only for untracked files.")]),e._v(" "),i("p",[e._v("To set ignore flag on a tracked file, use the command "),i("a",{attrs:{href:"https://git-scm.com/docs/git-update-index",target:"_blank",rel:"noopener noreferrer"}},[e._v("update-index"),i("OutboundLink")],1),e._v(":")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("git update-index --skip-worktree myfile.c\n\n")])])]),i("p",[e._v("To revert this, use:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("git update-index --no-skip-worktree myfile.c\n\n")])])]),i("p",[e._v("You can add this snippet to your global "),i("a",{attrs:{href:"https://git-scm.com/docs/git-config",target:"_blank",rel:"noopener noreferrer"}},[e._v("git config"),i("OutboundLink")],1),e._v(" to have more convenient "),i("code",[e._v("git hide")]),e._v(", "),i("code",[e._v("git unhide")]),e._v(" and "),i("code",[e._v("git hidden")]),e._v(" commands:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("[alias]\n    hide   = update-index --skip-worktree\n    unhide = update-index --no-skip-worktree\n    hidden  = "),i("span",{pre:!0,attrs:{class:"token string"}},[e._v('"!git ls-files -v | grep ^[hsS] | cut -c 3-"')]),e._v("\n\n")])])]),i("p",[e._v("You can also use the option --assume-unchanged with the update-index function")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("git update-index --assume-unchanged <file>\n\n")])])]),i("p",[e._v("If you want to watch this file again for the changes, use")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[e._v("git update-index --no-assume-unchanged <file>\n\n")])])]),i("p",[e._v("When --assume-unchanged flag is specified, the user promises not to change the file and allows Git to assume that the working tree file matches what is recorded in the index.Git will fail in case it needs to modify this file in the index e.g. when merging in a commit; thus, in case the assumed-untracked file is changed upstream, you will need to handle the situation manually.The focus lies on performance in this case.")]),e._v(" "),i("p",[e._v("While --skip-worktree flag is useful when you instruct git not to touch a specific file ever because the file is going to be changed locally and you don't want to accidentally commit the changes (i.e configuration/properties file configured for a particular environment). Skip-worktree takes precedence over assume-unchanged when both are set.")]),e._v(" "),i("h2",{attrs:{id:"clear-already-committed-files-but-included-in-gitignore"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#clear-already-committed-files-but-included-in-gitignore"}},[e._v("#")]),e._v(" Clear already committed files, but included in .gitignore")]),e._v(" "),i("p",[e._v("Sometimes it happens that a file was being tracked by git, but in a later point in time was added to .gitignore, in order to stop tracking it. It's a very common scenario to forget to clean up such files before its addition to .gitignore. In this case, the old file will still be hanging around in the repository.")]),e._v(" "),i("p",[e._v('To fix this problem, one could perform a "dry-run" removal of everything in the repository, followed by re-adding all the files back. As long as you don\'t have pending changes and the '),i("code",[e._v("--cached")]),e._v(" parameter is passed, this command is fairly safe to run:")]),e._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Remove everything from the index (the files will stay in the file system) ")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git rm"),i("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" -r")]),i("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --cached")]),e._v(" .")]),e._v("\n\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Re-add everything (they'll be added in the current state, changes included)")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git add .")]),e._v("\n\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Commit, if anything changed. You should see only deletions")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git commit"),i("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" -m")]),e._v(" ")]),i("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Remove all files that are in the .gitignore'")]),e._v("\n\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Update the remote")]),e._v("\n"),i("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git push origin master")]),e._v("\n\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);