(window.webpackJsonp=window.webpackJsonp||[]).push([[1160],{1568:function(t,e,i){"use strict";i.r(e);var a=i(31),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"using-a-gitattributes-file"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#using-a-gitattributes-file"}},[t._v("#")]),t._v(" Using a .gitattributes file")]),t._v(" "),i("h2",{attrs:{id:"automatic-line-ending-normalization"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#automatic-line-ending-normalization"}},[t._v("#")]),t._v(" Automatic Line Ending Normalization")]),t._v(" "),i("p",[t._v("Create a "),i("code",[t._v(".gitattributes")]),t._v(" file in the project root containing:")]),t._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[t._v("* text=auto\n\n")])])]),i("p",[t._v("This will result in all text files (as identified by Git) being committed with LF, but checked out according to the host operating system default.")]),t._v(" "),i("p",[t._v("This is equivalent to the recommended "),i("code",[t._v("core.autocrlf")]),t._v(" defaults of:")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("input")]),t._v(" on Linux/macOS")]),t._v(" "),i("li",[i("code",[t._v("true")]),t._v(" on Windows")])]),t._v(" "),i("h2",{attrs:{id:"identify-binary-files"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#identify-binary-files"}},[t._v("#")]),t._v(" Identify Binary Files")]),t._v(" "),i("p",[t._v("Git is pretty good at identifying binary files, but you can explicitly specify which files are binary. Create a "),i("code",[t._v(".gitattributes")]),t._v(" file in the project root containing:")]),t._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[t._v("*.png binary\n\n")])])]),i("p",[i("code",[t._v("binary")]),t._v(" is a built-in macro attribute equivalent to "),i("code",[t._v("-diff -merge -text")]),t._v(".")]),t._v(" "),i("h2",{attrs:{id:"disable-line-ending-normalization"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#disable-line-ending-normalization"}},[t._v("#")]),t._v(" Disable Line Ending Normalization")]),t._v(" "),i("p",[t._v("Create a "),i("code",[t._v(".gitattributes")]),t._v(" file in the project root containing:")]),t._v(" "),i("div",{staticClass:"language-git extra-class"},[i("pre",{pre:!0,attrs:{class:"language-git"}},[i("code",[t._v("* -text\n\n")])])]),i("p",[t._v("This is equivalent to setting "),i("code",[t._v("core.autocrlf = false")]),t._v(".")]),t._v(" "),i("h2",{attrs:{id:"prefilled-gitattribute-templates"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#prefilled-gitattribute-templates"}},[t._v("#")]),t._v(" Prefilled .gitattribute Templates")]),t._v(" "),i("p",[t._v("If you are unsure which rules to list in your "),i("code",[t._v(".gitattributes")]),t._v(" file, or you just want to add generally accepted attributes to your project, you can shoose or generate a "),i("code",[t._v(".gitattributes")]),t._v(" file at:")]),t._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"https://gitattributes.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://gitattributes.io/"),i("OutboundLink")],1)]),t._v(" "),i("li",[i("a",{attrs:{href:"https://github.com/alexkaratarakis/gitattributes",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/alexkaratarakis/gitattributes"),i("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);