(window.webpackJsonp=window.webpackJsonp||[]).push([[3492],{3900:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"threading"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threading"}},[t._v("#")]),t._v(" Threading")]),t._v(" "),a("h2",{attrs:{id:"performing-thread-safe-calls-using-control-invoke"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#performing-thread-safe-calls-using-control-invoke"}},[t._v("#")]),t._v(" Performing thread-safe calls using Control.Invoke()")]),t._v(" "),a("p",[t._v("Using the "),a("code",[t._v("Control.Invoke()")]),t._v(" method you may move the execution of a method or function from a background thread to the thread that the control was created on, which is usually the UI (User Interface) thread. By doing so your code will be queued to run on the control's thread instead, which removes the possibility of concurrency.")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("Control.InvokeRequired")]),t._v(" property should also be checked in order to determine whether you need to invoke, or if the code is already running on the same thread as the control.")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("Invoke()")]),t._v(" method takes a delegate as its first parameter. A delegate holds the reference, parameter list and return type to another method.")]),t._v(" "),a("p",[t._v("In Visual Basic 2010 (10.0) or higher, "),a("strong",[t._v("lambda expressions")]),t._v(" can be used to create a delegate method on the fly:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" LogTextBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("InvokeRequired "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n    LogTextBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Invoke"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" LogTextBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AppendText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Check passed"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Else")]),t._v("\n    LogTextBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AppendText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Check passed"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n\n")])])]),a("p",[t._v("Whereas in Visual Basic 2008 (9.0) or lower, you have to declare the delegate on your own:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Delegate")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" AddLogText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ByVal")]),t._v(" Text "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" LogTextBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("InvokeRequired "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n    LogTextBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Invoke"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("New")]),t._v(" AddLogText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AddressOf")]),t._v(" UpdateLog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Check passed"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Else")]),t._v("\n    UpdateLog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Check passed"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" UpdateLog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ByVal")]),t._v(" Text "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    LogTextBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AppendText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"performing-thread-safe-calls-using-async-await"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#performing-thread-safe-calls-using-async-await"}},[t._v("#")]),t._v(" Performing thread-safe calls using Async/Await")]),t._v(" "),a("p",[t._v("If we try to change an object on the UI thread from a different thread we will get a cross-thread operation exception:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" Button_Click"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sender "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" EventArgs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Handles")]),t._v(" MyButton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Click\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' Cross thread-operation exception as the assignment is executed on a different thread")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' from the UI one:")]),t._v("\n    Task"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" MyButton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CurrentThread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ManagedThreadId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),a("p",[t._v("Before "),a("strong",[t._v("VB 14.0")]),t._v(" and "),a("strong",[t._v(".NET 4.5")]),t._v(" the solution was invoking the assignment on and object living on the UI thread:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" Button_Click"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sender "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" EventArgs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Handles")]),t._v(" MyButton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Click\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' This will run the conde on the UI thread:")]),t._v("\n    MyButton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Invoke"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" MyButton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CurrentThread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ManagedThreadId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),a("p",[t._v("With "),a("strong",[t._v("VB 14.0")]),t._v(", we can run a "),a("code",[t._v("Task")]),t._v(" on a different thread and then have the context restored once the execution is complete and then perform the assignment with Async/Await:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Private")]),t._v(" Async "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" Button_Click"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sender "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" EventArgs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Handles")]),t._v(" MyButton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Click\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' This will run the code on a different thread then the context is restored")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' so the assignment happens on the UI thread:")]),t._v("\n    MyButton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Await Task"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" Thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CurrentThread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ManagedThreadId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);