(window.webpackJsonp=window.webpackJsonp||[]).push([[593],{1001:function(e,t,n){"use strict";n.r(t);var a=n(31),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"side-effects"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#side-effects"}},[e._v("#")]),e._v(" Side Effects")]),e._v(" "),n("h2",{attrs:{id:"pre-post-increment-decrement-operators"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pre-post-increment-decrement-operators"}},[e._v("#")]),e._v(" Pre/Post Increment/Decrement operators")]),e._v(" "),n("p",[e._v("In C, there are two unary operators - '++' and '--' that are very common source of confusion. The operator "),n("code",[e._v("++")]),e._v(" is called the "),n("strong",[e._v("increment operator")]),e._v(" and the operator "),n("code",[e._v("--")]),e._v(" is called the "),n("strong",[e._v("decrement operator")]),e._v(". Both of them can be used used in either "),n("strong",[e._v("prefix")]),e._v(" form or "),n("strong",[e._v("postfix")]),e._v(" form. The syntax for prefix form for "),n("code",[e._v("++")]),e._v(" operator is "),n("code",[e._v("++operand")]),e._v(" and the syntax for postfix form is "),n("code",[e._v("operand++")]),e._v(". When used in the prefix form, the operand is incremented first by "),n("code",[e._v("1")]),e._v(" and the resultant value of the operand is used in the evaluation of the expression. Consider the following example:")]),e._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nn "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* x is incremented  by 1(x=6), and result is assigned to n(6) */")]),e._v("\n         "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* this is a short form for two statements: */")]),e._v("\n         "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* x = x + 1; */")]),e._v(" \n         "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* n = x ; */")]),e._v("\n\n")])])]),n("p",[e._v("When used in the postfix form, the operand's current value is used in the expression and then the value of the operand is incremented by "),n("code",[e._v("1")]),e._v(". Consider the following example:")]),e._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nn "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" x"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* value of x(5) is assigned first to n(5), and then x is incremented by 1; x(6) */")]),e._v("\n         "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* this is a short form for two statements: */")]),e._v("\n         "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* n = x; */")]),e._v("\n         "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* x = x + 1; */")]),e._v("\n\n")])])]),n("p",[e._v("The working of the decrement operator "),n("code",[e._v("--")]),e._v(" can be understood similarly.")]),e._v(" "),n("p",[e._v("The following code demonstrates what each one does")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\n   int main()\n    {\n        int a, b, x = 42;\n        a = ++x; /* a and x are 43 */\n        b = x++; /* b is 43, x is 44 */\n        a = x--; /* a is is 44, x is 43 */\n        b = --x; /* b and x are 42 */\n        \n        return 0;\n    }\n\n")])])]),n("p",[e._v("From the above it is clear that post operators return the current value of a variable and "),n("strong",[e._v("then")]),e._v(" modify it, but pre operators modify the variable and "),n("strong",[e._v("then")]),e._v(" return the modified value.")]),e._v(" "),n("p",[e._v("In all versions of C, the order of evaluation of pre and post operators are not defined, hence the following code can return unexpected outputs:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\n   int main()\n    {\n        int a, x = 42;\n        a = x++ + x; /* wrong */\n        a = x + x; /* right */\n        ++x;\n\n        int ar[10];\n        x = 0;\n        ar[x] = x++; /* wrong */\n        ar[x++] = x; /* wrong */\n        ar[x] = x; /* right */\n        ++x;\n        return 0;\n    }\n\n")])])]),n("p",[e._v("Note that it is also good practice to use pre over post operators when used alone in a statement. Look at the above code for this.")]),e._v(" "),n("p",[e._v("Note also, that when a function is called, all side effects on arguments must take place before the function runs.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\n   int foo(int x)\n    {\n        return x;\n    }\n\n    int main()\n    {\n        int a = 42;\n        int b = foo(a++);  /* This returns 43, even if it seems like it should return 42 */\n        return 0;\n    }\n\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);