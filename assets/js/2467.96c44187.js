(window.webpackJsonp=window.webpackJsonp||[]).push([[2467],{2875:function(t,a,s){"use strict";s.r(a);var e=s(31),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"imagick"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#imagick"}},[t._v("#")]),t._v(" Imagick")]),t._v(" "),s("h2",{attrs:{id:"first-steps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#first-steps"}},[t._v("#")]),t._v(" First Steps")]),t._v(" "),s("p",[s("strong",[t._v("Installation")])]),t._v(" "),s("p",[s("strong",[s("strong",[t._v("Using apt on Debian based systems")])])]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[t._v("sudo apt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("get install php5"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("imagick\n\n")])])]),s("p",[s("strong",[s("strong",[t._v("Using Homebrew on OSX/macOs")])])]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[t._v("brew install imagemagick\n\n")])])]),s("p",[t._v("To see the dependencies installed using the "),s("code",[t._v("brew")]),t._v(" method, visit "),s("a",{attrs:{href:"http://brewformulas.org/Imagemagick",target:"_blank",rel:"noopener noreferrer"}},[t._v("brewformulas.org/Imagemagick"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[s("strong",[s("strong",[t._v("Using binary releases")])])]),t._v(" "),s("p",[t._v("Instructions on "),s("a",{attrs:{href:"https://www.imagemagick.org/script/binary-releases.php#macosx",target:"_blank",rel:"noopener noreferrer"}},[t._v("imagemagick website"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("Usage")])]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$imagen")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Imagick")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'imagen.jpg'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$imagen")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thumbnailImage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//if you put 0 in the parameter aspect ratio is maintained")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$imagen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("?>")])]),t._v("\n\n")])])]),s("h2",{attrs:{id:"convert-image-into-base64-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#convert-image-into-base64-string"}},[t._v("#")]),t._v(" Convert Image into base64 String")]),t._v(" "),s("p",[t._v("This example is how to turn an image into a Base64 string (i.e. a string you can use directly in a "),s("code",[t._v("src")]),t._v(" attribute of an "),s("code",[t._v("img")]),t._v(" tag). This example specifically uses the "),s("a",{attrs:{href:"http://php.net/manual/en/intro.imagick.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("Imagick"),s("OutboundLink")],1),t._v(" library (there are others available, such as "),s("a",{attrs:{href:"http://php.net/manual/en/intro.image.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("GD"),s("OutboundLink")],1),t._v(" as well).")]),t._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token php language-php"}},[s("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * This loads in the file, image.jpg for manipulation. \n * The filename path is releative to the .php file containing this code, so\n * in this example, image.jpg should live in the same directory as our script.\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$img")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Imagick")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'image.jpg'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * This resizes the image, to the given size in the form of width, height.\n * If you want to change the resolution of the image, rather than the size\n * then $img->resampleimage(320, 240) would be the right function to use.\n *\n * Note that for the second parameter, you can set it to 0 to maintain the\n * aspect ratio of the original image.\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$img")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resizeImage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("320")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("240")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * This returns the unencoded string representation of the image\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$imgBuff")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$img")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getimageblob")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * This clears the image.jpg resource from our $img object and destroys the\n * object. Thus, freeing the system resources allocated for doing our image\n * manipulation.\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$img")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * This creates the base64 encoded version of our unencoded string from\n * earlier. It is then output as an image to the page.\n * \n * Note, that in the src attribute, the image/jpeg part may change based on\n * the image type you're using (i.e. png, jpg etc).\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$img")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("base64_encode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$imgBuff")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[t._v("\"<img alt='Embedded Image' src='data:image/jpeg;base64,"),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$img")])]),t._v("' />\"")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);