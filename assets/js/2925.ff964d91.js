(window.webpackJsonp=window.webpackJsonp||[]).push([[2925],{3332:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"pattern-matching-and-replacement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pattern-matching-and-replacement"}},[t._v("#")]),t._v(" Pattern Matching and Replacement")]),t._v(" "),a("p",[t._v("This topic covers matching string patterns, as well as extracting or replacing them. For details on defining complicated patterns see "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/r/5748",target:"_blank",rel:"noopener noreferrer"}},[t._v("Regular Expressions"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"finding-matches"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finding-matches"}},[t._v("#")]),t._v(" Finding Matches")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# example data")]),t._v("\ntest_sentences "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The quick brown fox"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jumps over the lazy dog"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   \n\n")])])]),a("h3",{attrs:{id:"is-there-a-match"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-there-a-match"}},[t._v("#")]),t._v(" Is there a match?")]),t._v(" "),a("p",[a("code",[t._v("grepl()")]),t._v(' is used to check whether a word or regular expression exists in a string or character vector. The function returns a TRUE/FALSE (or "Boolean") vector.')]),t._v(" "),a("p",[t._v('Notice that we can check each string for the word "fox" and receive a Boolean vector in return.')]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("grepl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fox"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" test_sentences"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[1]  TRUE FALSE")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"match-locations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#match-locations"}},[t._v("#")]),t._v(" Match locations")]),t._v(" "),a("p",[a("code",[t._v("grep")]),t._v(' takes in a character string and a regular expression. It returns a numeric vector of indexes.This will return which sentence contains the word "fox" in it.')]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("grep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fox"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" test_sentences"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[1] 1")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"matched-values"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#matched-values"}},[t._v("#")]),t._v(" Matched values")]),t._v(" "),a("p",[t._v("To select sentences that match a pattern:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# each of the following lines does the job:")]),t._v("\ntest_sentences"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("grep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fox"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" test_sentences"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\ntest_sentences"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("grepl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fox"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" test_sentences"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\ngrep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fox"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" test_sentences"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# [1] "The quick brown fox"')]),t._v("\n\n")])])]),a("h3",{attrs:{id:"details"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#details"}},[t._v("#")]),t._v(" Details")]),t._v(" "),a("p",[t._v("Since the "),a("code",[t._v('"fox"')]),t._v(" pattern is just a word, rather than a regular expression, we could improve performance (with either "),a("code",[t._v("grep")]),t._v(" or "),a("code",[t._v("grepl")]),t._v(") by specifying "),a("code",[t._v("fixed = TRUE")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("grep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fox"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" test_sentences"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fixed "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[1] 1")]),t._v("\n\n")])])]),a("p",[t._v("To select sentences that "),a("strong",[t._v("don't")]),t._v(" match a pattern, one can use "),a("code",[t._v("grep")]),t._v(" with "),a("code",[t._v("invert = TRUE")]),t._v("; or follow "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/r/1686",target:"_blank",rel:"noopener noreferrer"}},[t._v("subsetting"),a("OutboundLink")],1),t._v(" rules with "),a("code",[t._v("-grep(...)")]),t._v(" or "),a("code",[t._v("!grepl(...)")]),t._v(".")]),t._v(" "),a("p",[t._v("In both "),a("code",[t._v("grepl(pattern, x)")]),t._v(" and "),a("code",[t._v("grep(pattern, x)")]),t._v(", the "),a("code",[t._v("x")]),t._v(" parameter is "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/r/3327",target:"_blank",rel:"noopener noreferrer"}},[t._v("vectorized"),a("OutboundLink")],1),t._v(", the "),a("code",[t._v("pattern")]),t._v(" parameter is not. As a result, you cannot use these directly to match "),a("code",[t._v("pattern[1]")]),t._v(" against "),a("code",[t._v("x[1]")]),t._v(", "),a("code",[t._v("pattern[2]")]),t._v(" against "),a("code",[t._v("x[2]")]),t._v(", and so on.")]),t._v(" "),a("h3",{attrs:{id:"summary-of-matches"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#summary-of-matches"}},[t._v("#")]),t._v(" Summary of matches")]),t._v(" "),a("p",[t._v("After performing the e.g. the "),a("code",[t._v("grepl")]),t._v(" command, maybe you want to get an overview about how many matches where "),a("code",[t._v("TRUE")]),t._v(" or "),a("code",[t._v("FALSE")]),t._v(". This is useful e.g. in case of big data sets. In order to do so run the "),a("code",[t._v("summary")]),t._v(" command:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# example data")]),t._v("\ntest_sentences "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The quick brown fox"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jumps over the lazy dog"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# find matches")]),t._v("\nmatches "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" grepl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fox"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" test_sentences"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# overview")]),t._v("\nsummary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("matches"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"single-and-global-match"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#single-and-global-match"}},[t._v("#")]),t._v(" Single and Global match.")]),t._v(" "),a("p",[t._v("When working with regular expressions one modifier for PCRE is "),a("code",[t._v("g")]),t._v(" for global match.")]),t._v(" "),a("p",[t._v("In R matching and replacement functions have two version: first match and global match:")]),t._v(" "),a("li",[t._v("\n`sub(pattern,replacement,text)` will replace the first occurrence of pattern by replacement in text\n")]),t._v(" "),a("li",[t._v("\n`gsub(pattern,replacement,text)` will do the same as sub but for each occurrence of pattern\n")]),t._v(" "),a("li",[t._v("\n`regexpr(pattern,text)` will return the position of match for the first instance of pattern\n")]),t._v(" "),a("li",[t._v("\n`gregexpr(pattern,text)` will return all matches.\n")]),t._v(" "),a("p",[t._v("Some random data:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("set.seed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nteststring "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" paste0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("letters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("collapse"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# teststring")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#[1] "htjuwakqxzpgrsbncvyo"')]),t._v("\n\n")])])]),a("p",[t._v("Let's see how this works if we want to replace vowels by something else:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("sub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[aeiouy]"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" ** HERE WAS A VOWEL** "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("teststring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#[1] "htj ** HERE WAS A VOWEL** wakqxzpgrsbncvyo"')]),t._v("\n\ngsub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[aeiouy]"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" ** HERE WAS A VOWEL** "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("teststring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#[1] "htj ** HERE WAS A VOWEL** w ** HERE WAS A VOWEL** kqxzpgrsbncv ** HERE WAS A VOWEL**  ** HERE WAS A VOWEL** "')]),t._v("\n\n")])])]),a("p",[t._v("Now let's see how we can find a consonant immediately followed by one or more vowel:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("regexpr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[^aeiou][aeiou]+"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("teststring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[1] 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#attr(,"match.length")')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[1] 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#attr(,"useBytes")')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[1] TRUE")]),t._v("\n\n")])])]),a("p",[t._v("We have a match on position 3 of the string of length 2, i.e: "),a("code",[t._v("ju")])]),t._v(" "),a("p",[t._v("Now if we want to get all matches:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("gregexpr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[^aeiou][aeiou]+"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("teststring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[[1]]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[1]  3  5 19")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#attr(,"match.length")')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[1] 2 2 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#attr(,"useBytes")')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[1] TRUE")]),t._v("\n\n")])])]),a("p",[t._v("All this is really great, but this only give use positions of match and that's not so easy to get what is matched, and here comes "),a("code",[t._v("regmatches")]),t._v(" it's sole purpose is to extract the string matched from regexpr, but it has a different syntax.")]),t._v(" "),a("p",[t._v("Let's save our matches in a variable and then extract them from original string:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("matches "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" gregexpr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[^aeiou][aeiou]+"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("teststring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nregmatches"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("teststring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("matches"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[[1]]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#[1] "ju" "wa" "yo"')]),t._v("\n\n")])])]),a("p",[t._v("This may sound strange to not have a shortcut, but this allow extraction from another string by the matches of our first one (think comparing two long vector where you know there's is a common pattern for the first but not for the second, this allow an easy comparison):")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("teststring2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"this is another string to match against"')]),t._v("\nregmatches"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("teststring2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("matches"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[[1]]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#[1] "is" " i" "ri"')]),t._v("\n\n")])])]),a("p",[t._v("Attention note: by default the pattern is not Perl Compatible Regular Expression, some things like lookarounds are not supported, but each function presented here allow for "),a("code",[t._v("perl=TRUE")]),t._v(" argument to enable them.")]),t._v(" "),a("h2",{attrs:{id:"making-substitutions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#making-substitutions"}},[t._v("#")]),t._v(" Making substitutions")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# example data")]),t._v("\ntest_sentences "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The quick brown fox quickly"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jumps over the lazy dog"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("Let's make the brown fox red:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("sub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"brown"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"red"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" test_sentences"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#[1] "The quick red fox quickly"       "jumps over the lazy dog"')]),t._v("\n\n")])])]),a("p",[t._v("Now, let's make the "),a("code",[t._v('"fast"')]),t._v(" fox act "),a("code",[t._v('"fastly"')]),t._v(". This won't do it:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("sub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"quick"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fast"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" test_sentences"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#[1] "The fast red fox quickly"       "jumps over the lazy dog"')]),t._v("\n\n")])])]),a("p",[a("code",[t._v("sub")]),t._v(" only makes the first available replacement, we need "),a("code",[t._v("gsub")]),t._v(" for "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/r/1123/pattern-matching-and-replacement/6831/",target:"_blank",rel:"noopener noreferrer"}},[t._v("global replacement"),a("OutboundLink")],1),t._v(":")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("gsub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"quick"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fast"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" test_sentences"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#[1] "The fast red fox fastly"       "jumps over the lazy dog"')]),t._v("\n\n")])])]),a("p",[t._v("See "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/r/9219",target:"_blank",rel:"noopener noreferrer"}},[t._v("Modifying strings by substitution"),a("OutboundLink")],1),t._v(" for more examples.")]),t._v(" "),a("h2",{attrs:{id:"find-matches-in-big-data-sets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-matches-in-big-data-sets"}},[t._v("#")]),t._v(" Find matches in big data sets")]),t._v(" "),a("p",[t._v("In case of big data sets, the call of "),a("code",[t._v('grepl("fox", test_sentences)')]),t._v(" does not perform well. Big data sets are e.g. crawled websites or million of Tweets, etc.")]),t._v(" "),a("p",[t._v("The first acceleration is the usage of the "),a("code",[t._v("perl = TRUE")]),t._v(" option. Even faster is the option "),a("code",[t._v("fixed = TRUE")]),t._v(". A complete example would be:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# example data")]),t._v("\ntest_sentences "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The quick brown fox"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jumps over the lazy dog"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ngrepl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fox"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" test_sentences"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" perl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[1]  TRUE FALSE")]),t._v("\n\n")])])]),a("p",[t._v("In case of text mining, often a corpus gets used. A corpus cannot be used directly with "),a("code",[t._v("grepl")]),t._v(". Therefore, consider this function:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("searchCorpus "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("corpus"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pattern"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  return"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tm_index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("corpus"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FUN "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    grepl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ignore.case "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" perl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("TRUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\n")])])]),a("h4",{attrs:{id:"syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),a("li",[t._v('\ngrep("query", "subject", optional_args)\n')]),t._v(" "),a("li",[t._v('\ngrepl("query", "subject", optional_args)\n')]),t._v(" "),a("li",[t._v('\ngsub("(group1)(group2)", "\\\\group#", "subject")\n')]),t._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),a("h3",{attrs:{id:"differences-from-other-languages"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#differences-from-other-languages"}},[t._v("#")]),t._v(" Differences from other languages")]),t._v(" "),a("p",[t._v("Escaped "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/regex/topics",target:"_blank",rel:"noopener noreferrer"}},[t._v("regex"),a("OutboundLink")],1),t._v(" symbols (like "),a("code",[t._v("\\1")]),t._v(") are must be escaped a second time (like "),a("code",[t._v("\\\\1")]),t._v("), not only in the "),a("code",[t._v("pattern")]),t._v(" argument, but also in the "),a("code",[t._v("replacement")]),t._v(" to "),a("code",[t._v("sub")]),t._v(" and "),a("code",[t._v("gsub")]),t._v(".")]),t._v(" "),a("p",[t._v("By default, the pattern for all commands (grep, sub, regexpr) is not Perl Compatible Regular Expression (PCRE) so some things like lookarounds are not supported. However, each function accepts a "),a("code",[t._v("perl=TRUE")]),t._v(" argument to enable them. See the "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/r/5748",target:"_blank",rel:"noopener noreferrer"}},[t._v("R Regular Expressions topic"),a("OutboundLink")],1),t._v(" for details.")]),t._v(" "),a("h3",{attrs:{id:"specialized-packages"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specialized-packages"}},[t._v("#")]),t._v(" Specialized packages")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://stackoverflow.com/documentation/r/1670",target:"_blank",rel:"noopener noreferrer"}},[t._v("stringi"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("stringr")])])])}),[],!1,null,null,null);s.default=n.exports}}]);