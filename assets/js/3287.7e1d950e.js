(window.webpackJsonp=window.webpackJsonp||[]).push([[3287],{3695:function(s,t,e){"use strict";e.r(t);var a=e(31),r=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"select"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#select"}},[s._v("#")]),s._v(" SELECT")]),s._v(" "),e("p",[s._v("The SELECT statement is at the heart of most SQL queries. It defines what result set should be returned by the query, and is almost always used in conjunction with the FROM clause, which defines what part(s) of the database should be queried.")]),s._v(" "),e("h2",{attrs:{id:"using-the-wildcard-character-to-select-all-columns-in-a-query"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#using-the-wildcard-character-to-select-all-columns-in-a-query"}},[s._v("#")]),s._v(" Using the wildcard character to select all columns in a query.")]),s._v(" "),e("p",[s._v("Consider a database with the following two tables.")]),s._v(" "),e("p",[e("strong",[s._v("Employees table:")])]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("Id")]),s._v(" "),e("th",[s._v("FName")]),s._v(" "),e("th",[s._v("LName")]),s._v(" "),e("th",[s._v("DeptId")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("1")]),s._v(" "),e("td",[s._v("James")]),s._v(" "),e("td",[s._v("Smith")]),s._v(" "),e("td",[s._v("3")])]),s._v(" "),e("tr",[e("td",[s._v("2")]),s._v(" "),e("td",[s._v("John")]),s._v(" "),e("td",[s._v("Johnson")]),s._v(" "),e("td",[s._v("4")])])])]),s._v(" "),e("p",[e("strong",[s._v("Departments table:")])]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("Id")]),s._v(" "),e("th",[s._v("Name")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("1")]),s._v(" "),e("td",[s._v("Sales")])]),s._v(" "),e("tr",[e("td",[s._v("2")]),s._v(" "),e("td",[s._v("Marketing")])]),s._v(" "),e("tr",[e("td",[s._v("3")]),s._v(" "),e("td",[s._v("Finance")])]),s._v(" "),e("tr",[e("td",[s._v("4")]),s._v(" "),e("td",[s._v("IT")])])])]),s._v(" "),e("h3",{attrs:{id:"simple-select-statement"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#simple-select-statement"}},[s._v("#")]),s._v(" Simple select statement")]),s._v(" "),e("p",[e("code",[s._v("*")]),s._v(" is the "),e("strong",[s._v("wildcard character")]),s._v(" used to select all available columns in a table.")]),s._v(" "),e("p",[s._v("When used as a substitute for explicit column names, it returns all columns in all tables that a query is selecting "),e("code",[s._v("FROM")]),s._v(". This effect applies to "),e("strong",[s._v("all tables")]),s._v(" the query accesses through its "),e("code",[s._v("JOIN")]),s._v(" clauses.")]),s._v(" "),e("p",[s._v("Consider the following query:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees\n\n")])])]),e("p",[s._v("It will return all fields of all rows of the "),e("code",[s._v("Employees")]),s._v(" table:")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("Id")]),s._v(" "),e("th",[s._v("FName")]),s._v(" "),e("th",[s._v("LName")]),s._v(" "),e("th",[s._v("DeptId")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("1")]),s._v(" "),e("td",[s._v("James")]),s._v(" "),e("td",[s._v("Smith")]),s._v(" "),e("td",[s._v("3")])]),s._v(" "),e("tr",[e("td",[s._v("2")]),s._v(" "),e("td",[s._v("John")]),s._v(" "),e("td",[s._v("Johnson")]),s._v(" "),e("td",[s._v("4")])])])]),s._v(" "),e("h3",{attrs:{id:"dot-notation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dot-notation"}},[s._v("#")]),s._v(" Dot notation")]),s._v(" "),e("p",[s._v("To select all values from a specific table, the wildcard character can be applied to the table with "),e("strong",[s._v("dot notation")]),s._v(".")]),s._v(" "),e("p",[s._v("Consider the following query:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" \n    Employees"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    Departments"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Name\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" \n    Employees\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" \n    Departments \n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" Departments"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Id "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Employees"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("DeptId\n\n")])])]),e("p",[s._v("This will return a data set with all fields on the "),e("code",[s._v("Employee")]),s._v(" table, followed by just the "),e("code",[s._v("Name")]),s._v(" field in the "),e("code",[s._v("Departments")]),s._v(" table:")]),s._v(" "),e("p",[s._v("|Id|FName|LName|DeptId|Name\n|---|---|---|---\n|1|James|Smith|3|Finance\n|2|John|Johnson|4|IT")]),s._v(" "),e("p",[e("strong",[s._v("Warnings Against Use")])]),s._v(" "),e("p",[s._v("It is generally advised that using "),e("code",[s._v("*")]),s._v(" is avoided in production code where possible, as it can cause a number of potential problems including:")]),s._v(" "),e("ol",[e("li",[s._v("Excess IO, network load, memory use, and so on, due to the database engine reading data that is not needed and transmitting it to the front-end code. This is particularly a concern where there might be large fields such as those used to store long notes or attached files.")]),s._v(" "),e("li",[s._v("Further excess IO load if the database needs to spool internal results to disk as part of the processing for a query more complex than "),e("code",[s._v("SELECT <columns> FROM <table>")]),s._v(".\n")]),e("li",[s._v("Extra processing (and/or even more IO) if some of the unneeded columns are:\n"),e("ul")]),s._v(" "),e("li",[s._v("computed columns in databases that support them")]),s._v(" "),e("li",[s._v("in the case of selecting from a view, columns from a table/view that the query optimiser could otherwise optimise out\n")]),s._v(" "),e("li",[s._v("The potential for unexpected errors if columns are added to tables and views later that results ambiguous column names. For example "),e("code",[s._v("SELECT * FROM orders JOIN people ON people.id = orders.personid ORDER BY displayname")]),s._v(" - if a column column called "),e("code",[s._v("displayname")]),s._v(" is added to the orders table to allow users to give their orders meaningful names for future reference then the column name will appear twice in the output so the "),e("code",[s._v("ORDER BY")]),s._v(' clause will be ambiguous which may cause errors ("ambiguous column name" in recent MS SQL Server versions), and if not in this example your application code might start displaying the order name where the person name is intended because the new column is the first of that name returned, and so on.')])]),s._v(" "),e("h3",{attrs:{id:"when-can-you-use-bearing-the-above-warning-in-mind"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#when-can-you-use-bearing-the-above-warning-in-mind"}},[s._v("#")]),s._v(" When Can You Use "),e("code",[s._v("*")]),s._v(", Bearing The Above Warning In Mind?")]),s._v(" "),e("p",[s._v("While best avoided in production code, using "),e("code",[s._v("*")]),s._v(" is fine as a shorthand when performing manual queries against the database for investigation or prototype work.")]),s._v(" "),e("p",[s._v("Sometimes design decisions in your application make it unavoidable (in such circumstances, prefer "),e("code",[s._v("tablealias.*")]),s._v(" over just "),e("code",[s._v("*")]),s._v(" where possible).")]),s._v(" "),e("p",[s._v("When using "),e("code",[s._v("EXISTS")]),s._v(", such as "),e("code",[s._v("SELECT A.col1, A.Col2 FROM A WHERE EXISTS (SELECT * FROM B where A.ID = B.A_ID)")]),s._v(", we are not returning any data from B. Thus a join is unnecessary, and the engine knows no values from B are to be returned, thus no performance hit for using "),e("code",[s._v("*")]),s._v(". Similarly "),e("code",[s._v("COUNT(*)")]),s._v(" is fine as it also doesn't actually return any of the columns, so only needs to read and process those that are used for filtering purposes.")]),s._v(" "),e("h2",{attrs:{id:"select-using-column-aliases"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#select-using-column-aliases"}},[s._v("#")]),s._v(" SELECT Using Column Aliases")]),s._v(" "),e("p",[s._v("Column aliases are used mainly to shorten code and make column names more readable.")]),s._v(" "),e("p",[s._v("Code becomes shorter as long table names and unnecessary identification of columns "),e("strong",[s._v("(e.g., there may be 2 IDs in the table, but only one is used in the statement)")]),s._v(" can be avoided. Along with "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/sql/222/select/5237/selecting-with-table-alias#t=201608310647581262872",target:"_blank",rel:"noopener noreferrer"}},[s._v("table aliases"),e("OutboundLink")],1),s._v(" this allows you to use longer descriptive names in your database structure while keeping queries upon that structure concise.")]),s._v(" "),e("p",[s._v("Furthermore they are sometimes "),e("strong",[s._v("required")]),s._v(", for instance in views, in order to name computed outputs.")]),s._v(" "),e("h3",{attrs:{id:"all-versions-of-sql"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#all-versions-of-sql"}},[s._v("#")]),s._v(" All versions of SQL")]),s._v(" "),e("p",[s._v("Aliases can be created in all versions of SQL using double quotes ("),e("code",[s._v('"')]),s._v(").")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" \n    FName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"First Name"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    MName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Middle Name"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    LName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Last Name"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees  \n\n")])])]),e("h3",{attrs:{id:"different-versions-of-sql"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#different-versions-of-sql"}},[s._v("#")]),s._v(" Different Versions of SQL")]),s._v(" "),e("p",[s._v("You can use single quotes ("),e("code",[s._v("'")]),s._v("), double quotes ("),e("code",[s._v('"')]),s._v(") and square brackets ("),e("code",[s._v("[]")]),s._v(") to create an alias in Microsoft SQL Server.")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" \n    FName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"First Name"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    MName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Middle Name'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    LName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Last")]),s._v(" Name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees  \n\n")])])]),e("p",[s._v("Both will result in:")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("First Name")]),s._v(" "),e("th",[s._v("Middle Name")]),s._v(" "),e("th",[s._v("Last Name")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("James")]),s._v(" "),e("td",[s._v("John")]),s._v(" "),e("td",[s._v("Smith")])]),s._v(" "),e("tr",[e("td",[s._v("John")]),s._v(" "),e("td",[s._v("James")]),s._v(" "),e("td",[s._v("Johnson")])]),s._v(" "),e("tr",[e("td",[s._v("Michael")]),s._v(" "),e("td",[s._v("Marcus")]),s._v(" "),e("td",[s._v("Williams")])])])]),s._v(" "),e("p",[s._v("This statement will return "),e("code",[s._v("FName")]),s._v(" and "),e("code",[s._v("LName")]),s._v(" columns with a given name (an alias). This is achieved using the "),e("code",[s._v("AS")]),s._v(" operator followed by the alias, or simply writing alias directly after the column name. This means that the following query has the same outcome as the above.")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" \n    FName "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"First Name"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    MName "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Middle Name"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    LName "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Last Name"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees \n\n")])])]),e("table",[e("thead",[e("tr",[e("th",[s._v("First Name")]),s._v(" "),e("th",[s._v("Middle Name")]),s._v(" "),e("th",[s._v("Last Name")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("James")]),s._v(" "),e("td",[s._v("John")]),s._v(" "),e("td",[s._v("Smith")])]),s._v(" "),e("tr",[e("td",[s._v("John")]),s._v(" "),e("td",[s._v("James")]),s._v(" "),e("td",[s._v("Johnson")])]),s._v(" "),e("tr",[e("td",[s._v("Michael")]),s._v(" "),e("td",[s._v("Marcus")]),s._v(" "),e("td",[s._v("Williams")])])])]),s._v(" "),e("p",[s._v("However, the explicit version (i.e., using the "),e("code",[s._v("AS")]),s._v(" operator) is more readable.")]),s._v(" "),e("p",[s._v("If the alias has a single word that is not a reserved word, we can write it without single quotes, double quotes or brackets:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" \n    FName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" FirstName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    LName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" LastName\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees  \n\n")])])]),e("table",[e("thead",[e("tr",[e("th",[s._v("FirstName")]),s._v(" "),e("th",[s._v("LastName")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("James")]),s._v(" "),e("td",[s._v("Smith")])]),s._v(" "),e("tr",[e("td",[s._v("John")]),s._v(" "),e("td",[s._v("Johnson")])]),s._v(" "),e("tr",[e("td",[s._v("Michael")]),s._v(" "),e("td",[s._v("Williams")])])])]),s._v(" "),e("p",[s._v("A further variation available in MS SQL Server amongst others is "),e("code",[s._v("<alias> = <column-or-calculation>")]),s._v(", for instance:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" FullName "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" FirstName "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" LastName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n       Addr1    "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" FullStreetAddress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n       Addr2    "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" TownName\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" CustomerDetails  \n\n")])])]),e("p",[s._v("which is equivalent to:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" FirstName "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" LastName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" FullName\n       FullStreetAddress          "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" Addr1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n       TownName                   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" Addr2\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" CustomerDetails  \n\n")])])]),e("p",[s._v("Both will result in:")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("FullName")]),s._v(" "),e("th",[s._v("Addr1")]),s._v(" "),e("th",[s._v("Addr2")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("James Smith")]),s._v(" "),e("td",[s._v("123 AnyStreet")]),s._v(" "),e("td",[s._v("TownVille")])]),s._v(" "),e("tr",[e("td",[s._v("John Johnson")]),s._v(" "),e("td",[s._v("668 MyRoad")]),s._v(" "),e("td",[s._v("Anytown")])]),s._v(" "),e("tr",[e("td",[s._v("Michael Williams")]),s._v(" "),e("td",[s._v("999 High End Dr")]),s._v(" "),e("td",[s._v("Williamsburgh")])])])]),s._v(" "),e("p",[s._v("Some find using "),e("code",[s._v("=")]),s._v(" instead of "),e("code",[s._v("As")]),s._v(" easier to read, though many recommend against this format, mainly  because it is not standard so not widely supported by all databases. It may cause confusion with other uses of the "),e("code",[s._v("=")]),s._v(" character.")]),s._v(" "),e("h3",{attrs:{id:"all-versions-of-sql-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#all-versions-of-sql-2"}},[s._v("#")]),s._v(" All Versions of SQL")]),s._v(" "),e("p",[s._v("Also, if you "),e("strong",[s._v("need")]),s._v(" to use reserved words, you can use brackets or quotes to escape:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("\n    FName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"SELECT"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    MName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"FROM"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    LName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"WHERE"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees\n\n")])])]),e("h3",{attrs:{id:"different-versions-of-sql-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#different-versions-of-sql-2"}},[s._v("#")]),s._v(" Different Versions of SQL")]),s._v(" "),e("p",[s._v("Likewise, you can escape keywords in MSSQL with all different approaches:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" \n    FName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"SELECT"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    MName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'FROM'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    LName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees  \n\n")])])]),e("table",[e("thead",[e("tr",[e("th",[s._v("SELECT")]),s._v(" "),e("th",[s._v("FROM")]),s._v(" "),e("th",[s._v("WHERE")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("James")]),s._v(" "),e("td",[s._v("John")]),s._v(" "),e("td",[s._v("Smith")])]),s._v(" "),e("tr",[e("td",[s._v("John")]),s._v(" "),e("td",[s._v("James")]),s._v(" "),e("td",[s._v("Johnson")])]),s._v(" "),e("tr",[e("td",[s._v("Michael")]),s._v(" "),e("td",[s._v("Marcus")]),s._v(" "),e("td",[s._v("Williams")])])])]),s._v(" "),e("p",[s._v("Also, a column alias may be used any of the final clauses of the same query, such as an "),e("code",[s._v("ORDER BY")]),s._v(":")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" \n    FName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" FirstName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    LName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" LastName\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" \n    Employees \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" \n    LastName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),s._v("\n\n")])])]),e("p",[s._v("However, you may "),e("strong",[s._v("not")]),s._v(" use")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("\n    FName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    LName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" \n    Employees\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" \n    LastName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),s._v("\n\n")])])]),e("p",[s._v("To create an alias from these reserved words ("),e("code",[s._v("SELECT")]),s._v(" and "),e("code",[s._v("FROM")]),s._v(").")]),s._v(" "),e("p",[s._v("This will cause numerous errors on execution.")]),s._v(" "),e("h2",{attrs:{id:"select-individual-columns"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#select-individual-columns"}},[s._v("#")]),s._v(" Select Individual Columns")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" \n    PhoneNumber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    Email"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    PreferredContact \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Customers\n\n")])])]),e("p",[s._v("This statement will return the columns "),e("code",[s._v("PhoneNumber")]),s._v(", "),e("code",[s._v("Email")]),s._v(", and "),e("code",[s._v("PreferredContact")]),s._v(" from all rows of the "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/sql/280/example-database/1015/customers-table#t=201604061708142822908",target:"_blank",rel:"noopener noreferrer"}},[e("code",[s._v("Customers")]),e("OutboundLink")],1),s._v(" table. Also the columns will be returned in the sequence in which they appear in the "),e("code",[s._v("SELECT")]),s._v(" clause.")]),s._v(" "),e("p",[s._v("The result will be:")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("PhoneNumber")]),s._v(" "),e("th",[s._v("Email")]),s._v(" "),e("th",[s._v("PreferredContact")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("3347927472")]),s._v(" "),e("td",[s._v("william.jones@example.com")]),s._v(" "),e("td",[s._v("PHONE")])]),s._v(" "),e("tr",[e("td",[s._v("2137921892")]),s._v(" "),e("td",[s._v("dmiller@example.net")]),s._v(" "),e("td",[s._v("EMAIL")])]),s._v(" "),e("tr",[e("td",[s._v("NULL")]),s._v(" "),e("td",[s._v("richard0123@example.com")]),s._v(" "),e("td",[s._v("EMAIL")])])])]),s._v(" "),e("p",[s._v("If multiple tables are joined together, you can select columns from specific tables by specifying the table name before the column name: "),e("code",[s._v("[table_name].[column_name]")])]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" \n    Customers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("PhoneNumber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    Customers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Email"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    Customers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("PreferredContact"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    Orders"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Id "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" OrderId\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" \n    Customers\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LEFT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" \n    Orders "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" Orders"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CustomerId "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Customers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Id\n\n")])])]),e("p",[s._v("*"),e("code",[s._v("AS OrderId")]),s._v(" means that the "),e("code",[s._v("Id")]),s._v(" field of "),e("code",[s._v("Orders")]),s._v(" table will be returned as a column named "),e("code",[s._v("OrderId")]),s._v(". See "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/sql/222/select/1264/selecting-with-column-alias",target:"_blank",rel:"noopener noreferrer"}},[s._v("selecting with column alias"),e("OutboundLink")],1),s._v(" for further information.")]),s._v(" "),e("p",[s._v("To avoid using long table names, you can use table aliases. This mitigates the pain of writing long table names for each field that you select in the joins. If you are performing a self join (a join between two instances of the "),e("strong",[s._v("same")]),s._v(" table), then you must use table aliases to distinguish your tables. We can write a table alias like "),e("code",[s._v("Customers c")]),s._v(" or "),e("code",[s._v("Customers AS c")]),s._v(". Here "),e("code",[s._v("c")]),s._v(" works as an alias for "),e("code",[s._v("Customers")]),s._v(" and we can select let's say "),e("code",[s._v("Email")]),s._v(" like this: "),e("code",[s._v("c.Email")]),s._v(".")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" \n    c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("PhoneNumber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Email"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("PreferredContact"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    o"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Id "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" OrderId\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" \n    Customers c\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LEFT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" \n    Orders o "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" o"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CustomerId "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Id\n\n")])])]),e("h2",{attrs:{id:"selecting-specified-number-of-records"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#selecting-specified-number-of-records"}},[s._v("#")]),s._v(" Selecting specified number of records")]),s._v(" "),e("p",[s._v("The "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/SQL:2008",target:"_blank",rel:"noopener noreferrer"}},[s._v("SQL 2008 standard"),e("OutboundLink")],1),s._v(" defines the "),e("code",[s._v("FETCH FIRST")]),s._v(" clause to limit the number of records returned.")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" Id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ProductName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" UnitPrice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Package \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Product \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" UnitPrice "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FETCH")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FIRST")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ROWS")]),s._v(" ONLY\n\n")])])]),e("p",[s._v("This standard is only supported in recent versions of some RDMSs.  Vendor-specific non-standard syntax is provided in other systems. Progress OpenEdge 11.x also supports the "),e("code",[s._v("FETCH FIRST <n> ROWS ONLY")]),s._v(" syntax.")]),s._v(" "),e("p",[s._v("Additionally, "),e("code",[s._v("OFFSET <m> ROWS")]),s._v(" before "),e("code",[s._v("FETCH FIRST <n> ROWS ONLY")]),s._v(" allows skipping  rows before fetching  rows.")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" Id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ProductName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" UnitPrice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Package \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Product \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" UnitPrice "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OFFSET")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ROWS")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FETCH")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FIRST")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ROWS")]),s._v(" ONLY\n\n")])])]),e("p",[s._v("The following query is supported in "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/sql-server/1555/limit-result-set",target:"_blank",rel:"noopener noreferrer"}},[s._v("SQL Server"),e("OutboundLink")],1),s._v(" and MS Access:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TOP")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" Id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ProductName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" UnitPrice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Package\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Product\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" UnitPrice "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),s._v("\n\n")])])]),e("p",[s._v("To do the same in "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/mysql/548/limits/1791/limit#t=201607212134423264996",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL"),e("OutboundLink")],1),s._v(" or PostgreSQL the "),e("code",[s._v("LIMIT")]),s._v(" keyword must be used:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" Id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ProductName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" UnitPrice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Package\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Product\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" UnitPrice "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\n")])])]),e("p",[s._v("In Oracle the same can be done with "),e("code",[s._v("ROWNUM")]),s._v(":")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" Id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ProductName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" UnitPrice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Package\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Product\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" ROWNUM "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" UnitPrice "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),s._v("    \n\n")])])]),e("p",[e("strong",[s._v("Results")]),s._v(": "),e("strong",[s._v("10")]),s._v(" records.")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[s._v("Id    ProductName               UnitPrice             Package\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("38")]),s._v("    Côte de Blaye             "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("263.50")]),s._v("                "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("75")]),s._v(" cl bottles\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("29")]),s._v("    Thüringer Rostbratwurst   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("123.79")]),s._v("                "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" bags x "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v(" sausgs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("    Mishi Kobe Niku            "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("97.00")]),s._v("                 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),s._v(" g pkgs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("    Sir Rodney's Marmalade    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("81.00")]),s._v("                 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v(" gift boxes\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("    Carnarvon Tigers          "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("62.50")]),s._v("                 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" kg pkg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("59")]),s._v("    Raclette Courdavault      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("55.00")]),s._v("                 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" kg pkg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("51")]),s._v("    Manjimup Dried Apples     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("53.00")]),s._v("                 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("300")]),s._v(" g pkgs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("62")]),s._v("    Tarte au sucre            "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("49.30")]),s._v("                 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("48")]),s._v(" pies\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("43")]),s._v("    Ipoh Coffee               "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("46.00")]),s._v("                 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),s._v(" g tins\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("28")]),s._v("    Rössle Sauerkraut         "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("45.60")]),s._v("                 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("825")]),s._v(" g cans\n\n")])])]),e("p",[e("strong",[s._v("Vendor Nuances:")])]),s._v(" "),e("p",[s._v("It is important to note that the "),e("code",[s._v("TOP")]),s._v(" in Microsoft SQL operates after the "),e("code",[s._v("WHERE")]),s._v(" clause and will return the specified number of results if they exist anywhere in the table, while  "),e("code",[s._v("ROWNUM")]),s._v(" works as part of the "),e("code",[s._v("WHERE")]),s._v(" clause so if other conditions do not exist in the specified number of rows at the beginning of the table, you will get zero results when there could be others to be found.")]),s._v(" "),e("h2",{attrs:{id:"selecting-with-condition"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#selecting-with-condition"}},[s._v("#")]),s._v(" Selecting with Condition")]),s._v(" "),e("p",[s._v("The basic syntax of SELECT with WHERE clause is:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" column1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" column2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" columnN\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" table_name\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("condition"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n")])])]),e("p",[s._v("The "),e("strong",[s._v("[condition]")]),s._v(" can be any SQL expression, specified using comparison or logical operators like >, <, =, <>, >=, <=, LIKE, NOT, IN, BETWEEN etc.")]),s._v(" "),e("p",[s._v("The following statement returns all columns from the table 'Cars' where the status column is 'READY':")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Cars "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'READY'")]),s._v("\n\n")])])]),e("p",[s._v("See "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/sql/636/filter-results-using-where-and-having",target:"_blank",rel:"noopener noreferrer"}},[s._v("WHERE and HAVING"),e("OutboundLink")],1),s._v(" for more examples.")]),s._v(" "),e("h2",{attrs:{id:"selecting-with-case"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#selecting-with-case"}},[s._v("#")]),s._v(" Selecting with CASE")]),s._v(" "),e("p",[s._v("When results need to have some logic applied 'on the fly' one can use CASE statement to implement it.")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CASE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHEN")]),s._v(" Col1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'under'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ELSE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'over'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),s._v(" threshold\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" TableName \n\n")])])]),e("p",[s._v("also can be chained")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" \n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CASE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHEN")]),s._v(" Col1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'under'")]),s._v(" \n         "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHEN")]),s._v(" Col1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" Col1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'between'")]),s._v(" \n         "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ELSE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'over'")]),s._v(" \n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),s._v(" threshold\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" TableName \n\n")])])]),e("p",[s._v("one also can have "),e("code",[s._v("CASE")]),s._v(" inside another "),e("code",[s._v("CASE")]),s._v(" statement")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" \n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CASE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHEN")]),s._v(" Col1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'under'")]),s._v(" \n         "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ELSE")]),s._v(" \n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CASE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHEN")]),s._v(" Col1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" Col1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" Col1 \n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ELSE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'over'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),s._v(" \n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),s._v(" threshold\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" TableName \n\n")])])]),e("h2",{attrs:{id:"select-columns-which-are-named-after-reserved-keywords"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#select-columns-which-are-named-after-reserved-keywords"}},[s._v("#")]),s._v(" Select columns which are named after reserved keywords")]),s._v(" "),e("p",[s._v("When a column name matches a reserved keyword, standard SQL requires that you enclose it in double quotation marks:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" \n    "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ORDER"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    ID \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ORDERS\n\n")])])]),e("p",[s._v("Note that it makes the column name case-sensitive.")]),s._v(" "),e("p",[s._v("Some DBMSes have proprietary ways of quoting names. For example, SQL Server uses square brackets for this purpose:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" \n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Order")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    ID \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ORDERS\n\n")])])]),e("p",[s._v("while MySQL (and MariaDB) by default use backticks:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" \n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Order")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    id \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" orders\n\n")])])]),e("h2",{attrs:{id:"selecting-with-table-alias"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#selecting-with-table-alias"}},[s._v("#")]),s._v(" Selecting with table alias")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Fname"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("LName \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees e\n\n")])])]),e("p",[s._v("The Employees table is given the alias 'e' directly after the table name. This helps remove ambiguity in scenarios where multiple tables have the same field name and you need to be specific as to which table you want to return data from.")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Fname"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("LName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Fname "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" ManagerFirstName \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees e \n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" Managers m "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ManagerId "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Id\n\n")])])]),e("p",[s._v("Note that once you define an alias, you can't use the canonical table name anymore. i.e.,")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Fname"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Employees"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("LName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Fname "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" ManagerFirstName \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees e \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" Managers m "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ManagerId "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Id\n\n")])])]),e("p",[s._v("would throw an error.")]),s._v(" "),e("p",[s._v("It is worth noting table aliases -- more formally 'range variables' -- were introduced into the SQL language to solve the problem of duplicate columns caused by "),e("code",[s._v("INNER JOIN")]),s._v(". The 1992 SQL standard corrected this earlier design flaw by introducing "),e("code",[s._v("NATURAL JOIN")]),s._v(" (implemented in mySQL, PostgreSQL and Oracle but not yet in SQL Server), the result of which never has duplicate column names. The above example is interesting in that the tables are joined on columns with different names ("),e("code",[s._v("Id")]),s._v(" and "),e("code",[s._v("ManagerId")]),s._v(") but are not supposed to be joined on the columns with the same name ("),e("code",[s._v("LName")]),s._v(", "),e("code",[s._v("FName")]),s._v("), requiring the renaming of the columns to be performed "),e("strong",[s._v("before")]),s._v(" the join:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" Fname"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" LName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ManagerFirstName \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees\n     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("NATURAL")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v("\n     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" Id "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" ManagerId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Fname "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" ManagerFirstName\n       "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Managers "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" m"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),e("p",[s._v("Note that although an alias/range variable must be declared for the dervied table (otherwise SQL will throw an error), it never makes sense to actually use it in the query.")]),s._v(" "),e("h2",{attrs:{id:"selection-with-sorted-results"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#selection-with-sorted-results"}},[s._v("#")]),s._v(" Selection with sorted Results")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" LName\n\n")])])]),e("p",[s._v("This statement will return all the columns from the table "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/sql/280/example-database/1014/employees-table#t=201603292355342567964",target:"_blank",rel:"noopener noreferrer"}},[e("code",[s._v("Employees")]),e("OutboundLink")],1),s._v(".")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("Id")]),s._v(" "),e("th",[s._v("FName")]),s._v(" "),e("th",[s._v("LName")]),s._v(" "),e("th",[s._v("PhoneNumber")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("2")]),s._v(" "),e("td",[s._v("John")]),s._v(" "),e("td",[s._v("Johnson")]),s._v(" "),e("td",[s._v("2468101214")])]),s._v(" "),e("tr",[e("td",[s._v("1")]),s._v(" "),e("td",[s._v("James")]),s._v(" "),e("td",[s._v("Smith")]),s._v(" "),e("td",[s._v("1234567890")])]),s._v(" "),e("tr",[e("td",[s._v("3")]),s._v(" "),e("td",[s._v("Michael")]),s._v(" "),e("td",[s._v("Williams")]),s._v(" "),e("td",[s._v("1357911131")])])])]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" LName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),s._v("\n\n")])])]),e("p",[s._v("Or")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nSELECT * FROM Employees ORDER BY LName ASC\n\n")])])]),e("p",[s._v("This statement changes the sorting direction.")]),s._v(" "),e("p",[s._v("One may also specify multiple sorting columns. For example:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" LName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ASC")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" FName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ASC")]),s._v("\n\n")])])]),e("p",[s._v("This example will sort the results first by "),e("code",[s._v("LName")]),s._v(" and then, for records that have the same "),e("code",[s._v("LName")]),s._v(", sort by "),e("code",[s._v("FName")]),s._v(". This will give you a result similar to what you would find in a telephone book.")]),s._v(" "),e("p",[s._v("In order to save retyping the column name in the "),e("code",[s._v("ORDER BY")]),s._v(" clause, it is possible to use instead the column's number. Note that column numbers start from 1.")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" Id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" FName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" LName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" PhoneNumber "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n\n")])])]),e("p",[s._v("You may also embed a "),e("code",[s._v("CASE")]),s._v(" statement in the "),e("code",[s._v("ORDER BY")]),s._v(" clause.")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" Id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" FName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" LName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" PhoneNumber "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CASE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHEN")]),s._v(" LName"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("'Jones"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("THEN")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ELSE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("END")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ASC")]),s._v("\n\n")])])]),e("p",[s._v("This will sort your results to have all records with the "),e("code",[s._v("LName")]),s._v(' of "Jones" at the top.')]),s._v(" "),e("h2",{attrs:{id:"selecting-with-aggregate-functions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#selecting-with-aggregate-functions"}},[s._v("#")]),s._v(" Selecting with Aggregate functions")]),s._v(" "),e("h3",{attrs:{id:"average"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#average"}},[s._v("#")]),s._v(" Average")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("AVG")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Salary"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees\n\n")])])]),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("AVG")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Salary"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" DepartmentId "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n")])])]),e("p",[s._v("If employee is categorized with multiple department and we want to find avg salary for every department then we can use following query.")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("AVG")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Salary"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" DepartmentId\n\n")])])]),e("h3",{attrs:{id:"minimum"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#minimum"}},[s._v("#")]),s._v(" Minimum")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("MIN")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Salary"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees\n\n")])])]),e("h3",{attrs:{id:"maximum"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maximum"}},[s._v("#")]),s._v(" Maximum")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("MAX")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Salary"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees\n\n")])])]),e("h3",{attrs:{id:"count"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#count"}},[s._v("#")]),s._v(" Count")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("Count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees\n\n")])])]),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("Count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" ManagerId "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IS")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("\n\n")])])]),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("Count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ManagerId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" Employees\n\n")])])]),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("Count")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" DepartmentId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" Employees\n\n")])])]),e("h3",{attrs:{id:"sum"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sum"}},[s._v("#")]),s._v(" Sum")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("SUM")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Salary"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Employees\n\n")])])]),e("h2",{attrs:{id:"selecting-without-locking-the-table"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#selecting-without-locking-the-table"}},[s._v("#")]),s._v(" Selecting without Locking the table")]),s._v(" "),e("p",[s._v("Sometimes when tables are used mostly (or only) for reads, indexing does not help anymore and every little bit counts, one might use selects without LOCK to improve performance.")]),s._v(" "),e("p",[s._v("SQL Server")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" TableName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WITH")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nolock"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])])]),e("p",[s._v("MySQL")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SESSION")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TRANSACTION")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ISOLATION")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LEVEL")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("READ")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNCOMMITTED")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" TableName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SESSION")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TRANSACTION")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ISOLATION")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LEVEL")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("REPEATABLE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("READ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),e("p",[s._v("Oracle")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TRANSACTION")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ISOLATION")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LEVEL")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("READ")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNCOMMITTED")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" TableName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),e("p",[s._v("DB2")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" TableName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WITH")]),s._v(" UR"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),e("p",[s._v("where "),e("code",[s._v("UR")]),s._v(' stands for "uncommitted read".')]),s._v(" "),e("p",[s._v("If used on table that has record modifications going on might have unpredictable results.")]),s._v(" "),e("h2",{attrs:{id:"select-with-condition-of-multiple-values-from-column"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#select-with-condition-of-multiple-values-from-column"}},[s._v("#")]),s._v(" Select with condition of multiple values from column")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Cars  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Waiting'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Working'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])])]),e("p",[s._v("This is semantically equivalent to")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Cars  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Waiting'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("OR")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Working'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])])]),e("p",[s._v("i.e. "),e("code",[s._v("value IN ( <value list> )")]),s._v(" is a shorthand for disjunction (logical "),e("code",[s._v("OR")]),s._v(").")]),s._v(" "),e("h2",{attrs:{id:"get-aggregated-result-for-row-groups"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-aggregated-result-for-row-groups"}},[s._v("#")]),s._v(" Get aggregated result for row groups")]),s._v(" "),e("p",[s._v("Counting rows based on a specific column value:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" category"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" item_count\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" item\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" category"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),e("p",[s._v("Getting average income by department:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" department"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("AVG")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("income"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" department"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),e("p",[s._v("The important thing is to select only columns specified in the "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/sql/627/group-by",target:"_blank",rel:"noopener noreferrer"}},[e("code",[s._v("GROUP BY")]),e("OutboundLink")],1),s._v(" clause or used with "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/sql/222/select/6470/selecting-with-aggregate-functions",target:"_blank",rel:"noopener noreferrer"}},[s._v("aggregate functions"),e("OutboundLink")],1),s._v(".")]),s._v(" "),e("p",[s._v("There "),e("code",[s._v("WHERE")]),s._v(" clause can also be used with "),e("code",[s._v("GROUP BY")]),s._v(", but "),e("code",[s._v("WHERE")]),s._v(" filters out records "),e("strong",[s._v("before")]),s._v(" any grouping is done:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" department"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("AVG")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("income"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" department "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<>")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ACCOUNTING'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" department"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),e("p",[s._v("If you need to filter the results after the grouping has been done, e.g, to see only departments whose average income is larger than 1000, you need to use the "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/sql/636/filter-results-using-where-and-having",target:"_blank",rel:"noopener noreferrer"}},[e("code",[s._v("HAVING")]),e("OutboundLink")],1),s._v(" clause:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" department"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("AVG")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("income"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" employees\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" department "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<>")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ACCOUNTING'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" department\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HAVING")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("avg")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("income"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),e("h2",{attrs:{id:"selecting-with-more-than-1-condition"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#selecting-with-more-than-1-condition"}},[s._v("#")]),s._v(" Selecting with more than 1 condition.")]),s._v(" "),e("p",[s._v("The "),e("code",[s._v("AND")]),s._v(" keyword is used to add more conditions to the query.")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("Name")]),s._v(" "),e("th",[s._v("Age")]),s._v(" "),e("th",[s._v("Gender")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("Sam")]),s._v(" "),e("td",[s._v("18")]),s._v(" "),e("td",[s._v("M")])]),s._v(" "),e("tr",[e("td",[s._v("John")]),s._v(" "),e("td",[s._v("21")]),s._v(" "),e("td",[s._v("M")])]),s._v(" "),e("tr",[e("td",[s._v("Bob")]),s._v(" "),e("td",[s._v("22")]),s._v(" "),e("td",[s._v("M")])]),s._v(" "),e("tr",[e("td",[s._v("Mary")]),s._v(" "),e("td",[s._v("23")]),s._v(" "),e("td",[s._v("F")])])])]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" persons "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" gender "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'M'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),e("p",[s._v("This will return:")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("Name")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("John")])]),s._v(" "),e("tr",[e("td",[s._v("Bob")])])])]),s._v(" "),e("p",[s._v("using "),e("code",[s._v("OR")]),s._v(" keyword")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" persons "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" gender "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'M'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("OR")]),s._v(" age "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),e("p",[s._v("This will return:")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("name")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("Sam")])]),s._v(" "),e("tr",[e("td",[s._v("John")])]),s._v(" "),e("tr",[e("td",[s._v("Bob")])])])]),s._v(" "),e("p",[s._v("These keywords can be combined to allow for more complex criteria combinations:")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" name\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" persons\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("gender "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'M'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("OR")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("gender "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'F'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" age "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),e("p",[s._v("This will return:")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("name")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("Sam")])]),s._v(" "),e("tr",[e("td",[s._v("Mary")])])])]),s._v(" "),e("h2",{attrs:{id:"select-rows-from-multiple-tables"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#select-rows-from-multiple-tables"}},[s._v("#")]),s._v(" Select rows from multiple tables")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v("\n    table1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    table2\n\n")])])]),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("\n    table1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("column1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    table1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("column2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    table2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("column1\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v("\n    table1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    table2\n\n")])])]),e("p",[s._v("This is called cross product in SQL it is same as cross product in sets")]),s._v(" "),e("p",[s._v("These statements return the selected columns from multiple tables in one query.")]),s._v(" "),e("p",[s._v("There is no specific relationship between the columns returned from each table.")]),s._v(" "),e("h2",{attrs:{id:"selecting-with-null"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#selecting-with-null"}},[s._v("#")]),s._v(" Selecting with null")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" Name "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Customers "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" PhoneNumber "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IS")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("\n\n")])])]),e("p",[s._v("Selection with nulls take a different syntax. Don't use "),e("code",[s._v("=")]),s._v(", use "),e("code",[s._v("IS NULL")]),s._v(" or "),e("code",[s._v("IS NOT NULL")]),s._v(" instead.")]),s._v(" "),e("h2",{attrs:{id:"select-distinct-unique-values-only"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#select-distinct-unique-values-only"}},[s._v("#")]),s._v(" Select distinct (unique values only)")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" ContinentCode\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" Countries"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])])]),e("p",[s._v("This query will return all "),e("code",[s._v("DISTINCT")]),s._v(" (unique, different) values from "),e("code",[s._v("ContinentCode")]),s._v(" column from "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/sql/280/example-databases/9933/countries-table",target:"_blank",rel:"noopener noreferrer"}},[e("code",[s._v("Countries")]),e("OutboundLink")],1),s._v(" table")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("ContinentCode")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("OC")])]),s._v(" "),e("tr",[e("td",[s._v("EU")])]),s._v(" "),e("tr",[e("td",[s._v("AS")])]),s._v(" "),e("tr",[e("td",[s._v("NA")])]),s._v(" "),e("tr",[e("td",[s._v("AF")])])])]),s._v(" "),e("p",[e("a",{attrs:{href:"http://sqlfiddle.com/#!9/14cfc6/2/0",target:"_blank",rel:"noopener noreferrer"}},[s._v("SQLFiddle Demo"),e("OutboundLink")],1)]),s._v(" "),e("h4",{attrs:{id:"syntax"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[s._v("#")]),s._v(" Syntax")]),s._v(" "),e("li",[e("p",[s._v("SELECT [DISTINCT] [column1] [, [column2] ... ]"),e("br"),s._v("\nFROM [table]"),e("br"),s._v("\n[ WHERE condition ]"),e("br"),s._v("\n[ GROUP BY [column1] [, [column2] ... ]")]),s._v("\n[ HAVING [column1] [, [column2] ... ]\n[ ORDER BY ASC | DESC ]\n")]),s._v(" "),e("h4",{attrs:{id:"remarks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[s._v("#")]),s._v(" Remarks")]),s._v(" "),e("p",[e("strong",[s._v("SELECT determines which columns' data to return and in which order")]),s._v(" FROM a given table (given that they match the other requirements in your query specifically - where and having filters and joins).")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" Name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" SerialNumber\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ArmyInfo\n\n")])])]),e("p",[s._v("will only return results from the "),e("code",[s._v("Name")]),s._v(" and "),e("code",[s._v("Serial Number")]),s._v(" columns, but not from the column called "),e("code",[s._v("Rank")]),s._v(", for example")]),s._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" ArmyInfo\n\n")])])]),e("p",[s._v("indicates that "),e("strong",[s._v("all")]),s._v(" columns will be returned.  However, please note that it is poor practice to "),e("code",[s._v("SELECT *")]),s._v(" as you are literally returning all columns of a table.")])])}),[],!1,null,null,null);t.default=r.exports}}]);