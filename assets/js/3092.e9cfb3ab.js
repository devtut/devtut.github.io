(window.webpackJsonp=window.webpackJsonp||[]).push([[3092],{3500:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"metaprogramming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#metaprogramming"}},[t._v("#")]),t._v(" Metaprogramming")]),t._v(" "),a("p",[a("strong",[t._v("Metaprogramming")]),t._v(" can be described in two ways:")]),t._v(" "),a("p",[t._v("“Computer programs that write or manipulate other programs (or themselves) as their data, or that do part of the work at compile time that would otherwise be done at runtime”.")]),t._v(" "),a("p",[t._v("More simply put: "),a("strong",[t._v("Metaprogramming is writing code that writes code during runtime to make your life easier")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"implementing-with-using-instance-evaluation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementing-with-using-instance-evaluation"}},[t._v("#")]),t._v(' Implementing "with" using instance evaluation')]),t._v(" "),a("p",[t._v("Many languages feature a "),a("code",[t._v("with")]),t._v(" statement that allows programmers to omit the receiver of method calls.")]),t._v(" "),a("p",[a("code",[t._v("with")]),t._v(" can be easily emulated in Ruby using "),a("a",{attrs:{href:"http://ruby-doc.org/core/BasicObject.html#method-i-instance_eval",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("instance_eval")]),a("OutboundLink")],1),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("with")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("block"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance_eval "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("block\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("The "),a("code",[t._v("with")]),t._v(" method can be used to seamlessly execute methods on objects:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\n\nwith hash "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  store "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":value")]),t._v("\n  has_key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":key")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => true")]),t._v("\n  values              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => [:value]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"send-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#send-method"}},[t._v("#")]),t._v(" send() method")]),t._v(" "),a("p",[a("code",[t._v("send()")]),t._v(" is used to pass message to "),a("code",[t._v("object")]),t._v(". "),a("code",[t._v("send()")]),t._v(" is an instance method of the "),a("code",[t._v("Object")]),t._v(" class.\nThe first argument in "),a("code",[t._v("send()")]),t._v(" is the message that you're sending to the object - that is, the name of a method. It could be "),a("code",[t._v("string")]),t._v(" or "),a("code",[t._v("symbol")]),t._v(" but "),a("strong",[t._v("symbols")]),t._v(" are preferred. Then arguments those need to pass in method, those will be the remaining arguments in "),a("code",[t._v("send()")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Hello")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("join"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\nh "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\nh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'gentle'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'readers'")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> "Hello gentle readers"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# h.send(:hello, 'gentle', 'readers') #=> Here :hello is method and rest are the arguments to method.")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"here-is-the-more-descriptive-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#here-is-the-more-descriptive-example"}},[t._v("#")]),t._v(" Here is the more descriptive example")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Account")]),t._v("\n  attr_accessor "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":notes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":address")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign_values")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("each_key "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# How send method would look a like")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# self.name = value[k]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('="')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\nuser_info "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Matt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test@gms.com'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  address"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'132 random st.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  notes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"annoying customer"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\naccount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Account")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("If")]),t._v(" attributes gets increase "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" we would messup the code\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#--------- Bad way --------------")]),t._v("\naccount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" user_info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\naccount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("address "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" user_info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":address")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\naccount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("email "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" user_info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":email")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\naccount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("notes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" user_info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":notes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --------- Meta Programing way --------------")]),t._v("\naccount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assign_values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# With single line we can assign n number of attributes")]),t._v("\n\nputs account"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inspect\n\n")])])]),a("p",[t._v("Note: "),a("code",[t._v("send()")]),t._v(" itself is not recommended anymore. Use "),a("code",[t._v("__send__()")]),t._v(" which has the power to call private methods, or (recommended) "),a("code",[t._v("public_send()")])]),t._v(" "),a("h2",{attrs:{id:"defining-methods-dynamically"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defining-methods-dynamically"}},[t._v("#")]),t._v(" Defining methods dynamically")]),t._v(" "),a("p",[t._v("With Ruby you can modify the structure of the program in execution time. One way to do it, is by defining methods dynamically using the method "),a("code",[t._v("method_missing")]),t._v(".")]),t._v(" "),a("p",[t._v("Let's say that we want to be able to test if a number is greater than other number with the syntax "),a("code",[t._v("777.is_greater_than_123?")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# open Numeric class")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Numeric")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# override `method_missing`")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_missing")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("method_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# test if the method_name matches the syntax we want")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" method_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("match "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^is_greater_than_(\\d+)\\?$/")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# capture the number in the method_name")]),t._v("\n      the_other_number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("to_i\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# return whether the number is greater than the other number or not")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" the_other_number\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if the method_name doesn't match what we want, let the previous definition of `method_missing` handle it")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("One important thing to remember when using "),a("code",[t._v("method_missing")]),t._v(" that one should also override "),a("code",[t._v("respond_to?")]),t._v(" method:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Numeric")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("respond_to")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("method_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" include_all "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n     method_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^is_greater_than_(\\d+)\\?$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("Forgetting to do so leads to a inconsistent situation, when you can successfully call "),a("code",[t._v("600.is_greater_than_123")]),t._v(", but "),a("code",[t._v("600.respond_to(:is_greater_than_123)")]),t._v(" returns false.")]),t._v(" "),a("h2",{attrs:{id:"defining-methods-on-instances"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defining-methods-on-instances"}},[t._v("#")]),t._v(" Defining methods on instances")]),t._v(" "),a("p",[t._v("In ruby you can add methods to existing instances of any class. This allows you to add behavior to and instance of a class without changing the behavior of the rest of the instances of that class.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Example")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method1")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    puts foo\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#defines method2 on object exp")]),t._v("\nexp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Example")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\nexp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("define_method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":method2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Method2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#with method parameters")]),t._v("\nexp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("define_method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":method3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" puts name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);