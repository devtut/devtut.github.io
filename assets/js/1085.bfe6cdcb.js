(window.webpackJsonp=window.webpackJsonp||[]).push([[1085],{1493:function(e,n,a){"use strict";a.r(n);var t=a(31),s=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"locating-duplicate-values-in-a-range"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#locating-duplicate-values-in-a-range"}},[e._v("#")]),e._v(" Locating duplicate values in a range")]),e._v(" "),a("h2",{attrs:{id:"find-duplicates-in-a-range"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-duplicates-in-a-range"}},[e._v("#")]),e._v(" Find duplicates in a range")]),e._v(" "),a("p",[e._v("The following tests range A2 to A7 for duplicate values.\n"),a("strong",[e._v("Remark:")]),e._v(" This example illustrates a possible solution as a first approach to a solution. It's faster to use an array than a range and one could use collections or dictionaries or xml methods to check for duplicates.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\n   Sub find_duplicates()\n\' Declare variables\n  Dim ws     As Worksheet               \' worksheet\n  Dim cell   As Range                   \' cell within worksheet range\n  Dim n      As Integer                 \' highest row number\n  Dim bFound As Boolean                 \' boolean flag, if duplicate is found\n  Dim sFound As String: sFound = "|"    \' found duplicates\n  Dim s      As String                  \' message string\n  Dim s2     As String                  \' partial message string\n\' Set Sheet to memory\n  Set ws = ThisWorkbook.Sheets("Duplicates")\n\n\' loop thru FULLY QUALIFIED REFERENCE\n  For Each cell In ws.Range("A2:A7")\n    bFound = False: s2 = ""             \' start each cell with empty values\n \'  Check if first occurrence of this value as duplicate to avoid further searches\n    If InStr(sFound, "|" & cell & "|") = 0 Then\n    \n      For n = cell.Row + 1 To 7           \' iterate starting point to avoid REDUNDANT SEARCH\n        If cell = ws.Range("A" & n).Value Then\n           If cell.Row <> n Then        \' only other cells, as same cell cannot be a duplicate\n                 bFound = True             \' boolean flag\n              \'  found duplicates in cell A{n}\n                 s2 = s2 & vbNewLine & " -> duplicate in A" & n\n           End If\n        End If\n       Next\n     End If\n   \' notice all found duplicates\n     If bFound Then\n         \' add value to list of all found duplicate values\n         \' (could be easily split to an array for further analyze)\n           sFound = sFound & cell & "|"\n           s = s & cell.Address & " (value=" & cell & ")" & s2 & vbNewLine & vbNewLine\n     End If\n   Next\n\' Messagebox with final result\n  MsgBox "Duplicate values are " & sFound & vbNewLine & vbNewLine & s, vbInformation, "Found duplicates"\nEnd Sub\n\n')])])]),a("p",[e._v("Depending on your needs, the example can be modified - for instance, the upper limit of n can be the row value of last cell with data in the range, or the action in case of a True If condition can be edited to extract the duplicate value somewhere else. However, the mechanics of the routine would not change.")])])}),[],!1,null,null,null);n.default=s.exports}}]);