(window.webpackJsonp=window.webpackJsonp||[]).push([[875],{1283:function(e,a,t){"use strict";t.r(a);var r=t(31),l=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"parallel-linq-plinq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parallel-linq-plinq"}},[e._v("#")]),e._v(" Parallel LINQ (PLINQ)")]),e._v(" "),t("h2",{attrs:{id:"simple-example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#simple-example"}},[e._v("#")]),e._v(" Simple example")]),e._v(" "),t("p",[e._v("This example shows how PLINQ can be used to calculate the even numbers between 1 and 10,000 using multiple threads. Note that the resulting list will won't be ordered!")]),e._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" sequence "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Enumerable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("Range")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" evenNumbers "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" sequence"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("AsParallel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("Where")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ToList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// evenNumbers = { 4, 26, 28, 30, ... }")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Order will vary with different runs")]),e._v("\n\n")])])]),t("h2",{attrs:{id:"withdegreeofparallelism"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#withdegreeofparallelism"}},[e._v("#")]),e._v(" WithDegreeOfParallelism")]),e._v(" "),t("p",[e._v("The degree of parallelism is the maximum number of concurrently executing tasks that will be used to process the query.")]),e._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" sequence "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Enumerable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("Range")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" evenNumbers "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" sequence"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("AsParallel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("WithDegreeOfParallelism")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("Where")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n")])])]),t("h2",{attrs:{id:"asordered"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#asordered"}},[e._v("#")]),e._v(" AsOrdered")]),e._v(" "),t("p",[e._v("This example shows how PLINQ can be used to calculate the even numbers between 1 and 10,000 using multiple threads. Order will be maintained in the resulting list, however keep in mind that "),t("code",[e._v("AsOrdered")]),e._v(" may hurt performance for a large numbers of elements, so un-ordered processing is preferred when possible.")]),e._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" sequence "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Enumerable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("Range")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" evenNumbers "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" sequence"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("AsParallel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("AsOrdered")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("Where")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ToList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// evenNumbers = { 2, 4, 6, 8, ..., 10000 }")]),e._v("\n\n")])])]),t("h2",{attrs:{id:"asunordered"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#asunordered"}},[e._v("#")]),e._v(" AsUnordered")]),e._v(" "),t("p",[e._v("Ordered sequences may hurt performance when dealing with a large number of elements. To mitigate this, it's possible to call "),t("code",[e._v("AsUnordered")]),e._v(" when the sequence order is no longer necessary.")]),e._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" sequence "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Enumerable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("Range")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("Select")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// -1, -2, ...")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" evenNumbers "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" sequence"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("AsParallel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("OrderBy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("Take")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("AsUnordered")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("Where")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("%")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// This line won't be affected by ordering")]),e._v("\n                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ToList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n")])])]),t("h4",{attrs:{id:"syntax"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[e._v("#")]),e._v(" Syntax")]),e._v(" "),t("ul",[t("li",[e._v("ParallelEnumerable.Aggregate(func)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Aggregate(seed, func)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Aggregate(seed, updateAccumulatorFunc, combineAccumulatorsFunc, resultSelector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Aggregate(seedFactory, updateAccumulatorFunc, combineAccumulatorsFunc, resultSelector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.All(predicate)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Any()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Any(predicate)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.AsEnumerable()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.AsOrdered()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.AsParallel()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.AsSequential()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.AsUnordered()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Average(selector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Cast()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Concat(second)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Contains(value)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Contains(value, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Count()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Count(predicate)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.DefaultIfEmpty()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.DefaultIfEmpty(defaultValue)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Distinct()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Distinct(comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.ElementAt(index)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.ElementAtOrDefault(index)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Empty()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Except(second)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Except(second, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.First()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.First(predicate)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.FirstOrDefault()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.FirstOrDefault(predicate)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.ForAll(action)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.GroupBy(keySelector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.GroupBy(keySelector, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.GroupBy(keySelector, elementSelector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.GroupBy(keySelector, elementSelector, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.GroupBy(keySelector, resultSelector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.GroupBy(keySelector, resultSelector, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.GroupBy(keySelector, elementSelector, ruleSelector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.GroupBy(keySelector, elementSelector, ruleSelector, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.GroupJoin(inner, outerKeySelector, innerKeySelector, resultSelector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.GroupJoin(inner, outerKeySelector, innerKeySelector, resultSelector, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Intersect(second)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Intersect(second, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Join(inner, outerKeySelector, innerKeySelector, resultSelector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Join(inner, outerKeySelector, innerKeySelector, resultSelector, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Last()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Last(predicate)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.LastOrDefault()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.LastOrDefault(predicate)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.LongCount()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.LongCount(predicate)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Max()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Max(selector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Min()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Min(selector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.OfType()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.OrderBy(keySelector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.OrderBy(keySelector, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.OrderByDescending(keySelector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.OrderByDescending(keySelector, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Range(start, count)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Repeat(element, count)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Reverse()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Select(selector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.SelectMany(selector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.SelectMany(collectionSelector, resultSelector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.SequenceEqual(second)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.SequenceEqual(second, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Single()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Single(predicate)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.SingleOrDefault()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.SingleOrDefault(predicate)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Skip(count)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.SkipWhile(predicate)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Sum()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Sum(selector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Take(count)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.TakeWhile(predicate)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.ThenBy(keySelector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.ThenBy(keySelector, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.ThenByDescending(keySelector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.ThenByDescending(keySelector, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.ToArray()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.ToDictionary(keySelector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.ToDictionary(keySelector, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.ToDictionary(elementSelector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.ToDictionary(elementSelector, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.ToList()")]),e._v(" "),t("li",[e._v("ParallelEnumerable.ToLookup(keySelector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.ToLookup(keySelector, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.ToLookup(keySelector, elementSelector)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.ToLookup(keySelector, elementSelector, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Union(second)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Union(second, comparer)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Where(predicate)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.WithCancellation(cancellationToken)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.WithDegreeOfParallelism(degreeOfParallelism)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.WithExecutionMode(executionMode)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.WithMergeOptions(mergeOptions)")]),e._v(" "),t("li",[e._v("ParallelEnumerable.Zip(second, resultSelector)")])])])}),[],!1,null,null,null);a.default=l.exports}}]);