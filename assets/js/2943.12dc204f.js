(window.webpackJsonp=window.webpackJsonp||[]).push([[2943],{3351:function(t,s,a){"use strict";a.r(s);var n=a(31),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"regular-expression-syntax-in-r"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regular-expression-syntax-in-r"}},[t._v("#")]),t._v(" Regular Expression Syntax in R")]),t._v(" "),a("p",[t._v("This document introduces the basics of regular expressions as used in R. For more information about R's regular expression syntax, see "),a("a",{attrs:{href:"https://stat.ethz.ch/R-manual/R-devel/library/base/html/regex.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("?regex")]),a("OutboundLink")],1),t._v(". For a comprehensive list of regular expression operators, see "),a("a",{attrs:{href:"http://userguide.icu-project.org/strings/regexp",target:"_blank",rel:"noopener noreferrer"}},[t._v("this ICU guide on regular expressions"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"use-grep-to-find-a-string-in-a-character-vector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-grep-to-find-a-string-in-a-character-vector"}},[t._v("#")]),t._v(" Use "),a("code",[t._v("grep")]),t._v(" to find a string in a character vector")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# General syntax:   ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# grep(<pattern>, <character vector>)")]),t._v("\n\nmystring "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The number 5'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The number 8'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1 is the loneliest number'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Company, 3 is'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Git SSH tag is git@github.com'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'My personal site is www.personal.org'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path/to/my/file'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ngrep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'5'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mystring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 1")]),t._v("\ngrep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mystring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 5")]),t._v("\ngrep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'number'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mystring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 1 2 3")]),t._v("\n\n")])])]),a("p",[a("code",[t._v("x|y")]),t._v(' means look for "x" or "y"')]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("grep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'5|8'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mystring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 1 2")]),t._v("\ngrep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'com|org'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mystring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 5 6")]),t._v("\n\n")])])]),a("p",[a("code",[t._v(".")]),t._v(' is a special character in Regex. It means "match any character"')]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("grep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The number .'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mystring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 1 2")]),t._v("\n\n")])])]),a("p",[t._v("Be careful when trying to match dots!")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("tricky "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'www.personal.org'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'My friend is a cyborg'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngrep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.org'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tricky"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 1 2")]),t._v("\n\n")])])]),a("p",[t._v("To match a literal character, you have to escape the string with a backslash ("),a("code",[t._v("\\")]),t._v("). However, R tries to look for escape characters when creating strings, so you actually need to escape the backslash itself (i.e. you need to "),a("strong",[t._v("double escape")]),t._v(" regular expression characters.)")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("grep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\.org'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tricky"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Error: '\\.' is an unrecognized escape in character string starting \"'\\.\"")]),t._v("\ngrep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\\\.org'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tricky"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 1")]),t._v("\n\n")])])]),a("p",[t._v("If you want to match one of several characters, you can wrap those characters in brackets ("),a("code",[t._v("[]")]),t._v(")")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("grep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[13]'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mystring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 3 4")]),t._v("\ngrep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[@/]'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mystring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 5 7")]),t._v("\n\n")])])]),a("p",[t._v("It may be useful to indicate character sequences. E.g. "),a("code",[t._v("[0-4]")]),t._v(" will match 0, 1, 2, 3, or 4, "),a("code",[t._v("[A-Z]")]),t._v(" will match any uppercase letter, "),a("code",[t._v("[A-z]")]),t._v(" will match any uppercase or lowercase letter, and "),a("code",[t._v("[A-z0-9]")]),t._v(" will match any letter or number (i.e. all alphanumeric characters)")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("grep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[0-4]'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mystring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 3 4")]),t._v("\ngrep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[A-Z]'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mystring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 1 2 4 5 6")]),t._v("\n\n")])])]),a("p",[t._v("R also has several shortcut classes that can be used in brackets. For instance, "),a("code",[t._v("[:lower:]")]),t._v(" is short for "),a("code",[t._v("a-z")]),t._v(", "),a("code",[t._v("[:upper:]")]),t._v(" is short for "),a("code",[t._v("A-Z")]),t._v(", "),a("code",[t._v("[:alpha:]")]),t._v(" is "),a("code",[t._v("A-z")]),t._v(", "),a("code",[t._v("[:digit:]")]),t._v(" is "),a("code",[t._v("0-9")]),t._v(", and "),a("code",[t._v("[:alnum:]")]),t._v(" is "),a("code",[t._v("A-z0-9")]),t._v(". Note that these "),a("strong",[t._v("whole expressions")]),t._v(" must be used inside brackets; for instance, to match a single digit, you can use "),a("code",[t._v("[[:digit:]]")]),t._v(" (note the double brackets). As another example, "),a("code",[t._v("[@[:digit:]/]")]),t._v(" will match the characters "),a("code",[t._v("@")]),t._v(", "),a("code",[t._v("/")]),t._v(" or "),a("code",[t._v("0-9")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("grep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[[:digit:]]'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mystring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 1 2 3 4")]),t._v("\ngrep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[@[:digit:]/]'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mystring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 1 2 3 4 5 7")]),t._v("\n\n")])])]),a("p",[t._v("Brackets can also be used to negate a match with a carat ("),a("code",[t._v("^")]),t._v("). For instance, "),a("code",[t._v("[^5]")]),t._v(' will match any character other than "5".')]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("grep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The number [^5]'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mystring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1] 2")]),t._v("\n\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);