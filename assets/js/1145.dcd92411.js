(window.webpackJsonp=window.webpackJsonp||[]).push([[1145],{1553:function(e,t,a){"use strict";a.r(t);var r=a(31),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"reflog-restoring-commits-not-shown-in-git-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reflog-restoring-commits-not-shown-in-git-log"}},[e._v("#")]),e._v(" Reflog - Restoring commits not shown in git log")]),e._v(" "),a("h2",{attrs:{id:"recovering-from-a-bad-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#recovering-from-a-bad-rebase"}},[e._v("#")]),e._v(" Recovering from a bad rebase")]),e._v(" "),a("p",[e._v("Suppose that you had started an interactive rebase:")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("git rebase --interactive HEAD~20\n\n")])])]),a("p",[e._v("and by mistake, you squashed or dropped some commits that you didn't want to lose, but then completed the rebase. To recover, do "),a("code",[e._v("git reflog")]),e._v(", and you might see some output like this:")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[e._v("aaaaaaa HEAD@{0} rebase -i (finish): returning to refs/head/master\nbbbbbbb HEAD@{1} rebase -i (squash): Fix parse error\n...\nccccccc HEAD@{n} rebase -i (start): checkout HEAD~20\nddddddd HEAD@{n+1} ...\n...\n\n")])])]),a("p",[e._v("In this case, the last commit, "),a("code",[e._v("ddddddd")]),e._v(" (or "),a("code",[e._v("HEAD@{n+1}")]),e._v(") is the tip of your "),a("strong",[e._v("pre-rebase")]),e._v(" branch. Thus, to recover that commit (and all parent commits, including those accidentally squashed or dropped), do:")]),e._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git checkout HEAD@{n+1}")]),e._v("\n\n")])])]),a("p",[e._v("You can then create a new branch at that commit with "),a("code",[e._v("git checkout -b [branch]")]),e._v(". See "),a("a",{attrs:{href:"https://stackoverflow.com/documentation/git/415/branching/1633/creating-and-checking-out-new-branches#t=201609211725096795131",target:"_blank",rel:"noopener noreferrer"}},[e._v("Branching"),a("OutboundLink")],1),e._v(" for more information.")]),e._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[e._v("#")]),e._v(" Remarks")]),e._v(" "),a("p",[e._v("Git's reflog records the position of HEAD (the ref for the current state of the repository) every time that it is changed.  Generally, every operation that might be destructive involves moving the HEAD pointer (since if anything is changed, including in the past, the tip commit's hash will change), so it is always possible to revert back to an older state, before a dangerous operation, by finding the right line in the reflog.")]),e._v(" "),a("p",[e._v("Objects that are not referenced by any ref are usually garbage collected in ~30 days, however, so the reflog may not always be able to help.")])])}),[],!1,null,null,null);t.default=s.exports}}]);