(window.webpackJsonp=window.webpackJsonp||[]).push([[1012],{1420:function(a,t,e){"use strict";e.r(t);var s=e(31),n=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"parallel-processing-using-net-framework"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parallel-processing-using-net-framework"}},[a._v("#")]),a._v(" Parallel processing using .Net framework")]),a._v(" "),e("h2",{attrs:{id:"parallel-extensions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parallel-extensions"}},[a._v("#")]),a._v(" Parallel Extensions")]),a._v(" "),e("p",[a._v("Parallel extensions have been introduced along with the Task Parallel Library to achieve data Parallelism. Data parallelism refers to scenarios in which the same operation is performed concurrently (that is, in parallel) on elements in a source collection or array. The .NET provides new constructs to achieve data parallelism by using Parallel.For and Parallel.Foreach constructs.")]),a._v(" "),e("div",{staticClass:"language-dotnet extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dotnet"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//Sequential version")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("foreach")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")])]),a._v(" item "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v(" sourcecollection"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("Process")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Parallel equivalent")]),a._v("\n\nParallel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("foreach")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("sourcecollection"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" item "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("Process")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),e("p",[a._v("The above mentioned Parallel.ForEach construct utilizes the multiple cores and thus enhances the performance in the same fashion.")])])}),[],!1,null,null,null);t.default=n.exports}}]);