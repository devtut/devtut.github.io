(window.webpackJsonp=window.webpackJsonp||[]).push([[2323],{2731:function(t,e,a){"use strict";a.r(e);var s=a(31),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"structs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#structs"}},[t._v("#")]),t._v(" Structs")]),t._v(" "),a("h2",{attrs:{id:"cgpoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cgpoint"}},[t._v("#")]),t._v(" CGPoint")]),t._v(" "),a("p",[t._v("One really good example of a struct is "),a("code",[t._v("CGPoint")]),t._v("; it's a simple value that represents a 2-dimensional point. It has 2 properties, "),a("code",[t._v("x")]),t._v(" and "),a("code",[t._v("y")]),t._v(", and can be written as")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    CGFloat x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    CGFloat y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" CGPoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("If you used Objective-C for Mac or iOS app development before, you've almost certainly come across "),a("code",[t._v("CGPoint")]),t._v("; "),a("code",[t._v("CGPoint")]),t._v("s hold the position of pretty much everything on screen, from views and controls to objects in a game to changes in a gradient. This means that "),a("code",[t._v("CGPoint")]),t._v("s are used a lot. This is even more true with really performance-heavy games; these games tend to have a lot of objects, and all of these objects need positions. These positions are often either "),a("code",[t._v("CGPoint")]),t._v("s, or some other type of struct that conveys a point (such as a 3-dimensional point for 3d games).")]),t._v(" "),a("p",[t._v("Points like "),a("code",[t._v("CGPoint")]),t._v(" could easily be represented as objects, like")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@interface")]),t._v(" CGPoint "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    CGFloat x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    CGFloat y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Point-related methods (e.g. add, isEqualToPoint, etc.)")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nonatomic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" assign"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("CGFloat x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@property")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nonatomic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" assign"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("CGFloat y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@implementation")]),t._v(" CGPoint\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@synthesize")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@end")]),t._v("\n\n")])])]),a("p",[t._v("However, if "),a("code",[t._v("CGPoint")]),t._v(" was used in this way it would take a lot longer to create and manipulate points. In smaller, faster programs this wouldn't really cause a difference, and in those cases it would be OK or maybe even better to use object points. But in large programs where points are be used a lot, using objects as points can really hurt performance, making the program slower, and also waste memory, which could force the program to crash.")]),t._v(" "),a("h2",{attrs:{id:"defining-a-structure-and-accessing-structure-members"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defining-a-structure-and-accessing-structure-members"}},[t._v("#")]),t._v(" Defining a Structure and Accessing Structure Members")]),t._v(" "),a("p",[t._v("The format of the struct statement is this:")]),t._v(" "),a("div",{staticClass:"language-objectivec extra-class"},[a("pre",{pre:!0,attrs:{class:"language-objectivec"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("structure tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   member definition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   member definition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n   member definition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("one or more structure variables"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n")])])]),a("p",[t._v("Example: declare the ThreeFloats structure:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\n  typedef struct {\n    float x, y, z;\n} ThreeFloats;\n\n@interface MyClass\n- (void)setThreeFloats:(ThreeFloats)threeFloats;\n- (ThreeFloats)threeFloats;\n@end\n\n")])])]),a("p",[t._v('Sending an instance of MyClass the message valueForKey: with the parameter @"threeFloats" will invoke the MyClass method threeFloats and return the result wrapped in an NSValue.')]),t._v(" "),a("h4",{attrs:{id:"syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),a("ul",[a("li",[t._v("typedef struct { "),a("strong",[t._v("typeA propertyA")]),t._v("; "),a("strong",[t._v("typeB propertyB")]),t._v("; ... } "),a("strong",[t._v("StructName")])])]),t._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),a("p",[t._v("In Objective C, you should almost always use an object instead of a struct. However, there are still cases where using a struct is better, such as:")]),t._v(" "),a("ul",[a("li",[t._v("When you're going to be creating and destroying a lot of values of the (struct) type, so you need good performance and small memory usage")])]),t._v(" "),a("blockquote"),t._v(" "),a("ul",[t._v("\n- Structs are faster to create and use because when calling a method on an object, the method has to be determined at runtime\n- Structs take up less size because objects have an extra property `isa`, which holds their class\n")]),t._v(" "),a("ul",[a("li",[t._v("When the value has only a couple of properties and a small total size (take "),a("code",[t._v("CGSize")]),t._v("; it has 2 floats which are 4 bytes each, so it can take up 8 bytes), and is going to be used a lot (ties in with the first point)")]),t._v(" "),a("li",[t._v("When you could use "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/c/1119/structs-unions-and-enums#t=201607251849213065581",target:"_blank",rel:"noopener noreferrer"}},[t._v("unions"),a("OutboundLink")],1),t._v(" or "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/c/1930/bitfields#t=201607251847447438382",target:"_blank",rel:"noopener noreferrer"}},[t._v("bitfields"),a("OutboundLink")],1),t._v(", and importantly, "),a("strong",[t._v("need the size saved by them")]),t._v(" because you need small memory usage (ties in with the first point)")]),t._v(" "),a("li",[t._v("When you "),a("strong",[t._v("really")]),t._v(' want to store an array inside of the struct, since Objective-C objects can\'t directly store C-arrays. However, note that you can still "indirectly" get an array in an Objective-C object by making it a reference (i.e. '),a("code",[t._v("type *")]),t._v(" in place of the C-array "),a("code",[t._v("type[]")]),t._v(")")]),t._v(" "),a("li",[t._v("When you need to communicate with some other code, such as a library, that's coded in C; structs are fully implemented in C but objects are not")])])])}),[],!1,null,null,null);e.default=n.exports}}]);