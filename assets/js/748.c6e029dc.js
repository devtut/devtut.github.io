(window.webpackJsonp=window.webpackJsonp||[]).push([[748],{1156:function(t,e,s){"use strict";s.r(e);var n=s(31),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"unit-testing-in-c"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unit-testing-in-c"}},[t._v("#")]),t._v(" Unit Testing in C++")]),t._v(" "),s("p",[t._v("Unit testing is a level in software testing that validates the behavior and correctness of units of code.")]),t._v(" "),s("p",[t._v('In C++, "units of code" often refer to either classes, functions, or groups of either. Unit testing is often performed using specialized "testing frameworks" or "testing libraries" that often use non-trivial syntax or usage patterns.')]),t._v(" "),s("p",[t._v("This topic will review different strategies and unit testing libraries or frameworks.")]),t._v(" "),s("h2",{attrs:{id:"google-test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#google-test"}},[t._v("#")]),t._v(" Google Test")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/google/googletest",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Test is a C++ testing framework maintained by Google."),s("OutboundLink")],1),t._v(" It requires building the "),s("code",[t._v("gtest")]),t._v(" library and linking it to your testing framework when building a test case file.")]),t._v(" "),s("h3",{attrs:{id:"minimal-example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#minimal-example"}},[t._v("#")]),t._v(" Minimal Example")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// main.cpp")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<gtest/gtest.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Google Test test cases are created using a C++ preprocessor macro")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Here, a "test suite" name and a specific "test name" are provided.')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TEST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("module_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" test_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world!"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Google Test will also provide macros for assertions.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ASSERT_EQ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Google Test can be run manually from the main() function")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// or, it can be linked to the gtest_main library for an already")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// set-up main() function primed to accept Google Test test cases.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("testing"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("InitGoogleTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("RUN_ALL_TESTS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Build command: g++ main.cpp -lgtest")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"catch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#catch"}},[t._v("#")]),t._v(" Catch")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/philsquared/Catch",target:"_blank",rel:"noopener noreferrer"}},[t._v("Catch"),s("OutboundLink")],1),t._v(" is a header only library that allows you to use both "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Test-driven_development",target:"_blank",rel:"noopener noreferrer"}},[t._v("TDD"),s("OutboundLink")],1),t._v(" and "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Behavior-driven_development",target:"_blank",rel:"noopener noreferrer"}},[t._v("BDD"),s("OutboundLink")],1),t._v(" unit test style.")]),t._v(" "),s("p",[t._v("The following snippet is from the Catch documentation page at "),s("a",{attrs:{href:"https://github.com/philsquared/Catch/blob/master/docs/tutorial.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("this link"),s("OutboundLink")],1),t._v(":")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('\n\nSCENARIO( "vectors can be sized and resized", "[vector]" ) {\n    GIVEN( "A vector with some items" ) {\n        std::vector v( 5 );\n        \n        REQUIRE( v.size() == 5 );\n        REQUIRE( v.capacity() >= 5 );\n        \n        WHEN( "the size is increased" ) {\n            v.resize( 10 );\n            \n            THEN( "the size and capacity change" ) {\n                REQUIRE( v.size() == 10 );\n                REQUIRE( v.capacity() >= 10 );\n            }\n        }\n        WHEN( "the size is reduced" ) {\n            v.resize( 0 );\n            \n            THEN( "the size changes but not capacity" ) {\n                REQUIRE( v.size() == 0 );\n                REQUIRE( v.capacity() >= 5 );\n            }\n        }\n        WHEN( "more capacity is reserved" ) {\n            v.reserve( 10 );\n            \n            THEN( "the capacity changes but not the size" ) {\n                REQUIRE( v.size() == 5 );\n                REQUIRE( v.capacity() >= 10 );\n            }\n        }\n        WHEN( "less capacity is reserved" ) {\n            v.reserve( 0 );\n            \n            THEN( "neither size nor capacity are changed" ) {\n                REQUIRE( v.size() == 5 );\n                REQUIRE( v.capacity() >= 5 );\n            }\n        }\n    }\n}\n\n')])])]),s("p",[t._v("Conveniently, these tests will be reported as follows when run:")])])}),[],!1,null,null,null);e.default=a.exports}}]);