(window.webpackJsonp=window.webpackJsonp||[]).push([[2411],{2818:function(a,s,t){"use strict";t.r(s);var e=t(31),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"subroutines"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#subroutines"}},[a._v("#")]),a._v(" Subroutines")]),a._v(" "),t("h2",{attrs:{id:"creating-subroutines"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#creating-subroutines"}},[a._v("#")]),a._v(" Creating subroutines")]),a._v(" "),t("p",[a._v("Subroutines are created by using the keyword "),t("code",[a._v("sub")]),a._v(" followed by an identifier and a code block enclosed in braces.")]),a._v(" "),t("p",[a._v("You can access the arguments by using the special variable "),t("code",[a._v("@_")]),a._v(", which contains all arguments as an array.")]),a._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("sub")]),a._v(" function_name")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@more_args")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@_")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ...")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),t("p",[a._v("Since the function "),t("code",[a._v("shift")]),a._v(" defaults to shifting "),t("code",[a._v("@_")]),a._v(" when used inside a subroutine, it's a common pattern to extract the arguments sequentially into local variables at the beginning of a subroutine:")]),a._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("sub")]),a._v(" function_name")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" shift"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" shift"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@more_args")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@_")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ...")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# emulate named parameters (instead of positional)")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("sub")]),a._v(" function_name")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("%args")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("arg1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'default'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@_")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("delete")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$args")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("arg1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("delete")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$args")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("arg2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ...")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("sub")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" shift"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ...")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("p",[a._v("Alternatively, the experimental feature "),t("code",[a._v('"signatures"')]),a._v(" can be used to unpack parameters, which are passed by value ("),t("strong",[a._v("not")]),a._v(" by reference).")]),a._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("use")]),a._v(" feature "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"signatures"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("sub")]),a._v(" function_name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@more_args")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ...")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),t("p",[a._v("Default values can be used for the parameters.")]),a._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("use")]),a._v(" feature "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"signatures"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("sub")]),a._v(" function_name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ...")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),t("p",[a._v("You can use any expression to give a default value to a parameter – including other parameters.")]),a._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("sub")]),a._v(" function_name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ...")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),t("p",[a._v("Note that you can't reference parameters which are defined after the current parameter – hence the following code doesn't work quite as expected.")]),a._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("sub")]),a._v(" function_name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("print")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# => <nothing>")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("print")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$arg2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# => 1")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"subroutines-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#subroutines-2"}},[a._v("#")]),a._v(" Subroutines")]),a._v(" "),t("p",[a._v("Subroutines hold code. Unless specified otherwise, they are globally defined.")]),a._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Functions do not (have to) specify their argument list")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("sub")]),a._v(" returns_one")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Functions return the value of the last expression by default")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# The return keyword here is unnecessary, but helps readability.")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Its arguments are available in @_, however")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("sub")]),a._v(" sum")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$ret")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$value")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@_")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$ret")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$value")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$ret")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Perl makes an effort to make parens around argument list optional")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("say")]),a._v(" sum "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("..")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 6")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# If you treat functions as variables, the & sigil is mandatory.")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("say")]),a._v(" defined "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("&sum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 1")]),a._v("\n\n")])])]),t("p",[t("a",{attrs:{href:"http://learn.perl.org/docs/keywords.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Some builtins"),t("OutboundLink")],1),a._v(" such as "),t("code",[a._v("print")]),a._v(" or "),t("code",[a._v("say")]),a._v(" are keywords, not functions, so e.g. "),t("code",[a._v("&say")]),a._v(" is undefined. It also does mean that you can define them, but you will have to specify the package name to actually call them")]),a._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# This defines the function under the default package, 'main'")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("sub")]),a._v(" say")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# This is instead the say keyword")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("say")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"I say, @_"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ...so you can call it like this: ")]),a._v("\nmain"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("say")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'wow'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# I say, wow.")]),a._v("\n\n")])])]),t("p",[a._v("Since Perl 5.18, you can also have non-global functions:")]),a._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("use")]),a._v(" feature "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'lexical_subs'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Nasty code ahead")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("sub")]),a._v(" prod")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$ret")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$ret")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@_")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$ret")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$value")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" prod "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("..")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 720 ")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("say")]),a._v(" defined "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("&prod")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 1")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("say")]),a._v(" defined "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("&prod")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 0")]),a._v("\n\n")])])]),t("p",[a._v("Since 5.20, you can also have named parameters.")]),a._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("use")]),a._v(" feature "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'signatures'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("sub")]),a._v(" greet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("say")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello, $name"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),t("p",[a._v("This should "),t("strong",[a._v("not")]),a._v(" be confused with prototypes, a facility Perl has to let you define functions that behave like built-ins. Function prototypes must be visible at compile time and its effects can be ignored by specifying the "),t("code",[a._v("&")]),a._v(" sigil. Prototypes are generally considered to be an advanced feature that is best used with great care.")]),a._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# This prototype makes it a compilation error to call this function with anything ")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# that isn't an array. Additionally, arrays are automatically turned into arrayrefs")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("sub")]),a._v(" receives_arrayrefs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@)")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$x")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" shift"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" $"),t("span",{pre:!0,attrs:{class:"token regex"}},[a._v("y = shift;\n}\n\nmy @a = (1..3);\nmy @b =")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("..")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nreceives_arrayrefs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@b")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# okay,   $x = \\@a, $y = \\@b, @_ = ();")]),a._v("\nreceives_arrayrefs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@b")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v('# compilation error, "Type … must be array …"')]),a._v("\nBEGIN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" receives_arrayrefs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@b")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Specify the sigil to ignore the prototypes. ")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("&receives_arrayrefs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@b")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# okay,   $x = \\@a, $y = \\@b, @_ = ();")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("&receives_arrayrefs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@b")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ok, but $x = 1,   $y = 2,   @_ = (3,1,2,3,4);")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"subroutine-arguments-are-passed-by-reference-except-those-in-signatures"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#subroutine-arguments-are-passed-by-reference-except-those-in-signatures"}},[a._v("#")]),a._v(" Subroutine arguments are passed by reference (except those in signatures)")]),a._v(" "),t("p",[a._v("Subroutine arguments in Perl are passed by reference, unless they are in the signature. This means that the members of the "),t("code",[a._v("@_")]),a._v(" array inside the sub are just "),t("strong",[a._v("aliases")]),a._v(" to the actual arguments. In the following example, "),t("code",[a._v("$text")]),a._v(" in the main program is left modified after the subroutine call because "),t("code",[a._v("$_[0]")]),a._v(" inside the sub is actually just a different name for the same variable. The second invocation throws an error because a string literal is not a variable and therefore can't be modified.")]),a._v(" "),t("div",{staticClass:"language-perl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-perl"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("use")]),a._v(" feature "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'say'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("sub")]),a._v(" edit")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$_")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=~")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[a._v("s/world/sub/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$text")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello, world!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nedit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$text")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("say")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$text")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Hello, sub!")]),a._v("\n\nedit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello, world!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Error: Modification of a read-only value attempted")]),a._v("\n\n")])])]),t("p",[a._v("To avoid clobbering your caller's variables it is therefore important to copy "),t("code",[a._v("@_")]),a._v(" to locally scoped variables ("),t("code",[a._v("my ...")]),a._v(') as described under "Creating subroutines".')]),a._v(" "),t("h4",{attrs:{id:"remarks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[a._v("#")]),a._v(" Remarks")]),a._v(" "),t("p",[a._v("Subroutines get their arguments to magic variable called  "),t("code",[a._v("@_")]),a._v(". While it doesn't have to be unpacked, it's recommended, as it helps readability, and prevents accidental changes as arguments of "),t("code",[a._v("@_")]),a._v(" are passed by reference (can be modified).")])])}),[],!1,null,null,null);s.default=n.exports}}]);