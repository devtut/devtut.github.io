(window.webpackJsonp=window.webpackJsonp||[]).push([[2126],{2534:function(t,a,e){"use strict";e.r(a);var s=e(31),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"many-to-many-mapping-table"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#many-to-many-mapping-table"}},[t._v("#")]),t._v(" Many-to-many Mapping table")]),t._v(" "),e("h2",{attrs:{id:"typical-schema"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typical-schema"}},[t._v("#")]),t._v(" Typical schema")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" XtoY "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# No surrogate id for this table")]),t._v("\n    x_id "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MEDIUMINT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNSIGNED")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- For JOINing to one table")]),t._v("\n    y_id "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MEDIUMINT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNSIGNED")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- For JOINing to the other table")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Include other fields specific to the 'relation'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("            "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- When starting with X")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x_id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("             "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- When starting with Y")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENGINE")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("InnoDB")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[t._v("(See Remarks, below, for rationale.)")]),t._v(" "),e("h4",{attrs:{id:"remarks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),e("li",[t._v("Lack of an `AUTO_INCREMENT` id for this table -- The PK given is the\n'natural' PK; there is no good reason for a surrogate.")]),t._v(" "),e("li",[t._v("`MEDIUMINT` --\nThis is a reminder that all `INTs` should be made as small as is safe\n(smaller â‡’ faster). Of course the declaration here must match the\ndefinition in the table being linked to.")]),t._v(" "),e("li",[t._v("`UNSIGNED` -- Nearly all\nINTs may as well be declared non-negative")]),t._v(" "),e("li",[t._v("`NOT NULL` -- Well, that's\ntrue, isn't it?")]),t._v(" "),e("li",[t._v("`InnoDB` -- More effecient than MyISAM because of the\nway the `PRIMARY KEY` is clustered with the data in InnoDB.")]),t._v(" "),e("li",[t._v("`INDEX(y_id, x_id)` -- The `PRIMARY KEY` makes it efficient to go one\ndirection; the makes the other direction efficient. No need to say\n`UNIQUE`; that would be extra effort on `INSERTs`.")]),t._v(" "),e("li",[t._v("In the secondary\nindex, saying just `INDEX(y_id)` would work because it would implicit\ninclude `x_id`. But I would rather make it more obvious that I am\nhoping for a 'covering' index.")]),t._v(" "),e("p",[t._v("You "),e("strong",[t._v("may")]),t._v(" want to add more columns to the table; this is rare.  The extra columns could provide information about the "),e("strong",[t._v("relationship")]),t._v(" that the table represents.")]),t._v(" "),e("p",[t._v("You "),e("strong",[t._v("may")]),t._v(" want to add "),e("code",[t._v("FOREIGN KEY")]),t._v(" constraints.")])])}),[],!1,null,null,null);a.default=n.exports}}]);