(window.webpackJsonp=window.webpackJsonp||[]).push([[3437],{3844:function(e,t,r){"use strict";r.r(t);var n=r(31),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"recursion"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#recursion"}},[e._v("#")]),e._v(" Recursion")]),e._v(" "),r("p",[e._v("A function that calls itself is said to be "),r("strong",[e._v("recursive")]),e._v(". Recursive logic can often be implemented as a loop, too. Recursion must be controlled with a parameter, so that the function knows when to stop recursing and deepening the call stack. "),r("strong",[e._v("Infinite recursion")]),e._v(" eventually causes a run-time error '28': \"Out of stack space\".")]),e._v(" "),r("p",[e._v("See "),r("a",{attrs:{href:"http://stackoverflow.com/documentation/vba/3236/recursion",target:"_blank",rel:"noopener noreferrer"}},[e._v("Recursion"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("h2",{attrs:{id:"factorials"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#factorials"}},[e._v("#")]),e._v(" Factorials")]),e._v(" "),r("div",{staticClass:"language-vb extra-class"},[r("pre",{pre:!0,attrs:{class:"language-vb"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Function")]),e._v(" Factorial"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Value "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Long")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Long")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("If")]),e._v(" Value "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Or")]),e._v(" Value "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Then")]),e._v("\n         Factorial "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Else")]),e._v("\n       Factorial "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Factorial"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Value "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" Value\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("End")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("If")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("End")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Function")]),e._v("\n\n")])])]),r("h2",{attrs:{id:"folder-recursion"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#folder-recursion"}},[e._v("#")]),e._v(" Folder Recursion")]),e._v(" "),r("p",[e._v("Early Bound (with a reference to "),r("code",[e._v("Microsoft Scripting Runtime")]),e._v(")")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("\n   Sub EnumerateFilesAndFolders( _\n        FolderPath As String, _\n        Optional MaxDepth As Long = -1, _\n        Optional CurrentDepth As Long = 0, _\n        Optional Indentation As Long = 2)\n      \n        Dim FSO As Scripting.FileSystemObject\n        Set FSO = New Scripting.FileSystemObject\n        \n        'Check the folder exists\n        If FSO.FolderExists(FolderPath) Then\n            Dim fldr As Scripting.Folder\n            Set fldr = FSO.GetFolder(FolderPath)\n            \n            'Output the starting directory path\n            If CurrentDepth = 0 Then\n              Debug.Print fldr.Path\n            End If\n            \n            'Enumerate the subfolders\n            Dim subFldr As Scripting.Folder\n            For Each subFldr In fldr.SubFolders\n                Debug.Print Space$((CurrentDepth + 1) * Indentation) & subFldr.Name\n                If CurrentDepth < MaxDepth Or MaxDepth = -1 Then\n                    'Recursively call EnumerateFilesAndFolders\n                    EnumerateFilesAndFolders subFldr.Path, MaxDepth, CurrentDepth + 1, Indentation\n                End If\n            Next subFldr\n            \n            'Enumerate the files\n            Dim fil As Scripting.File\n            For Each fil In fldr.Files\n                Debug.Print Space$((CurrentDepth + 1) * Indentation) & fil.Name\n            Next fil\n        End If\n    End Sub\n\n")])])]),r("h4",{attrs:{id:"remarks"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[e._v("#")]),e._v(" Remarks")]),e._v(" "),r("p",[e._v("Recursion allows for repeated, self-referencing calls of a procedure.")])])}),[],!1,null,null,null);t.default=s.exports}}]);