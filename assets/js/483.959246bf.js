(window.webpackJsonp=window.webpackJsonp||[]).push([[483],{891:function(s,t,a){"use strict";a.r(t);var n=a(31),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"chain-of-commands-and-operations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chain-of-commands-and-operations"}},[s._v("#")]),s._v(" Chain of commands and operations")]),s._v(" "),a("p",[s._v("There are some means to chain commands together. Simple ones like just a ; or more complex ones like logical chains which run depending on some conditions. The third one is piping commands, which effectively hands over the output data to the next command in the chain.")]),s._v(" "),a("h2",{attrs:{id:"counting-a-text-pattern-ocurrence"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#counting-a-text-pattern-ocurrence"}},[s._v("#")]),s._v(" Counting a text pattern ocurrence")]),s._v(" "),a("p",[s._v("Using a pipe makes the output of a command be the input of the next one.")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" -c "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('".conf"')]),s._v("\n\n")])])]),a("p",[s._v('In this case the ouput of the ls command is used as the input of the grep command. The result will be the number of files that include ".conf" in their name.')]),s._v(" "),a("p",[s._v("This can be used to contruct chains of subsequent commands as long as needed:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('".conf"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" -c "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"transfer-root-cmd-output-to-user-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transfer-root-cmd-output-to-user-file"}},[s._v("#")]),s._v(" transfer root cmd output to user file")]),s._v(" "),a("p",[s._v("Often one want to show the result of a command executed by root to other users. The "),a("strong",[s._v("tee")]),s._v(" command allows easily to write a file with user perms from a command running as root:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("su")]),s._v(" -c "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ifconfig")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tee")]),s._v(" ~/results-of-ifconfig.txt\n\n")])])]),a("p",[s._v("Only "),a("strong",[s._v("ifconfig")]),s._v(" runs as root.")]),s._v(" "),a("h2",{attrs:{id:"logical-chaining-of-commands-with-and"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logical-chaining-of-commands-with-and"}},[s._v("#")]),s._v(" logical chaining of commands with && and ||")]),s._v(" "),a("p",[a("strong",[s._v("&&")]),s._v(" chains two commands. The second one runs only if the first one exits with success.\n"),a("strong",[s._v("||")]),s._v(" chains two commands. But second one runs only if first one exits with failure.")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"yes"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"no"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# if you want to run more commands within a logical chain, use curly braces")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# which designate a block of commands ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# They do need a ; before closing bracket so bash can diffentiate from other uses")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# of curly braces")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"let me see."')]),s._v(" \n               "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hmmm, yes, i think it is true"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n          "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"as i am in the negation i think "')]),s._v(" \n               "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"this is false. a is a not b."')]),s._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# mind the use of line continuation sign \\")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# only needed to chain yes block with || ....")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"serial-chaining-of-commands-with-semicolon"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serial-chaining-of-commands-with-semicolon"}},[s._v("#")]),s._v(" serial chaining of commands with semicolon")]),s._v(" "),a("p",[s._v("A semicolon separates just two commands.")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"i am first"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"i am second"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" i am third"')]),s._v("\n\n")])])]),a("h2",{attrs:{id:"chaining-commands-with"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chaining-commands-with"}},[s._v("#")]),s._v(" chaining commands with |")]),s._v(" "),a("p",[s._v("The "),a("strong",[s._v("|")]),s._v(" takes the output of the left command and pipes it as input the right command. Mind, that this is done in a subshell. Hence you cannot set values of vars of the calling process wihtin a pipe.")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" -type f -a -iname "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'*.mp3'")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n             mute --noise "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$filename")]),s._v('"')]),s._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v(" \n\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);