(window.webpackJsonp=window.webpackJsonp||[]).push([[1220],{1628:function(a,s,t){"use strict";t.r(s);var e=t(31),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"recursion-schemes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#recursion-schemes"}},[a._v("#")]),a._v(" Recursion Schemes")]),a._v(" "),t("h2",{attrs:{id:"fixed-points"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fixed-points"}},[a._v("#")]),a._v(" Fixed points")]),a._v(" "),t("p",[t("code",[a._v("Fix")]),a._v(' takes a "template" type and ties the recursive knot, layering the template like a lasagne.')]),a._v(" "),t("div",{staticClass:"language-hs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-hs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("newtype")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("unFix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),t("p",[a._v("Inside a "),t("code",[a._v("Fix f")]),a._v(" we find a layer of the template "),t("code",[a._v("f")]),a._v(". To fill in "),t("code",[a._v("f")]),a._v("'s parameter, "),t("code",[a._v("Fix f")]),a._v(" plugs in "),t("strong",[a._v("itself")]),a._v(". So when you look inside the template "),t("code",[a._v("f")]),a._v(" you find a recursive occurrence of "),t("code",[a._v("Fix f")]),a._v(".")]),a._v(" "),t("p",[a._v("Here is how a typical recursive datatype can be translated into our framework of templates and fixed points. We remove recursive occurrences of the type and mark their positions using the "),t("code",[a._v("r")]),a._v(" parameter.")]),a._v(" "),t("div",{staticClass:"language-hs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-hs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("{-# LANGUAGE DeriveFunctor #-}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- natural numbers")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- data Nat = Zero | Suc Nat")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("NatF")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("r")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Zero_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Suc_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("r")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("deriving")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Functor")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nat")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("NatF")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("zero")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nat")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("zero")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Zero_")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("suc")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nat")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nat")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("suc")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("n")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Suc_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("n")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- lists: note the additional type parameter a")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- data List a = Nil | Cons a (List a)")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ListF")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("r")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nil_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Cons_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("r")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("deriving")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Functor")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("List")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ListF")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("nil")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("List")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("nil")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nil_")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("cons")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("List")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("List")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("cons")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("xs")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Cons_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("xs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- binary trees: note two recursive occurrences")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- data Tree a = Leaf | Node (Tree a) a (Tree a)")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("TreeF")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("r")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Leaf_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Node_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("r")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("r")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("deriving")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Functor")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Tree")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("TreeF")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("leaf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Tree")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("leaf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Leaf_")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("node")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Tree")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Tree")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Tree")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("node")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("l")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("r")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Node_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("l")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("r")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"folding-up-a-structure-one-layer-at-a-time"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#folding-up-a-structure-one-layer-at-a-time"}},[a._v("#")]),a._v(" Folding up a structure one layer at a time")]),a._v(" "),t("p",[t("strong",[a._v("Catamorphisms")]),a._v(", or "),t("strong",[a._v("folds")]),a._v(", model primitive recursion. "),t("code",[a._v("cata")]),a._v(" tears down a fixpoint layer by layer, using an "),t("strong",[a._v("algebra")]),a._v(" function (or "),t("strong",[a._v("folding function")]),a._v(") to process each layer. "),t("code",[a._v("cata")]),a._v(" requires a "),t("code",[a._v("Functor")]),a._v(" instance for the template type "),t("code",[a._v("f")]),a._v(".")]),a._v(" "),t("div",{staticClass:"language-hs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-hs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("cata")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Functor")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("cata")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("cata")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("unFix")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- list example")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("foldr")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("List")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("foldr")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("z")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("cata")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("alg")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("alg")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nil_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("z")]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("alg")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Cons_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("acc")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("acc")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"unfolding-a-structure-one-layer-at-a-time"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unfolding-a-structure-one-layer-at-a-time"}},[a._v("#")]),a._v(" Unfolding a structure one layer at a time")]),a._v(" "),t("p",[t("strong",[a._v("Anamorphisms")]),a._v(", or "),t("strong",[a._v("unfolds")]),a._v(", model primitive corecursion. "),t("code",[a._v("ana")]),a._v(" builds up a fixpoint layer by layer, using a "),t("strong",[a._v("coalgebra")]),a._v(" function (or "),t("strong",[a._v("unfolding function")]),a._v(") to produce each new layer. "),t("code",[a._v("ana")]),a._v(" requires a "),t("code",[a._v("Functor")]),a._v(" instance for the template type "),t("code",[a._v("f")]),a._v(".")]),a._v(" "),t("div",{staticClass:"language-hs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-hs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ana")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Functor")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ana")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ana")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- list example")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("unfoldr")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("List")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("unfoldr")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ana")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("coalg")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("coalg")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("of")]),a._v("\n                         "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nil_")]),a._v("\n                         "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Cons_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y")]),a._v("\n\n")])])]),t("p",[a._v("Note that "),t("code",[a._v("ana")]),a._v(" and "),t("code",[a._v("cata")]),a._v(" are "),t("strong",[a._v("dual")]),a._v(". The types and implementations are mirror images of one another.")]),a._v(" "),t("h2",{attrs:{id:"unfolding-and-then-folding-fused"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unfolding-and-then-folding-fused"}},[a._v("#")]),a._v(" Unfolding and then folding, fused")]),a._v(" "),t("p",[a._v("It's common to structure a program as building up a data structure and then collapsing it to a single value. This is called a "),t("strong",[a._v("hylomorphism")]),a._v(" or "),t("strong",[a._v("refold")]),a._v(". It's possible to elide the intermediate structure altogether for improved efficiency.")]),a._v(" "),t("div",{staticClass:"language-hs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-hs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hylo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Functor")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hylo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hylo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- no mention of Fix!")]),a._v("\n\n")])])]),t("p",[a._v("Derivation:")]),a._v(" "),t("div",{staticClass:"language-hs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-hs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hylo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("cata")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ana")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v("\n         "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("cata")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("unFix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ana")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- definition of cata and ana")]),a._v("\n         "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("cata")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ana")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- unfix . Fix = id")]),a._v("\n         "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("cata")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ana")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- Functor law")]),a._v("\n         "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hylo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- definition of hylo")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"primitive-recursion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#primitive-recursion"}},[a._v("#")]),a._v(" Primitive recursion")]),a._v(" "),t("p",[t("strong",[a._v("Paramorphisms")]),a._v(" model primitive recursion. At each iteration of the fold, the folding function receives the subtree for further processing.")]),a._v(" "),t("div",{staticClass:"language-hs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-hs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("para")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Functor")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("para")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("para")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("unFix")]),a._v("\n\n")])])]),t("p",[a._v("The Prelude's "),t("code",[a._v("tails")]),a._v(" can be modelled as a paramorphism.")]),a._v(" "),t("div",{staticClass:"language-hs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-hs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("tails")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("List")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("List")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("List")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("tails")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("para")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("alg")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("alg")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nil_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("cons")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("nil")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("nil")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- [[]]")]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("alg")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Cons_")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("xs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("xss")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("cons")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("cons")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("xs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("xss")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- (x:xs):xss")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"primitive-corecursion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#primitive-corecursion"}},[a._v("#")]),a._v(" Primitive corecursion")]),a._v(" "),t("p",[t("strong",[a._v("Apomorphisms")]),a._v(" model primitive corecursion. At each iteration of the unfold, the unfolding function may return either a new seed or a whole subtree.")]),a._v(" "),t("div",{staticClass:"language-hs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-hs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("apo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Functor")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Either")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("apo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("either")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("id")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("apo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v("\n\n")])])]),t("p",[a._v("Note that "),t("code",[a._v("apo")]),a._v(" and "),t("code",[a._v("para")]),a._v(" are "),t("strong",[a._v("dual")]),a._v(". The arrows in the type are flipped; the tuple in "),t("code",[a._v("para")]),a._v(" is dual to the "),t("code",[a._v("Either")]),a._v(" in "),t("code",[a._v("apo")]),a._v(", and the implementations are mirror images of each other.")]),a._v(" "),t("h4",{attrs:{id:"remarks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[a._v("#")]),a._v(" Remarks")]),a._v(" "),t("p",[a._v("Functions mentioned here in examples are defined with varying degrees of abstraction in several packages, for example, "),t("a",{attrs:{href:"http://hackage.haskell.org/package/data-fix-0.0.3",target:"_blank",rel:"noopener noreferrer"}},[t("code",[a._v("data-fix")]),t("OutboundLink")],1),a._v(" and "),t("a",{attrs:{href:"http://hackage.haskell.org/package/recursion-schemes-4.1.2",target:"_blank",rel:"noopener noreferrer"}},[t("code",[a._v("recursion-schemes")]),t("OutboundLink")],1),a._v(" (more functions here). You can view a more complete list by "),t("a",{attrs:{href:"http://hayoo.fh-wedel.de/?query=cata+catamorphism",target:"_blank",rel:"noopener noreferrer"}},[a._v("searching on Hayoo"),t("OutboundLink")],1),a._v(".")])])}),[],!1,null,null,null);s.default=r.exports}}]);