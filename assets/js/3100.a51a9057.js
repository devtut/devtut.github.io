(window.webpackJsonp=window.webpackJsonp||[]).push([[3100],{3508:function(t,e,a){"use strict";a.r(e);var s=a(31),v=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operators"}},[t._v("#")]),t._v(" Operators")]),t._v(" "),a("h2",{attrs:{id:"comparison-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparison-operators"}},[t._v("#")]),t._v(" Comparison Operators")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Operator")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("==")])]),t._v(" "),a("td",[a("code",[t._v("true")]),t._v(" if the two values are equal.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("!=")])]),t._v(" "),a("td",[a("code",[t._v("true")]),t._v(" if the two values are "),a("strong",[t._v("not")]),t._v(" equal.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<")])]),t._v(" "),a("td",[a("code",[t._v("true")]),t._v(" if the value of the operand on the left is "),a("strong",[t._v("less than")]),t._v(" the value on the right.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v(">")])]),t._v(" "),a("td",[a("code",[t._v("true")]),t._v(" if the value of the operand on the left is "),a("strong",[t._v("greater than")]),t._v(" the value on the right.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v(">=")])]),t._v(" "),a("td",[a("code",[t._v("true")]),t._v(" if the value of the operand on the left is "),a("strong",[t._v("greater than")]),t._v(" "),a("strong",[t._v("or")]),t._v(" "),a("strong",[t._v("equal to")]),t._v(" the value on the right.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<=")])]),t._v(" "),a("td",[a("code",[t._v("true")]),t._v(" if the value of the operand on the left is "),a("strong",[t._v("less than")]),t._v(" "),a("strong",[t._v("or")]),t._v(" "),a("strong",[t._v("equal to")]),t._v(" the value on the right.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<=>")])]),t._v(" "),a("td",[a("code",[t._v("0")]),t._v(" if the value of the operand on the left is "),a("strong",[t._v("equal to")]),t._v(" the value on the right,"),a("BR",[a("code",[t._v("1")]),t._v(" if the value of the operand on the left is "),a("strong",[t._v("greater than")]),t._v(" the value on the right,"),a("BR",[a("code",[t._v("-1")]),t._v(" if the value of the operand on the left is "),a("strong",[t._v("less than")]),t._v(" the value on the right.")])],1)],1)])])]),t._v(" "),a("h2",{attrs:{id:"assignment-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assignment-operators"}},[t._v("#")]),t._v(" Assignment Operators")]),t._v(" "),a("h3",{attrs:{id:"simple-assignment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-assignment"}},[t._v("#")]),t._v(" Simple Assignment")]),t._v(" "),a("p",[a("code",[t._v("=")]),t._v(" is a simple assignment. It creates a new local variable if the variable was not previously referenced.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("x is "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y is "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"parallel-assignment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parallel-assignment"}},[t._v("#")]),t._v(" Parallel Assignment")]),t._v(" "),a("p",[t._v("Variables can also be assigned in parallel, e.g. "),a("code",[t._v("x, y = 3, 9")]),t._v(". This is especially useful for swapping values:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("x is "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y is "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"abbreviated-assignment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abbreviated-assignment"}},[t._v("#")]),t._v(" Abbreviated Assignment")]),t._v(" "),a("p",[t._v("It's possible to mix operators and assignment. For example:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("x is "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y is "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nx is now "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n")])])]),a("p",[t._v("Various operations can be used in abbreviated assignment:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Operator")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Example")]),t._v(" "),a("th",[t._v("Equivalent to")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("+=")])]),t._v(" "),a("td",[t._v("Adds and reassigns the variable")]),t._v(" "),a("td",[a("code",[t._v("x += y")])]),t._v(" "),a("td",[a("code",[t._v("x = x + y")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("-=")])]),t._v(" "),a("td",[t._v("Subtracts and reassigns the variable")]),t._v(" "),a("td",[a("code",[t._v("x -= y")])]),t._v(" "),a("td",[a("code",[t._v("x = x - y")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("*=")])]),t._v(" "),a("td",[t._v("Multiplies and reassigns the variable")]),t._v(" "),a("td",[a("code",[t._v("x *= y")])]),t._v(" "),a("td",[a("code",[t._v("x = x * y")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("/=")])]),t._v(" "),a("td",[t._v("Divides and reassigns the variable")]),t._v(" "),a("td",[a("code",[t._v("x /= y")])]),t._v(" "),a("td",[a("code",[t._v("x = x / y")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("%=")])]),t._v(" "),a("td",[t._v("Divides, takes the remainder, and reassigns the variable")]),t._v(" "),a("td",[a("code",[t._v("x %= y")])]),t._v(" "),a("td",[a("code",[t._v("x = x % y")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("**=")])]),t._v(" "),a("td",[t._v("Calculates the exponent and reassigns the variable")]),t._v(" "),a("td",[a("code",[t._v("x **= y")])]),t._v(" "),a("td",[a("code",[t._v("x = x ** y")])])])])])])}),[],!1,null,null,null);e.default=v.exports}}]);