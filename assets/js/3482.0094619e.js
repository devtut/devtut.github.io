(window.webpackJsonp=window.webpackJsonp||[]).push([[3482],{3891:function(t,e,a){"use strict";a.r(e);var s=a(31),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operators"}},[t._v("#")]),t._v(" Operators")]),t._v(" "),a("h2",{attrs:{id:"math"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#math"}},[t._v("#")]),t._v(" Math")]),t._v(" "),a("p",[t._v("If you have the following variables")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" leftValue "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" rightValue "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("Addition")]),t._v("\nPerformed by the plus sign "),a("kbd",[t._v("+")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[t._v("value  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" leftValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" rightValue\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Output the following:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'7")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("Subtraction")]),t._v("\nPerformed by the minus sign "),a("kbd",[t._v("-")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" leftValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" rightValue\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Output the following:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'3")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("Multiplication")]),t._v("\nPerformed by the star symbol "),a("kbd",[t._v("*")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" leftValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" rightValue\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Output the following:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'10")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("Division")]),t._v("\nPerformed by the forward slash symbol "),a("kbd",[t._v("/")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" leftValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" rightValue\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Output the following:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'2.5")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("Integer Division")]),t._v("\nPerformed by the backslash symbol "),a("kbd",[t._v("</kbd>.")])]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" leftValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v(" rightValue\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Output the following:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'2")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("Modulus")]),t._v("\nPerformed by the "),a("kbd",[t._v("Mod")]),t._v(" keyword.")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" leftValue "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Mod")]),t._v(" rightValue\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Output the following:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'1")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("Raise to a Power of")]),t._v("\nPerformed by the "),a("kbd",[t._v("^")]),t._v(" symbol.")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" leftValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" rightValue\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Output the following:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'25")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"string-concatenation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-concatenation"}},[t._v("#")]),t._v(" String Concatenation")]),t._v(" "),a("p",[t._v("String concatenation is when you combine two or more strings into a single string variable.")]),t._v(" "),a("p",[t._v("String concatenation is performed with the "),a("strong",[a("kbd",[t._v("&")])]),t._v(" symbol.")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" one "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello "')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" two "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"there"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" one "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" two\n\n")])])]),a("p",[t._v("Non-string values will be converted to string when using "),a("strong",[a("kbd",[t._v("&")])]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\' result  = "210"')]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("Always use "),a("strong",[a("kbd",[t._v("&")])]),t._v(" (ampersand) to perform string concatenation.")])]),t._v(" "),a("p",[a("strong",[t._v("DON'T DO THIS")]),a("br"),t._v("\nWhile it is possible, in the "),a("strong",[t._v("simplest")]),t._v(" of cases, to use the "),a("kbd",[t._v("+")]),t._v(" symbol to do string concatenation, you should never do this.  If one side of the plus symbol is not a string, when Option strict is off, the behavior becomes non-intuitive, when Option strict is on it will produce a compiler error.  Consider:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' result = 12  (data type Double)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\' result = "210"  (data type String)')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2g"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' runtime error")]),t._v("\n\n")])])]),a("p",[t._v("The problem here is that if the "),a("code",[t._v("+")]),t._v(' operator sees any operand that is a numeric type, it will presume that the programmer wanted to perform an arithmetic operation and attempt to cast the other operand to the equivalent numeric type. In cases where the other operand is a string that contains a number (for example, "10"), the string is '),a("strong",[t._v("converted to a number")]),t._v(" and then "),a("strong",[t._v("arithmetically")]),t._v(' added to the other operand. If the other operand cannot be converted to a number (for example, "2g"), the operation will crash due to a data conversion error. The '),a("code",[t._v("+")]),t._v(" operator will only perform string concatenation if "),a("strong",[t._v("both")]),t._v(" operands are of "),a("code",[t._v("String")]),t._v(" type.")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("&")]),t._v(" operator, however, is designed for string concatenation and will cast non-string types to strings.")]),t._v(" "),a("h2",{attrs:{id:"assignment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assignment"}},[t._v("#")]),t._v(" Assignment")]),t._v(" "),a("p",[t._v("There is a single assignment operator in VB.")]),t._v(" "),a("li",[t._v("The equal sign "),a("kbd",[t._v("=")]),t._v(" is used both for equality comparison and assignment."),a("br"),t._v("\n`Dim value = 5`")]),t._v(" "),a("p",[a("strong",[t._v("Notes")]),a("br"),t._v("\nWatch out for assignment vs. equality comparison.")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" leftValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rightValue  \n\n")])])]),a("p",[t._v("In this example you can see the equal sign being used as both a comparison operator and an assignment operator, unlike other languages.  In this case, "),a("code",[t._v("result")]),t._v(" will be of type "),a("code",[t._v("Boolean")]),t._v(" and will contain the value of the equality comparison between "),a("code",[t._v("leftValue")]),t._v(" and "),a("code",[t._v("rightValue")]),t._v(".")]),t._v(" "),a("p",[t._v("Related: "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/vb.net/4022/option-strict#t=20160728074421670268",target:"_blank",rel:"noopener noreferrer"}},[t._v("Using Option Strict On to declare variables properly"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"comparison"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparison"}},[t._v("#")]),t._v(" Comparison")]),t._v(" "),a("p",[t._v("Comparison operators compare two values and return to you a boolean ("),a("code",[t._v("True")]),t._v(" or "),a("code",[t._v("False")]),t._v(") as the result.")]),t._v(" "),a("p",[a("strong",[t._v("Equality")])]),t._v(" "),a("li",[t._v("The equal sign "),a("kbd",[t._v("=")]),t._v(" is used both for equality comparison and assignment."),a("br"),t._v("\n`If leftValue = rightValue Then` ...")]),t._v(" "),a("p",[a("strong",[t._v("Inequality")])]),t._v(" "),a("li",[t._v("The left angle bracket nest to the right angle bracket "),a("kbd",[t._v("<>")]),t._v(" performs an unequal comparison."),a("br"),t._v("\n`If leftValue <> rightValue Then` ...")]),t._v(" "),a("p",[a("strong",[t._v("Greater Than")])]),t._v(" "),a("li",[t._v("The left angle bracket "),a("kbd",[t._v("<")]),t._v(" performs a greater than comparison."),a("br"),t._v("\n`If leftValue < rightValue Then` ...")]),t._v(" "),a("p",[a("strong",[t._v("Greater Than Or Equal")])]),t._v(" "),a("li",[t._v("The equal sign nest to the left angle bracket "),a("kbd",[t._v("=>")]),t._v(" performs a greater than or equals comparison."),a("br"),t._v("\n`If leftValue =< rightValue Then` ...")]),t._v(" "),a("p",[a("strong",[t._v("Less Than")])]),t._v(" "),a("li",[t._v("The right angle bracket "),a("kbd",[t._v(">")]),t._v(" performs a less than comparison."),a("br"),t._v("\n`If leftValue > rightValue Then` ...")]),t._v(" "),a("p",[a("strong",[t._v("Less Than Or Equal")])]),t._v(" "),a("li",[t._v("The equal sign nest to the right angle bracket "),a("kbd",[t._v("=>")]),t._v(" performs a greater than or equals comparison."),a("br"),t._v("\n`If leftValue => rightValue Then` ...")]),t._v(" "),a("p",[a("strong",[t._v("Like")])]),t._v(" "),a("ul",[a("li",[t._v("The "),a("kbd",[t._v("Like")]),t._v(" operator tests the equality of a string and a search pattern.")]),t._v(" "),a("li",[t._v("The "),a("kbd",[t._v("Like")]),t._v(" operator relies on the "),a("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/8t3khw5f.aspx",target:"_blank",rel:"noopener noreferrer"}},[t._v("Option Compare Statement"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("The following table lists the available patterns. Source: "),a("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/swf8kaxw.aspx",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://msdn.microsoft.com/en-us/library/swf8kaxw.aspx"),a("OutboundLink")],1),t._v(" (Remarks section)")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Characters in the "),a("strong",[t._v("Pattern")])]),t._v(" "),a("th",[t._v("Matches in the "),a("strong",[t._v("String")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("?")]),t._v(" "),a("td",[t._v("Any single character")])]),t._v(" "),a("tr",[a("td",[t._v("*")]),t._v(" "),a("td",[t._v("Zero or more characters")])]),t._v(" "),a("tr",[a("td",[t._v("#")]),t._v(" "),a("td",[t._v("Any single digit (0 - 9)")])]),t._v(" "),a("tr",[a("td",[t._v("[charlist]")]),t._v(" "),a("td",[t._v("Any single character in "),a("strong",[t._v("charlist")])])]),t._v(" "),a("tr",[a("td",[t._v("[!charlist]")]),t._v(" "),a("td",[t._v("Any single character not in "),a("strong",[t._v("charlist")])])])])]),t._v(" "),a("li",[t._v("See further info on [MSDN](https://msdn.microsoft.com/en-us/library/swf8kaxw.aspx) in the remarks section."),a("br"),t._v("\n`If string Like pattern Then ...`")]),t._v(" "),a("h2",{attrs:{id:"widening-and-narrowing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#widening-and-narrowing"}},[t._v("#")]),t._v(" Widening and Narrowing")]),t._v(" "),a("p",[a("strong",[t._v("Needs editing.")])]),t._v(" "),a("h2",{attrs:{id:"operator-overloading"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operator-overloading"}},[t._v("#")]),t._v(" Operator Overloading")]),t._v(" "),a("p",[a("strong",[t._v("Needs editing.")])]),t._v(" "),a("h2",{attrs:{id:"bitwise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bitwise"}},[t._v("#")]),t._v(" Bitwise")]),t._v(" "),a("p",[t._v("These are the bitwise operators in VB.NET : And, Or, Xor, Not")]),t._v(" "),a("p",[t._v("Example of And bitwise operation")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("And")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\n")])])]),a("p",[t._v("The value of a will be 1. The result is obtained after comparing 3 and 5 in binary for. 3 in binary form is 011 and 5 in binary form is 101. The And operator places 1 if both bits are 1. If any of the bits are 0 then the value will be 0")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("And")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" will be  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("011")]),t._v("\n                 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("101")]),t._v("\n                 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n                 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("001")]),t._v("\n\n")])])]),a("p",[t._v("So the binary result is 001 and when that is converted to decimal, the answer will be 1.")]),t._v(" "),a("p",[t._v("Or operator places 1 if both or one bit is 1")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\n  3 Or 5 will be 011\n                  101\n                  ---\n                  111\n\n")])])]),a("p",[t._v("Xor operator places 1 if only one of the bit is 1 (not both)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\n  3 Xor 5 will be  011\n                    101\n                    ---\n                    110\n\n")])])]),a("p",[t._v("Not operator reverts the bits including sign")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Not")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" will be "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("010")]),t._v("\n\n")])])]),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),a("p",[t._v("Operators are used to assign or compare values.  They consist of a single symbol or keyword and are usually sandwiched between a left and a right value.  For example:  "),a("code",[t._v("right = left")]),t._v(".")]),t._v(" "),a("p",[t._v("Operators are intrinsic to the language (such as "),a("code",[t._v("=")]),t._v("), and not functions such as those provided by System.Math.")])])}),[],!1,null,null,null);e.default=r.exports}}]);