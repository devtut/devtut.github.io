(window.webpackJsonp=window.webpackJsonp||[]).push([[2815],{3223:function(t,s,a){"use strict";a.r(s);var n=a(31),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"string-representations-of-class-instances-str-and-repr-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-representations-of-class-instances-str-and-repr-methods"}},[t._v("#")]),t._v(" String representations of class instances: "),a("strong",[t._v("str")]),t._v(" and "),a("strong",[t._v("repr")]),t._v(" methods")]),t._v(" "),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[t._v("#")]),t._v(" Motivation")]),t._v(" "),a("p",[t._v("So you've just created your first class in Python, a neat little class that encapsulates a playing card:")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Card")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" suit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("suit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" suit\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pips "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pips\n\n")])])]),a("p",[t._v("Elsewhere in your code, you create a few instances of this class:")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("ace_of_spades "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Card"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Spades'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfour_of_clubs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Card"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Clubs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nsix_of_hearts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Card"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hearts'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v('You\'ve even created a list of cards, in order to represent a "hand":')]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("my_hand "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ace_of_spades"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" four_of_clubs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" six_of_hearts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])]),a("p",[t._v("Now, during debugging, you want to see what your hand looks like, so you do what comes naturally and write:")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_hand"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("But what you get back is a bunch of gibberish:")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("__main__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Card instance at "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0000000002533788")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("__main__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Card instance at "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00000000025B95C8")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("__main__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Card instance at "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00000000025FF508")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])]),a("p",[t._v("Confused, you try just printing a single card:")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ace_of_spades"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("And again, you get this weird output:")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("__main__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Card instance at "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0000000002533788")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n")])])]),a("p",[t._v("Have no fear.  We're about to fix this.")]),t._v(" "),a("p",[t._v("First, however, it's important to understand what's going on here.  When you wrote "),a("code",[t._v("print(ace_of_spades)")]),t._v(" you told Python you wanted it to print information about the "),a("code",[t._v("Card")]),t._v(" instance your code is calling "),a("code",[t._v("ace_of_spades")]),t._v(".  And to be fair, it did.")]),t._v(" "),a("p",[t._v("That output is comprised of two important bits: the "),a("a",{attrs:{href:"https://docs.python.org/3/library/functions.html#type",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("type")]),a("OutboundLink")],1),t._v(" of the object and the object's "),a("a",{attrs:{href:"https://docs.python.org/3/library/functions.html#id",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("id")]),a("OutboundLink")],1),t._v(".  The second part alone (the hexidecimal number) is enough to uniquely identify the object at the time of the "),a("code",[t._v("print")]),t._v(" call.[1]")]),t._v(" "),a("p",[t._v('What really went on was that you asked Python to "put into words" the essence of that object and then display it to you.  A more explicit version of the same machinery might be:')]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("string_of_card "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ace_of_spades"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string_of_card"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("In the first line, you try to turn your "),a("code",[t._v("Card")]),t._v(" instance into a string, and in the second you display it.")]),t._v(" "),a("h3",{attrs:{id:"the-problem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-problem"}},[t._v("#")]),t._v(" The Problem")]),t._v(" "),a("p",[t._v("The issue you're encountering arises due to the fact that, while you told Python everything it needed to know about the "),a("code",[t._v("Card")]),t._v(" class for you to "),a("strong",[t._v("create")]),t._v(" cards, you "),a("strong",[t._v("didn't")]),t._v(" tell it how you wanted "),a("code",[t._v("Card")]),t._v(" instances to be converted to strings.")]),t._v(" "),a("p",[t._v("And since it didn't know, when you (implicitly) wrote "),a("code",[t._v("str(ace_of_spades)")]),t._v(", it gave you what you saw, a generic representation of the "),a("code",[t._v("Card")]),t._v(" instance.")]),t._v(" "),a("h3",{attrs:{id:"the-solution-part-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-solution-part-1"}},[t._v("#")]),t._v(" The Solution (Part 1)")]),t._v(" "),a("p",[t._v("But "),a("strong",[t._v("we can")]),t._v(" tell Python how we want instances of our custom classes to be converted to strings.  And the way we do this is with the "),a("code",[t._v("__str__")]),t._v(' "dunder" (for double-underscore) or "magic" method.')]),t._v(" "),a("p",[t._v("Whenever you tell Python to create a string from a class instance, it will look for a "),a("code",[t._v("__str__")]),t._v(" method on the class, and call it.")]),t._v(" "),a("p",[t._v("Consider the following, updated version of our "),a("code",[t._v("Card")]),t._v(" class:")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Card")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" suit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("suit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" suit\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pips "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pips\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__str__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        special_names "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ace'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Jack'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Queen'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'King'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        card_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" special_names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s of %s"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("card_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("suit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("Here, we've now defined the "),a("code",[t._v("__str__")]),t._v(" method on our "),a("code",[t._v("Card")]),t._v(" class which, after a simple dictionary lookup for face cards, "),a("strong",[t._v("returns")]),t._v(" a string formatted however we decide.")]),t._v(" "),a("p",[t._v('(Note that "returns" is in bold here, to stress the importance of returning a string, and not simply printing it.  Printing it may seem to work, but then you\'d have the card printed when you did something like '),a("code",[t._v("str(ace_of_spades)")]),t._v(", without even having a print function call in your main program.  So to be clear, make sure that "),a("code",[t._v("__str__")]),t._v(" returns a string.).")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("__str__")]),t._v(" method is a method, so the first argument will be "),a("code",[t._v("self")]),t._v(" and it should neither accept, nor be passed additonal arguments.")]),t._v(" "),a("p",[t._v("Returning to our problem of displaying the card in a more user-friendly manner, if we again run:")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("ace_of_spades "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Card"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Spades'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ace_of_spades"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("We'll see that our output is much better:")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("my_hand "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ace_of_spades"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" four_of_clubs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" six_of_hearts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_hand"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("And, to our surprise, we get those funny hex codes again:")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("__main__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Card instance at "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x00000000026F95C8")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("__main__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Card instance at "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x000000000273F4C8")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("__main__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Card instance at "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0000000002732E08")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])]),a("p",[t._v("What's going on?  We told Python how we wanted our "),a("code",[t._v("Card")]),t._v(" instances to be displayed, why did it apparently seem to forget?")]),t._v(" "),a("h3",{attrs:{id:"the-solution-part-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-solution-part-2"}},[t._v("#")]),t._v(" The Solution (Part 2)")]),t._v(" "),a("p",[t._v("Well, the behind-the-scenes machinery is a bit different when Python wants to get the string representation of items in a list.  It turns out, Python doesn't care about "),a("code",[t._v("__str__")]),t._v(" for this purpose.")]),t._v(" "),a("p",[t._v("Instead, it looks for a different method, "),a("code",[t._v("__repr__")]),t._v(", and if "),a("strong",[t._v("that's")]),t._v(' not found, it falls back on the "hexidecimal thing".[2]')]),t._v(" "),a("p",[a("strong",[t._v("So you're saying I have to make two methods to do the same thing?  One for when I want to "),a("code",[t._v("print")]),t._v(" my card by itself and another when it's in some sort of container?")])]),t._v(" "),a("p",[t._v("No, but first let's look at what our class "),a("strong",[t._v("would")]),t._v(" be like if we were to implement both "),a("code",[t._v("__str__")]),t._v(" and "),a("code",[t._v("__repr__")]),t._v(" methods:")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Card")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    special_names "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ace'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Jack'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Queen'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'King'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" suit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("suit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" suit\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pips "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pips\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__str__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        card_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Card"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("special_names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s of %s (S)"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("card_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("suit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__repr__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        card_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Card"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("special_names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s of %s (R)"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("card_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("suit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("Here, the implementation of the two methods "),a("code",[t._v("__str__")]),t._v(" and "),a("code",[t._v("__repr__")]),t._v(" are exactly the same, except that, to differentiate between the two methods, "),a("code",[t._v("(S)")]),t._v(" is added to strings returned by "),a("code",[t._v("__str__")]),t._v(" and "),a("code",[t._v("(R)")]),t._v(" is added to strings returned by "),a("code",[t._v("__repr__")]),t._v(".")]),t._v(" "),a("p",[t._v("Note that just like our "),a("code",[t._v("__str__")]),t._v(" method, "),a("code",[t._v("__repr__")]),t._v(" accepts no arguments and "),a("strong",[t._v("returns")]),t._v(" a string.")]),t._v(" "),a("p",[t._v("We can see now what method is responsible for each case:")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("ace_of_spades "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Card"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Spades'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfour_of_clubs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Card"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Clubs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nsix_of_hearts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Card"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hearts'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmy_hand "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ace_of_spades"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" four_of_clubs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" six_of_hearts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_hand"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [Ace of Spades (R), 4 of Clubs (R), 6 of Hearts (R)]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ace_of_spades"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Ace of Spades (S)")]),t._v("\n\n")])])]),a("p",[t._v("As was covered, the "),a("code",[t._v("__str__")]),t._v(" method was called when we passed our "),a("code",[t._v("Card")]),t._v(" instance to "),a("code",[t._v("print")]),t._v(" and the "),a("code",[t._v("__repr__")]),t._v(" method was called when we passed "),a("strong",[t._v("a list of our instances")]),t._v(" to "),a("code",[t._v("print")]),t._v(".")]),t._v(" "),a("p",[t._v("At this point it's worth pointing out that just as we can explicitly create a string from a custom class instance using "),a("a",{attrs:{href:"https://docs.python.org/3/library/functions.html#func-str",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("str()")]),a("OutboundLink")],1),t._v(" as we did earlier, we can also explicitly create a "),a("strong",[t._v("string representation")]),t._v(" of our class with a built-in function called "),a("a",{attrs:{href:"https://docs.python.org/3/library/functions.html#repr",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("repr()")]),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("For example:")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("str_card "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("four_of_clubs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str_card"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4 of Clubs (S)")]),t._v("\n\nrepr_card "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("repr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("four_of_clubs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("repr_card"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4 of Clubs (R)")]),t._v("\n\n")])])]),a("p",[t._v("And additionally, if defined, we "),a("strong",[t._v("could")]),t._v(" call the methods directly (although it seems a bit unclear and unnecessary):")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("four_of_clubs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__str__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4 of Clubs (S)")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("four_of_clubs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__repr__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4 of Clubs (R)")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"about-those-duplicated-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#about-those-duplicated-functions"}},[t._v("#")]),t._v(" About those duplicated functions...")]),t._v(" "),a("p",[t._v("Python developers realized, in the case you wanted identical strings to be returned from "),a("code",[t._v("str()")]),t._v(" and "),a("code",[t._v("repr()")]),t._v(" you might have to functionally-duplicate methods -- something nobody likes.")]),t._v(" "),a("p",[t._v("So instead, there is a mechanism in place to eliminate the need for that.  One I snuck you past up to this point.  It turns out that if a class implements the "),a("code",[t._v("__repr__")]),t._v(" method "),a("strong",[t._v("but not")]),t._v(" the "),a("code",[t._v("__str__")]),t._v(" method, and you pass an instance of that class to "),a("code",[t._v("str()")]),t._v(" (whether implicitly or explicitly), Python will fallback on your "),a("code",[t._v("__repr__")]),t._v(" implementation and use that.")]),t._v(" "),a("p",[t._v("So, to be clear, consider the following version of the "),a("code",[t._v("Card")]),t._v(" class:")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Card")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    special_names "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ace'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Jack'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Queen'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'King'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" suit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("suit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" suit\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pips "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pips\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__repr__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        card_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Card"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("special_names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s of %s"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("card_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("suit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("Note this version "),a("strong",[t._v("only")]),t._v(" implements the "),a("code",[t._v("__repr__")]),t._v(" method.  Nonetheless, calls to "),a("code",[t._v("str()")]),t._v(" result in the user-friendly version:")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("six_of_hearts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 6 of Hearts  (implicit conversion)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("six_of_hearts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 6 of Hearts  (explicit conversion)")]),t._v("\n\n")])])]),a("p",[t._v("as do calls to "),a("code",[t._v("repr()")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("six_of_hearts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#[6 of Hearts] (implicit conversion)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("repr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("six_of_hearts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 6 of Hearts  (explicit conversion)")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[t._v("#")]),t._v(" Summary")]),t._v(" "),a("p",[t._v("In order for you to empower your class instances to \"show themselves\" in user-friendly ways, you'll want to consider implementing at least your class's "),a("code",[t._v("__repr__")]),t._v(" method.  If memory serves, during a talk Raymond Hettinger said that ensuring classes implement "),a("code",[t._v("__repr__")]),t._v(" is one of the first things he looks for while doing Python code reviews, and by now it should be clear why. The amount of information you "),a("strong",[t._v("could")]),t._v(" have added to debugging statements, crash reports, or log files with a simple method is overwhelming when compared to the paltry, and often less-than-helpful (type, id) information that is given by default.")]),t._v(" "),a("p",[t._v("If you want "),a("strong",[t._v("different")]),t._v(" representations for when, for example, inside a container, you'll want to implement both "),a("code",[t._v("__repr__")]),t._v(" and "),a("code",[t._v("__str__")]),t._v(" methods.  (More on how you might use these two methods differently below).")]),t._v(" "),a("h2",{attrs:{id:"both-methods-implemented-eval-round-trip-style-repr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#both-methods-implemented-eval-round-trip-style-repr"}},[t._v("#")]),t._v(" Both methods implemented, eval-round-trip style "),a("strong",[t._v("repr")]),t._v("()")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Card")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    special_names "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ace'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Jack'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Queen'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'King'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" suit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("suit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" suit\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pips "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pips\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Called when instance is converted to a string via str()")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Examples:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   print(card1)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   print(str(card1)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__str__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        card_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Card"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("special_names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s of %s"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("card_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("suit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Called when instance is converted to a string via repr()")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Examples:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   print([card1, card2, card3])")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   print(repr(card1))")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__repr__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Card(%s, %d)"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("suit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),a("h3",{attrs:{id:"a-note-about-implemeting-both-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-note-about-implemeting-both-methods"}},[t._v("#")]),t._v(" A note about implemeting both methods")]),t._v(" "),a("p",[t._v("When both methods are implemented, it's somewhat common to have a "),a("code",[t._v("__str__")]),t._v(' method that returns a human-friendly representation (e.g. "Ace of Spaces") and '),a("code",[t._v("__repr__")]),t._v(" return an "),a("a",{attrs:{href:"https://docs.python.org/3/library/functions.html#eval",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("eval")]),a("OutboundLink")],1),t._v("-friendly representation.")]),t._v(" "),a("p",[t._v("In fact, the Python docs for "),a("a",{attrs:{href:"https://docs.python.org/3/library/functions.html#repr",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("repr()")]),a("OutboundLink")],1),t._v(" note exactly this:")]),t._v(" "),a("blockquote"),t._v(" "),a("p",[t._v("For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to eval(), otherwise the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object.")]),t._v(" "),a("p",[t._v("What that means is that  "),a("code",[t._v("__str__")]),t._v(' might be implemented to return something like "Ace of Spaces" as shown previously, '),a("code",[t._v("__repr__")]),t._v(" might be implemented to instead return "),a("code",[t._v("Card('Spades', 1)")])]),t._v(" "),a("p",[t._v("This string could be passed directly back into "),a("code",[t._v("eval")]),t._v(' in somewhat of a "round-trip":')]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),t._v("\n\n")])])]),a("p",[t._v("An example of an implementation of such a method might be:")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__repr__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Card(%s, %d)"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("suit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pips"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"notes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#notes"}},[t._v("#")]),t._v(" Notes")]),t._v(" "),a("p",[t._v("[1] This output is implementation specific.  The string displayed is from cpython.")]),t._v(" "),a("p",[t._v("[2] You may have already seen the result of this "),a("code",[t._v("str()")]),t._v("/"),a("code",[t._v("repr()")]),t._v(" divide and not known it.  When strings containing special characters such as backslashes are converted to strings via "),a("code",[t._v("str()")]),t._v(" the backslashes appear as-is (they appear once).  When they're converted to strings via "),a("code",[t._v("repr()")]),t._v(" (for example, as elements of a list being displayed), the backslashes are escaped and thus appear twice.")])])}),[],!1,null,null,null);s.default=e.exports}}]);