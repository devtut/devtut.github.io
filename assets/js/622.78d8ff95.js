(window.webpackJsonp=window.webpackJsonp||[]).push([[622],{1030:function(t,a,s){"use strict";s.r(a);var e=s(31),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"build-systems"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build-systems"}},[t._v("#")]),t._v(" Build Systems")]),t._v(" "),s("h2",{attrs:{id:"generating-build-environment-with-cmake"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generating-build-environment-with-cmake"}},[t._v("#")]),t._v(" Generating Build Environment with CMake")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://cmake.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CMake"),s("OutboundLink")],1),t._v(" generates build environments for nearly any compiler or IDE from a single project definition. The following examples will demonstrate how to add a CMake file to the "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/c%2B%2B/206/introduction-to-c/774/hello-world",target:"_blank",rel:"noopener noreferrer"}},[t._v('cross-platform "Hello World" C++ code'),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v('CMake files are always named "CMakeLists.txt" and should already exist in every project\'s root directory (and possibly in sub-directories too.) A basic CMakeLists.txt file looks like:')]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cmake_minimum_required")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("VERSION "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("project")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HelloWorld"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_executable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HelloWorld main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cpp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("See it "),s("a",{attrs:{href:"http://coliru.stacked-crooked.com/a/616a0939bdd91b8b",target:"_blank",rel:"noopener noreferrer"}},[t._v("live on Coliru"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v('This file tells CMake the project name, what file version to expect, and instructions to generate an executable called "HelloWorld" that requires '),s("code",[t._v("main.cpp")]),t._v(".")]),t._v(" "),s("p",[t._v("Generate a build environment for your installed compiler/IDE from the command line:")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" cmake "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n")])])]),s("p",[t._v("Build the application with:")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" cmake "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("build "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n")])])]),s("p",[t._v('This generates the default build environment for the system, depending on the OS and installed tools. Keep source code clean from any build artifacts with use of "out-of-source" builds:')]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" mkdir build\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" cd build\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" cmake "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" cmake "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("build "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n")])])]),s("p",[t._v("CMake can also abstract the platform shell's basic commands from the previous example:")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" cmake "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("E make_directory build\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" cmake "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("E chdir build cmake "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" cmake "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("build build \n\n")])])]),s("p",[t._v("CMake includes "),s("a",{attrs:{href:"https://cmake.org/cmake/help/v3.0/manual/cmake-generators.7.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("generators"),s("OutboundLink")],1),t._v(" for a number of common build tools and IDEs. To generate makefiles for "),s("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/dd9y37ha.aspx",target:"_blank",rel:"noopener noreferrer"}},[t._v("Visual Studio's "),s("code",[t._v("nmake")]),s("OutboundLink")],1),t._v(":")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" cmake "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("G "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NMake Makefiles"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nmake\n\n")])])]),s("h2",{attrs:{id:"compiling-with-gnu-make"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compiling-with-gnu-make"}},[t._v("#")]),t._v(" Compiling with GNU make")]),t._v(" "),s("h3",{attrs:{id:"introduction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),s("p",[t._v("The GNU Make (styled "),s("code",[t._v("make")]),t._v(") is a program dedicated to the automation of executing shell commands. GNU Make is one specific program that falls under the Make family. Make remains popular among Unix-like and POSIX-like operating systems, including those derived from the Linux kernel, Mac OS X, and BSD.")]),t._v(" "),s("p",[t._v("GNU Make is especially notable for being attached to the GNU Project, which is attached to the popular GNU/Linux operating system. GNU Make also has compatible versions running on various flavors of Windows and Mac OS X. It is also a very stable version with historical significance that remains popular. It is for these reasons that GNU Make is often taught alongside C and C++.")]),t._v(" "),s("h3",{attrs:{id:"basic-rules"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#basic-rules"}},[t._v("#")]),t._v(" Basic rules")]),t._v(" "),s("p",[t._v("To compile with make, create a Makefile in your project directory. Your Makefile could be as simple as:")]),t._v(" "),s("p",[s("strong",[t._v("Makefile")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("Set some variables to use in our command")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("First"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" we set the compiler to be g"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")])])]),t._v("\nCXX"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("g"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("Then"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" we say that we want to compile with g"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("'s recommended warnings "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" some extra ones"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])])]),t._v("\nCXXFLAGS"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Wall "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Wextra "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("pedantic\n\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("This will be the output file")])]),t._v("\nEXE"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("app\n\nSRCS"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cpp\n\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("When you call `make` at the command line"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"target"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("is called"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("The $"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EXE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" at the right says that the `all` target depends on the `$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EXE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("` target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])])]),t._v("\n# $"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EXE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" expands to be the content of the EXE variable\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("Note"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Because "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" is the first target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" it becomes the "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" target "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" `make` is called without target")])]),t._v("\nall"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" $"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EXE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("This is equivalent to saying")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("app")]),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" $"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SRCS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n# $"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SRCS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" can be separated"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" which means that "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" target would depend on each file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("Note that "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" target has a ")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"method body"')]),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" the part indented by a "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tab")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" four spaces"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("When we build "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" make will execute the command"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" which is"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("g")]),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Wall "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Wextra "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("pedantic "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("o app main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cpp")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("I"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("E"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" Compile main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cpp with warnings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" output to the file "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("app")])]),t._v("\n$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EXE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" $"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SRCS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    @$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CXX"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" $"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CXXFLAGS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("o $@ $"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SRCS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("This target should reverse the `all` target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" If you call")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("make")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("with an argument"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" like `make clean`"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" the corresponding target")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("gets")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("called"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])])]),t._v("\nclean"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    @rm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("f $"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EXE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("blockquote"),t._v(" "),s("p",[s("strong",[t._v("NOTE: Make absolutely sure that the indentations are with a tab, not with four spaces. Otherwise, you'll get an error of")]),t._v(" "),s("code",[t._v("Makefile:10: *** missing separator. Stop.")])]),t._v(" "),s("p",[t._v("To run this from the command-line, do the following:")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("$ cd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("Path"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("to"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("project\n$ make\n$ ls\napp  main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cpp  Makefile\n\n$ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("app\nHello World"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n\n$ make clean\n$ ls\nmain"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cpp  Makefile\n\n")])])]),s("h3",{attrs:{id:"incremental-builds"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#incremental-builds"}},[t._v("#")]),t._v(" Incremental builds")]),t._v(" "),s("p",[t._v("When you start having more files, make becomes more useful. What if you edited "),s("strong",[t._v("a.cpp")]),t._v(" but not "),s("strong",[t._v("b.cpp")]),t._v("? Recompiling "),s("strong",[t._v("b.cpp")]),t._v(" would take more time.")]),t._v(" "),s("p",[t._v("With the following directory structure:")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" src\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cpp\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hpp\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cpp\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hpp\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" Makefile\n\n")])])]),s("p",[t._v("This would be a good Makefile:")]),t._v(" "),s("p",[s("strong",[t._v("Makefile")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("CXX"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("g"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\nCXXFLAGS"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Wall "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Wextra "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("pedantic\nEXE"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("app\n\nSRCS_GLOB"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("src"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*.cpp\nSRCS=$(wildcard $(SRCS_GLOB))\nOBJS=$(SRCS:.cpp=.o)\n\nall: $(EXE)\n\n$(EXE): $(OBJS)\n    @$(CXX) -o $@ $(OBJS)\n\ndepend: .depend\n\n.depend: $(SRCS)\n    @-rm -f ./.depend\n    @$(CXX) $(CXXFLAGS) -MM $^>>./.depend\n\nclean:\n    -rm -f $(EXE)\n    -rm $(OBJS)\n    -rm *~\n    -rm .depend\n\ninclude .depend\n\n")])])])]),s("p",[t._v("Again watch the tabs. This new Makefile ensures that you only recompile changed files, minimizing compile time.")]),t._v(" "),s("h3",{attrs:{id:"documentation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#documentation"}},[t._v("#")]),t._v(" Documentation")]),t._v(" "),s("p",[t._v("For more on make, see "),s("a",{attrs:{href:"https://www.gnu.org/software/make/manual/",target:"_blank",rel:"noopener noreferrer"}},[t._v("the official documentation by the Free Software Foundation"),s("OutboundLink")],1),t._v(", "),s("a",{attrs:{href:"https://stackoverflow.com/documentation/makefile",target:"_blank",rel:"noopener noreferrer"}},[t._v("the stackoverflow documentation"),s("OutboundLink")],1),t._v(" and "),s("a",{attrs:{href:"http://stackoverflow.com/a/2481326/1896169",target:"_blank",rel:"noopener noreferrer"}},[t._v("dmckee's elaborate answer on stackoverflow"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"building-with-scons"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#building-with-scons"}},[t._v("#")]),t._v(" Building with SCons")]),t._v(" "),s("p",[t._v("You can build the "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/c%2B%2B/206/introduction-to-c/774/hello-world",target:"_blank",rel:"noopener noreferrer"}},[t._v('cross-platform "Hello World" C++ code'),s("OutboundLink")],1),t._v(", using "),s("a",{attrs:{href:"http://scons.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scons"),s("OutboundLink")],1),t._v(" - A "),s("a",{attrs:{href:"https://www.python.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python"),s("OutboundLink")],1),t._v("-language software construction tool.")]),t._v(" "),s("p",[t._v("First, create a file called "),s("code",[t._v("SConstruct")]),t._v(" (note that SCons will look for a file with this exact name by default). For now, the file should be in a directory right along your "),s("code",[t._v("hello.cpp")]),t._v(". Write in the new file the line")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\nProgram('hello.cpp')\n\n")])])]),s("p",[t._v("Now, from the terminal, run "),s("code",[t._v("scons")]),t._v(". You should see something like")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("$ scons\nscons"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Reading SConscript files "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nscons"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" done reading SConscript files"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nscons"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Building targets "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\ng"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("o hello"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("c hello"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cpp\ng"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("o hello hello"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("o\nscons"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" done building targets"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n")])])]),s("p",[t._v("(although the details will vary depending on your operating system and installed compiler).")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Environment")]),t._v(" and "),s("code",[t._v("Glob")]),t._v(" classes will help you further configure what to build. E.g., the "),s("code",[t._v("SConstruct")]),t._v(" file")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("env"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Environment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CPPPATH"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/usr/include/boost/'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    CPPDEFINES"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    LIBS"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    SCONS_CXX_STANDARD"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c++11"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nenv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Program")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Glob")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/*.cpp'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     \n\n")])])]),s("p",[t._v("builds the executable "),s("code",[t._v("hello")]),t._v(", using all "),s("code",[t._v("cpp")]),t._v(" files in "),s("code",[t._v("src")]),t._v(". Its "),s("code",[t._v("CPPPATH")]),t._v(" is "),s("code",[t._v("/usr/include/boost")]),t._v(" and it specifies the C++11 standard.")]),t._v(" "),s("h2",{attrs:{id:"autotools-gnu"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#autotools-gnu"}},[t._v("#")]),t._v(" Autotools (GNU)")]),t._v(" "),s("h3",{attrs:{id:"introduction-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#introduction-2"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),s("p",[t._v("The Autotools are a group of programs that create a GNU Build System for a given software package. It is a suite of tools that work together to produce various build resources, such as a Makefile (to be used with GNU Make). Thus, Autotools can be considered a de facto build system generator.")]),t._v(" "),s("p",[t._v("Some notable Autotools programs include:")]),t._v(" "),s("ul",[s("li",[t._v("Autoconf")]),t._v(" "),s("li",[t._v("Automake (not to be confused with "),s("code",[t._v("make")]),t._v(")")])]),t._v(" "),s("p",[t._v("In general, Autotools is meant to generate the Unix-compatible script and Makefile to allow the following command to build (as well as install) most packages (in the simple case):")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("configure "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" make "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" make install\n\n")])])]),s("p",[t._v("As such, Autotools also has a relationship with certain package managers, especially those that are attached to operating systems that conform to the POSIX Standard(s).")]),t._v(" "),s("h2",{attrs:{id:"ninja"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ninja"}},[t._v("#")]),t._v(" Ninja")]),t._v(" "),s("h3",{attrs:{id:"introduction-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#introduction-3"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),s("p",[t._v("The Ninja build system is described by its project website as "),s("a",{attrs:{href:"https://ninja-build.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v('"a small build system with a focus on speed."'),s("OutboundLink")],1),t._v(" Ninja is designed to have its files generated by build system file generators, and takes a low-level approach to build systems, in contrast to higher-level build system managers like CMake or Meson.")]),t._v(" "),s("p",[t._v("Ninja is primarily written in C++ and Python, and was created as an alternative to the SCons build system for the Chromium project.")]),t._v(" "),s("h2",{attrs:{id:"nmake-microsoft-program-maintenance-utility"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nmake-microsoft-program-maintenance-utility"}},[t._v("#")]),t._v(" NMAKE (Microsoft Program Maintenance Utility)")]),t._v(" "),s("h3",{attrs:{id:"introduction-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#introduction-4"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),s("p",[t._v("NMAKE is a command-line utility developed by Microsoft to be used primarily in conjunction with Microsoft Visual Studio and/or the Visual C++ command line tools.")]),t._v(" "),s("p",[t._v("NMAKE is build system that falls under the Make family of build systems, but has certain distinct features that diverge from Unix-like Make programs, such as supporting Windows-specific file path syntax (which itself differs from Unix-style file paths).")]),t._v(" "),s("h4",{attrs:{id:"remarks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),s("p",[t._v("Currently, there exists no universal or dominant build system for C++ that is both popular and cross-platform. However, there do exist several major build systems that are attached to major platforms/projects, the most notable being GNU Make with the GNU/Linux operating system and NMAKE with the Visual C++/Visual Studio project system.")]),t._v(" "),s("p",[t._v("Additionally, some Integrated Development Environments (IDEs) also include specialized build systems to be used specifically with the native IDE. Certain build system generators can generate these native IDE build system/project formats, such as CMake for Eclipse and Microsoft Visual Studio 2012.")])])}),[],!1,null,null,null);a.default=n.exports}}]);