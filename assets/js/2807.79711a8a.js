(window.webpackJsonp=window.webpackJsonp||[]).push([[2807],{3214:function(t,a,s){"use strict";s.r(a);var n=s(31),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"simple-mathematical-operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#simple-mathematical-operators"}},[t._v("#")]),t._v(" Simple Mathematical Operators")]),t._v(" "),s("h2",{attrs:{id:"division"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#division"}},[t._v("#")]),t._v(" Division")]),t._v(" "),s("p",[t._v("Python does integer division when both operands are integers. The behavior of Python's division operators have changed from Python 2.x and 3.x (see also "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/python/809/incompatibilities-moving-from-python-2-to-python-3/2797/integer-division",target:"_blank",rel:"noopener noreferrer"}},[t._v("Integer Division"),s("OutboundLink")],1),t._v(" ).")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\n")])])]),s("p",[t._v("In Python 2 the result of the ' / ' operator depends on the type of the numerator and denominator.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" b                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1 ")]),t._v("\n\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" c                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1.5")]),t._v("\n\nd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" b                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = -2")]),t._v("\n\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" a                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 0")]),t._v("\n\nd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" e                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = -1")]),t._v("\n\n")])])]),s("p",[t._v("Note that because both "),s("code",[t._v("a")]),t._v(" and "),s("code",[t._v("b")]),t._v(" are "),s("code",[t._v("int")]),t._v("s, the result is an "),s("code",[t._v("int")]),t._v(".")]),t._v(" "),s("p",[t._v("The result is always rounded down (floored).")]),t._v(" "),s("p",[t._v("Because "),s("code",[t._v("c")]),t._v(" is a float, the result of "),s("code",[t._v("a / c")]),t._v(" is a "),s("code",[t._v("float")]),t._v(".")]),t._v(" "),s("p",[t._v("You can also use the operator module:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" operator        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the operator module provides 2-argument arithmetic functions")]),t._v("\noperator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1")]),t._v("\noperator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__div__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1")]),t._v("\n\n")])])]),s("p",[t._v("What if you want float division:")]),t._v(" "),s("p",[t._v("Recommended:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" __future__ "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" division "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# applies Python 3 style division to the entire module")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" b                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1.5 ")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" b                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1")]),t._v("\n\n")])])]),s("p",[t._v("Okay (if you don't want to apply to the whole module):")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1.5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" b            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1.5")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1.0    (careful with order of operations)")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" operator "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" truediv\ntruediv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1.5")]),t._v("\n\n")])])]),s("p",[t._v("Not recommended (may raise TypeError, eg if argument is complex):")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" b           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1.5")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1.5")]),t._v("\n\n")])])]),s("p",[t._v("The ' // ' operator in Python 2 forces floored division regardless of type.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" b                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" c                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1.0")]),t._v("\n\n")])])]),s("p",[t._v("In Python 3 the "),s("code",[t._v("/")]),t._v(" operator performs 'true' division regardless of types.  The "),s("code",[t._v("//")]),t._v(" operator performs floor division and maintains type.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" b                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1.5 ")]),t._v("\ne "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" b                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 5.0")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" b                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" c                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1.0")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" operator            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the operator module provides 2-argument arithmetic functions")]),t._v("\noperator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("truediv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1.5")]),t._v("\noperator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("floordiv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1")]),t._v("\noperator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("floordiv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1.0")]),t._v("\n\n")])])]),s("p",[t._v("Possible combinations (builtin types):")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("int")]),t._v(" (gives an "),s("code",[t._v("int")]),t._v(" in Python 2 and a "),s("code",[t._v("float")]),t._v(" in Python 3)")]),t._v(" "),s("li",[s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("float")]),t._v(" (gives a "),s("code",[t._v("float")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("complex")]),t._v(" (gives a "),s("code",[t._v("complex")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("float")]),t._v(" and "),s("code",[t._v("float")]),t._v(" (gives a "),s("code",[t._v("float")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("float")]),t._v(" and "),s("code",[t._v("complex")]),t._v(" (gives a "),s("code",[t._v("complex")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("complex")]),t._v(" and "),s("code",[t._v("complex")]),t._v(" (gives a "),s("code",[t._v("complex")]),t._v(")")])]),t._v(" "),s("p",[t._v("See "),s("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0238/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PEP 238"),s("OutboundLink")],1),t._v(" for more information.")]),t._v(" "),s("h2",{attrs:{id:"addition"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#addition"}},[t._v("#")]),t._v(" Addition")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Using the "+" operator:')]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 3")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Using the "in-place" "+=" operator to add and assign:')]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" b                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# a = 3 (equivalent to a = a + b)")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" operator        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# contains 2 argument arithmetic functions for the examples")]),t._v("\n\noperator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 5  since a is set to 3 right before this line")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# The "+=" operator is equivalent to: ')]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" operator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iadd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# a = 5 since a is set to 3 right before this line")]),t._v("\n\n")])])]),s("p",[t._v("Possible combinations (builtin types):")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("int")]),t._v(" (gives an "),s("code",[t._v("int")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("float")]),t._v(" (gives a "),s("code",[t._v("float")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("complex")]),t._v(" (gives a "),s("code",[t._v("complex")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("float")]),t._v(" and "),s("code",[t._v("float")]),t._v(" (gives a "),s("code",[t._v("float")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("float")]),t._v(" and "),s("code",[t._v("complex")]),t._v(" (gives a "),s("code",[t._v("complex")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("complex")]),t._v(" and "),s("code",[t._v("complex")]),t._v(" (gives a "),s("code",[t._v("complex")]),t._v(")")])]),t._v(" "),s("p",[t._v("Note: the "),s("code",[t._v("+")]),t._v(" operator is also used for concatenating strings, lists and tuples:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"first string "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"second string"')]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 'first string second string'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = [1, 2, 3, 4, 5, 6]")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"exponentation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exponentation"}},[t._v("#")]),t._v(" Exponentation")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 8")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("pow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 8")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" math\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("pow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 8.0 (always float; does not allow complex results)")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" operator\noperator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("pow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 8")]),t._v("\n\n")])])]),s("p",[t._v("Another difference between the built-in "),s("code",[t._v("pow")]),t._v(" and "),s("code",[t._v("math.pow")]),t._v(" is that the built-in "),s("code",[t._v("pow")]),t._v(" can accept three arguments:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("pow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0, calculates (2 ** 3) % 2, but as per Python docs,")]),t._v("\n                       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    does so more efficiently")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"special-functions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#special-functions"}},[t._v("#")]),t._v(" Special functions")]),t._v(" "),s("p",[t._v("The function "),s("code",[t._v("math.sqrt(x)")]),t._v(" calculates the square root of "),s("code",[t._v("x")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" math\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" cmath\nc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sqrt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 2.0 (always float; does not allow complex results)")]),t._v("\ncmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sqrt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = (2+0j) (always complex)")]),t._v("\n\n")])])]),s("p",[t._v("To compute other roots, such as a cube root, raise the number to the reciprocal of the degree of the root. This could be done with any of the exponential functions or operator.")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\nimport math\n x = 8\n math.pow(x, 1/3) # evaluates to 2.0\n x**(1/3) # evaluates to 2.0\n\n")])])]),s("p",[t._v("The function "),s("code",[t._v("math.exp(x)")]),t._v(" computes "),s("code",[t._v("e ** x")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1.0")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2.718281828459045 (e)")]),t._v("\n\n")])])]),s("p",[t._v("The function "),s("code",[t._v("math.expm1(x)")]),t._v(" computes "),s("code",[t._v("e ** x - 1")]),t._v(". When "),s("code",[t._v("x")]),t._v(" is small, this gives significantly better precision than "),s("code",[t._v("math.exp(x) - 1")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expm1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0.0")]),t._v("\n\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e-6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1.0000004999621837e-06")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expm1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e-6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1.0000005000001665e-06")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# exact result      # 1.000000500000166666708333341666...")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"trigonometric-functions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#trigonometric-functions"}},[t._v("#")]),t._v(" Trigonometric Functions")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" math\n\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# returns the sine of 'a' in radians")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 0.8414709848078965")]),t._v("\n\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cosh"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# returns the inverse hyperbolic cosine of 'b' in radians")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 3.7621956910836314")]),t._v("\n\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("atan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# returns the arc tangent of 'pi' in radians")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 1.2626272556789115")]),t._v("\n\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hypot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# returns the Euclidean norm, same as math.sqrt(a*a + b*b)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 2.23606797749979")]),t._v("\n\n")])])]),s("blockquote"),t._v(" "),s("p",[t._v("Note that "),s("code",[t._v("math.hypot(x, y)")]),t._v(" is also the length of the vector (or Euclidean distance) from the origin "),s("code",[t._v("(0, 0)")]),t._v(" to the point "),s("code",[t._v("(x, y)")]),t._v(".\n")]),s("p",[t._v("To compute the Euclidean distance between two points "),s("code",[t._v("(x1, y1)")]),t._v(" & "),s("code",[t._v("(x2, y2)")]),t._v(" you can use\n"),s("code",[t._v("math.hypot")]),t._v(" as follows")]),s("p"),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hypot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("x1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("y1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("To convert from radians -> degrees and degrees -> radians respectively use "),s("code",[t._v("math.degrees")]),t._v(" and "),s("code",[t._v("math.radians")])]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("degrees"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 57.29577951308232")]),t._v("\n\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("radians"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("57.29577951308232")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 1.0")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"inplace-operations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inplace-operations"}},[t._v("#")]),t._v(" Inplace Operations")]),t._v(" "),s("p",[t._v("It is common within applications to need to have code like this :")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n")])])]),s("p",[t._v("or")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n")])])]),s("p",[t._v("There is an effective shortcut for these in place operations :")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# and")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n")])])]),s("p",[t._v("Any mathematic operator can be used before the '=' character to make an inplace operation :")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("-=")]),t._v(" decrement the variable in place")]),t._v(" "),s("li",[s("code",[t._v("+=")]),t._v(" increment the variable in place")]),t._v(" "),s("li",[s("code",[t._v("*=")]),t._v(" multiply the variable in place")]),t._v(" "),s("li",[s("code",[t._v("/=")]),t._v(" divide the variable in place")]),t._v(" "),s("li",[s("code",[t._v("//=")]),t._v(" floor divide the variable in place # Python 3")]),t._v(" "),s("li",[s("code",[t._v("%=")]),t._v(" return the modulus of the variable in place")]),t._v(" "),s("li",[s("code",[t._v("**=")]),t._v(" raise to a power in place")])]),t._v(" "),s("p",[t._v("Other in place operators exist for the bitwise operators ("),s("code",[t._v("^")]),t._v(", "),s("code",[t._v("|")]),t._v(" etc)")]),t._v(" "),s("h2",{attrs:{id:"subtraction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#subtraction"}},[t._v("#")]),t._v(" Subtraction")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Using the "-" operator:')]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" a                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" operator        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# contains 2 argument arithmetic functions")]),t._v("\noperator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sub"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1")]),t._v("\n\n")])])]),s("p",[t._v("Possible combinations (builtin types):")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("int")]),t._v(" (gives an "),s("code",[t._v("int")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("float")]),t._v(" (gives a "),s("code",[t._v("float")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("complex")]),t._v(" (gives a "),s("code",[t._v("complex")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("float")]),t._v(" and "),s("code",[t._v("float")]),t._v(" (gives a "),s("code",[t._v("float")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("float")]),t._v(" and "),s("code",[t._v("complex")]),t._v(" (gives a "),s("code",[t._v("complex")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("complex")]),t._v(" and "),s("code",[t._v("complex")]),t._v(" (gives a "),s("code",[t._v("complex")]),t._v(")")])]),t._v(" "),s("h2",{attrs:{id:"multiplication"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#multiplication"}},[t._v("#")]),t._v(" Multiplication")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 6")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" operator\noperator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mul"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 6")]),t._v("\n\n")])])]),s("p",[t._v("Possible combinations (builtin types):")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("int")]),t._v(" (gives an "),s("code",[t._v("int")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("float")]),t._v(" (gives a "),s("code",[t._v("float")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("int")]),t._v(" and "),s("code",[t._v("complex")]),t._v(" (gives a "),s("code",[t._v("complex")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("float")]),t._v(" and "),s("code",[t._v("float")]),t._v(" (gives a "),s("code",[t._v("float")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("float")]),t._v(" and "),s("code",[t._v("complex")]),t._v(" (gives a "),s("code",[t._v("complex")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("complex")]),t._v(" and "),s("code",[t._v("complex")]),t._v(" (gives a "),s("code",[t._v("complex")]),t._v(")")])]),t._v(" "),s("p",[t._v("Note: The "),s("code",[t._v("*")]),t._v(" operator is also used for repeated concatenation of strings, lists, and tuples:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ab'")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 'ababab'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = ('a', 'b', 'a', 'b', 'a', 'b')")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"logarithms"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#logarithms"}},[t._v("#")]),t._v(" Logarithms")]),t._v(" "),s("p",[t._v("By default, the "),s("code",[t._v("math.log")]),t._v(" function calculates the logarithm of a number, base e. You can optionally specify a base as the second argument.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" math\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" cmath\n\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1.6094379124341003")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# optional base argument. Default is math.e")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1.6094379124341003")]),t._v("\ncmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = (1.6094379124341003+0j)")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3.0 (always returns float)")]),t._v("\ncmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (3+0j)")]),t._v("\n\n")])])]),s("p",[t._v("Special variations of the "),s("code",[t._v("math.log")]),t._v(" function exist for different bases.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Logarithm base e - 1 (higher precision for low values)")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log1p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 1.791759469228055")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Logarithm base 2")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 3.0")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Logarithm base 10")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log10"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 2.0")]),t._v("\ncmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log10"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = (2+0j)")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"modulus"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#modulus"}},[t._v("#")]),t._v(" Modulus")]),t._v(" "),s("p",[t._v("Like in many other languages, Python uses the "),s("code",[t._v("%")]),t._v(" operator for calculating modulus.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2")]),t._v("\n\n")])])]),s("p",[t._v("Or by using the "),s("code",[t._v("operator")]),t._v(" module:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" operator\n\noperator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3")]),t._v("\noperator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0")]),t._v("\noperator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2")]),t._v("\n\n")])])]),s("p",[t._v("You can also use negative numbers.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -2")]),t._v("\n\n")])])]),s("p",[t._v("If you need to find the result of integer division and modulus, you can use the "),s("code",[t._v("divmod")]),t._v(" function as a shortcut:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("quotient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" remainder "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("divmod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# quotient = 2, remainder = 1 as 4 * 2 + 1 == 9")]),t._v("\n\n")])])]),s("h4",{attrs:{id:"remarks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),s("h3",{attrs:{id:"numerical-types-and-their-metaclasses"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#numerical-types-and-their-metaclasses"}},[t._v("#")]),t._v(" Numerical types and their metaclasses")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("numbers")]),t._v(" module contains the abstract metaclasses for the numerical types:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("subclasses")]),t._v(" "),s("th",[s("a",{attrs:{href:"https://docs.python.org/library/numbers.html#numbers.Number",target:"_blank",rel:"noopener noreferrer"}},[t._v("numbers.Number"),s("OutboundLink")],1)]),t._v(" "),s("th",[s("a",{attrs:{href:"https://docs.python.org/library/numbers.html#numbers.Integral",target:"_blank",rel:"noopener noreferrer"}},[t._v("numbers.Integral"),s("OutboundLink")],1)]),t._v(" "),s("th",[s("a",{attrs:{href:"https://docs.python.org/library/numbers.html#numbers.Rational",target:"_blank",rel:"noopener noreferrer"}},[t._v("numbers.Rational"),s("OutboundLink")],1)]),t._v(" "),s("th",[s("a",{attrs:{href:"https://docs.python.org/library/numbers.html#numbers.Real",target:"_blank",rel:"noopener noreferrer"}},[t._v("numbers.Real"),s("OutboundLink")],1)]),t._v(" "),s("th",[s("a",{attrs:{href:"https://docs.python.org/library/numbers.html#numbers.Complex",target:"_blank",rel:"noopener noreferrer"}},[t._v("numbers.Complex"),s("OutboundLink")],1)])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("a",{attrs:{href:"https://docs.python.org/library/functions.html#bool",target:"_blank",rel:"noopener noreferrer"}},[t._v("bool"),s("OutboundLink")],1)]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("✓")])]),t._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"https://docs.python.org/library/functions.html#int",target:"_blank",rel:"noopener noreferrer"}},[t._v("int"),s("OutboundLink")],1)]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("✓")])]),t._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"https://docs.python.org/library/fractions.html#fractions.Fraction",target:"_blank",rel:"noopener noreferrer"}},[t._v("fractions.Fraction"),s("OutboundLink")],1)]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("―")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("✓")])]),t._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"https://docs.python.org/library/functions.html#float",target:"_blank",rel:"noopener noreferrer"}},[t._v("float"),s("OutboundLink")],1)]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("―")]),t._v(" "),s("td",[t._v("―")]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("✓")])]),t._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"https://docs.python.org/library/functions.html#complex",target:"_blank",rel:"noopener noreferrer"}},[t._v("complex"),s("OutboundLink")],1)]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("―")]),t._v(" "),s("td",[t._v("―")]),t._v(" "),s("td",[t._v("―")]),t._v(" "),s("td",[t._v("✓")])]),t._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"https://docs.python.org/library/decimal.html#decimal.Decimal",target:"_blank",rel:"noopener noreferrer"}},[t._v("decimal.Decimal"),s("OutboundLink")],1)]),t._v(" "),s("td",[t._v("✓")]),t._v(" "),s("td",[t._v("―")]),t._v(" "),s("td",[t._v("―")]),t._v(" "),s("td",[t._v("―")]),t._v(" "),s("td",[t._v("―")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);