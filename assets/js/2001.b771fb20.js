(window.webpackJsonp=window.webpackJsonp||[]).push([[2001],{2409:function(s,a,t){"use strict";t.r(a);var e=t(31),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"dynamic-sql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-sql"}},[s._v("#")]),s._v(" Dynamic SQL")]),s._v(" "),t("h2",{attrs:{id:"execute-sql-statement-provided-as-string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#execute-sql-statement-provided-as-string"}},[s._v("#")]),s._v(" Execute SQL statement provided as string")]),s._v(" "),t("p",[s._v("In some cases, you would need to execute SQL query placed in string.\nEXEC, EXECUTE, or system procedure sp_executesql can execute any SQL query provided as string:")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("sp_executesql N"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'SELECT * FROM sys.objects'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- or")]),s._v("\nsp_executesql "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@stmt")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" N"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'SELECT * FROM sys.objects'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- or")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXEC")]),s._v(" sp_executesql N"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'SELECT * FROM sys.objects'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- or")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXEC")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'SELECT * FROM sys.columns'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- or")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXECUTE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'SELECT * FROM sys.tables'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])])]),t("p",[s._v("This procedure will return the same result-set as SQL query provided as statement text.\nsp_executesql can execute SQL query provided as string literal, variable/parameter, or even expression:")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("declare")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@table")]),s._v(" nvarchar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" N"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'product items'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXEC")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("N"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'SELECT * FROM '")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@table")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("declare")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@sql")]),s._v(" nvarchar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("40")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" N"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'SELECT * FROM '")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" QUOTENAME"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@table")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXEC")]),s._v(" sp_executesql "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@sql")]),s._v("\n\n")])])]),t("p",[s._v("You need QUOTENAME function to escape special characters in @table variable. Without this function you would get syntax error if @table variable contains something like spaces, brackets, or any other special character.")]),s._v(" "),t("h2",{attrs:{id:"dynamic-sql-executed-as-different-user"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-sql-executed-as-different-user"}},[s._v("#")]),s._v(" Dynamic SQL executed as different user")]),s._v(" "),t("p",[s._v("You can execute SQL query as different user using AS USER = 'name of database user'")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXEC")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("N"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'SELECT * FROM product'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("USER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'dbo'")]),s._v("\n\n")])])]),t("p",[s._v("SQL query will be executed under dbo database user. All permission checks applicable to dbo user will be checked on SQL query.")]),s._v(" "),t("h2",{attrs:{id:"sql-injection-with-dynamic-sql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sql-injection-with-dynamic-sql"}},[s._v("#")]),s._v(" SQL Injection with dynamic SQL")]),s._v(" "),t("p",[s._v("Dynamic queries are")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@sql")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" N"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'SELECT COUNT(*) FROM AppUsers WHERE Username = '''")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@user")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''' AND Password = '''")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@pass")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''''")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXEC")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@sql")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])])]),t("p",[s._v("If value of user variable is "),t("strong",[t("strong",[s._v("myusername'' OR 1=1 --")])]),s._v(" the following query will be executed:")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("COUNT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" AppUsers \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" Username "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'myusername'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("OR")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--' AND Password = ''")]),s._v("\n\n")])])]),t("p",[s._v("Comment at the end of value of variable @username will comment-out trailing part of the query and condition 1=1 will be evaluated. Application that checks it there at least one user returned by this query will return count greater than 0 and login will succeed.")]),s._v(" "),t("p",[s._v("Using this approach attacker can login into application even if he don't know valid username and password.")]),s._v(" "),t("h2",{attrs:{id:"dynamic-sql-with-parameters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-sql-with-parameters"}},[s._v("#")]),s._v(" Dynamic SQL with parameters")]),s._v(" "),t("p",[s._v("In order to avoid injection and escaping problems, dynamic SQL queries should be executed with parameters, e.g.:")]),s._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@sql")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" N"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'SELECT COUNT(*) FROM AppUsers WHERE Username = @user AND Password = @pass\nEXEC sp_executesql @sql, '")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@user")]),s._v(" nvarchar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@pass")]),s._v(" nvarchar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("'"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@username")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@password")]),s._v("\n\n")])])]),t("p",[s._v("Second parameter is a list of parameters used in query with their types, after this list are provided variables that will be used as parameter values.")]),s._v(" "),t("p",[s._v("sp_executesql will escape special characters and execute sql query.")])])}),[],!1,null,null,null);a.default=r.exports}}]);