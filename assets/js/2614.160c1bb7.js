(window.webpackJsonp=window.webpackJsonp||[]).push([[2614],{3022:function(e,t,a){"use strict";a.r(t);var s=a(31),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"powershell-modules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#powershell-modules"}},[e._v("#")]),e._v(" Powershell Modules")]),e._v(" "),a("p",[e._v("Starting with PowerShell version 2.0, developers can create PowerShell modules. PowerShell modules encapsulate a set of common functionality. For example, there are vendor-specific PowerShell modules that manage various cloud services. There are also generic PowerShell modules that interact with social media services, and perform common programming tasks, such as Base64 encoding, working with Named Pipes, and more.")]),e._v(" "),a("p",[e._v("Modules can expose command aliases, functions, variables, classes, and more.")]),e._v(" "),a("h2",{attrs:{id:"create-a-module-manifest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-a-module-manifest"}},[e._v("#")]),e._v(" Create a Module Manifest")]),e._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[e._v("@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  RootModule = "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'MyCoolModule.psm1'")]),e._v("\n  ModuleVersion = "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'1.0'")]),e._v("\n  CompatiblePSEditions = @"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Core'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  GUID = "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'6b42c995-67da-4139-be79-597a328056cc'")]),e._v("\n  Author = "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Bob Schmob'")]),e._v("\n  CompanyName = "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'My Company'")]),e._v("\n  Copyright = "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'(c) 2017 Administrator. All rights reserved.'")]),e._v("\n  Description = "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'It does cool stuff.'")]),e._v("\n  FunctionsToExport = @"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  CmdletsToExport = @"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  VariablesToExport = @"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  AliasesToExport = @"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  DscResourcesToExport = @"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n")])])]),a("p",[e._v("Every good PowerShell module has a module manifest. The module manifest simply contains metadata about a PowerShell module, and doesn't define the actual contents of the module.")]),e._v(" "),a("p",[e._v("The manifest file is a PowerShell script file, with a "),a("code",[e._v(".psd1")]),e._v(" file extension, that contains a HashTable. The HashTable in the manifest must contain specific keys, in order for PowerShell to correctly interpret it as a PowerShell module file.")]),e._v(" "),a("p",[e._v("The example above provides a list of the core HashTable keys that make up a module manifest, but there are many others. The "),a("code",[e._v("New-ModuleManifest")]),e._v(" command helps you create a new module manifest skeleton.")]),e._v(" "),a("h2",{attrs:{id:"simple-module-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-module-example"}},[e._v("#")]),e._v(" Simple Module Example")]),e._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" Add "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("[CmdletBinding()]")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("param")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("[int]")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$x")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("[int]")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$y")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$x")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$y")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Export-ModuleMember")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Function")]),e._v(" Add\n\n")])])]),a("p",[e._v("This is a simple example of what a PowerShell script module file might look like. This file would be called "),a("code",[e._v("MyCoolModule.psm1")]),e._v(", and is referenced from the module manifest (.psd1) file. You'll notice that the "),a("code",[e._v("Export-ModuleMember")]),e._v(' command enables us to specify which functions in the module we want to "export," or expose, to the user of the module. Some functions will be internal-only, and shouldn\'t be exposed, so those would be omitted from the call to '),a("code",[e._v("Export-ModuleMember")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"exporting-a-variable-from-a-module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exporting-a-variable-from-a-module"}},[e._v("#")]),e._v(" Exporting a Variable from a Module")]),e._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$FirstName")]),e._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Bob'")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Export-ModuleMember")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Variable FirstName\n\n")])])]),a("p",[e._v("To export a variable from a module, you use the "),a("code",[e._v("Export-ModuleMember")]),e._v(" command, with the "),a("code",[e._v("-Variable")]),e._v(" parameter. Remember, however, that if the variable is also not explicitly exported in the module manifest (.psd1) file, then the variable will not be visible to the module consumer. Think of the module manifest like a \"gatekeeper.\" If a function or variable isn't allowed in the module manifest, it won't be visible to the module consumer.")]),e._v(" "),a("p",[a("strong",[e._v("Note:")]),e._v(" Exporting a variable is similar to making a field in a class public.  It is not advisable.  It would be better to expose a function to get the field and a function to set the field.")]),e._v(" "),a("h2",{attrs:{id:"structuring-powershell-modules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#structuring-powershell-modules"}},[e._v("#")]),e._v(" Structuring PowerShell Modules")]),e._v(" "),a("p",[e._v("Rather than defining all of your functions in a single "),a("code",[e._v(".psm1")]),e._v(" PowerShell script module file, you might want to break apart your function into individual files. You can then dot-source these files from your script module file, which in essence, treats them as if they were part of the "),a("code",[e._v(".psm1")]),e._v(" file itself.")]),e._v(" "),a("p",[e._v("Consider this module directory structure:")]),e._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[e._v("\\MyCoolModule\n  \\Functions\n    Function1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("ps1\n    Function2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("ps1\n    Function3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("ps1\nMyCoolModule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("psd1\nMyCoolModule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("psm1\n\n")])])]),a("p",[e._v("Inside your "),a("code",[e._v("MyCoolModule.psm1")]),e._v(" file, you could insert the following code:")]),e._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Get-ChildItem")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Path "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$PSScriptRoot")]),e._v("\\Functions "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" \n  "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("ForEach-Object")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Process")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$PSItem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("FullName "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n")])])]),a("p",[e._v("This would dot-source the individual function files into the "),a("code",[e._v(".psm1")]),e._v(" module file.")]),e._v(" "),a("h2",{attrs:{id:"location-of-modules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#location-of-modules"}},[e._v("#")]),e._v(" Location of Modules")]),e._v(" "),a("p",[e._v("PowerShell looks for modules in the directories listed in the $Env:PSModulepath.")]),e._v(" "),a("p",[e._v("A module called "),a("strong",[e._v("foo")]),e._v(", in a folder called "),a("strong",[e._v("foo")]),e._v(" will be found with "),a("code",[e._v("Import-Module foo")])]),e._v(" "),a("p",[e._v("In that folder, PowerShell will look for a module manifest (foo.psd1), a module file (foo.psm1), a DLL (foo.dll).")]),e._v(" "),a("h2",{attrs:{id:"module-member-visibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#module-member-visibility"}},[e._v("#")]),e._v(" Module Member Visibility")]),e._v(" "),a("p",[e._v("By default, only functions defined in a module are visible outside of the module. In other words, if you define variables and aliases in a module, they won't be available except in the module's code.")]),e._v(" "),a("p",[e._v("To override this behavior, you can use the "),a("code",[e._v("Export-ModuleMember")]),e._v(" cmdlet.  It has parameters called "),a("code",[e._v("-Function")]),e._v(", "),a("code",[e._v("-Variable")]),e._v(", and "),a("code",[e._v("-Alias")]),e._v(" which allow you to specify exactly which members are exported.")]),e._v(" "),a("p",[e._v("It is important to note that if you use "),a("code",[e._v("Export-ModuleMember")]),e._v(", "),a("strong",[e._v("only")]),e._v(" the items you specify will be visible.")])])}),[],!1,null,null,null);t.default=o.exports}}]);