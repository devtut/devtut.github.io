(window.webpackJsonp=window.webpackJsonp||[]).push([[2576],{2984:function(t,a,s){"use strict";s.r(a);var e=s(31),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"automatic-variables"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#automatic-variables"}},[t._v("#")]),t._v(" Automatic Variables")]),t._v(" "),s("p",[t._v("Automatic Variables are created and maintained by Windows PowerShell. One has the ability to call a variable just about any name in the book; The only exceptions to this are the variables that are already being managed by PowerShell. These variables, without a doubt, will be the most repetitious objects you use in PowerShell next to functions (like "),s("strong",[t._v("$?")]),t._v(" - indicates Success/ Failure status of the last operation)")]),t._v(" "),s("h2",{attrs:{id:"ofs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ofs"}},[t._v("#")]),t._v(" $OFS")]),t._v(" "),s("p",[t._v("Variable called Output Field Separator contains string value that is used when converting an array to a string. By default "),s("code",[t._v('$OFS = " "')]),t._v(" ("),s("strong",[t._v("a space")]),t._v("), but it can be changed:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" C:\\> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$array")]),t._v(" = 1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("3\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" C:\\> "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$array")]),t._v('"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# default OFS will be used")]),t._v("\n1 2 3\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" C:\\> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$OFS")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('",."')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# we change OFS to comma and dot")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" C:\\> "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$array")]),t._v('"')]),t._v("\n1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("3\n\n")])])]),s("h2",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")]),t._v(" $?")]),t._v(" "),s("p",[t._v("Contains status of the last operation. When there is no error, it is set to "),s("code",[t._v("True")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" C:\\> "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Write-Host")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\nHello\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" C:\\> $?\nTrue\n\n")])])]),s("p",[t._v("If there is some error, it is set to "),s("code",[t._v("False")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" C:\\> wrt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("host\nwrt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("host : The term "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wrt-host'")]),t._v(" is not recognized as the name of a cmdlet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" script file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" or operable program"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nCheck the spelling of the name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" or "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" a path was included"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" verify that the path is correct and "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" again"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nAt line:1 char:1\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" wrt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("host\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ~~~~~~~~\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" CategoryInfo          : ObjectNotFound: "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("wrt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("host:String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" CommandNotFoundException\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" FullyQualifiedErrorId : CommandNotFoundException\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" C:\\> $?\nFalse\n\n")])])]),s("h2",{attrs:{id:"null"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#null"}},[t._v("#")]),t._v(" $null")]),t._v(" "),s("p",[s("code",[t._v("$null")]),t._v(" is used to represent absent or undefined value."),s("br"),t._v(" "),s("code",[t._v("$null")]),t._v(" can be used as an empty placeholder for empty value in arrays:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" C:\\> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$array")]),t._v(" = 1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$null")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" C:\\> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Count\n3\n\n")])])]),s("p",[t._v("When we use the same array as the source for "),s("code",[t._v("ForEach-Object")]),t._v(", it will process all three items (including $null):")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" C:\\> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$array")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ForEach-Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nHello\nHello\nHello\n\n")])])]),s("p",[t._v("Be careful! This means that "),s("code",[t._v("ForEach-Object")]),t._v(" "),s("strong",[t._v("WILL")]),t._v(" process even "),s("code",[t._v("$null")]),t._v(" all by itself:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" C:\\> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ForEach-Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# THIS WILL DO ONE ITERATION !!!")]),t._v("\nHello\n\n")])])]),s("p",[t._v("Which is very unexpected result if you compare it to classic "),s("code",[t._v("foreach")]),t._v(" loop:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" C:\\> "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("foreach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),t._v(" in "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# THIS WILL DO NO ITERATION")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" C:\\>\n\n")])])]),s("h2",{attrs:{id:"error"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#error"}},[t._v("#")]),t._v(" $error")]),t._v(" "),s("p",[t._v("Array of most recent error objects. The first one in the array is the most recent one:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" C:\\> "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Error"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# resulting output will be in red font")]),t._v("\nError\nAt line:1 char:1\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Error"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ~~~~~~~~~~~~~\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" CategoryInfo          : OperationStopped: "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Error:String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" RuntimeException\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" FullyQualifiedErrorId : Error\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" C:\\> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# resulting output will be normal string (not red    )")]),t._v("\nError\nAt line:1 char:1\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Error"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" ~~~~~~~~~~~~~\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" CategoryInfo          : OperationStopped: "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Error:String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" RuntimeException\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" FullyQualifiedErrorId : Error\n\n")])])]),s("p",[t._v("Usage hints: When using the "),s("code",[t._v("$error")]),t._v(" variable in a format cmdlet (e.g. format-list), be aware to use the "),s("code",[t._v("-Force")]),t._v(" switch. Otherwise the format cmdlet is going to output the "),s("code",[t._v("$error")]),t._v("contents in above shown manner.")]),t._v(" "),s("p",[t._v("Error entries can be removed via e.g. "),s("code",[t._v("$Error.Remove($Error[0])")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"pid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pid"}},[t._v("#")]),t._v(" $pid")]),t._v(" "),s("p",[t._v("Contains process ID of the current hosting process.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" C:\\> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pid")]),t._v("\n26080\n\n")])])]),s("h2",{attrs:{id:"boolean-values"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#boolean-values"}},[t._v("#")]),t._v(" Boolean values")]),t._v(" "),s("p",[s("code",[t._v("$true")]),t._v(" and "),s("code",[t._v("$false")]),t._v(" are two variables that represent logical TRUE and FALSE.")]),t._v(" "),s("p",[t._v("Note that you have to specify the dollar sign as the first character (which is different from C#).")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$boolExpr")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-eq")]),t._v(" 3 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# length of "abc" is 3, hence $boolExpr will be True')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$boolExpr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-eq")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("$true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Length is 3"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# result will be "Length is 3" ')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$boolExpr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-ne")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("$true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#result will be False")]),t._v("\n\n")])])]),s("p",[t._v("Notice that when you use boolean true/false in your code you write "),s("code",[t._v("$true")]),t._v(" or "),s("code",[t._v("$false")]),t._v(", but when Powershell returns a boolean, it looks like "),s("code",[t._v("True")]),t._v(" or "),s("code",[t._v("False")])]),t._v(" "),s("h2",{attrs:{id:"psitem"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#psitem"}},[t._v("#")]),t._v(" $_ / $PSItem")]),t._v(" "),s("p",[t._v("Contains the object/item currently being processed by the pipeline.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" C:\\> 1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("5 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Write-Host")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The current item is '),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$_")]),t._v('"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nThe current item is 1\nThe current item is 2\nThe current item is 3\nThe current item is 4\nThe current item is 5\n\n")])])]),s("p",[s("code",[t._v("$PSItem")]),t._v(" and "),s("code",[t._v("$_")]),t._v(" are identical and can be used interchangeably, but "),s("code",[t._v("$_")]),t._v(" is by far the most commonly used.")]),t._v(" "),s("h4",{attrs:{id:"syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("$$")]),t._v(" - Contains the last token in the last line received by the session.")]),t._v(" "),s("li",[s("code",[t._v("$^")]),t._v(" - Contains the first token in the last line received by the session.")]),t._v(" "),s("li",[s("code",[t._v("$?")]),t._v(" - Contains the execution status of the last operation.")]),t._v(" "),s("li",[s("code",[t._v("$_")]),t._v(" - Contains the current object in the pipeline")])])])}),[],!1,null,null,null);a.default=n.exports}}]);