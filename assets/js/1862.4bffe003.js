(window.webpackJsonp=window.webpackJsonp||[]).push([[1862],{2270:function(t,a,s){"use strict";s.r(a);var e=s(31),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"type-aliases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-aliases"}},[t._v("#")]),t._v(" Type aliases")]),t._v(" "),s("p",[t._v("With type aliases, we can give a alias to other type. It's ideal for giving a name to function types like "),s("code",[t._v("(String) -> Boolean")]),t._v(" or generic type like "),s("code",[t._v("Pair<Person, Person>")]),t._v(".")]),t._v(" "),s("p",[t._v("Type aliases support generics. An alias can replace a type with generics and an alias can be generics.")]),t._v(" "),s("h2",{attrs:{id:"function-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function-type"}},[t._v("#")]),t._v(" Function type")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typealias")]),t._v(" StringValidator "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" Boolean\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typealias")]),t._v(" Reductor"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" U"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" V"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" U"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" V\n\n")])])]),s("h2",{attrs:{id:"generic-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generic-type"}},[t._v("#")]),t._v(" Generic type")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typealias")]),t._v(" Parents "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Pair"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Person"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typealias")]),t._v(" Accounts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" List"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Account"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n")])])]),s("h4",{attrs:{id:"syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("typealias")]),t._v(" "),s("strong",[t._v("alias-name")]),t._v(" "),s("strong",[t._v("=")]),t._v(" "),s("strong",[t._v("existing-type")])])]),t._v(" "),s("h4",{attrs:{id:"remarks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),s("p",[t._v("Type aliases is a feature of the compiler. Nothing is added in the generated code for the JVM. All aliases will be replaced by the real type.")])])}),[],!1,null,null,null);a.default=r.exports}}]);