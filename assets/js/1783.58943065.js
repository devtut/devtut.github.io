(window.webpackJsonp=window.webpackJsonp||[]).push([[1783],{2191:function(t,e,s){"use strict";s.r(e);var n=s(31),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"server-sent-events"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#server-sent-events"}},[t._v("#")]),t._v(" Server-sent events")]),t._v(" "),s("h2",{attrs:{id:"setting-up-a-basic-event-stream-to-the-server"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-a-basic-event-stream-to-the-server"}},[t._v("#")]),t._v(" Setting up a basic event stream to the server")]),t._v(" "),s("p",[t._v("You can setup your client browser to listen in incoming server events using the "),s("code",[t._v("EventSource")]),t._v(" object. You will need to supply the constructor a string of the path to the server' API enpoint the will subscribe the client to the server events.")]),t._v(" "),s("p",[t._v("Example:")]),t._v(" "),s("p",[s("code",[t._v('var eventSource = new EventSource("api/my-events");')])]),t._v(" "),s("p",[t._v("Events have names with which they are categorized and sent, and a listener must be setup to listen to each such event by name. the default event name is "),s("code",[t._v("message")]),t._v(" and in order to listen to it you must use the appropriate event listener, "),s("code",[t._v(".onmessage")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("evtSource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something with data")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("The above function will run everytime the server will push an event to the client. Data is sent as "),s("code",[t._v("text/plain")]),t._v(", if you send JSON data you may want to parse it.")]),t._v(" "),s("h2",{attrs:{id:"closing-an-event-stream"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#closing-an-event-stream"}},[t._v("#")]),t._v(" Closing an event stream")]),t._v(" "),s("p",[t._v("An event stream to the server can be closed using the "),s("code",[t._v("EventSource.close()")]),t._v(" method")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" eventSource "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventSource")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"api/my-events"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do things ...")]),t._v("\neventSource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// you will not receive anymore events from this object")]),t._v("\n\n")])])]),s("p",[t._v("The "),s("code",[t._v(".close()")]),t._v(" method does nothing is the stream is already closed.")]),t._v(" "),s("h2",{attrs:{id:"binding-event-listeners-to-eventsource"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#binding-event-listeners-to-eventsource"}},[t._v("#")]),t._v(" Binding event listeners to EventSource")]),t._v(" "),s("p",[t._v("You can bind event listeners to the "),s("code",[t._v("EventSource")]),t._v(" object to listen to different events channels using the "),s("code",[t._v(".addEventListener")]),t._v(" method.")]),t._v(" "),s("blockquote"),t._v(" "),s("p",[t._v("EventSource.addEventListener(name: String, callback: Function, [options])")]),t._v(" "),s("p",[s("strong",[t._v("name")]),t._v(": The name related to the name of the channel the server is emitting events to.")]),t._v(" "),s("p",[s("strong",[t._v("callback")]),t._v(": The callback function runs every time an event bound to the channel is emitted, the function provides the "),s("code",[t._v("event")]),t._v(" as an argument.")]),t._v(" "),s("p",[s("strong",[t._v("options")]),t._v(": Options that characterize the behavior of the event listener.")]),t._v(" "),s("p",[t._v("The following example shows a heartbeat event stream from the server, the server sends events on the "),s("code",[t._v("heartbeat")]),t._v(" channel and this routine will always run when an event in accepted.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" eventSource "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventSource")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"api/heartbeat"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\neventSource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"heartbeat"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" status "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("status"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'OK'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),s("h4",{attrs:{id:"syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),s("ul",[s("li",[t._v('new EventSource("api/stream");')]),t._v(" "),s("li",[t._v("eventSource.onmessage=function(event){}")]),t._v(" "),s("li",[t._v("eventSource.onerror=function(event){};")]),t._v(" "),s("li",[t._v("eventSource.addEventListener=function(name, callback, options){};")]),t._v(" "),s("li",[t._v("eventSource.readyState;")]),t._v(" "),s("li",[t._v("eventSource.url;")]),t._v(" "),s("li",[t._v("eventSource.close();")])])])}),[],!1,null,null,null);e.default=a.exports}}]);