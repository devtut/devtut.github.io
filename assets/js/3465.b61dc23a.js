(window.webpackJsonp=window.webpackJsonp||[]).push([[3465],{3873:function(t,s,e){"use strict";e.r(s);var a=e(31),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"error-handling"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#error-handling"}},[t._v("#")]),t._v(" Error Handling")]),t._v(" "),e("h2",{attrs:{id:"try-catch-finally-statement"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#try-catch-finally-statement"}},[t._v("#")]),t._v(" Try...Catch...Finally Statement")]),t._v(" "),e("p",[e("strong",[t._v("Structure:")])]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Try")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Your program will try to run the code in this block.  ")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'If any exceptions are thrown, the code in the Catch Block will be executed,")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'without executing the lines after the one which caused the exception.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Catch")]),t._v(" ex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" System"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IO"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IOException\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'If an exception occurs when processing the Try block, each Catch statement")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'is examined in textual order to determine which handles the exception. ")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'For example, this Catch block handles an IOException.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Catch")]),t._v(" ex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" Exception\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'This catch block handles all Exception types.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'Details of the exception, in this case, are in the "ex" variable.')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'You can show the error in a MessageBox with the below line.")]),t._v("\n    MessageBox"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Show"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Finally")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'A finally block is always executed, regardless of if an Exception occurred.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Try")]),t._v("\n\n")])])]),e("p",[e("strong",[t._v("Example Code:")])]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Try")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" obj "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("Nothing")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" prop "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'This line will throw a NullReferenceException")]),t._v("\n\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Test."')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' This line will NOT be executed")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Catch")]),t._v(" ex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" System"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IO"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("IOException\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' Code that reacts to IOException.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Catch")]),t._v(" ex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" NullReferenceException\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' Code that reacts to a NullReferenceException")]),t._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NullReferenceException: "')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Stack Trace: "')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("StackTrace"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Catch")]),t._v(" ex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" Exception\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' Code that reacts to any other exception.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Finally")]),t._v("   \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' This will always be run, regardless of if an exception is thrown.")]),t._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Completed"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Try")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"creating-custom-exception-and-throwing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#creating-custom-exception-and-throwing"}},[t._v("#")]),t._v(" Creating custom exception and throwing")]),t._v(" "),e("p",[t._v("You can create a custom exception and throw them during the execution of your function. As a general practice you should only throw an exception when your function could not achieve its defined functionality.")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Private")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Function")]),t._v(" OpenDatabase"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Byval")]),t._v(" Server "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Byval")]),t._v(" User "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Byval")]),t._v(" Pwd "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" Server"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("trim"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" \n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Throw")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Exception"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Server Name cannot be blank"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elseif")]),t._v(" User"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("trim "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" \n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Throw")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Exception"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"User name cannot be blank"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elseif")]),t._v(" Pwd"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("trim"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" \n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Throw")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Exception"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Password cannot be blank"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("endif")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Here add codes for connecting to the server")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"try-catch-in-database-operation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#try-catch-in-database-operation"}},[t._v("#")]),t._v(" Try Catch in Database Operation")]),t._v(" "),e("p",[t._v("You can use Try..Catch to rollback database operation by placing the rollback statement at the Catch Segment.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n   Try            \n        'Do the database operation...        \n        xCmd.CommandText = \"INSERT into ....\"\n        xCmd.ExecuteNonQuery()\n\n        objTrans.Commit()\n        conn.Close()\n    Catch ex As Exception \n        'Rollback action when something goes off           \n        objTrans.Rollback()\n        conn.Close()\n    End Try\n\n")])])]),e("h2",{attrs:{id:"the-un-catchable-exception"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-un-catchable-exception"}},[t._v("#")]),t._v(" The Un-catchable Exception")]),t._v(" "),e("p",[t._v("Although "),e("code",[t._v("Catch ex As Exception")]),t._v(" claims that it can handle all exceptions - there are one exception (no pun intended).")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Imports")]),t._v(" System\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" StackOverflow"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' Again no pun intended")]),t._v("\n    StackOverflow"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" Main"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Try")]),t._v("\n        StackOverflow"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Catch")]),t._v(" ex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" Exception\n        Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Exception caught!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Finally")]),t._v("\n        Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Finally block"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Try")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),e("p",[t._v("Oops... There is an un-caught "),e("code",[t._v("System.StackOverflowException")]),t._v(" while the console didn't even print out anything! According to "),e("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/system.stackoverflowexception(v=vs.110).aspx#Remarks",target:"_blank",rel:"noopener noreferrer"}},[t._v("MSDN"),e("OutboundLink")],1),t._v(",")]),t._v(" "),e("blockquote"),t._v(" "),e("p",[t._v("Starting with the .NET Framework 2.0, you can’t catch a\nStackOverflowException object with a try/catch block, and the\ncorresponding process is terminated by default. Consequently, you\nshould write your code to detect and prevent a stack overflow.")]),t._v(" "),e("p",[t._v("So, "),e("code",[t._v("System.StackOverflowException")]),t._v(" is un-catchable. Beware of that!")]),t._v(" "),e("h2",{attrs:{id:"critical-exceptions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#critical-exceptions"}},[t._v("#")]),t._v(" Critical Exceptions")]),t._v(" "),e("p",[t._v("Generally most of the exceptions are not that critical, but there are some really serious exceptions that you might not be capable to handle, such as the famous "),e("code",[t._v("System.StackOverflowException")]),t._v(". However, there are others that might get hidden by "),e("code",[t._v("Catch ex As Exception")]),t._v(", such as "),e("code",[t._v("System.OutOfMemoryException")]),t._v(", "),e("code",[t._v("System.BadImageFormatException")]),t._v(" and "),e("code",[t._v("System.InvalidProgramException")]),t._v(". It is a good programming practice to leave these out if you cannot correctly handle them. To filter out these exceptions, we need a helper method:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Shared")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Function")]),t._v(" IsCritical"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" Exception"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Boolean")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TypeOf")]),t._v(" ex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Is")]),t._v(" OutOfMemoryException "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OrElse")]),t._v("\n           "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TypeOf")]),t._v(" ex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Is")]),t._v(" AppDomainUnloadedException "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OrElse")]),t._v("\n           "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TypeOf")]),t._v(" ex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Is")]),t._v(" AccessViolationException "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OrElse")]),t._v("\n           "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TypeOf")]),t._v(" ex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Is")]),t._v(" BadImageFormatException "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OrElse")]),t._v("\n           "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TypeOf")]),t._v(" ex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Is")]),t._v(" CannotUnloadAppDomainException "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OrElse")]),t._v("\n           "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TypeOf")]),t._v(" ex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Is")]),t._v(" ExecutionEngineException "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OrElse")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' Obsolete one, but better to include")]),t._v("\n           "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TypeOf")]),t._v(" ex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Is")]),t._v(" InvalidProgramException "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OrElse")]),t._v("\n           "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TypeOf")]),t._v(" ex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Is")]),t._v(" System"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Threading"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ThreadAbortException\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Function")]),t._v("\n\n")])])]),e("p",[t._v("Usage:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Try")]),t._v("\n    SomeMethod"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Catch")]),t._v(" ex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" Exception "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("When")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Not")]),t._v(" IsCritical"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Exception caught: "')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Try")]),t._v("\n\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);