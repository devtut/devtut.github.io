(window.webpackJsonp=window.webpackJsonp||[]).push([[723],{1131:function(t,s,e){"use strict";e.r(s);var a=e(31),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"std-iomanip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#std-iomanip"}},[t._v("#")]),t._v(" std::iomanip")]),t._v(" "),e("h2",{attrs:{id:"std-setprecision"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#std-setprecision"}},[t._v("#")]),t._v(" std::setprecision")]),t._v(" "),e("p",[t._v("When used in an expression "),e("code",[t._v("out << setprecision(n)")]),t._v(" or "),e("code",[t._v("in >> setprecision(n)")]),t._v(", sets the precision parameter of the stream out or in to exactly n. Parameter of this function is integer, which is new value for precision.")]),t._v(" "),e("p",[t._v("Example:")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iomanip>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<cmath>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<limits>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" pi "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" std"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("acos")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.L")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    std"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default precision (6): "')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" pi "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),t._v("    \n              "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"std::precision(10):    "')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setprecision")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" pi "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),t._v("\n              "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"max precision:         "')]),t._v("\n              "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setprecision")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("numeric_limits"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("digits10 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n              "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" pi "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Output")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//default precision (6): 3.14159")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//std::precision(10):    3.141592654")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//max precision:         3.141592653589793239")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"std-setfill"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#std-setfill"}},[t._v("#")]),t._v(" std::setfill")]),t._v(" "),e("p",[t._v("When used in an expression "),e("code",[t._v("out << setfill(c)")]),t._v(" sets the fill character of the stream out to "),e("code",[t._v("c")]),t._v(".")]),t._v(" "),e("p",[t._v("Note: The current fill character may be obtained with "),e("code",[t._v("std::ostream::fill")]),t._v(".")]),t._v(" "),e("p",[t._v("Example:")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iomanip>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    std"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default fill: "')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),t._v("\n          "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"setfill('*'): \"")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setfill")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                              "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//output::")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//default fill:         42")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//setfill('*'): ********42")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"std-setiosflags"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#std-setiosflags"}},[t._v("#")]),t._v(" std::setiosflags")]),t._v(" "),e("p",[t._v("When used in an expression "),e("code",[t._v("out << setiosflags(mask)")]),t._v(" or "),e("code",[t._v("in >> setiosflags(mask)")]),t._v(", sets all format flags of the stream out or in as specified by the mask.")]),t._v(" "),e("p",[t._v("List of all "),e("code",[t._v("std::ios_base::fmtflags")]),t._v(" :")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("dec")]),t._v(" - use decimal base for integer I/O")]),t._v(" "),e("li",[e("code",[t._v("oct")]),t._v(" - use octal base for integer I/O")]),t._v(" "),e("li",[e("code",[t._v("hex")]),t._v(" - use hexadecimal base for integer I/O")]),t._v(" "),e("li",[e("code",[t._v("basefield")]),t._v(" - "),e("code",[t._v("dec|oct|hex|0")]),t._v(" useful for masking operations")]),t._v(" "),e("li",[e("code",[t._v("left")]),t._v(" - left adjustment(add fill characters to the right)")]),t._v(" "),e("li",[e("code",[t._v("right")]),t._v(" - right adjustment (adds fill characters to the left)")]),t._v(" "),e("li",[e("code",[t._v("internal")]),t._v(" - internal adjustment (adds fill characters to the internal designated point)")]),t._v(" "),e("li",[e("code",[t._v("adjustfield")]),t._v(" - "),e("code",[t._v("left|right|internal")]),t._v(". Useful for masking operations")]),t._v(" "),e("li",[e("code",[t._v("scientific")]),t._v(" - generate floating point types using scientific notation, or hex notation if combined with fixed")]),t._v(" "),e("li",[e("code",[t._v("fixed")]),t._v(" - generate floating point types using fixed notation, or hex notation if combined with scientific")]),t._v(" "),e("li",[e("code",[t._v("floatfield")]),t._v(" - "),e("code",[t._v("scientific|fixed|(scientific|fixed)|0")]),t._v(". Useful for masking operations")]),t._v(" "),e("li",[e("code",[t._v("boolalpha")]),t._v(" - insert and extract "),e("code",[t._v("bool")]),t._v(" type in alphanumeric format")]),t._v(" "),e("li",[e("code",[t._v("showbase")]),t._v(" - generate a prefix indicating the numeric base for integer output, require the currency indicator in monetary I/O")]),t._v(" "),e("li",[e("code",[t._v("showpoint")]),t._v(" - generate a decimal-point character unconditionally for floating-point number output")]),t._v(" "),e("li",[e("code",[t._v("showpos")]),t._v(" - generate a "),e("code",[t._v("+")]),t._v(" character for non-negative numeric output")]),t._v(" "),e("li",[e("code",[t._v("skipws")]),t._v(" - skip leading whitespace before certain input operations")]),t._v(" "),e("li",[e("code",[t._v("unitbuf")]),t._v("    flush the output after each output operation\n")]),e("li",[e("code",[t._v("uppercase")]),t._v(" - replace certain lowercase letters with their uppercase\nequivalents in certain output output operations")])]),t._v(" "),e("p",[t._v("Example of manipulators:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n   #include <iostream>\n    #include <string>\n    #include<iomanip>\n    int main()\n    {\n      int l_iTemp = 47;\n      std::cout<<  std::resetiosflags(std::ios_base::basefield);\n      std::cout<<std::setiosflags( std::ios_base::oct)<<l_iTemp<<std::endl;\n      //output: 57\n      std::cout<<  std::resetiosflags(std::ios_base::basefield);\n      std::cout<<std::setiosflags( std::ios_base::hex)<<l_iTemp<<std::endl;\n      //output: 2f\n      std::cout<<std::setiosflags( std::ios_base::uppercase)<<l_iTemp<<std::endl;\n      //output 2F\n      std::cout<<std::setfill('0')<<std::setw(12);\n      std::cout<<std::resetiosflags(std::ios_base::uppercase);\n      std::cout<<std::setiosflags( std::ios_base::right)<<l_iTemp<<std::endl;\n      //output: 00000000002f\n      \n      std::cout<<std::resetiosflags(std::ios_base::basefield|std::ios_base::adjustfield);\n      std::cout<<std::setfill('.')<<std::setw(10);\n      std::cout<<std::setiosflags( std::ios_base::left)<<l_iTemp<<std::endl;\n      //output: 47........\n      \n      std::cout<<std::resetiosflags(std::ios_base::adjustfield)<<std::setfill('#');\n      std::cout<<std::setiosflags(std::ios_base::internal|std::ios_base::showpos);\n      std::cout<<std::setw(10)<<l_iTemp<<std::endl;\n      //output +#######47\n      \n      double l_dTemp = -1.2;\n      double pi = 3.14159265359;\n      std::cout<<pi<<\"    \"<<l_dTemp<<std::endl;\n      //output +3.14159   -1.2\n      std::cout<<std::setiosflags(std::ios_base::showpoint)<<l_dTemp<<std::endl;\n      //output -1.20000\n      std::cout<<setiosflags(std::ios_base::scientific)<<pi<<std::endl;\n      //output: +3.141593e+00\n      std::cout<<std::resetiosflags(std::ios_base::floatfield);\n      std::cout<<setiosflags(std::ios_base::fixed)<<pi<<std::endl;\n      //output: +3.141593\n      bool b = true;\n      std::cout<<std::setiosflags(std::ios_base::unitbuf|std::ios_base::boolalpha)<<b;\n      //output: true\n      return 0;\n    }\n\n")])])]),e("h2",{attrs:{id:"std-setw"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#std-setw"}},[t._v("#")]),t._v(" std::setw")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" val "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// val will be printed to the extreme left end of the  output console:")]),t._v("\nstd"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" val "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// val will be printed in an output field of length 10 starting from right end of the field:")]),t._v("\nstd"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" val "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[t._v("This outputs:")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234567890")]),t._v("\n\n")])])]),e("p",[t._v("(where the last line is there to aid in seeing the character offsets).")]),t._v(" "),e("p",[t._v("Sometimes we need to set the width of the output field, usually when we need to get the output in some structured and proper layout. That can be done using "),e("strong",[e("code",[t._v("std::setw")])]),t._v(" of "),e("strong",[t._v("std::iomanip")]),t._v(".")]),t._v(" "),e("p",[t._v("The syntax for "),e("code",[t._v("std::setw")]),t._v(" is:")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[t._v("std"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setw")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),e("p",[t._v("where n is the length of the output field to be set")])])}),[],!1,null,null,null);s.default=n.exports}}]);