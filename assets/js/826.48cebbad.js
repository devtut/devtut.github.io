(window.webpackJsonp=window.webpackJsonp||[]).push([[826],{1234:function(t,n,e){"use strict";e.r(n);var s=e(31),a=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"handling-formatexception-when-converting-string-to-other-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#handling-formatexception-when-converting-string-to-other-types"}},[t._v("#")]),t._v(" Handling FormatException when converting string to other types")]),t._v(" "),e("h2",{attrs:{id:"converting-string-to-integer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#converting-string-to-integer"}},[t._v("#")]),t._v(" Converting string to integer")]),t._v(" "),e("p",[t._v("There are various methods available for explicitly converting a "),e("code",[t._v("string")]),t._v(" to an "),e("code",[t._v("integer")]),t._v(", such as:")]),t._v(" "),e("li",[t._v("\n`Convert.ToInt16();`\n")]),t._v(" "),e("li",[t._v("\n`Convert.ToInt32();`\n")]),t._v(" "),e("li",[t._v("\n`Convert.ToInt64();`\n")]),t._v(" "),e("li",[t._v("\n`int.Parse();`\n")]),t._v(" "),e("p",[t._v("But all these methods will throw a "),e("code",[t._v("FormatException")]),t._v(", if the input string contains non-numeric characters. For this, we need to write an additional exception handling("),e("code",[t._v("try..catch")]),t._v(") to deal them in such cases.")]),t._v(" "),e("hr"),t._v(" "),e("p",[e("strong",[t._v("Explanation with Examples:")])]),t._v(" "),e("p",[t._v("So, let our input be:")]),t._v(" "),e("div",{staticClass:"language-cs extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cs"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" inputString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10.2"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[e("strong",[t._v("Example 1:")]),t._v(" "),e("code",[t._v("Convert.ToInt32()")])]),t._v(" "),e("div",{staticClass:"language-cs extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cs"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),t._v(" convertedInt "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Convert"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToInt32")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inputString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Failed to Convert ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Throws an Exception "Input string was not in a correct format."')]),t._v("\n\n")])])]),e("p",[e("strong",[e("strong",[t._v("Note:")]),t._v(" Same goes for the other mentioned methods namely - "),e("code",[t._v("Convert.ToInt16();")]),t._v(" and "),e("code",[t._v("Convert.ToInt64();")])])]),t._v(" "),e("p",[e("strong",[t._v("Example 2:")]),t._v(" "),e("code",[t._v("int.Parse()")])]),t._v(" "),e("div",{staticClass:"language-cs extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cs"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),t._v(" convertedInt "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Parse")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inputString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Same result "Input string was not in a correct format.')]),t._v("\n\n")])])]),e("p",[e("strong",[e("strong",[t._v("How do we circumvent this?")])])]),t._v(" "),e("p",[t._v("As told earlier, for handling the exceptions we usually need a "),e("code",[t._v("try..catch")]),t._v(" as shown below:")]),t._v(" "),e("div",{staticClass:"language-cs extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cs"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" inputString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10.2"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),t._v(" convertedInt "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Parse")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inputString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" Ex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Display some message, that the conversion has failed.         ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("But, using the "),e("code",[t._v("try..catch")]),t._v(" everywhere will not be a good practice, and there may be some scenarios where we wanted to give "),e("code",[t._v("0")]),t._v(" if the input is wrong, "),e("strong",[t._v("(If we follow the above method we need to assign "),e("code",[t._v("0")]),t._v(" to "),e("code",[t._v("convertedInt")]),t._v(" from the catch block).")]),t._v("\nTo handle such scenarios we can make use of a special method called "),e("code",[t._v(".TryParse()")]),t._v(".")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v(".TryParse()")]),t._v(" method having an internal Exception handling, which will give you the output to the "),e("code",[t._v("out")]),t._v(" parameter, and returns a Boolean value indicating the conversion status "),e("strong",[t._v("("),e("code",[t._v("true")]),t._v(" if the conversion was successful; "),e("code",[t._v("false")]),t._v(" if it failed).")]),t._v(" Based on the return value we can determine the conversion status. Lets see one Example:")]),t._v(" "),e("p",[e("strong",[t._v("Usage 1:")]),t._v(" Store the return value in a Boolean variable")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\nint convertedInt; // Be the required integer\n bool isSuccessConversion = int.TryParse(inputString, out convertedInt);\n\n")])])]),e("p",[t._v("We can check The variable "),e("code",[t._v("isSuccessConversion")]),t._v(" after the Execution to check the conversion status. If it is false then the value of "),e("code",[t._v("convertedInt")]),t._v(" will be "),e("code",[t._v("0")]),e("strong",[t._v("(no need to check the return value if you want "),e("code",[t._v("0")]),t._v(" for conversion failure).")])]),t._v(" "),e("p",[e("strong",[t._v("Usage 2:")]),t._v(" Check the return value with "),e("code",[t._v("if")])]),t._v(" "),e("div",{staticClass:"language-cs extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cs"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("TryParse")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inputString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("out")]),t._v(" convertedInt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// convertedInt will have the converted value")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Proceed with that")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Display an error message")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[e("strong",[t._v("Usage 3:")]),t._v(" Without checking the return value\nyou can use the following, if you don't care about the return value "),e("strong",[t._v("(converted or not, "),e("code",[t._v("0")]),t._v(" will be ok)")])]),t._v(" "),e("div",{staticClass:"language-cs extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cs"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("TryParse")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inputString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("out")]),t._v(" convertedInt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// use the value of convertedInt")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// But it will be 0 if not converted")]),t._v("\n\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);