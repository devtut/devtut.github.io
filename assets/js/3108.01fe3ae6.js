(window.webpackJsonp=window.webpackJsonp||[]).push([[3108],{3516:function(s,t,a){"use strict";a.r(t);var e=a(31),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"regular-expressions-and-regex-based-operations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regular-expressions-and-regex-based-operations"}},[s._v("#")]),s._v(" Regular Expressions and Regex Based Operations")]),s._v(" "),a("h2",{attrs:{id:"operator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operator"}},[s._v("#")]),s._v(" =~ operator")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("hay"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'haystack'")]),s._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"There is hay in the word haystack"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("p",[a("strong",[s._v("Note:")]),s._v(" The order "),a("strong",[s._v("is significant")]),s._v(". Though "),a("code",[s._v("'haystack' =~ /hay/")]),s._v(" is in most cases an equivalent, side effects might differ:")]),s._v(" "),a("ul",[a("li",[s._v("Strings captured from named capture groups are assigned to local variables only when "),a("code",[s._v("Regexp#=~")]),s._v(" is called ("),a("a",{attrs:{href:"http://ruby-doc.org/core-2.3.1/String.html#method-i-3D-7E",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("regexp =~ str")]),a("OutboundLink")],1),s._v(");")]),s._v(" "),a("li",[s._v("Since the right operand might be is an arbitrary object, for "),a("code",[s._v("regexp =~ str")]),s._v(" there will be called either "),a("code",[s._v("Regexp#=~")]),s._v(" or "),a("code",[s._v("String#=~")]),s._v(".")])]),s._v(" "),a("p",[s._v("Note that this does not return a true/false value, it instead returns either the index of the match if found, or nil if not found. Because all integers in ruby are truthy (including 0) and nil is falsy, this works. If you want a boolean value, use "),a("code",[s._v("#===")]),s._v(" as shown in "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/ruby/1357/regular-expressions-and-regex-based-operations/4424/simple-regex-match#t=201607221936139047493",target:"_blank",rel:"noopener noreferrer"}},[s._v("another example"),a("OutboundLink")],1),s._v(".")]),s._v(" "),a("h2",{attrs:{id:"regular-expressions-in-case-statements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regular-expressions-in-case-statements"}},[s._v("#")]),s._v(" Regular Expressions in Case Statements")]),s._v(" "),a("p",[s._v("You can test if a string matches several regular expressions using a switch statement.")]),s._v(" "),a("h3",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[s._v("#")]),s._v(" Example")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Ruby is #1!"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("when")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/\\APython/")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Boooo."')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("when")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/\\ARuby/")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"You are right."')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" \n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Sorry, I didn\'t understand that."')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("p",[s._v("This works because case statements are checked for equality using the "),a("code",[s._v("===")]),s._v(" operator, not the "),a("code",[s._v("==")]),s._v(" operator. When a regex is on the left hand side of a comparison using "),a("code",[s._v("===")]),s._v(", it will test a string to see if it matches.")]),s._v(" "),a("h2",{attrs:{id:"groups-named-and-otherwise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#groups-named-and-otherwise"}},[s._v("#")]),s._v(" Groups, named and otherwise.")]),s._v(" "),a("p",[s._v("Ruby extends the standard group syntax "),a("code",[s._v("(...)")]),s._v(" with a named group, "),a("code",[s._v("(?<name>...)")]),s._v(". This allows for extraction by name instead of having to count how many groups you have.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("name_reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/h(i|ello), my name is (?<name>.*)/i")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#i means case insensitive")]),s._v("\n\nname_input "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hi, my name is Zaphod Beeblebrox"')]),s._v("\n\nmatch_data "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name_reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name_input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#returns either a MatchData object or nil")]),s._v("\nmatch_data "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name_input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name_reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#works either way")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" match_data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Always check for nil! Common error.")]),s._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"No match"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n  match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#=> "Hi, my name is Zaphod Beeblebrox"')]),s._v("\n  match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#=> "i" #the first group, (i|ello)')]),s._v("\n  match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#=> "Zaphod Beeblebrox"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Because it was a named group, we can get it by name")]),s._v("\n  match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#=> "Zaphod Beeblebrox"')]),s._v("\n  match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#=> "Zaphod Beeblebrox"')]),s._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),s._v("match"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v('!"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("p",[s._v("The index of the match is counted based on the order of the left parentheses (with the entire regex being the first group at index 0)")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(((a)b)c)(d)/")]),s._v("\nmatch "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("match "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abcd'")]),s._v("\nmatch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#=> "abcd"')]),s._v("\nmatch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#=> "abc"')]),s._v("\nmatch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#=> "ab"')]),s._v("\nmatch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#=> "a"')]),s._v("\nmatch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#=> "d"')]),s._v("\n\n")])])]),a("h2",{attrs:{id:"quantifiers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quantifiers"}},[s._v("#")]),s._v(" Quantifiers")]),s._v(" "),a("p",[s._v("Quantifiers allows to specify count of repeated strings.")]),s._v(" "),a("li",[s._v("\nZero or one:\n"),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a?/")]),s._v("\n\n")])])])]),s._v(" "),a("li",[s._v("\nZero or many:\n"),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a*/")]),s._v("\n\n")])])])]),s._v(" "),a("li",[s._v("\nOne or many:\n"),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a+/")]),s._v("\n\n")])])])]),s._v(" "),a("li",[s._v("\nExact number:\n"),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a{2,4}/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Two, three or four")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a{2,}/")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Two or more")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/a{,4}/")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Less than four (including zero)")]),s._v("\n\n")])])])]),s._v(" "),a("p",[s._v("By default, "),a("a",{attrs:{href:"https://ruby-doc.org/core-2.1.0/Regexp.html#class-Regexp-label-Repetition",target:"_blank",rel:"noopener noreferrer"}},[s._v("quantifiers are greedy"),a("OutboundLink")],1),s._v(", which means they take as many characters as they can while still making a match. Normally this is not noticeable:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("site"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Stack")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Exchange")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Motor Vehicle Maintenance & Repair Stack Exchange'")]),s._v("\n\n")])])]),a("p",[s._v("The named capture group "),a("code",[s._v("site")]),s._v(" will be set to ''Motor Vehicle Maintenance & Repair' as expected. But if 'Stack Exchange' is an optional part of the string (because it could be 'Stack Overflow' instead), the naive solution will not work as expected:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(?<site>.*)( Stack Exchange)?/")]),s._v("\n\n")])])]),a("p",[s._v("This version will still match, but the named capture will include 'Stack Exchange' since "),a("code",[s._v("*")]),s._v(" greedily eats those characters. The solution is to add another question mark to make the "),a("code",[s._v("*")]),s._v(" lazy:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(?<site>.*?)( Stack Exchange)?/")]),s._v("\n\n")])])]),a("p",[a("strong",[s._v("Appending "),a("code",[s._v("?")]),s._v(" to any quantifier will make it lazy.")])]),s._v(" "),a("h2",{attrs:{id:"character-classes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#character-classes"}},[s._v("#")]),s._v(" Character classes")]),s._v(" "),a("p",[s._v("Describes ranges of symbols")]),s._v(" "),a("p",[s._v("You can enumerate symbols explicitly")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/[abc]/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 'a' or 'b' or 'c'")]),s._v("\n\n")])])]),a("p",[s._v("Or use ranges")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/[a-z]/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# from 'a' to 'z'")]),s._v("\n\n")])])]),a("p",[s._v("It is possible to combine ranges and single symbols")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/[a-cz]/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 'a' or 'b' or 'c' or 'z'")]),s._v("\n\n")])])]),a("p",[s._v("Leading dash ("),a("code",[s._v("-")]),s._v(") is treated as charachter")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/[-a-c]/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# '-' or 'a' or 'b' or 'c'")]),s._v("\n\n")])])]),a("p",[s._v("Classes can be negative when preceding symbols with "),a("code",[s._v("^")])]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/[^a-c]/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Not 'a', 'b' or 'c'")]),s._v("\n\n")])])]),a("p",[s._v("There are some shortcuts for widespread classes and special charachters, plus line endings")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Start of line")]),s._v("\n$  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# End of line")]),s._v("\n\\"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Start of string")]),s._v("\n\\"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Z")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# End of string, excluding any new line at the end of string")]),s._v("\n\\z "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# End of string")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Any single character")]),s._v("\n\\s "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Any whitespace character")]),s._v("\n\\"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("S")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Any non-whitespace character")]),s._v("\n\\d "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Any digit")]),s._v("\n\\"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("D")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Any non-digit")]),s._v("\n\\w "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Any word character (letter, number, underscore)")]),s._v("\n\\"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("W")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Any non-word character")]),s._v("\n\\b "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Any word boundary")]),s._v("\n\n")])])]),a("p",[a("code",[s._v("\\n")]),s._v(" will be understood simply as new line")]),s._v(" "),a("p",[s._v("To escape any reserved charachter, such as "),a("code",[s._v("/")]),s._v(" or "),a("code",[s._v("[]")]),s._v(" and others use backslash (left slash)")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("\\\\ "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => \\")]),s._v("\n\\"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\\"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => []")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"defining-a-regexp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defining-a-regexp"}},[s._v("#")]),s._v(" Defining a Regexp")]),s._v(" "),a("p",[s._v("A Regexp can be created in three different ways in Ruby.")]),s._v(" "),a("li",[s._v("\nusing slashes: `/ /`\n")]),s._v(" "),a("li",[s._v("\nusing `%r{}`\n")]),s._v(" "),a("li",[s._v("\nusing `Regex.new`\n"),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#The following forms are equivalent")]),s._v("\nregexp_slash "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/hello/")]),s._v("\nregexp_bracket "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("%r{hello}")]),s._v("\nregexp_new "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Regexp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nstring_to_match "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world!"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#All of these will return a truthy value")]),s._v("\nstring_to_match "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),s._v(" regexp_slash    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 0")]),s._v("\nstring_to_match "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),s._v(" regexp_bracket  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 0")]),s._v("\nstring_to_match "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),s._v(" regexp_new      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 0")]),s._v("\n\n")])])])]),s._v(" "),a("h2",{attrs:{id:"match-boolean-result"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#match-boolean-result"}},[s._v("#")]),s._v(" match? - Boolean Result")]),s._v(" "),a("p",[s._v("Returns "),a("code",[s._v("true")]),s._v(" or "),a("code",[s._v("false")]),s._v(", which indicates whether the regexp is matched or not without updating "),a("code",[s._v("$~")]),s._v(" and other related variables. If the second parameter is present, it specifies the position in the string to begin the search.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/R.../")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("match"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Ruby"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#=> true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/R.../")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("match"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Ruby"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#=> false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/P.../")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("match"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Ruby"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#=> false")]),s._v("\n\n")])])]),a("p",[s._v("Ruby 2.4+")]),s._v(" "),a("h2",{attrs:{id:"common-quick-usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#common-quick-usage"}},[s._v("#")]),s._v(" Common quick usage")]),s._v(" "),a("p",[s._v("Regular expressions are often used in methods as parameters to check if other strings are present or to search and/or replace strings.")]),s._v(" "),a("p",[s._v("You'll often see the following:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("string "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"My not so long string"')]),s._v("\nstring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("so"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# gives so")]),s._v("\nstring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("present"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# gives nil")]),s._v("\nstring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("present"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# gives true")]),s._v("\n\n")])])]),a("p",[s._v("So you can simply use this as a check if a string contains a substring")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"found"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("so"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n")])])]),a("p",[s._v("More advanced but still short and quick: search for a specific group by using the second parameter, 2 is the second in this example because numbering starts at 1 and not 0, a group is what is enclosed in parentheses.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(n.t).+(l.ng)/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# gives long")]),s._v("\n\n")])])]),a("p",[s._v("Also often used: search and replace with "),a("code",[s._v("sub")]),s._v(" or "),a("code",[s._v("gsub")]),s._v(", "),a("code",[s._v("\\1")]),s._v(" gives the first found group, "),a("code",[s._v("\\2")]),s._v(" the second:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("gsub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(n.t).+(l.ng)/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\1 very \\2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# My not very long string")]),s._v("\n\n")])])]),a("p",[s._v("The last result is remembered and can be used on the following lines")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# gives long")]),s._v("\n\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);