(window.webpackJsonp=window.webpackJsonp||[]).push([[2424],{2831:function(a,t,s){"use strict";s.r(t);var n=s(31),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"auto-loading-with-composer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#auto-loading-with-composer"}},[a._v("#")]),a._v(" Auto loading with composer")]),a._v(" "),s("h2",{attrs:{id:"autoloading"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#autoloading"}},[a._v("#")]),a._v(" Autoloading")]),a._v(" "),s("p",[a._v("For libraries that specify autoload information, Composer generates a vendor/autoload.php file. You can simply include this file and you will get autoloading for free.")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("require")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("__DIR__")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[a._v("'/vendor/autoload.php'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),s("p",[a._v("This makes it really easy to use third party code. For example: If your project depends on Monolog, you can just start using classes from it, and they will be autoloaded.")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$log")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name class-name-fully-qualified"}},[a._v("Monolog"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Logger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[a._v("'name'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$log")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("pushHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name class-name-fully-qualified"}},[a._v("Monolog"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("StreamHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[a._v("'app.log'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name class-name-fully-qualified static-context"}},[a._v("Monolog"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Logger")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("WARNING")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$log")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("addWarning")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[a._v("'Foo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),s("p",[a._v("You can even add your own code to the autoloader by adding an "),s("code",[a._v("autoload")]),a._v(" field to "),s("code",[a._v("composer.json")])]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[a._v('"autoload"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[a._v('"psr-4"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[a._v('"Acme\\\\"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[a._v('"src/"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),s("p",[a._v("Composer will register a PSR-4 autoloader for the Acme namespace.")]),a._v(" "),s("p",[a._v("You define a mapping from namespaces to directories. The "),s("code",[a._v("src")]),a._v(" directory would be in your project root, on the same level as vendor directory is. An example filename would be "),s("code",[a._v("src/Foo.php")]),a._v(" containing an "),s("code",[a._v("Acme\\Foo")]),a._v(" class.")]),a._v(" "),s("p",[a._v("After adding the autoload field, you have to re-run "),s("code",[a._v("dump-autoload")]),a._v(" to re-generate the "),s("code",[a._v("vendor/autoload.php")]),a._v(" file.")]),a._v(" "),s("p",[a._v("Including that file will also return the autoloader instance, so you can store the return value of the include call in a variable and add more namespaces. This can be useful for autoloading classes in a test suite, for example.")]),a._v(" "),s("div",{staticClass:"language-php extra-class"},[s("pre",{pre:!0,attrs:{class:"language-php"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$loader")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("require")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("__DIR__")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[a._v("'/vendor/autoload.php'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$loader")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[a._v("'Acme\\\\Test\\\\'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("__DIR__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),s("p",[a._v("In addition to PSR-4 autoloading, Composer also supports PSR-0, classmap and files autoloading.")])])}),[],!1,null,null,null);t.default=e.exports}}]);