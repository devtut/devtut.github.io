(window.webpackJsonp=window.webpackJsonp||[]).push([[507],{916:function(s,a,t){"use strict";t.r(a);var e=t(31),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"internal-variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#internal-variables"}},[s._v("#")]),s._v(" Internal variables")]),s._v(" "),t("h2",{attrs:{id:"bash-internal-variables-at-a-glance"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bash-internal-variables-at-a-glance"}},[s._v("#")]),s._v(" Bash internal variables at a glance")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("Variable")]),s._v(" "),t("th",[s._v("Details")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[t("code",[s._v("$*")]),s._v(" / "),t("code",[s._v("$@")])]),s._v(" "),t("td",[s._v("Function/script positional parameters (arguments). Expand as follows:"),t("br"),t("br"),t("code",[s._v("$*")]),s._v(" and "),t("code",[s._v("$@")]),s._v(" are the same as "),t("code",[s._v("$1 $2 ...")]),s._v(" (note that it generally makes no sense to leave those unquoted)"),t("br"),t("code",[s._v('"$*"')]),s._v(" is the same as "),t("code",[s._v('"$1 $2 ..."')]),s._v(" "),t("sup",[s._v("1")]),s._v(" "),t("br"),t("code",[s._v('"$@"')]),s._v(" is the same as "),t("code",[s._v('"$1" "$2" ...')]),s._v(" "),t("br"),s._v(" "),t("sub",[s._v("1. Arguments are separated by the first character of $IFS, which does not have to be a space.")])])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$#")])]),s._v(" "),t("td",[s._v("Number of positional parameters passed to the script or function")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$!")])]),s._v(" "),t("td",[s._v("Process ID of the last (righ-most for pipelines) command in the most recently job put into the background (note that it's not necessarily the same as the job's process group ID when job control is enabled)")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$$")])]),s._v(" "),t("td",[s._v("ID of the process that executed "),t("code",[s._v("bash")])])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$?")])]),s._v(" "),t("td",[s._v("Exit status of the last command")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$n")])]),s._v(" "),t("td",[s._v("Positional parameters, where n=1, 2, 3, ..., 9")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("${n}")])]),s._v(" "),t("td",[s._v("Positional parameters (same as above), but n can be > 9")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$0")])]),s._v(" "),t("td",[s._v("In scripts, path with which the script was invoked; with "),t("code",[s._v('bash -c \'printf "%s\\n" "$0"\' name args\'')]),s._v(": "),t("code",[s._v("name")]),s._v(" (the first argument after the inline script), otherwise, the "),t("code",[s._v("argv[0]")]),s._v(" that "),t("code",[s._v("bash")]),s._v(" received.")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$_")])]),s._v(" "),t("td",[s._v("Last field of the last command")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$IFS")])]),s._v(" "),t("td",[s._v("Internal field separator")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$PATH")])]),s._v(" "),t("td",[s._v("PATH environment variable used to look-up executables")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$OLDPWD")])]),s._v(" "),t("td",[s._v("Previous working directory")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$PWD")])]),s._v(" "),t("td",[s._v("Present working directory")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$FUNCNAME")])]),s._v(" "),t("td",[s._v("Array of function names in the execution call stack")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$BASH_SOURCE")])]),s._v(" "),t("td",[s._v("Array containing source paths for elements in "),t("code",[s._v("FUNCNAME")]),s._v(" array. Can be used to get the script path.")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$BASH_ALIASES")])]),s._v(" "),t("td",[s._v("Associative array containing all currently defined aliases")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$BASH_REMATCH")])]),s._v(" "),t("td",[s._v("Array of matches from the last regex match")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$BASH_VERSION")])]),s._v(" "),t("td",[s._v("Bash version string")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$BASH_VERSINFO")])]),s._v(" "),t("td",[s._v("An array of 6 elements with Bash version information")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$BASH")])]),s._v(" "),t("td",[s._v("Absolute path to the currently executing Bash shell itself (heuristically determined by "),t("code",[s._v("bash")]),s._v(" based on "),t("code",[s._v("argv[0]")]),s._v(" and the value of "),t("code",[s._v("$PATH")]),s._v("; may be wrong in corner cases)")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$BASH_SUBSHELL")])]),s._v(" "),t("td",[s._v("Bash subshell level")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$UID")])]),s._v(" "),t("td",[s._v("Real (not effective if different) User ID of the process running "),t("code",[s._v("bash")])])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$PS1")])]),s._v(" "),t("td",[s._v("Primary command line prompt; see "),t("a",{attrs:{href:"http://stackoverflow.com/documentation/bash/7541/handling-the-system-prompt#t=201610212316553697922",target:"_blank",rel:"noopener noreferrer"}},[s._v("Using the PS* Variables"),t("OutboundLink")],1)])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$PS2")])]),s._v(" "),t("td",[s._v("Secondary command line prompt (used for additional input)")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$PS3")])]),s._v(" "),t("td",[s._v("Tertiary command line prompt (used in select loop)")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$PS4")])]),s._v(" "),t("td",[s._v("Quaternary command line prompt (used to append info with verbose output)")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$RANDOM")])]),s._v(" "),t("td",[s._v("A pseudo random integer between 0 and 32767")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$REPLY")])]),s._v(" "),t("td",[s._v("Variable used by "),t("code",[s._v("read")]),s._v(" by default when no variable is specified. Also used by "),t("code",[s._v("select")]),s._v(" to return the user-supplied value")])]),s._v(" "),t("tr",[t("td",[t("code",[s._v("$PIPESTATUS")])]),s._v(" "),t("td",[s._v("Array variable that holds the exit status values of each command in the most recently executed foreground pipeline.")])])])]),s._v(" "),t("blockquote",[t("p",[s._v("Variable Assignment must have no space before and after. "),t("code",[s._v("a=123")]),s._v(" not "),t("code",[s._v("a = 123")]),s._v(". The latter (an equal sign surrounded by spaces) in isolation means run the command "),t("code",[s._v("a")]),s._v(" with the arguments "),t("code",[s._v("=")]),s._v(" and "),t("code",[s._v("123")]),s._v(", though it is also seen in the string comparison operator (which syntactically is an argument to "),t("code",[s._v("[")]),s._v(" or "),t("code",[s._v("[[")]),s._v(" or whichever test you are using).")])]),s._v(" "),t("h2",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[s._v("#")]),s._v(" $@")]),s._v(" "),t("p",[t("code",[s._v('"$@"')]),s._v(" expands to all of the command line arguments as separate words. It is different from "),t("code",[s._v('"$*"')]),s._v(", which expands to all of the arguments as a single word.")]),s._v(" "),t("p",[t("code",[s._v('"$@"')]),s._v(" is especially useful for "),t("a",{attrs:{href:"http://stackoverflow.com/documentation/bash/420/control-structures/9290/looping-over-an-array#t=201608301017209858205",target:"_blank",rel:"noopener noreferrer"}},[s._v("looping"),t("OutboundLink")],1),s._v(" through arguments and handling arguments with spaces.")]),s._v(" "),t("p",[s._v("Consider we are in a script that we invoked with two arguments, like so:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ ./script.sh "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"␣1␣2␣"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"␣3␣␣4␣"')]),s._v("\n\n")])])]),t("p",[s._v("The variables "),t("code",[s._v("$*")]),s._v(" or "),t("code",[s._v("$@")]),s._v(" will expand into "),t("code",[s._v("$1␣$2")]),s._v(", which in turn expand into "),t("code",[s._v("1␣2␣3␣4")]),s._v(" so the loop below:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# same for var in $@; do")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n")])])]),t("p",[s._v("will print for both")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("1")]),s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("3")]),s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("4")]),s._v(">")]),s._v("\n\n")])])]),t("p",[s._v("While "),t("code",[s._v('"$*"')]),s._v(" will be expanded into "),t("code",[s._v('"$1␣$2"')]),s._v(" which will in turn expand into "),t("code",[s._v('"␣1␣2␣␣␣3␣␣4␣"')]),s._v(" and so the loop:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$*")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n")])])]),t("p",[s._v("will only invoke "),t("code",[s._v("echo")]),s._v(" once and will print")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("␣1␣2␣␣␣3␣␣4␣"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n")])])]),t("p",[s._v("And finally "),t("code",[s._v('"$@"')]),s._v(" will expand into "),t("code",[s._v('"$1" "$2"')]),s._v(", which will expand into "),t("code",[s._v('"␣1␣2␣" "␣3␣␣4␣"')]),s._v(" and so the loop")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$var")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n")])])]),t("p",[s._v("will print")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("␣1␣2␣"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("␣3␣␣4␣"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n")])])]),t("p",[s._v("thereby preserving both the internal spacing in the arguments and the arguments separation. Note that the construction "),t("code",[s._v('for var in "$@"; do ...')]),s._v(" is so common and idiomatic that it is the default for a for loop and can be shortened to "),t("code",[s._v("for var; do ...")]),s._v(".")]),s._v(" "),t("h2",{attrs:{id:"-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[s._v("#")]),s._v(" $")]),s._v(" "),t("p",[s._v("To get the number of command line arguments or positional parameters - type:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#")]),s._v('"')]),s._v("\n\n")])])]),t("p",[s._v("When run with three arguments the example above will result with the output:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ ./testscript.sh firstarg secondarg thirdarg\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"funcname"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#funcname"}},[s._v("#")]),s._v(" $FUNCNAME")]),s._v(" "),t("p",[s._v("To get the name of the current function - type:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function-name function"}},[s._v("my_function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This function is '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FUNCNAME")]),s._v('"')]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# This will output "This function is my_function"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])]),t("p",[s._v("This instruction will return nothing if you type it outside the function:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("my_function\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This function is '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FUNCNAME")]),s._v('"')]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# This will output "This function is"')]),s._v("\n\n")])])]),t("h2",{attrs:{id:"home"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#home"}},[s._v("#")]),s._v(" $HOME")]),s._v(" "),t("p",[s._v("The home directory of the user")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HOME")]),s._v("\n/home/user\n\n")])])]),t("h2",{attrs:{id:"ifs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ifs"}},[s._v("#")]),s._v(" $IFS")]),s._v(" "),t("p",[s._v("Contains the Internal Field Separator string that bash uses to split strings when looping etc. The default is the white space characters: "),t("code",[s._v("\\n")]),s._v(" (newline), "),t("code",[s._v("\\t")]),s._v(" (tab) and space. Changing this to something else allows you to split strings using different characters:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("IFS")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('","')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("INPUTSTR")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a,b,c,d"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("field")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${INPUTSTR}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$field")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n")])])]),t("p",[s._v("The output of the above is:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("a\nb\nc\nd\n\n")])])]),t("p",[t("strong",[s._v("Notes:")])]),s._v(" "),t("ul",[t("li",[s._v("This is responsible for the phenomenon known as "),t("a",{attrs:{href:"http://stackoverflow.com/documentation/bash/5472/word-splitting/19453/what-when-and-why#t=201608151204564817213",target:"_blank",rel:"noopener noreferrer"}},[s._v("word splitting"),t("OutboundLink")],1),s._v(".")])]),s._v(" "),t("h2",{attrs:{id:"oldpwd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#oldpwd"}},[s._v("#")]),s._v(" $OLDPWD")]),s._v(" "),t("p",[t("strong",[s._v("OLDPWD")]),s._v(" ("),t("strong",[s._v("OLDP")]),s._v("rint"),t("strong",[s._v("W")]),s._v("orking"),t("strong",[s._v("D")]),s._v("irectory) contains directory before the last "),t("code",[s._v("cd")]),s._v(" command:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" directory\ndirectory"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$OLDPWD")]),s._v("\n/home/user\n\n")])])]),t("h2",{attrs:{id:"pwd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pwd"}},[s._v("#")]),s._v(" $PWD")]),s._v(" "),t("p",[t("strong",[s._v("PWD")]),s._v(" ("),t("strong",[s._v("P")]),s._v("rint"),t("strong",[s._v("W")]),s._v("orking"),t("strong",[s._v("D")]),s._v("irectory) The current working directory you are in at the moment:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PWD")]),s._v("\n/home/user\n~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" directory\ndirectory"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PWD")]),s._v("\n/home/user/directory\n\n")])])]),t("h2",{attrs:{id:"_1-2-3-etc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-etc"}},[s._v("#")]),s._v(" $1 $2 $3 etc...")]),s._v(" "),t("p",[s._v("Positional parameters passed to the script from either the command line or a function:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# $n is the n'th positional parameter")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),s._v('"')]),s._v("\n\n")])])]),t("p",[s._v("The output of the above is:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ ./testscript.sh firstarg secondarg thirdarg\nfirstarg\nsecondarg\nthirdarg\n\n")])])]),t("p",[s._v("If number of positional argument is greater than nine, curly braces must be used.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#  "set -- " sets positional parameters')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" -- "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" nine ten eleven twelve\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# the following line will output 10 not 1 as the value of $1 the digit 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# will be concatenated with the following 0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$10")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# outputs 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${10}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# outputs ten")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# to show this clearly:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" -- arg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${10}")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[s._v("#")]),s._v(" $*")]),s._v(" "),t("p",[s._v("Will return all of the positional parameters in a single string.")]),s._v(" "),t("p",[t("strong",[s._v("testscript.sh:")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$*")]),s._v('"')]),s._v("\n\n")])])]),t("p",[s._v("Run the script with several arguments:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("./testscript.sh firstarg secondarg thirdarg\n\n")])])]),t("p",[s._v("Output:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("firstarg secondarg thirdarg\n\n")])])]),t("h2",{attrs:{id:"-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-4"}},[s._v("#")]),s._v(" $!")]),s._v(" "),t("p",[s._v("The Process ID (pid) of the last job run in the background:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\ntestfile1 testfile2\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("+  Done                    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$!")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21715")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-5"}},[s._v("#")]),s._v(" $?")]),s._v(" "),t("p",[s._v("The exit status of the last executed function or command. Usually 0 will mean OK anything else will indicate a failure:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" *.blah"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v("\nls: cannot access *.blah: No such "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" or directory\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v("\ntestfile1 testfile2\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-6"}},[s._v("#")]),s._v(" $$")]),s._v(" "),t("p",[s._v("The Process ID (pid) of the current process:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$$")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("13246")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"histsize"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#histsize"}},[s._v("#")]),s._v(" $HISTSIZE")]),s._v(" "),t("p",[s._v("The maximum number of remembered commands:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HISTSIZE")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"bashpid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bashpid"}},[s._v("#")]),s._v(" $BASHPID")]),s._v(" "),t("p",[s._v("Process ID (pid) of the current instance of Bash. This is not the same as the "),t("code",[s._v("$$")]),s._v(" variable, but it often gives the same result. This is new in Bash 4 and doesn't work in Bash 3.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\$\\$ pid = '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$$")]),s._v("  BASHPID = "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$BASHPID")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$$")]),s._v(" pid "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9265")]),s._v("  BASHPID "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9265")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"bash-env"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bash-env"}},[s._v("#")]),s._v(" $BASH_ENV")]),s._v(" "),t("p",[s._v("An environment variable pointing to the Bash startup file which is read when a script is invoked.")]),s._v(" "),t("h2",{attrs:{id:"bash-versinfo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bash-versinfo"}},[s._v("#")]),s._v(" $BASH_VERSINFO")]),s._v(" "),t("p",[s._v("An array containing the full version information split into elements, much more convenient than "),t("code",[s._v("$BASH_VERSION")]),s._v(" if you're just looking for the major version:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"BASH_VERSINFO['),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i")]),s._v("] = "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("BASH_VERSINFO")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("$i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("}")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("BASH_VERSINFO")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("BASH_VERSINFO")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("BASH_VERSINFO")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("BASH_VERSINFO")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("BASH_VERSINFO")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" release\n"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("BASH_VERSINFO")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x86_64-redhat-linux-gnu\n\n")])])]),t("h2",{attrs:{id:"bash-version"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bash-version"}},[s._v("#")]),s._v(" $BASH_VERSION")]),s._v(" "),t("p",[s._v("Shows the version of bash that is running, this allows you to decide whether you can use any advanced features:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$BASH_VERSION")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.1")]),s._v(".2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("-release\n\n")])])]),t("h2",{attrs:{id:"editor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#editor"}},[s._v("#")]),s._v(" $EDITOR")]),s._v(" "),t("p",[s._v("The default editor that will be involked by any scripts or programs, usually vi or emacs.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$EDITOR")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("vi")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"hostname"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hostname"}},[s._v("#")]),s._v(" $HOSTNAME")]),s._v(" "),t("p",[s._v("The hostname assigned to the system during startup.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HOSTNAME")]),s._v("\nmybox.mydomain.com\n\n")])])]),t("h2",{attrs:{id:"hosttype"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hosttype"}},[s._v("#")]),s._v(" $HOSTTYPE")]),s._v(" "),t("p",[s._v("This variable identifies the hardware, it can be useful in determining which binaries to execute:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HOSTTYPE")]),s._v("\nx86_64\n\n")])])]),t("h2",{attrs:{id:"machtype"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#machtype"}},[s._v("#")]),s._v(" $MACHTYPE")]),s._v(" "),t("p",[s._v("Similar to "),t("code",[s._v("$HOSTTYPE")]),s._v(" above, this also includes information about the OS as well as hardware")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$MACHTYPE")]),s._v("\nx86_64-redhat-linux-gnu\n\n")])])]),t("h2",{attrs:{id:"ostype"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ostype"}},[s._v("#")]),s._v(" $OSTYPE")]),s._v(" "),t("p",[s._v("Returns information about the type of OS running on the machine, eg.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$OSTYPE")]),s._v("\nlinux-gnu\n\n")])])]),t("h2",{attrs:{id:"path"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#path"}},[s._v("#")]),s._v(" $PATH")]),s._v(" "),t("p",[s._v("The search path for finding binaries for commands. Common examples include "),t("code",[s._v("/usr/bin")]),s._v(" and "),t("code",[s._v("/usr/local/bin")]),s._v(".")]),s._v(" "),t("p",[s._v("When a user or script attempts to run a command, the paths in "),t("code",[s._v("$PATH")]),s._v(" are searched in order to find a matching file with execute permission.")]),s._v(" "),t("p",[s._v("The directories in "),t("code",[s._v("$PATH")]),s._v(" are separated by a "),t("code",[s._v(":")]),s._v(" character.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),s._v('"')]),s._v("\n/usr/kerberos/bin:/usr/local/bin:/bin:/usr/bin\n\n")])])]),t("p",[s._v("So, for example, given the above "),t("code",[s._v("$PATH")]),s._v(", if you type "),t("code",[s._v("lss")]),s._v(" at the prompt, the shell will look for "),t("code",[s._v("/usr/kerberos/bin/lss")]),s._v(", then "),t("code",[s._v("/usr/local/bin/lss")]),s._v(", then "),t("code",[s._v("/bin/lss")]),s._v(", then "),t("code",[s._v("/usr/bin/lss")]),s._v(", in this order, before concluding that there is no such command.")]),s._v(" "),t("h2",{attrs:{id:"ppid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ppid"}},[s._v("#")]),s._v(" $PPID")]),s._v(" "),t("p",[s._v("The Process ID (pid) of the script or shell's parent, meaning the process than invoked the current script or shell.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$$")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("13016")]),s._v("\n~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PPID")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("13015")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"seconds"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#seconds"}},[s._v("#")]),s._v(" $SECONDS")]),s._v(" "),t("p",[s._v("The number of seconds a script has been running. This can get quite large if shown in the shell:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$SECONDS")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("98834")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"shellopts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shellopts"}},[s._v("#")]),s._v(" $SHELLOPTS")]),s._v(" "),t("p",[s._v("A readonly list of the options bash is supplied on startup to control its behaviour:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$SHELLOPTS")]),s._v("\nbraceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor\n\n")])])]),t("h2",{attrs:{id:"-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-7"}},[s._v("#")]),s._v(" $_")]),s._v(" "),t("p",[s._v("Outputs the last field from the last command executed, useful to get something to pass onwards to another command:")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("\n~> $ ls *.sh;echo $_\ntestscript1.sh  testscript2.sh\ntestscript2.sh\n\n")])])]),t("p",[t("strong",[s._v("test.sh:")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$_")]),s._v('"')]),s._v("\n\n")])])]),t("p",[s._v("Output:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ ./test.sh "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# running test.sh")]),s._v("\n./test.sh\n\n")])])]),t("p",[t("strong",[s._v("Note:")]),s._v(" This is not a foolproof way to get the script path")]),s._v(" "),t("h2",{attrs:{id:"random"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#random"}},[s._v("#")]),s._v(" $RANDOM")]),s._v(" "),t("p",[s._v("Each time this parameter is referenced, a random integer between 0 and 32767 is generated. Assigning a value to this variable seeds the random number generator ("),t("a",{attrs:{href:"https://www.gnu.org/software/bash/manual/bashref.html#Bash-Variables",target:"_blank",rel:"noopener noreferrer"}},[s._v("source"),t("OutboundLink")],1),s._v(").")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$RANDOM")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("27119")]),s._v("\n~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$RANDOM")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1349")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"groups"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#groups"}},[s._v("#")]),s._v(" $GROUPS")]),s._v(" "),t("p",[s._v("An array containing the numbers of groups the user is in:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" You are assigned to the following groups:\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("group")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("GROUPS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("@"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("IFS")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(": "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" -r name dummy number members "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("getent group "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$group")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("printf")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name: %-10s number: %-15s members: %s'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$name")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$number")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$members")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"lineno"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lineno"}},[s._v("#")]),s._v(" $LINENO")]),s._v(" "),t("p",[s._v("Outputs the line number in the current script. Mostly useful when debugging scripts.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# this is line 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" something  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# this is line 3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$LINENO")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Will output 4")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"shlvl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shlvl"}},[s._v("#")]),s._v(" $SHLVL")]),s._v(" "),t("p",[s._v("When the bash command is executed a new shell is opened. The $SHLVL environment variable holds the number of shell levels the "),t("strong",[s._v("current")]),s._v(" shell is running on top of.")]),s._v(" "),t("p",[s._v("In a "),t("strong",[s._v("new")]),s._v(" terminal window, executing the following command will produce different results based on the Linux distribution in use.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$SHLVL")]),s._v("\n\n")])])]),t("p",[s._v("Using "),t("strong",[s._v("Fedora 25")]),s._v(', the output is "3". This indicates, that when opening a new shell, an initial bash command executes and performs a task. The initial bash command executes a child process (another bash command) which, in turn, executes a final bash command to open the new shell. When the new shell opens, it is running as a child process of 2 other shell processes, hence the output of "3".')]),s._v(" "),t("p",[s._v('In the following example (given the user is running Fedora 25), the output of $SHLVL in a new shell will be set to "3". As each bash command is executed, $SHLVL increments by one.')]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$SHLVL")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$SHLVL")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$SHLVL")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n\n")])])]),t("p",[s._v("One can see that executing the 'bash' command (or executing a bash script) opens a new shell. In comparison, sourcing a script runs the code in the current shell.")]),s._v(" "),t("p",[t("strong",[s._v("test1.sh")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello from test1.sh. My shell level is '),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$SHLVL")]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"test2.sh"')]),s._v("\n\n")])])]),t("p",[t("strong",[s._v("test2.sh")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello from test2.sh. My shell level is '),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$SHLVL")]),s._v('"')]),s._v("\n\n")])])]),t("p",[t("strong",[s._v("run.sh")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/env bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello from run.sh. My shell level is '),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$SHLVL")]),s._v('"')]),s._v("\n./test1.sh\n\n")])])]),t("p",[t("strong",[s._v("Execute:")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x test1.sh "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x run.sh\n./run.sh\n\n")])])]),t("p",[t("strong",[s._v("Output:")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("Hello from run.sh. My shell level is "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\nHello from test1.sh. My shell level is "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\nHello from test2.sh. My shell level is "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"uid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#uid"}},[s._v("#")]),s._v(" $UID")]),s._v(" "),t("p",[s._v("A read only variable that stores the users' ID number:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("~"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" $ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$UID")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12345")]),s._v("\n\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);