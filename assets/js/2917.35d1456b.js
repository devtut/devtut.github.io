(window.webpackJsonp=window.webpackJsonp||[]).push([[2917],{3325:function(a,s,t){"use strict";t.r(s);var e=t(31),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"missing-values"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#missing-values"}},[a._v("#")]),a._v(" Missing values")]),a._v(" "),t("p",[a._v("When we don't know the value a variable takes, we say its value is missing, indicated by "),t("code",[a._v("NA")]),a._v(".")]),a._v(" "),t("h2",{attrs:{id:"examining-missing-data"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#examining-missing-data"}},[a._v("#")]),a._v(" Examining missing data")]),a._v(" "),t("p",[t("code",[a._v("anyNA")]),a._v(" reports whether any missing values are present; while "),t("code",[a._v("is.na")]),a._v(" reports missing values elementwise:")]),a._v(" "),t("div",{staticClass:"language-r extra-class"},[t("pre",{pre:!0,attrs:{class:"language-r"}},[t("code",[a._v("vec "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("NA")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\nanyNA"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("vec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# [1] TRUE")]),a._v("\nis.na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("vec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# [1] FALSE FALSE FALSE  TRUE FALSE")]),a._v("\n\n")])])]),t("p",[t("code",[a._v("Ã¬s.na")]),a._v(" returns a logical vector that is coerced to integer values under arithmetic operations (with FALSE=0, TRUE=1). We can use this to find out how many missing values there are:")]),a._v(" "),t("div",{staticClass:"language-r extra-class"},[t("pre",{pre:!0,attrs:{class:"language-r"}},[t("code",[a._v("sum"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("is.na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("vec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# [1] 1")]),a._v("\n\n")])])]),t("p",[a._v("Extending this approach, we can use "),t("code",[a._v("colSums")]),a._v(" and "),t("code",[a._v("is.na")]),a._v(" on a "),t("a",{attrs:{href:"http://stackoverflow.com/documentation/r/438",target:"_blank",rel:"noopener noreferrer"}},[a._v("data frame"),t("OutboundLink")],1),a._v(" to count NAs per column:")]),a._v(" "),t("div",{staticClass:"language-r extra-class"},[t("pre",{pre:!0,attrs:{class:"language-r"}},[t("code",[a._v("colSums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("is.na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("airquality"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#   Ozone Solar.R    Wind    Temp   Month     Day ")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#      37       7       0       0       0       0 ")]),a._v("\n\n")])])]),t("p",[a._v("The "),t("a",{attrs:{href:"https://github.com/njtierney/naniar",target:"_blank",rel:"noopener noreferrer"}},[a._v("naniar package"),t("OutboundLink")],1),a._v(" (currently on github but not CRAN) offers further tools for exploring missing values.")]),a._v(" "),t("h2",{attrs:{id:"reading-and-writing-data-with-na-values"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reading-and-writing-data-with-na-values"}},[a._v("#")]),a._v(" Reading and writing data with NA values")]),a._v(" "),t("p",[a._v("When reading tabular datasets with the "),t("code",[a._v("read.*")]),a._v(" functions, R automatically looks for missing values that look like "),t("code",[a._v('"NA"')]),a._v(". However, missing values are not always represented by "),t("code",[a._v("NA")]),a._v(". Sometimes a dot ("),t("code",[a._v(".")]),a._v("), a hyphen("),t("code",[a._v("-")]),a._v(") or a character-value (e.g.: "),t("code",[a._v("empty")]),a._v(") indicates that a value is "),t("code",[a._v("NA")]),a._v(". The "),t("code",[a._v("na.strings")]),a._v(" parameter of the "),t("code",[a._v("read.*")]),a._v(" function can be used to tell R which symbols/characters need to be treated as "),t("code",[a._v("NA")]),a._v(" values:")]),a._v(" "),t("div",{staticClass:"language-r extra-class"},[t("pre",{pre:!0,attrs:{class:"language-r"}},[t("code",[a._v("read.csv"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"name_of_csv_file.csv"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" na.strings "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),t("p",[a._v("It is also possible to indicate that more than one symbol needs to be read as "),t("code",[a._v("NA")]),a._v(":")]),a._v(" "),t("div",{staticClass:"language-r extra-class"},[t("pre",{pre:!0,attrs:{class:"language-r"}},[t("code",[a._v("read.csv"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'missing.csv'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" na.strings "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'.'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'-'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),t("p",[a._v("Similarly, "),t("code",[a._v("NA")]),a._v("s can be written with customized strings using the "),t("code",[a._v("na")]),a._v(" argument to "),t("code",[a._v("write.csv")]),a._v(". "),t("a",{attrs:{href:"http://stackoverflow.com/documentation/r/5543/input-and-output/19700/reading-and-writing-data-frames#t=201702071913296746359",target:"_blank",rel:"noopener noreferrer"}},[a._v("Other tools for reading and writing tables"),t("OutboundLink")],1),a._v(" have similar options.")]),a._v(" "),t("h2",{attrs:{id:"using-nas-of-different-classes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#using-nas-of-different-classes"}},[a._v("#")]),a._v(" Using NAs of different classes")]),a._v(" "),t("p",[a._v("The symbol "),t("code",[a._v("NA")]),a._v(" is for a "),t("code",[a._v("logical")]),a._v(" missing value:")]),a._v(" "),t("div",{staticClass:"language-r extra-class"},[t("pre",{pre:!0,attrs:{class:"language-r"}},[t("code",[a._v("class"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("NA")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v('#[1] "logical"')]),a._v("\n\n")])])]),t("p",[a._v("This is convenient, since it can easily be coerced to other atomic vector types, and is therefore usually the only "),t("code",[a._v("NA")]),a._v(" you will need:")]),a._v(" "),t("div",{staticClass:"language-r extra-class"},[t("pre",{pre:!0,attrs:{class:"language-r"}},[t("code",[a._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("NA")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nclass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v('#[1] "numeric"')]),a._v("\n\n")])])]),t("p",[a._v("If you do need a single "),t("code",[a._v("NA")]),a._v(" value of another type, use "),t("code",[a._v("NA_character_")]),a._v(", "),t("code",[a._v("NA_integer_")]),a._v(", "),t("code",[a._v("NA_real_")]),a._v(" or "),t("code",[a._v("NA_complex_")]),a._v(". For missing values of fancy classes, subsetting with "),t("code",[a._v("NA_integer_")]),a._v(" usually works; for example, to get a missing-value Date:")]),a._v(" "),t("div",{staticClass:"language-r extra-class"},[t("pre",{pre:!0,attrs:{class:"language-r"}},[t("code",[a._v("class"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Sys.Date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("NA_integer_")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v('# [1] "Date"')]),a._v("\n\n")])])]),t("h2",{attrs:{id:"true-false-and-or-na"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#true-false-and-or-na"}},[a._v("#")]),a._v(" TRUE/FALSE and/or NA")]),a._v(" "),t("p",[t("code",[a._v("NA")]),a._v(" is a logical type and a logical operator with an "),t("code",[a._v("NA")]),a._v(" will return "),t("code",[a._v("NA")]),a._v(" if the outcome is ambiguous. Below, "),t("code",[a._v("NA OR TRUE")]),a._v(" evaluates to "),t("code",[a._v("TRUE")]),a._v(" because at least one side evaluates to "),t("code",[a._v("TRUE")]),a._v(", however "),t("code",[a._v("NA OR FALSE")]),a._v(" returns "),t("code",[a._v("NA")]),a._v(" because we do not know whether "),t("code",[a._v("NA")]),a._v(" would have been "),t("code",[a._v("TRUE")]),a._v(" or "),t("code",[a._v("FALSE")])]),a._v(" "),t("div",{staticClass:"language-r extra-class"},[t("pre",{pre:!0,attrs:{class:"language-r"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("NA")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("TRUE")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# [1] TRUE  ")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# TRUE | TRUE is TRUE and FALSE | TRUE is also TRUE.")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("NA")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("FALSE")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# [1] NA  ")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# TRUE | FALSE is TRUE but FALSE | FALSE is FALSE.")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("NA")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("TRUE")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# [1] NA  ")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# TRUE & TRUE is TRUE but FALSE & TRUE is FALSE.")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("NA")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("FALSE")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# [1] FALSE")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# TRUE & FALSE is FALSE and FALSE & FALSE is also FALSE.")]),a._v("\n\n")])])]),t("p",[a._v("These properties are helpful if you want to subset a data set based on some columns that contain "),t("code",[a._v("NA")]),a._v(".")]),a._v(" "),t("div",{staticClass:"language-r extra-class"},[t("pre",{pre:!0,attrs:{class:"language-r"}},[t("code",[a._v("df "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" data.frame"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("v1"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("9")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" \n                 v2"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("rep"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" each"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("NA")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("NA")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" \n                 v3"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("NA")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" letters"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\ndf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("df"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v("v2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("is.na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("df"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v("v2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#  v1 v2   v3")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#1  0  1 <NA>")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#2  1  1    b")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#3  2  1    c")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#4  3  1    d")]),a._v("\n\ndf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("df"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v("v2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n     v1 v2   v3\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#1     0  1 <NA>")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#2     1  1    b")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#3     2  1    c")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#4     3  1    d")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#NA   NA NA <NA>")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#NA.1 NA NA <NA>")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"omitting-or-replacing-missing-values"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#omitting-or-replacing-missing-values"}},[a._v("#")]),a._v(" Omitting or replacing missing values")]),a._v(" "),t("h3",{attrs:{id:"recoding-missing-values"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#recoding-missing-values"}},[a._v("#")]),a._v(" Recoding missing values")]),a._v(" "),t("p",[a._v("Regularly, missing data isn't coded as "),t("code",[a._v("NA")]),a._v(" in datasets. In SPSS for example, missing values are often represented by the value "),t("code",[a._v("99")]),a._v(".")]),a._v(" "),t("div",{staticClass:"language-r extra-class"},[t("pre",{pre:!0,attrs:{class:"language-r"}},[t("code",[a._v("num.vec "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("99")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nnum.vec\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("## [1]  1  2  3 99  5")]),a._v("\n\n")])])]),t("p",[a._v("It is possible to directly assign NA using subsetting")]),a._v(" "),t("div",{staticClass:"language-r extra-class"},[t("pre",{pre:!0,attrs:{class:"language-r"}},[t("code",[a._v("num.vec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("num.vec "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("99")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("NA")]),a._v("\n\n")])])]),t("p",[a._v("However, the  preferred method is to use "),t("code",[a._v("is.na<-")]),a._v(" as below. The help file ("),t("code",[a._v("?is.na")]),a._v(") states:")]),a._v(" "),t("blockquote"),a._v(" "),t("p",[t("code",[a._v("is.na<-")]),a._v(" may provide a safer way to set missingness. It behaves differently for factors, for example.")]),a._v(" "),t("div",{staticClass:"language-r extra-class"},[t("pre",{pre:!0,attrs:{class:"language-r"}},[t("code",[a._v("is.na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("num.vec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" num.vec "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("99")]),a._v("\n\n")])])]),t("p",[a._v("Both methods return")]),a._v(" "),t("div",{staticClass:"language-r extra-class"},[t("pre",{pre:!0,attrs:{class:"language-r"}},[t("code",[a._v("num.vec\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("## [1]  1  2  3 NA  5")]),a._v("\n\n")])])]),t("h3",{attrs:{id:"removing-missing-values"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#removing-missing-values"}},[a._v("#")]),a._v(" Removing missing values")]),a._v(" "),t("p",[a._v("Missing values can be removed in several ways from a vector:")]),a._v(" "),t("div",{staticClass:"language-r extra-class"},[t("pre",{pre:!0,attrs:{class:"language-r"}},[t("code",[a._v("num.vec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("is.na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("num.vec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\nnum.vec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("complete.cases"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("num.vec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\nna.omit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("num.vec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("## [1] 1 2 3 5")]),a._v("\n\n")])])]),t("h3",{attrs:{id:"excluding-missing-values-from-calculations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#excluding-missing-values-from-calculations"}},[a._v("#")]),a._v(" Excluding missing values from calculations")]),a._v(" "),t("p",[a._v("When using arithmetic functions on vectors with missing values, a missing value will be returned:")]),a._v(" "),t("div",{staticClass:"language-r extra-class"},[t("pre",{pre:!0,attrs:{class:"language-r"}},[t("code",[a._v("mean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("num.vec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# returns: [1] NA")]),a._v("\n\n")])])]),t("p",[a._v("The "),t("code",[a._v("na.rm")]),a._v(" parameter tells the function to exclude the "),t("code",[a._v("NA")]),a._v(" values from the calculation:")]),a._v(" "),t("div",{staticClass:"language-r extra-class"},[t("pre",{pre:!0,attrs:{class:"language-r"}},[t("code",[a._v("mean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("num.vec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" na.rm "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("TRUE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# returns: [1] 2.75")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# an alternative to using 'na.rm = TRUE':")]),a._v("\nmean"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("num.vec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("is.na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("num.vec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# returns: [1] 2.75")]),a._v("\n\n")])])]),t("p",[a._v("Some R functions, like "),t("code",[a._v("lm")]),a._v(", have a "),t("code",[a._v("na.action")]),a._v(" parameter. The default-value for this is "),t("code",[a._v("na.omit")]),a._v(", but with "),t("code",[a._v("options(na.action = 'na.exclude')")]),a._v(" the default behavior of R can be changed.")]),a._v(" "),t("p",[a._v("If it is not necessary to change the default behavior, but for a specific situation another "),t("code",[a._v("na.action")]),a._v(" is needed, the "),t("code",[a._v("na.action")]),a._v(" parameter needs to be included in the function call, e.g.:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\nlm(y2 ~ y1, data = anscombe, na.action = 'na.exclude')\n\n")])])]),t("h4",{attrs:{id:"remarks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[a._v("#")]),a._v(" Remarks")]),a._v(" "),t("p",[a._v("Missing values are represented by the symbol "),t("code",[a._v("NA")]),a._v(" (not available). Impossible values (e.g., as a result of "),t("code",[a._v("sqrt(-1)")]),a._v(") are represented by the symbol "),t("code",[a._v("NaN")]),a._v(" (not a number).")])])}),[],!1,null,null,null);s.default=n.exports}}]);