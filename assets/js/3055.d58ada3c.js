(window.webpackJsonp=window.webpackJsonp||[]).push([[3055],{3463:function(s,t,a){"use strict";a.r(t);var r=a(31),e=Object(r.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"catching-exceptions-with-begin-rescue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#catching-exceptions-with-begin-rescue"}},[s._v("#")]),s._v(" Catching Exceptions with Begin / Rescue")]),s._v(" "),a("h2",{attrs:{id:"a-basic-error-handling-block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-basic-error-handling-block"}},[s._v("#")]),s._v(" A Basic Error Handling Block")]),s._v(" "),a("p",[s._v("Let's make a function to divide two numbers, that's very trusting about its input:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("divide")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("y\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("p",[s._v("This will work fine for a lot of inputs:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" puts divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n\n")])])]),a("p",[s._v("But not all")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" puts divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ZeroDivisionError")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" divided by "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" puts divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TypeError")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),s._v(" can't be coerced into "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Fixnum")]),s._v("\n\n")])])]),a("p",[s._v("We can rewrite the function by wrapping the risky division operation in a "),a("code",[s._v("begin... end")]),s._v(" block to check for errors, and use a "),a("code",[s._v("rescue")]),s._v(" clause to output a message and return "),a("code",[s._v("nil")]),s._v(" if there is a problem.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("divide")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("y\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"There was an error"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" puts divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("There")]),s._v(" was an error\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" puts divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("There")]),s._v(" was an error\n\n")])])]),a("h2",{attrs:{id:"saving-the-error"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#saving-the-error"}},[s._v("#")]),s._v(" Saving the Error")]),s._v(" "),a("p",[s._v("You can save the error if you want to use it in the "),a("code",[s._v("rescue")]),s._v(" clause")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("divide")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n    x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("y\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" e\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"There was a %s (%s)"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    puts e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("backtrace\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("There")]),s._v(" was a "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ZeroDivisionError")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("divided by "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n       from "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":in")]),s._v(" `"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("'\n       from "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n       from "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Users")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/username/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rbenv"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("versions"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("bin"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":in")]),s._v(" `"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("main"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("'\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("There")]),s._v(" was a "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TypeError")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),s._v(" can't be coerced into "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Fixnum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Users")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/username/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rbenv"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("versions"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("lib"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("workspace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("87")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":in")]),s._v(" `eval'\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Users")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/username/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rbenv"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("versions"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("lib"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("workspace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("87")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":in")]),s._v(" `evaluate'\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Users")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/username/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rbenv"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("versions"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("lib"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("380")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":in")]),s._v(" `evaluate'\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Users")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/username/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rbenv"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("versions"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("lib"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("489")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":in")]),s._v(" `block "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" levels"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" eval_input'\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Users")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/username/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rbenv"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("versions"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("lib"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("623")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":in")]),s._v(" `signal_status'\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Users")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/username/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rbenv"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("versions"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("lib"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("486")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":in")]),s._v(" `block "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" eval_input'\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Users")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/username/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rbenv"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("versions"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("lib"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("lex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("246")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":in")]),s._v(" `block "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" levels"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" each_top_level_statement'\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Users")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/username/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rbenv"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("versions"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("lib"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("lex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("232")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":in")]),s._v(" `loop'\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Users")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/username/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rbenv"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("versions"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("lib"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("lex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("232")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":in")]),s._v(" `block "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" each_top_level_statement'\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Users")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/username/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rbenv"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("versions"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("lib"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("lex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("231")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":in")]),s._v(" `catch'\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Users")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/username/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rbenv"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("versions"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("lib"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("lex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("231")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":in")]),s._v(" `each_top_level_statement'\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Users")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/username/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rbenv"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("versions"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("lib"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("485")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":in")]),s._v(" `eval_input'\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Users")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/username/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rbenv"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("versions"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("lib"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("395")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":in")]),s._v(" `block "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" start'\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Users")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/username/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rbenv"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("versions"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("lib"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("394")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":in")]),s._v(" `catch'\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Users")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/username/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rbenv"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("versions"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("lib"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("ruby"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("394")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":in")]),s._v(" `start'\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Users")]),a("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/username/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rbenv"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("versions"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("bin"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("irb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":in")]),s._v(" `"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("main"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("'\n\n")])])]),a("h2",{attrs:{id:"checking-for-different-errors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#checking-for-different-errors"}},[s._v("#")]),s._v(" Checking for Different Errors")]),s._v(" "),a("p",[s._v("If you want to do different things based on the kind of error, use multiple "),a("code",[s._v("rescue")]),s._v(" clauses, each with a different error type as an argument.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("divide")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("y\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ZeroDivisionError")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Don\'t divide by zero!"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TypeError")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Division only works on numbers!"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Don")]),s._v("'t divide by zero"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Division")]),s._v(" only works on numbers"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n\n")])])]),a("p",[s._v("If you want to save the error for use in the "),a("code",[s._v("rescue")]),s._v(" block:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ZeroDivisionError")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" e\n\n")])])]),a("p",[s._v("Use a "),a("code",[s._v("rescue")]),s._v(" clause with no argument to catch errors of a type not specified in another "),a("code",[s._v("rescue")]),s._v(" clause.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("divide")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("y\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ZeroDivisionError")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Don\'t divide by zero!"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TypeError")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Division only works on numbers!"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" e\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Don\'t do that (%s)"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Don")]),s._v("'t "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" that "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NoMethodError")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])])]),a("p",[s._v("In this case, trying to divide "),a("code",[s._v("nil")]),s._v(" by 2 is not a "),a("code",[s._v("ZeroDivisionError")]),s._v(" or a "),a("code",[s._v("TypeError")]),s._v(", so it handled by the default "),a("code",[s._v("rescue")]),s._v(" clause, which prints out a message to let us know that it was a "),a("code",[s._v("NoMethodError")]),s._v(".")]),s._v(" "),a("h2",{attrs:{id:"retrying"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#retrying"}},[s._v("#")]),s._v(" Retrying")]),s._v(" "),a("p",[s._v("In a "),a("code",[s._v("rescue")]),s._v(" clause, you can use "),a("code",[s._v("retry")]),s._v(" to run the "),a("code",[s._v("begin")]),s._v(" clause again, presumably after changing the circumstance that caused the error.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("divide")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"About to divide..."')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("y\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ZeroDivisionError")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Don\'t divide by zero!"')]),s._v("\n    y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("retry")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TypeError")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Division only works on numbers!"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" e\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Don\'t do that (%s)"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("p",[s._v("If we pass parameters that we know will cause a "),a("code",[s._v("TypeError")]),s._v(", the "),a("code",[s._v("begin")]),s._v(' clause is executed (flagged here by printing out "About to divide") and the error is caught as before, and '),a("code",[s._v("nil")]),s._v(" is returned:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("About")]),s._v(" to divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Division")]),s._v(" only works on numbers"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),s._v("\n\n")])])]),a("p",[s._v("But if we pass parameters that will cause a "),a("code",[s._v("ZeroDivisionError")]),s._v(", the "),a("code",[s._v("begin")]),s._v(" clause is executed, the error is caught, the divisor changed from 0 to 1, and then "),a("code",[s._v("retry")]),s._v(" causes the "),a("code",[s._v("begin")]),s._v(" block to be run again (from the top), now with a different "),a("code",[s._v("y")]),s._v(". The second time around there is no error and the function returns a value.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("About")]),s._v(" to divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# First time, 10 ÷ 0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Don")]),s._v("'t divide by zero"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("About")]),s._v(" to divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Second time 10 ÷ 1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"checking-whether-no-error-was-raised"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#checking-whether-no-error-was-raised"}},[s._v("#")]),s._v(" Checking Whether No Error Was Raised")]),s._v(" "),a("p",[s._v("You can use an "),a("code",[s._v("else")]),s._v(" clause for code that will be run if no error is raised.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("divide")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n    z "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("y\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ZeroDivisionError")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Don\'t divide by zero!"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TypeError")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Division only works on numbers!"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" e\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Don\'t do that (%s)"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This code will run if there is no error."')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" z\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("p",[s._v("The "),a("code",[s._v("else")]),s._v(" clause does not run if there is an error that transfers control to one of the "),a("code",[s._v("rescue")]),s._v(" clauses:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Don")]),s._v("'t divide by zero"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),s._v("\n\n")])])]),a("p",[s._v("But if no error is raised, the "),a("code",[s._v("else")]),s._v(" clause executes:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("This")]),s._v(" code will run "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" there is no error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n\n")])])]),a("p",[s._v("Note that the "),a("code",[s._v("else")]),s._v(" clause will not be executed "),a("strong",[s._v("if you return from the "),a("code",[s._v("begin")]),s._v(" clause")])]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("divide")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n    z "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("y\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" z                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Will keep the else clause from running!")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ZeroDivisionError")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Don\'t divide by zero!"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This code will run if there is no error."')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" z\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"code-that-should-always-run"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#code-that-should-always-run"}},[s._v("#")]),s._v(" Code That Should Always Run")]),s._v(" "),a("p",[s._v("Use an "),a("code",[s._v("ensure")]),s._v(" clause if there is code you always want to execute.")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("divide")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n    z "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("y\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" z\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ZeroDivisionError")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Don\'t divide by zero!"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TypeError")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Division only works on numbers!"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rescue")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" e\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Don\'t do that (%s)"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ensure")]),s._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This code ALWAYS runs."')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("p",[s._v("The "),a("code",[s._v("ensure")]),s._v(" clause will be executed when there is an error:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Don")]),s._v("'t divide by zero"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# rescue clause")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("This")]),s._v(" code "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ALWAYS")]),s._v(" runs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ensure clause")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),s._v("\n\n")])])]),a("p",[s._v("And when there is no error:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" divide"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("This")]),s._v(" code "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ALWAYS")]),s._v(" runs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ensure clause")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n\n")])])]),a("p",[s._v("The ensure clause is useful when you want to make sure, for instance, that files are closed.")]),s._v(" "),a("p",[s._v("Note that, unlike the "),a("code",[s._v("else")]),s._v(" clause, the "),a("code",[s._v("ensure")]),s._v(" clause "),a("strong",[s._v("is executed")]),s._v(" before the "),a("code",[s._v("begin")]),s._v(" or "),a("code",[s._v("rescue")]),s._v(" clause returns a value. If the "),a("code",[s._v("ensure")]),s._v(" clause has a "),a("code",[s._v("return")]),s._v(" that will override the "),a("code",[s._v("return")]),s._v(" value of any other clause!")])])}),[],!1,null,null,null);t.default=e.exports}}]);