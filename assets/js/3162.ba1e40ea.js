(window.webpackJsonp=window.webpackJsonp||[]).push([[3162],{3570:function(t,s,e){"use strict";e.r(s);var a=e(31),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"model-states-aasm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#model-states-aasm"}},[t._v("#")]),t._v(" Model states: AASM")]),t._v(" "),e("h2",{attrs:{id:"basic-state-with-aasm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#basic-state-with-aasm"}},[t._v("#")]),t._v(" Basic state with AASM")]),t._v(" "),e("p",[t._v("Usually you'll end up creating models which will contain a state, and that state will be changing during the lifespan of the object.")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/aasm/aasm",target:"_blank",rel:"noopener noreferrer"}},[t._v("AASM"),e("OutboundLink")],1),t._v(" is a finite state machine enabler library that can help you out with dealing with having an easy passing through the process design of your objects.")]),t._v(" "),e("p",[t._v("Having something like this in your model goes pretty aligned with the "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/ruby-on-rails/1207/rails-best-practices/9609/fat-model-skinny-controller#t=201611091524540826623",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fat Model, Skinny Controller"),e("OutboundLink")],1),t._v(" idea, one of Rails best practices. The model is the sole responsible of managing its state, its changes and of generating the events triggered by those changes.")]),t._v(" "),e("p",[t._v("To install, in Gemfile")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[t._v("gem "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aasm'")]),t._v("\n\n")])])]),e("p",[t._v("Consider an App where the user Quotes a product for a price.")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Quote")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AASM")]),t._v("\n\n  aasm "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    state "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":requested")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" initial"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# User sees a product and requests a quote")]),t._v("\n    state "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":priced")]),t._v("                    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Seller sets the price ")]),t._v("\n    state "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":payed")]),t._v("                     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Buyer pays the price")]),t._v("\n    state "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":canceled")]),t._v("                  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The buyer is not willing to pay the price")]),t._v("\n    state "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":completed")]),t._v("                 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The product has been delivered.")]),t._v("\n\n    event "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":price")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n        transitions from"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" requested"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" to"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":priced")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n    event "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":pay")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n        transitions from"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":priced")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" to"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":payed")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" success"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":set_payment_date")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n    event "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":complete")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n        transitions from"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":payed")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" to"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":completed")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" guard"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" product_delivered"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n    event "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":cancel")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n        transitions from"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":requested")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":priced")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" to"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":canceled")]),t._v("\n        transitions from"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":payed")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" to"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" canceled"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" success"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":reverse_charges")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n   \n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token method-definition"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_payment_date")])]),t._v("\n    update payed_at"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Time")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zone"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("now\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),e("p",[t._v("The Quote class' states can go however it's best for your process.")]),t._v(" "),e("p",[t._v("You can think of the states as being past, like in the previous example or algo in other tense, for example: pricing, paying, delivering, etc. The naming of the states depends on you. From a personal point a view, past states work better because your end state will surely be a past action and links up better with the event names, which will be explained later.")]),t._v(" "),e("p",[e("strong",[t._v("NOTE:")]),t._v(" Be careful what names you use, you have to worry about not using Ruby or Ruby on Rails reserved keywords, like "),e("code",[t._v("valid")]),t._v(", "),e("code",[t._v("end")]),t._v(", "),e("code",[t._v("being")]),t._v(", etc.")]),t._v(" "),e("p",[t._v("Having defined the states and transitions we can now access some methods created by AASM.")]),t._v(" "),e("p",[t._v("For example:")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Quote")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("priced  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Shows all Quotes with priced events")]),t._v("\nquote"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("priced"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Indicates if that specific quote has been priced")]),t._v("\nquote"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("price"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Triggers the event the would transition from requested to priced.")]),t._v("\n\n")])])]),e("p",[t._v("As you can see the event has transitions, this transitions determine the way the state will change upon the event call. If the event is invalid due to the current state an Error will be raised.")]),t._v(" "),e("p",[t._v("The events and transitions also have some other callbacks, for example")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[t._v("guard"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" product_delivered"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n\n")])])]),e("p",[t._v("Will call the "),e("code",[t._v("product_delivered?")]),t._v(" method which will return a boolean. If it turns out false, the transition will not be applied and if the no other transitions are available, the state won't change.")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[t._v("success"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":reverse_charges")]),t._v("\n\n")])])]),e("p",[t._v("If that translation successfully happens the "),e("code",[t._v(":reverse_charges")]),t._v(" method will be invoked.")]),t._v(" "),e("p",[t._v("There are several other methods in AASM with more callbacks in the process but this will help you creating your first models with finite states.")])])}),[],!1,null,null,null);s.default=n.exports}}]);