(window.webpackJsonp=window.webpackJsonp||[]).push([[2325],{2733:function(t,s,e){"use strict";e.r(s);var a=e(31),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"unit-testing-using-xcode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unit-testing-using-xcode"}},[t._v("#")]),t._v(" Unit testing using Xcode")]),t._v(" "),e("h2",{attrs:{id:"testing-a-block-of-code-or-some-method"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#testing-a-block-of-code-or-some-method"}},[t._v("#")]),t._v(" Testing a block of code or some method:")]),t._v(" "),e("ul",[e("li",[t._v("Import the class, which contains the method to be tested.")]),t._v(" "),e("li",[t._v("Perform the operation with dummy data.")]),t._v(" "),e("li",[t._v("Now compare the result of operation with expected result.")])]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("testReverseString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nNSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("originalString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"hi_my_name_is_siddharth"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nNSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("reversedString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("someObject reverseString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("originalString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nNSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("expectedReversedString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"htrahddis_si_eman_ym_ih"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("XCTAssertEqualObjects")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectedReversedString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reversedString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"The reversed string did not match the expected reverse"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("blockquote"),t._v(" "),e("h3",[t._v("Feed the dummy data to the method under test if required & then compare the expected & actual results.")]),t._v(" "),e("h2",{attrs:{id:"testing-asynchronous-block-of-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#testing-asynchronous-block-of-code"}},[t._v("#")]),t._v(" Testing asynchronous block of code:")]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("testDoSomethingThatTakesSomeTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nXCTestExpectation "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("completionExpectation "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" expectationWithDescription"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"Long method"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("someObject doSomethingThatTakesSomeTimesWithCompletionBlock"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("XCTAssertEqualObjects")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"result"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"Result was not correct!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("completionExpectation fulfill"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" waitForExpectationsWithTimeout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v(" handler"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("nil"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("ul",[e("li",[t._v("Feed the dummy data to the method under test if required.")]),t._v(" "),e("li",[t._v("The test will pause here, running the run loop, until the timeout is hit or all expectations are fulfilled.")]),t._v(" "),e("li",[t._v("Timeout is the expected time for the asynchronous block to response.")])]),t._v(" "),e("h2",{attrs:{id:"measuring-performance-of-a-block-of-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#measuring-performance-of-a-block-of-code"}},[t._v("#")]),t._v(" Measuring Performance of a block of code:")]),t._v(" "),e("p",[e("strong",[t._v("1. For Synchronous methods :")])]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("testPerformanceReverseString "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("originalString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"hi_my_name_is_siddharth"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" measureBlock"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("someObject reverseString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("originalString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[e("strong",[t._v("2. For Asynchronous methods :")])]),t._v(" "),e("div",{staticClass:"language-objectivec extra-class"},[e("pre",{pre:!0,attrs:{class:"language-objectivec"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("testPerformanceOfAsynchronousBlock "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" measureMetrics"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("XCTPerformanceMetric_WallClockTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" automaticallyStartMeasuring"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("YES forBlock"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    XCTestExpectation "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("expectation "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" expectationWithDescription"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"performanceTestWithResponse"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("someObject doSomethingThatTakesSomeTimesWithCompletionBlock"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("expectation fulfill"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" waitForExpectationsWithTimeout"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v(" handler"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSError "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("error"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("ul",[e("li",[t._v("These performance measure block gets executed for 10 times consecutively & then the average is calculated, & on the basis of this average performance result gets created & baseline is accepted for further evaluation.")]),t._v(" "),e("li",[t._v("The performance result is compared with the previous test results & baseline with a customizable max standard deviation.")])]),t._v(" "),e("h2",{attrs:{id:"running-test-suits"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#running-test-suits"}},[t._v("#")]),t._v(" Running Test Suits:")]),t._v(" "),e("p",[t._v("Run all tests by choosing Product > Test. Click the Test Navigator icon to view the status and results of the tests. You can add a test target to a project (or add a class to a test) by clicking the Add  (plus) button in the bottom-left corner of the test navigator. To view the source code for a particular test, select it from the test list. The file opens in the source code editor.")]),t._v(" "),e("h2",{attrs:{id:"note"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#note"}},[t._v("#")]),t._v(" Note:")]),t._v(" "),e("p",[t._v("Make sure that include unit test case box is checked when creating a new project as shown below:\n"),e("a",{attrs:{href:"http://i.stack.imgur.com/uIjto.png",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"http://i.stack.imgur.com/uIjto.png",alt:"enter image description here"}}),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"remarks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),e("p",[e("strong",[t._v("Dependencies")]),t._v(":")]),t._v(" "),e("ul",[e("li",[t._v("If application uses third party libraries or cocoa pods, then those libraries or pods are needed to be install for test as well.")]),t._v(" "),e("li",[t._v("Test class (Test Suit) extends XCTestCase.")])]),t._v(" "),e("p",[e("strong",[t._v("Get brushed up before starting:")])]),t._v(" "),e("li",[t._v("\nAll test classes have two methods in common setUp & tearDown.\n")]),t._v(" "),e("li",[t._v("\nsetUp runs before every testcase & tearDown after every testcase.\n")]),t._v(" "),e("li",[t._v("\nTest cases runs alphabetically.\n")]),t._v(" "),e("li",[t._v("\nIn Test Driven Development, it is good to create dummy test data first.\n")]),t._v(" "),e("li",[t._v('\nTest case methods starts with "test" keyword.\n')]),t._v(" "),e("li",[t._v("\nTest methods accept no parameters & return no value.\n")]),t._v(" "),e("p",[e("strong",[t._v("Appendix:")])]),t._v(" "),e("p",[t._v("There are several other methods for comparing the expected result & actual result out of an operation.\nSome of those methods are listed below:")]),t._v(" "),e("ul",[e("li",[t._v("XCTAssertNil(expression, comment) generates a failure if expression != nil.")]),t._v(" "),e("li",[t._v("XCTAssertNotNil(expression, comment) generates a failure if expression = nil.")]),t._v(" "),e("li",[t._v("XCTAssert(expression, comment) generates a failure if expression == false.")]),t._v(" "),e("li",[t._v("XCTAssertTrue(expression, comment) generates a failure if expression == false.")]),t._v(" "),e("li",[t._v("XCTAssertFalse(expression, comment) generates a failure if expression != false.")]),t._v(" "),e("li",[t._v("XCTAssertEqualObjects(expression1, expression2, comment) generates a failure if expression1 is not equal to expression2.")]),t._v(" "),e("li",[t._v("XCTAssertEqualObjects(expression1, expression2, comment) generates a failure if expression1 is equal to expression2.")]),t._v(" "),e("li",[t._v("XCTAssertNotEqual(expression1, expression2, comment) generates a failure if expression1 == expression2.")]),t._v(" "),e("li",[t._v("XCTAssertEqual(expression1, expression2, comment) generates a failure if expression1 != expression2.")]),t._v(" "),e("li",[t._v("XCTAssertGreaterThanOrEqual(expression1, expression2, comment) generates a failure when ( expression1 < expression2).")])])])}),[],!1,null,null,null);s.default=n.exports}}]);