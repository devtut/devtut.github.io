(window.webpackJsonp=window.webpackJsonp||[]).push([[506],{914:function(e,t,s){"use strict";s.r(t);var a=s(31),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"here-documents-and-here-strings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#here-documents-and-here-strings"}},[e._v("#")]),e._v(" Here documents and here strings")]),e._v(" "),s("h2",{attrs:{id:"execute-command-with-here-document"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#execute-command-with-here-document"}},[e._v("#")]),e._v(" Execute command with here document")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ssh")]),e._v(" -p "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("21")]),e._v(" example@example.com "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF\n  echo 'printing pwd'\n  echo \"\\"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("pwd")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\"\n  ls -a\n  find '*.txt'\nEOF")]),e._v("\n\n")])])]),s("p",[s("code",[e._v("$")]),e._v(" is escaped because we do not want it to be expanded by the current shell i.e "),s("code",[e._v("$(pwd)")]),e._v(" is to be executed on the remote shell.")]),e._v(" "),s("p",[e._v("Another way:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ssh")]),e._v(" -p "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("21")]),e._v(" example@example.com "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'EOF'\n  echo 'printing pwd'\n  echo \"$(pwd)\"\n  ls -a\n  find '*.txt'\nEOF")]),e._v("    \n\n")])])]),s("p",[s("strong",[e._v("Note")]),e._v(": The closing EOF "),s("strong",[e._v("should")]),e._v(" be at the beginning of the line (No whitespaces before). If indentation is required, tabs may be used if you start your heredoc with "),s("code",[e._v("<<-")]),e._v(". See the "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/bash/655/here-documents-and-here-strings/2135/indenting-here-documents",target:"_blank",rel:"noopener noreferrer"}},[e._v("Indenting here documents"),s("OutboundLink")],1),e._v(" and "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/bash/655/here-documents-and-here-strings/12587/limit-strings",target:"_blank",rel:"noopener noreferrer"}},[e._v("Limit Strings"),s("OutboundLink")],1),e._v(" examples for more information.")]),e._v(" "),s("h2",{attrs:{id:"indenting-here-documents"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#indenting-here-documents"}},[e._v("#")]),e._v(" Indenting here documents")]),e._v(" "),s("p",[e._v("You can indent the text inside here documents with tabs, you need to use the "),s("code",[e._v("<<-")]),e._v(" redirection operator instead of "),s("code",[e._v("<<")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<-")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF\n    This is some content indented with tabs "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("t"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v(".\n    You cannot indent with spaces you __have__ to use tabs.\n    Bash will remove empty space before these lines.\n    __Note__: Be sure to replace spaces with tabs when copying this example.\nEOF")]),e._v("\n\nThis is some content indented with tabs _"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("t_.\nYou cannot indent with spaces you __have__ to use tabs.\nBash will remove empty space before these lines.\n__Note__: Be sure to replace spaces with tabs when copying this example.\n\n")])])]),s("p",[e._v("One practical use case of this (as mentioned in "),s("code",[e._v("man bash")]),e._v(")\nis in shell scripts, for example:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" cond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<-")]),e._v(" EOF\n    hello\n    there\n    EOF\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fi")]),e._v("\n\n")])])]),s("p",[e._v("It is customary to indent the lines within code blocks as in this "),s("code",[e._v("if")]),e._v(" statement, for better readability.\nWithout the "),s("code",[e._v("<<-")]),e._v(" operator syntax, we would be forced to write the above code like this:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" cond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF\nhello\nthere\nEOF")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fi")]),e._v("\n\n")])])]),s("p",[e._v("That's very unpleasant to read, and it gets much worse in a more complex realistic script.")]),e._v(" "),s("h2",{attrs:{id:"here-strings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#here-strings"}},[e._v("#")]),e._v(" Here strings")]),e._v(" "),s("p",[e._v("You can feed a command using here strings like this:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("awk")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{print $2}'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<<")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"hello world - how are you?"')]),e._v("\nworld\n\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("awk")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{print $1}'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<<")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"hello how are you\n> she is fine"')]),e._v("\nhello\nshe\n\n")])])]),s("p",[e._v("You can also feed a "),s("code",[e._v("while")]),e._v(" loop with a here string:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("IFS")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" "')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("read")]),e._v(" -r word1 word2 rest\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("do")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$word1")]),e._v('"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<<")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"hello how are you - i am fine"')]),e._v("\nhello\n\n")])])]),s("h2",{attrs:{id:"create-a-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-a-file"}},[e._v("#")]),e._v(" Create a file")]),e._v(" "),s("p",[e._v("A classic use of here documents is to create a file by typing its content:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" fruits.txt "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF\napple\norange\nlemon\nEOF")]),e._v("\n\n")])])]),s("p",[e._v("The here-document is the lines between the "),s("code",[e._v("<< EOF")]),e._v(" and "),s("code",[e._v("EOF")]),e._v(".")]),e._v(" "),s("p",[e._v("This here document becomes the input of the "),s("code",[e._v("cat")]),e._v(" command.\nThe "),s("code",[e._v("cat")]),e._v(" command simply outputs its input,\nand using the output redirection operator "),s("code",[e._v(">")]),e._v(" we redirect to a file "),s("code",[e._v("fruits.txt")]),e._v(".")]),e._v(" "),s("p",[e._v("As a result, the "),s("code",[e._v("fruits.txt")]),e._v(" file will contain the lines:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("apple\norange\nlemon\n\n")])])]),s("p",[e._v("The usual rules of output redirection apply:\nif "),s("code",[e._v("fruits.txt")]),e._v(" did not exist before, it will be created.\nIf it existed before, it will be truncated.")]),e._v(" "),s("h2",{attrs:{id:"run-several-commands-with-sudo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run-several-commands-with-sudo"}},[e._v("#")]),e._v(" Run several commands with sudo")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" -s "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF\n  a='var'\n  echo 'Running serveral commands with sudo'\n  mktemp -d\n  echo \"\\"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$a")]),e._v('"\nEOF')]),e._v("\n\n")])])]),s("ul",[s("li",[s("code",[e._v("$a")]),e._v(" needs to be escaped to prevent it to be expanded by the current shell")])]),e._v(" "),s("p",[e._v("Or")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" -s "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'EOF'\n  a='var'\n  echo 'Running serveral commands with sudo'\n  mktemp -d\n  echo \"$a\"\nEOF")]),e._v("\n\n")])])]),s("h2",{attrs:{id:"limit-strings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#limit-strings"}},[e._v("#")]),e._v(" Limit Strings")]),e._v(" "),s("p",[e._v("A heredoc uses the "),s("strong",[e._v("limitstring")]),e._v(" to determine when to stop consuming input. The terminating limitstring "),s("strong",[e._v("must")])]),e._v(" "),s("ul",[s("li",[e._v("Be at the start of a line.\n")]),s("li",[e._v("Be the only text on the line\n"),s("strong",[e._v("Note:")]),e._v(" If you use "),s("code",[e._v("<<-")]),e._v("  the limitstring can be prefixed with tabs "),s("code",[e._v("\\t")])])]),e._v(" "),s("p",[e._v("Correct:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("limitstring\nline 1\nline 2\nlimitstring")]),e._v("\n\n")])])]),s("p",[e._v("This will output:")]),e._v(" "),s("blockquote"),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("line "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\nline "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n\n")])])]),s("p",[e._v("Incorrect use:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v("limitstring\nline "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\nline "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n limitstring\n\n")])])]),s("p",[e._v("Since "),s("code",[e._v("limitstring")]),e._v(" on the last line is not exactly at the start of the line, the shell will continue to wait for further input, until it sees a line that starts with "),s("code",[e._v("limitstring")]),e._v(" and doesn't contain anything else. Only then it will stop waiting for input, and proceed to pass the here-document to the "),s("code",[e._v("cat")]),e._v(" command.")]),e._v(" "),s("p",[e._v("Note that when you prefix the initial limitstring with a hyphen, any tabs at the start of the line are removed before parsing, so the data and the limit string can be indented with tabs (for ease of reading in shell scripts).")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<-")]),e._v("limitstring\n        line "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("    has a tab each before the words line and has\n            line "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" has two leading tabs\n        limitstring\n\n")])])]),s("p",[e._v("will produce")]),e._v(" "),s("blockquote"),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("line "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("    has a tab each before the words line and has\nline "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" has two leading tabs\n\n")])])]),s("p",[e._v("with the leading tabs (but not the internal tabs) removed.")])])}),[],!1,null,null,null);t.default=n.exports}}]);