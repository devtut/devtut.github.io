(window.webpackJsonp=window.webpackJsonp||[]).push([[2394],{2802:function(t,a,e){"use strict";e.r(a);var s=e(31),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"memory-usage-optimization"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#memory-usage-optimization"}},[t._v("#")]),t._v(" Memory usage optimization")]),t._v(" "),e("h2",{attrs:{id:"reading-files-foreach-vs-while"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reading-files-foreach-vs-while"}},[t._v("#")]),t._v(" Reading files: foreach vs. while")]),t._v(" "),e("p",[t._v("When reading a potentially large file, a "),e("code",[t._v("while")]),t._v(" loop has a significant memory advantage over "),e("code",[t._v("foreach")]),t._v('. The following will read the file record by record (by default, "record" means "a line", as specified by '),e("code",[t._v("$/")]),t._v("), assigning each one to "),e("code",[t._v("$_")]),t._v(" as it is read:")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("The "),e("strong",[t._v("diamond operator")]),t._v(' does some magic here to make sure the loop only terminates at end-of-file and not e.g. on lines that contain only a "0" character.')]),t._v(" "),e("p",[t._v("The following loop seems to work just the same, however it evaluates the diamond operator in list context, causing the entire file to be read in one go:")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("foreach")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("If you are operating on one record at a time anyway, this can result in a huge waste of memory and should thus be avoided.")]),t._v(" "),e("h2",{attrs:{id:"processing-long-lists"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#processing-long-lists"}},[t._v("#")]),t._v(" Processing long lists")]),t._v(" "),e("p",[t._v("If you have a list in memory already, the straightforward and usually sufficient way to process it is a simple "),e("code",[t._v("foreach")]),t._v(" loop:")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("foreach")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$item")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@items")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("This is fine e.g. for the common case of doing some processing on "),e("code",[t._v("$item")]),t._v(" and then writing it out to a file without keeping the data around. However, if you build up some other data structure from the items, a "),e("code",[t._v("while")]),t._v(" loop is more memory efficient:")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@result")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@items")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$item")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" shift "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@items")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    push "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@result")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" process_item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$item")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("Unless a reference to "),e("code",[t._v("$item")]),t._v(" directly ends up in your result list, items you shifted off the "),e("code",[t._v("@items")]),t._v(" array can be freed and the memory reused by the interpreter when you enter the next loop iteration.")])])}),[],!1,null,null,null);a.default=n.exports}}]);