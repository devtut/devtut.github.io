(window.webpackJsonp=window.webpackJsonp||[]).push([[3421],{3829:function(t,e,s){"use strict";s.r(e);var a=s(31),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"declaring-variables"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#declaring-variables"}},[t._v("#")]),t._v(" Declaring Variables")]),t._v(" "),s("h2",{attrs:{id:"type-hints"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-hints"}},[t._v("#")]),t._v(" Type Hints")]),t._v(" "),s("p",[t._v("Type Hints are "),s("strong",[t._v("heavily")]),t._v(" discouraged. They exist and are documented here for historical and backward-compatibility reasons. You should use the "),s("code",[t._v("As [DataType]")]),t._v(" syntax instead.")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" ExampleDeclaration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" someInteger"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'% Equivalent to "As Integer"')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" someLong"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'& Equivalent to "As Long"')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" someDecimal"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'@ Equivalent to "As Currency"')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" someSingle"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'! Equivalent to "As Single"')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" someDouble"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("#")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'# Equivalent to "As Double"')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" someString"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'$ Equivalent to "As String"')]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" someLongLong"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'^ Equivalent to "As LongLong" in 64-bit VBA hosts')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),s("p",[t._v("Type hints significantly decrease code readability and encourage a legacy "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Hungarian_notation",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hungarian Notation"),s("OutboundLink")],1),t._v(" which "),s("strong",[t._v("also")]),t._v(" hinders readability:")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" strFile"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" iFile"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("\n\n")])])]),s("p",[t._v("Instead, declare variables closer to their usage and name things for what they're used, not after their type:")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" path "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" handle "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v("\n\n")])])]),s("p",[t._v("Type hints can also be used on literals, to enforce a specific type. By default, a numeric literal smaller than 32,768 will be interpreted as an "),s("code",[t._v("Integer")]),t._v(" literal, but with a type hint you can control that:")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'implicit Variant")]),t._v("\nfoo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' foo is now a Long")]),t._v("\nfoo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' foo is now a Double")]),t._v("\nDebug"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print TypeName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\' prints "Single"')]),t._v("\n\n")])])]),s("p",[t._v("Type hints are usually not needed on literals, because they would be assigned to a variable declared with an explicit type, or implicitly converted to the appropriate type when passed as parameters. Implicit conversions can be avoided using one of the explicit type conversion functions:")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Calls procedure DoSomething and passes a literal 42 as a Long using a type hint")]),t._v("\nDoSomething "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Calls procedure DoSomething and passes a literal 42 explicitly converted to a Long")]),t._v("\nDoSomething "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CLng")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"string-returning-built-in-functions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-returning-built-in-functions"}},[t._v("#")]),t._v(" String-returning built-in functions")]),t._v(" "),s("p",[t._v("The majority of the built-in functions that handle strings come in two versions: A loosely typed version that returns a "),s("code",[t._v("Variant")]),t._v(", and a strongly typed version (ending with "),s("code",[t._v("$")]),t._v(") that returns a "),s("code",[t._v("String")]),t._v(". Unless you are assigning the return value to a "),s("code",[t._v("Variant")]),t._v(", you should prefer the version that returns a "),s("code",[t._v("String")]),t._v(" - otherwise there is an implicit conversion of the return value.")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[t._v("Debug"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print Left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Left returns a Variant")]),t._v("\nDebug"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print Left"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Left$ returns a String")]),t._v("\n\n")])])]),s("p",[t._v("These functions are:")]),t._v(" "),s("ul",[s("li",[t._v("VBA.Conversion.Error -> VBA.Conversion.Error$")]),t._v(" "),s("li",[t._v("VBA.Conversion.Hex -> VBA.Conversion.Hex$")]),t._v(" "),s("li",[t._v("VBA.Conversion.Oct -> VBA.Conversion.Oct$")]),t._v(" "),s("li",[t._v("VBA.Conversion.Str -> VBA.Conversion.Str$")]),t._v(" "),s("li",[t._v("VBA.FileSystem.CurDir -> VBA.FileSystem.CurDir$")]),t._v(" "),s("li",[t._v("VBA.[_HiddenModule].Input -> VBA.[_HiddenModule].Input$")]),t._v(" "),s("li",[t._v("VBA.[_HiddenModule].InputB -> VBA.[_HiddenModule].InputB$")]),t._v(" "),s("li",[t._v("VBA.Interaction.Command -> VBA.Interaction.Command$")]),t._v(" "),s("li",[t._v("VBA.Interaction.Environ -> VBA.Interaction.Environ$")]),t._v(" "),s("li",[t._v("VBA.Strings.Chr -> VBA.Strings.Chr$")]),t._v(" "),s("li",[t._v("VBA.Strings.ChrB -> VBA.Strings.ChrB$")]),t._v(" "),s("li",[t._v("VBA.Strings.ChrW -> VBA.Strings.ChrW$")]),t._v(" "),s("li",[t._v("VBA.Strings.Format -> VBA.Strings.Format$")]),t._v(" "),s("li",[t._v("VBA.Strings.LCase -> VBA.Strings.LCase$")]),t._v(" "),s("li",[t._v("VBA.Strings.Left -> VBA.Strings.Left$")]),t._v(" "),s("li",[t._v("VBA.Strings.LeftB -> VBA.Strings.LeftB$")]),t._v(" "),s("li",[t._v("VBA.Strings.LTtrim -> VBA.Strings.LTrim$")]),t._v(" "),s("li",[t._v("VBA.Strings.Mid -> VBA.Strings.Mid$")]),t._v(" "),s("li",[t._v("VBA.Strings.MidB -> VBA.Strings.MidB$")]),t._v(" "),s("li",[t._v("VBA.Strings.Right -> VBA.Strings.Right$")]),t._v(" "),s("li",[t._v("VBA.Strings.RightB -> VBA.Strings.RightB$")]),t._v(" "),s("li",[t._v("VBA.Strings.RTrim -> VBA.Strings.RTrim$")]),t._v(" "),s("li",[t._v("VBA.Strings.Space -> VBA.Strings.Space$")]),t._v(" "),s("li",[t._v("VBA.Strings.Str -> VBA.Strings.Str$")]),t._v(" "),s("li",[t._v("VBA.Strings.String -> VBA.Strings.String$")]),t._v(" "),s("li",[t._v("VBA.Strings.Trim -> VBA.Strings.Trim$")]),t._v(" "),s("li",[t._v("VBA.Strings.UCase -> VBA.Strings.UCase$")])]),t._v(" "),s("p",[t._v("Note that these are function "),s("strong",[t._v("aliases")]),t._v(", not quite "),s("strong",[t._v("type hints")]),t._v(". The "),s("code",[t._v("Left")]),t._v(" function corresponds to the hidden "),s("code",[t._v("B_Var_Left")]),t._v(" function, while the "),s("code",[t._v("Left$")]),t._v(" version corresponds to the hidden "),s("code",[t._v("B_Str_Left")]),t._v(" function.")]),t._v(" "),s("p",[t._v("In very early versions of VBA the "),s("code",[t._v("$")]),t._v(" sign isn't an allowed character and the function name had to be enclosed in square brackets. In Word Basic, there were many, many more functions that returned strings that ended in $.")]),t._v(" "),s("h2",{attrs:{id:"variables"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[t._v("#")]),t._v(" Variables")]),t._v(" "),s("h3",{attrs:{id:"scope"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scope"}},[t._v("#")]),t._v(" Scope")]),t._v(" "),s("p",[t._v("A variable can be declared (in increasing visibility level):")]),t._v(" "),s("ul",[s("li",[t._v("At procedure level, using the "),s("code",[t._v("Dim")]),t._v(" keyword in any procedure; a "),s("strong",[t._v("local variable")]),t._v(".")]),t._v(" "),s("li",[t._v("At module level, using the "),s("code",[t._v("Private")]),t._v(" keyword in any type of module; a "),s("strong",[t._v("private field")]),t._v(".")]),t._v(" "),s("li",[t._v("At instance level, using the "),s("code",[t._v("Friend")]),t._v(" keyword in any type of class module; a "),s("strong",[t._v("friend field")]),t._v(".")]),t._v(" "),s("li",[t._v("At instance level, using the "),s("code",[t._v("Public")]),t._v(" keyword in any type of class module; a "),s("strong",[t._v("public field")]),t._v(".")]),t._v(" "),s("li",[t._v("Globally, using the "),s("code",[t._v("Public")]),t._v(" keyword in a "),s("strong",[t._v("standard module")]),t._v("; a "),s("strong",[t._v("global variable")]),t._v(".")])]),t._v(" "),s("p",[t._v("Variables should always be declared with the smallest possible scope: prefer passing parameters to procedures, rather than declaring global variables.")]),t._v(" "),s("p",[t._v("See "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/vba/877/declaring-variables/2959/access-modifiers",target:"_blank",rel:"noopener noreferrer"}},[t._v("Access Modifiers"),s("OutboundLink")],1),t._v(" for more information.")]),t._v(" "),s("h3",{attrs:{id:"local-variables"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#local-variables"}},[t._v("#")]),t._v(" Local variables")]),t._v(" "),s("p",[t._v("Use the "),s("code",[t._v("Dim")]),t._v(" keyword to declare a "),s("strong",[t._v("local variable")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" identifierName ["),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Type")]),t._v("]["),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" identifierName ["),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Type")]),t._v("]"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("]\n\n")])])]),s("p",[t._v("The "),s("code",[t._v("[As Type]")]),t._v(" part of the declaration syntax is optional. When specified, it sets the variable's data type, which determines how much memory will be allocated to that variable. This declares a "),s("code",[t._v("String")]),t._v(" variable:")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" identifierName "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v("\n\n")])])]),s("p",[t._v("When a type is not specified, the type is implicitly "),s("code",[t._v("Variant")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" identifierName "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'As Variant is implicit")]),t._v("\n\n")])])]),s("p",[t._v("The VBA syntax also supports declaring multiple variables in a single statement:")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" someString "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" someVariant"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" someValue "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Long")]),t._v("\n\n")])])]),s("p",[t._v("Notice that the "),s("code",[t._v("[As Type]")]),t._v(" has to be specified for each variable (other than 'Variant' ones). This is a relatively common trap:")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" integer1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" integer2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" integer3 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Only integer3 is an Integer. ")]),t._v("\n                                            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'The rest are Variant.")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"static-variables"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#static-variables"}},[t._v("#")]),t._v(" Static variables")]),t._v(" "),s("p",[t._v("Local variables can also be "),s("code",[t._v("Static")]),t._v(". In VBA the "),s("code",[t._v("Static")]),t._v(' keyword is used to make a variable "remember" the value it had, last time a procedure was called:')]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" DoSomething"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Static")]),t._v(" values "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" Collection\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" values "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("Nothing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Set")]),t._v(" values "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("New")]),t._v(" Collection\n        values"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Add "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n        values"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Add "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n    DoSomethingElse values\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),s("p",[t._v("Here the "),s("code",[t._v("values")]),t._v(" collection is declared as a "),s("code",[t._v("Static")]),t._v(" local; because it's an "),s("strong",[t._v("object variable")]),t._v(", it is initialized to "),s("code",[t._v("Nothing")]),t._v(". The condition that follows the declaration verifies if the object reference was "),s("code",[t._v("Set")]),t._v(" before - if it's the first time the procedure runs, the collection gets initialized. "),s("code",[t._v("DoSomethingElse")]),t._v(" might be adding or removing items, and they'll still be in the collection next time "),s("code",[t._v("DoSomething")]),t._v(" is called.")]),t._v(" "),s("p",[s("strong",[t._v("Alternative")])]),t._v(" "),s("blockquote"),t._v(" "),s("p",[t._v("VBA's "),s("code",[t._v("Static")]),t._v(" keyword can easily be misunderstood - "),s("strong",[t._v("especially")]),t._v(" by seasoned programmers that usually work in other languages. In many languages, "),s("code",[t._v("static")]),t._v(" is used to make a class member (field, property, method, ...) belong to the "),s("strong",[t._v("type")]),t._v(" rather than to the "),s("strong",[t._v("instance")]),t._v(". Code in "),s("code",[t._v("static")]),t._v(" context cannot reference code in "),s("strong",[t._v("instance")]),t._v(" context. The VBA "),s("code",[t._v("Static")]),t._v(" keyword means something wildly different.")]),t._v(" "),s("p",[t._v("Often, a "),s("code",[t._v("Static")]),t._v(" local could just as well be implemented as a "),s("code",[t._v("Private")]),t._v(", module-level variable (field) - however this challenges the principle by which a variable should be declared with the smallest possible scope; trust your instincts, use whichever you prefer - both will work... but using "),s("code",[t._v("Static")]),t._v(" without understanding what it does could lead to interesting bugs.")]),t._v(" "),s("p",[s("strong",[t._v("Dim vs. Private")])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Dim")]),t._v(" keyword is legal at procedure and module levels; its usage at module level is equivalent to using the "),s("code",[t._v("Private")]),t._v(" keyword:")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Option")]),t._v(" Explicit\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" privateField1 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'same as Private privateField2 as Long")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Private")]),t._v(" privateField2 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'same as Dim privateField2 as Long")]),t._v("\n\n")])])]),s("p",[t._v("The "),s("code",[t._v("Private")]),t._v(" keyword is only legal at module level; this invites reserving "),s("code",[t._v("Dim")]),t._v(" for local variables and declaring module variables with "),s("code",[t._v("Private")]),t._v(", especially with the contrasting "),s("code",[t._v("Public")]),t._v(" keyword that would have to be used anyway to declare a public member. Alternatively use "),s("code",[t._v("Dim")]),t._v(" "),s("strong",[t._v("everywhere")]),t._v(" - what matters is "),s("strong",[t._v("consistency")]),t._v(":")]),t._v(" "),s("p",[t._v('"Private fields"')]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("DO")]),t._v(" use "),s("code",[t._v("Private")]),t._v(" to declare a module-level variable.")]),t._v(" "),s("li",[s("strong",[t._v("DO")]),t._v(" use "),s("code",[t._v("Dim")]),t._v(" to declare a local variable.")]),t._v(" "),s("li",[s("strong",[t._v("DO NOT")]),t._v(" use "),s("code",[t._v("Dim")]),t._v(" to declare a module-level variable.")])]),t._v(" "),s("p",[t._v('"Dim everywhere"')]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("DO")]),t._v(" use "),s("code",[t._v("Dim")]),t._v(" to declare anything private/local.")]),t._v(" "),s("li",[s("strong",[t._v("DO NOT")]),t._v(" use "),s("code",[t._v("Private")]),t._v(" to declare a module-level variable.")]),t._v(" "),s("li",[s("strong",[t._v("AVOID")]),t._v(" declaring "),s("code",[t._v("Public")]),t._v(" fields.*")])]),t._v(" "),s("p",[s("sub",[t._v("*In general, one should avoid declaring "),s("code",[t._v("Public")]),t._v(" or "),s("code",[t._v("Global")]),t._v(" fields anyway.")])]),t._v(" "),s("h3",{attrs:{id:"fields"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fields"}},[t._v("#")]),t._v(" Fields")]),t._v(" "),s("p",[t._v("A variable declared at module level, in the "),s("strong",[t._v("declarations section")]),t._v(" at the top of the module body, is a "),s("strong",[t._v("field")]),t._v(". A "),s("code",[t._v("Public")]),t._v(" field declared in a "),s("strong",[t._v("standard module")]),t._v(" is a "),s("strong",[t._v("global variable")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" PublicField "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Long")]),t._v("\n\n")])])]),s("p",[t._v("A variable with a global scope can be accessed from anywhere, including other VBA projects that would reference the project it's declared in.")]),t._v(" "),s("p",[t._v("To make a variable global/public, but only visible from within the project, use the "),s("code",[t._v("Friend")]),t._v(" modifier:")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Friend")]),t._v(" FriendField "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Long")]),t._v("\n\n")])])]),s("p",[t._v("This is especially useful in add-ins, where the intent is that other VBA projects reference the add-in project and can consume the public API.")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Friend")]),t._v(" FriendField "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'public within the project, aka for "friend" code')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" PublicField "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'public within and beyond the project")]),t._v("\n\n")])])]),s("p",[t._v("Friend fields are not available in standard modules.")]),t._v(" "),s("h3",{attrs:{id:"instance-fields"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#instance-fields"}},[t._v("#")]),t._v(" Instance Fields")]),t._v(" "),s("p",[t._v("A variable declared at module level, in the "),s("strong",[t._v("declarations section")]),t._v(" at the top of the body of a class module (including "),s("code",[t._v("ThisWorkbook")]),t._v(", "),s("code",[t._v("ThisDocument")]),t._v(", "),s("code",[t._v("Worksheet")]),t._v(", "),s("code",[t._v("UserForm")]),t._v(" and "),s("strong",[t._v("class modules")]),t._v("), is an "),s("strong",[t._v("instance field")]),t._v(": it only exists as long as there's an "),s("strong",[t._v("instance")]),t._v(" of the class around.")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'> Class1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Option")]),t._v(" Explicit\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" PublicField "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Long")]),t._v("\n\n")])])]),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'> Module1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Option")]),t._v(" Explicit\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" DoSomething"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Class1.PublicField means nothing here")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("With")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("New")]),t._v(" Class1\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PublicField "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("With")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Class1.PublicField means nothing here")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"encapsulating-fields"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#encapsulating-fields"}},[t._v("#")]),t._v(" Encapsulating fields")]),t._v(" "),s("p",[t._v("Instance data is often kept "),s("code",[t._v("Private")]),t._v(", and dubbed "),s("strong",[t._v("encapsulated")]),t._v(". A private field can be exposed using a "),s("code",[t._v("Property")]),t._v(" procedure. To expose a private variable publicly without giving write access to the caller, a class module (or a standard module) implements a "),s("code",[t._v("Property Get")]),t._v(" member:")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Option")]),t._v(" Explicit\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Private")]),t._v(" encapsulated "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Long")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Property")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Get")]),t._v(" SomeValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Long")]),t._v("\n    SomeValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" encapsulated\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Property")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" DoSomething"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    encapsulated "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),s("p",[t._v("The class itself can modify the encapsulated value, but the calling code can only access the "),s("code",[t._v("Public")]),t._v(" members (and "),s("code",[t._v("Friend")]),t._v(" members, if the caller is in the same project).")]),t._v(" "),s("p",[t._v("To allow the caller to modify:")]),t._v(" "),s("ul",[s("li",[t._v("An encapsulated "),s("strong",[t._v("value")]),t._v(", a module exposes a "),s("code",[t._v("Property Let")]),t._v(" member.")]),t._v(" "),s("li",[t._v("An encapsulated "),s("strong",[t._v("object reference")]),t._v(", a module exposes a "),s("code",[t._v("Property Set")]),t._v(" member.")])]),t._v(" "),s("h2",{attrs:{id:"constants-const"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#constants-const"}},[t._v("#")]),t._v(" Constants (Const)")]),t._v(" "),s("p",[t._v("If you have a value that never changes in your application, you can define a named constant and use it in place of a literal value.")]),t._v(" "),s("p",[t._v("You can use Const only at module or procedure level. This means the declaration context for a variable must be a class, structure, module, procedure, or block, and cannot be a source file, namespace, or interface.")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Const")]),t._v(" GLOBAL_CONSTANT "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Project Version #1.000.000.001"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Const")]),t._v(" MODULE_CONSTANT "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Something relevant to this Module"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" ExampleDeclaration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    \n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Const")]),t._v(" SOME_CONSTANT "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Const")]),t._v(" PI "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Double")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.141592653")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),s("p",[t._v("Whilst it can be considered good practice to specify Constant types, it isn't strictly required. Not specifying the type will still result in the correct type:")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Const")]),t._v(" GLOBAL_CONSTANT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Project Version #1.000.000.001"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Still a string")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" ExampleDeclaration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Const")]),t._v(" SOME_CONSTANT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Still a string")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Const")]),t._v(" DERIVED_CONSTANT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SOME_CONSTANT        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'DERIVED_CONSTANT is also a string")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Const")]),t._v(" VAR_CONSTANT "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SOME_CONSTANT "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'VAR_CONSTANT is Variant/String")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Const")]),t._v(" PI "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.141592653")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Still a double")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Const")]),t._v(" DERIVED_PI "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PI         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'DERIVED_PI is also a double")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Const")]),t._v(" VAR_PI "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PI  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'VAR_PI is Variant/Double")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),s("p",[t._v("Note that this is specific to Constants and in contrast to variables where not specifying the type results in a Variant type.")]),t._v(" "),s("p",[t._v("While it is possible to explicitly declare a constant as a String, it is not possible to declare a constant as a string using fixed-width string syntax")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'This is a valid 5 character string constant")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Const")]),t._v(" FOO "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ABCDE"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'This is not valid syntax for a 5 character string constant")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Const")]),t._v(" FOO "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ABCDE"')]),t._v("\n\n")])])]),s("h2",{attrs:{id:"declaring-fixed-length-strings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#declaring-fixed-length-strings"}},[t._v("#")]),t._v(" Declaring Fixed-Length Strings")]),t._v(" "),s("p",[t._v("In VBA, Strings can be declared with a specific length; they are automatically padded or truncated to maintain that length as declared.")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" TwoTypesOfStrings"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" FixedLengthString "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' declares a string of 5 characters")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" NormalString "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v("\n\n    Debug"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print FixedLengthString       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\' Prints "     "')]),t._v("\n    Debug"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print NormalString            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\' Prints ""')]),t._v("\n\n    FixedLengthString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\' FixedLengthString now equals "123  "')]),t._v("\n    NormalString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"456"')]),t._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\' NormalString now equals "456"')]),t._v("\n\n    FixedLengthString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123456"')]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\' FixedLengthString now equals "12345"')]),t._v("\n    NormalString "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"456789"')]),t._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\' NormalString now equals "456789"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"implicit-and-explicit-declaration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#implicit-and-explicit-declaration"}},[t._v("#")]),t._v(" Implicit And Explicit Declaration")]),t._v(" "),s("p",[t._v("If a code module does not contain "),s("code",[t._v("Option Explicit")]),t._v(' at the top of the module, then the compiler will automatically (that is, "implicitly") create variables for you when you use them. They will default to variable type '),s("code",[t._v("Variant")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" ExampleDeclaration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    \n\n    someVariable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' ")]),t._v("\n    someOtherVariable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Both of these variables are of the Variant type.")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),s("p",[t._v("In the above code, if "),s("code",[t._v("Option Explicit")]),t._v(" is specified, the code will interrupt because it is missing the required "),s("code",[t._v("Dim")]),t._v(" statements for "),s("code",[t._v("someVariable")]),t._v(" and "),s("code",[t._v("someOtherVariable")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Option")]),t._v(" Explicit\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" ExampleDeclaration"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   \n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" someVariable "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Long")]),t._v(" \n    someVariable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" someOtherVariable "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v("\n    someOtherVariable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),s("p",[t._v("It is considered best practice to use Option Explicit in code modules, to ensure that you declare all variables.")]),t._v(" "),s("p",[t._v("See "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/excel-vba/1107/vba-best-practices#t=201608100743250636318",target:"_blank",rel:"noopener noreferrer"}},[t._v("VBA Best Practices"),s("OutboundLink")],1),t._v(" how to set this option by default.")]),t._v(" "),s("h2",{attrs:{id:"access-modifiers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#access-modifiers"}},[t._v("#")]),t._v(" Access Modifiers")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Dim")]),t._v(" statement should be reserved for local variables. At module-level, prefer explicit access modifiers:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Private")]),t._v(" for private fields, which can only be accessed within the module they're declared in.")]),t._v(" "),s("li",[s("code",[t._v("Public")]),t._v(" for public fields and global variables, which can be accessed by any calling code.")]),t._v(" "),s("li",[s("code",[t._v("Friend")]),t._v(" for variables public within the project, but inaccessible to other referencing VBA projects (relevant for add-ins)")]),t._v(" "),s("li",[s("code",[t._v("Global")]),t._v(" can also be used for "),s("code",[t._v("Public")]),t._v(" fields in standard modules, but is illegal in class modules and is obsolete anyway - prefer the "),s("code",[t._v("Public")]),t._v(" modifier instead. This modifier isn't legal for procedures either.")])]),t._v(" "),s("p",[t._v("Access modifiers are applicable to variables and procedures alike.")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Private")]),t._v(" ModuleVariable "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" GlobalVariable "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" ModuleProcedure"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    ModuleVariable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This can only be done from within the same Module"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" GlobalProcedure"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    GlobalVariable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This can be done from any Module within this Project"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"option-private-module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#option-private-module"}},[t._v("#")]),t._v(" Option Private Module")]),t._v(" "),s("p",[t._v("Public parameterless "),s("code",[t._v("Sub")]),t._v(" procedures in standard modules are exposed as macros and can be attached to controls and keyboard shortcuts in the host document.")]),t._v(" "),s("p",[t._v("Conversely, public "),s("code",[t._v("Function")]),t._v(" procedures in standard modules are exposed as user-defined functions (UDF's) in the host application.")]),t._v(" "),s("p",[t._v("Specifying "),s("code",[t._v("Option Private Module")]),t._v(" at the top of a standard module prevents its members from being exposed as macros and UDF's to the host application.")]),t._v(" "),s("h2",{attrs:{id:"when-to-use-a-static-variable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#when-to-use-a-static-variable"}},[t._v("#")]),t._v(" When to use a Static variable")]),t._v(" "),s("p",[t._v("A Static variable declared locally is not destructed and does not lose its value when the Sub procedure is exited. Subsequent calls to the procedure do not require re-initialization or assignment although you may want to 'zero' any remembered value(s).")]),t._v(" "),s("p",[t._v("These are particularly useful when late binding an object in a 'helper' sub that is called repeatedly.")]),t._v(" "),s("p",[s("strong",[t._v("Snippet 1:")]),t._v(" Reuse a "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/vba/3667/scripting-dictionary-object",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scripting.Dictionary object"),s("OutboundLink")],1),t._v(" across many worksheets")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Option")]),t._v(" Explicit\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" w "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Long")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" w "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" Worksheets"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Count\n        processDictionary ws"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Worksheets"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v(" w\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" processDictionary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ws "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" Worksheet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rng "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" Range\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Static")]),t._v(" dict "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Object")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" dict "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("Nothing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'initialize and set the dictionary object")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Set")]),t._v(" dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" CreateObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Scripting.Dictionary"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CompareMode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vbTextCompare\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Else")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'remove all pre-existing dictionary entries")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' this may or may not be desired if a single dictionary of entries")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' from all worksheets is preferred")]),t._v("\n        dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RemoveAll\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("With")]),t._v(" ws\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'work with a fresh dictionary object for each worksheet")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' without constructing/destructing a new object each time")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' or do not clear the dictionary upon subsequent uses and ")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("' build a dictionary containing entries from all worksheets")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("With")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),s("p",[s("strong",[t._v("Snippet 2:")]),t._v(" Create a worksheet UDF that late binds the VBScript.RegExp object")]),t._v(" "),s("div",{staticClass:"language-vb extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vb"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Option")]),t._v(" Explicit\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Function")]),t._v(" numbersOnly"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("_")]),t._v("\n                     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Optional")]),t._v(" delim "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('", "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Static")]),t._v(" rgx "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cmat "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Object")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'with rgx as static, it only has to be created once")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'this is beneficial when filling a long column with this UDF")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" rgx "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("Nothing")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Set")]),t._v(" rgx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" CreateObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"VBScript.RegExp"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Else")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Set")]),t._v(" cmat "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("Nothing")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("With")]),t._v(" rgx\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Global")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MultiLine "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pattern "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[0-9]{1,999}"')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Set")]),t._v(" cmat "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Execute"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'resize the nums array to accept the matches")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ReDim")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cmat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'populate the nums array with the matches")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LBound"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" UBound"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cmat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v(" n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'convert the nums array to a delimited string")]),t._v("\n            numbersOnly "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Join"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" delim"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Else")]),t._v("\n            numbersOnly "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vbNullString\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("With")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Function")]),t._v("\n\n")])])]),s("p",[s("a",{attrs:{href:"http://i.stack.imgur.com/BN6gX.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"http://i.stack.imgur.com/BN6gX.png",alt:"static_UDF"}}),s("OutboundLink")],1),s("br"),t._v(" "),s("sup",[t._v("Example of UDF with Static object filled through a half-million rows")])]),t._v(" "),s("blockquote"),t._v(" "),s("dt",[t._v("*"),s("sub",[t._v("Elapsed times to fill 500K rows with UDF:")])]),s("dd",[s("sub",[t._v(" - with **Dim rgx As Object**: 148.74 seconds")])]),s("dd",[s("sup",[t._v(" - with **Static rgx As Object**: 26.07 seconds")])]),t._v("\n* "),s("sub",[t._v("These should be considered for relative comparison only. Your own results will vary according to the complexity and"),s("br"),t._v("    scope of the operations performed.")]),t._v(" "),s("p",[t._v("Remember that a UDF is not calculated once in the lifetime of a workbook. Even a non-volatile UDF will recalculate whenever the values within the range(s) it references are subject to change. Each subsequent recalculation event only increases the benefits of a statically declared variable.")]),t._v(" "),s("ul",[s("li",[t._v("A Static variable is available for the lifetime of the module, not the procedure or function in which it was declared and assigned.")]),t._v(" "),s("li",[t._v("Static variables can only be declared locally.")]),t._v(" "),s("li",[t._v("Static variable hold many of the same properties of a private module level variable but with a more restricted scope.")])]),t._v(" "),s("p",[s("sub",[t._v("Related reference: "),s("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/z2cty7t8.aspx",target:"_blank",rel:"noopener noreferrer"}},[t._v("Static (Visual Basic)"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=n.exports}}]);