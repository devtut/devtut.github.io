(window.webpackJsonp=window.webpackJsonp||[]).push([[2122],{2530:function(a,t,s){"use strict";s.r(t);var e=s(31),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"json"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#json"}},[a._v("#")]),a._v(" JSON")]),a._v(" "),s("h2",{attrs:{id:"create-simple-table-with-a-primary-key-and-json-field"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-simple-table-with-a-primary-key-and-json-field"}},[a._v("#")]),a._v(" Create simple table with a primary key and JSON field")]),a._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("CREATE")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("TABLE")]),a._v(" table_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n    id "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("INT")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("NOT")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("NULL")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("AUTO_INCREMENT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" \n    json_col JSON"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("PRIMARY")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),s("h2",{attrs:{id:"insert-a-simple-json"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#insert-a-simple-json"}},[a._v("#")]),a._v(" Insert a simple JSON")]),a._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("INSERT")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("INTO")]),a._v("\n    table_name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("json_col"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("VALUES")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('\'{"City": "Galle", "Description": "Best damn city in the world"}\'')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),s("p",[a._v("That's simple as it can get but note that because JSON dictionary keys have to be surrounded by double quotes the entire thing should be wrapped in single quotes. If the query succeeds, the data will be stored in a binary format.")]),a._v(" "),s("h2",{attrs:{id:"updating-a-json-field"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#updating-a-json-field"}},[a._v("#")]),a._v(" Updating a JSON field")]),a._v(" "),s("p",[a._v("In the previous example we saw how mixed data types can be inserted into a JSON field. What if we want to update that field? We are going to add "),s("strong",[a._v("scheveningen")]),a._v(" to the array named "),s("code",[a._v("variations")]),a._v(" in the previous example.")]),a._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("UPDATE")]),a._v(" \n    myjson \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("SET")]),a._v(" \n    dict"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("JSON_ARRAY_APPEND"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'$.variations'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'scheveningen'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("WHERE")]),a._v(" \n    id "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),s("p",[a._v("Notes:")]),a._v(" "),s("ol",[s("li",[a._v("The "),s("code",[a._v("$.variations")]),a._v(" array in our json dictionary. The $ symbol represents the json documentation. For a full explaination of json paths recognized by mysql refer to "),s("a",{attrs:{href:"https://dev.mysql.com/doc/refman/5.7/en/json-path-syntax.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://dev.mysql.com/doc/refman/5.7/en/json-path-syntax.html"),s("OutboundLink")],1)]),a._v(" "),s("li",[a._v("Since we don't yet have an example on querying using json fields, this example uses the primary key.")])]),a._v(" "),s("p",[a._v("Now if we do "),s("code",[a._v("SELECT * FROM myjson")]),a._v(" we will see")]),a._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("----+-----------------------------------------------------------------------------------------+")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" dict                                                                                    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("---+-----------------------------------------------------------------------------------------+")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" {"),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"opening"')]),a._v(": "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Sicilian"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"variations"')]),a._v(": "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"pelikan"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"dragon"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"najdorf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"scheveningen"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("} "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("----+-----------------------------------------------------------------------------------------+")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("row")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("in")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("set")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v(" sec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),s("h2",{attrs:{id:"insert-mixed-data-into-a-json-field"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#insert-mixed-data-into-a-json-field"}},[a._v("#")]),a._v(" Insert mixed data into a JSON field.")]),a._v(" "),s("p",[a._v("This inserts a json dictionary where one of the members is an array of strings into the table that was created in another example.")]),a._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("INSERT")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("INTO")]),a._v(" myjson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("VALUES")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('\'{"opening":"Sicilian","variations":["pelikan","dragon","najdorf"]}\'')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),s("p",[a._v("Note, once again, that you need to be careful with the use of single and double quotes. The whole thing has to be wrapped in single quotes.")]),a._v(" "),s("h2",{attrs:{id:"cast-data-to-json-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cast-data-to-json-type"}},[a._v("#")]),a._v(" CAST data to JSON type")]),a._v(" "),s("p",[a._v("This converts valid json strings to MySQL JSON type:")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('\nSELECT CAST(\'[1,2,3]\' as JSON) ;\n SELECT CAST(\'{"opening":"Sicilian","variations":["pelikan","dragon","najdorf"]}\' as JSON);\n\n')])])]),s("h2",{attrs:{id:"create-json-object-and-array"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-json-object-and-array"}},[a._v("#")]),a._v(" Create Json Object and Array")]),a._v(" "),s("p",[s("code",[a._v("JSON_OBJECT")]),a._v(" creates JSON Objects:")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("\nSELECT JSON_OBJECT('key1',col1 , 'key2',col2 , 'key3','col3') as myobj;\n\n")])])]),s("p",[s("code",[a._v("JSON_ARRAY")]),a._v("  creates JSON Array as well:")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("\nSELECT JSON_ARRAY(col1,col2,'col3') as myarray;\n\n")])])]),s("p",[a._v('Note: myobj.key3 and myarray[2] are "col3" as fixed string.')]),a._v(" "),s("p",[a._v("Also mixed JSON data:")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('\nSELECT JSON_OBJECT("opening","Sicilian", "variations",JSON_ARRAY("pelikan","dragon","najdorf") ) as mymixed ;\n\n')])])]),s("h4",{attrs:{id:"remarks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[a._v("#")]),a._v(" Remarks")]),a._v(" "),s("p",[a._v("Starting from MySQL 5.7.8, MySQL ships with a JSON type. Lots of devs have been saving JSON data in text columns for a log time but the JSON type is different, the data is saved in binary format after validation. That avoids the overhead of parsing the text on each read.")])])}),[],!1,null,null,null);t.default=n.exports}}]);