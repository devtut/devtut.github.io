(window.webpackJsonp=window.webpackJsonp||[]).push([[2488],{2896:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"password-hashing-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#password-hashing-functions"}},[t._v("#")]),t._v(" Password Hashing Functions")]),t._v(" "),a("p",[t._v("As more secure web services avoid storing passwords in plain text format, languages such as PHP provide various (undecryptable) hash functions to support the more secure industry standard. This topic provides documentation for proper hashing with PHP.")]),t._v(" "),a("h2",{attrs:{id:"creating-a-password-hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-password-hash"}},[t._v("#")]),t._v(" Creating a password hash")]),t._v(" "),a("p",[t._v("Create password hashes using "),a("a",{attrs:{href:"http://php.net/manual/en/function.password-hash.php",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("password_hash()")]),a("OutboundLink")],1),t._v(" to use the current industry best-practice standard hash or key derivation. At time of writing, the standard is "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Bcrypt",target:"_blank",rel:"noopener noreferrer"}},[t._v("bcrypt"),a("OutboundLink")],1),t._v(", which means, that "),a("code",[t._v("PASSWORD_DEFAULT")]),t._v(" contains the same value as "),a("code",[t._v("PASSWORD_BCRYPT")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$options")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'cost'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$hashedPassword")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("password_hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$plaintextPassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PASSWORD_DEFAULT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$options")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("The third parameter is "),a("strong",[t._v("not mandatory")]),t._v(".")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("'cost'")]),t._v(" value should be chosen based on your production server's hardware. Increasing it will make the password more costly to generate. The costlier it is to generate the longer it will take anyone trying to crack it to generate it also. The cost should ideally be as high as possible, but in practice it should be set so it does not slow down everything too much. Somewhere between 0.1 and 0.4 seconds would be okay. Use the default value if you are in doubt.")]),t._v(" "),a("p",[t._v("On PHP lower than 5.5.0 the "),a("code",[t._v("password_*")]),t._v(" functions are not available. You should use "),a("a",{attrs:{href:"https://github.com/ircmaxell/password_compat",target:"_blank",rel:"noopener noreferrer"}},[t._v("the compatibility pack"),a("OutboundLink")],1),t._v(" to substitute those functions. Notice the compatibility pack requires PHP 5.3.7 or higher or a version that has the "),a("code",[t._v("$2y")]),t._v(" fix backported into it (such as RedHat provides).")]),t._v(" "),a("p",[t._v("If you are not able to use those, you can implement password hashing with "),a("a",{attrs:{href:"http://php.net/manual/en/function.crypt.php",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("crypt()")]),a("OutboundLink")],1),t._v(" As "),a("code",[t._v("password_hash()")]),t._v(" is implemented as a wrapper around the "),a("code",[t._v("crypt()")]),t._v(" function, you need not lose any functionality.")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this is a simple implementation of a bcrypt hash otherwise compatible")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// with `password_hash()`")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// not guaranteed to maintain the same cryptographic strength of the full `password_hash()`")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// implementation")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if `CRYPT_BLOWFISH` is 1, that means bcrypt (which uses blowfish) is available")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// on your system")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CRYPT_BLOWFISH")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$salt")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mcrypt_create_iv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MCRYPT_DEV_URANDOM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$salt")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("base64_encode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$salt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// crypt uses a modified base64 variant")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$source")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$dest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$salt")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strtr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rtrim")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$salt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'='")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$source")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$dest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$salt")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$salt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `crypt()` determines which hashing algorithm to use by the form of the salt string")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// that is passed in")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$hashedPassword")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("crypt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$plaintextPassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'$2y$10$'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$salt")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'$'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"salt-for-password-hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#salt-for-password-hash"}},[t._v("#")]),t._v(" Salt for password hash")]),t._v(" "),a("p",[t._v("Despite of reliability of crypt algorithm there is still vulnerability against "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Rainbow_table",target:"_blank",rel:"noopener noreferrer"}},[t._v("rainbow tables"),a("OutboundLink")],1),t._v(". That's the reason, why it's recommended to use "),a("strong",[t._v("salt")]),t._v(".")]),t._v(" "),a("p",[t._v("A salt is something that is appended to the password before hashing to make source string unique. Given two identical passwords, the resulting hashes will be also unique, because their salts are unique.")]),t._v(" "),a("p",[t._v("A random salt is one of the most important pieces of your password security. This means that even with a lookup table of known password hashes an attacker can’t match up your user’s password hash with the database password hashes since a random salt has been used. You should use always random and cryptographically secure salts. "),a("a",{attrs:{href:"http://www.springer.com/us/book/9781484221198",target:"_blank",rel:"noopener noreferrer"}},[t._v("Read more"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("With "),a("a",{attrs:{href:"http://php.net/manual/en/function.password-hash.php",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("password_hash()")]),a("OutboundLink")],1),t._v(" "),a("code",[t._v("bcrypt")]),t._v(" algorithm, plain text salt is stored along with the resulting hash, which means that the hash can be transferred across different systems and platforms and still be matched against the original password.")]),t._v(" "),a("p",[t._v("Even when this is discouraged, you can use the "),a("code",[t._v("salt")]),t._v(" option to define your own random salt.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\n$options = [\n        'salt' => $salt, //see example below\n ];\n\n")])])]),a("p",[a("strong",[t._v("Important")]),t._v(". If you omit this option, a random salt will be generated by password_hash() for each password hashed. This is the intended mode of operation.")]),t._v(" "),a("p",[t._v("The salt option has been "),a("a",{attrs:{href:"http://php.net/manual/ru/function.password-hash.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("deprecated"),a("OutboundLink")],1),t._v(" as of PHP 7.0.0. It is now preferred to simply use the salt that is generated by default.")]),t._v(" "),a("h2",{attrs:{id:"determine-if-an-existing-password-hash-can-be-upgraded-to-a-stronger-algorithm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#determine-if-an-existing-password-hash-can-be-upgraded-to-a-stronger-algorithm"}},[t._v("#")]),t._v(" Determine if an existing password hash can be upgraded to a stronger algorithm")]),t._v(" "),a("p",[t._v("If you are using the "),a("code",[t._v("PASSWORD_DEFAULT")]),t._v(" method to let the system choose the best algorithm to hash your passwords with, as the default increases in strength you may wish to rehash old passwords as users log in")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token php language-php"}},[a("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// first determine if a supplied password is valid")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("password_verify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$plaintextPassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$hashedPassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// now determine if the existing hash was created with an algorithm that is")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// no longer the default")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("password_needs_rehash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$hashedPassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PASSWORD_DEFAULT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// create a new hash with the new default")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$newHashedPassword")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("password_hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$plaintextPassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PASSWORD_DEFAULT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// and then save it to your data store")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//$db->update(...);")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("?>")])]),t._v("\n\n")])])]),a("p",[t._v("If the password_* functions are not available on your system (and you cannot use the compatibility pack linked in the remarks below), you can determine the algorithm and used to create the original hash in a method similar to the following:")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token php language-php"}},[a("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$hashedPassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'$2y$'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$hashedPassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'Algorithm is Bcrypt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// the "cost" determines how strong this version of Bcrypt is')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("preg_match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'/\\$2y\\$(\\d+)\\$/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$hashedPassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$matches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$cost")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$matches")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'Bcrypt cost is '")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$cost")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("?>")])]),t._v("\n\n")])])]),a("h2",{attrs:{id:"verifying-a-password-against-a-hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#verifying-a-password-against-a-hash"}},[t._v("#")]),t._v(" Verifying a password against a hash")]),t._v(" "),a("p",[a("code",[t._v("password_verify()")]),t._v(" is the built-in function provided (as of PHP 5.5) to verify the validity of a password against a known hash.")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token php language-php"}},[a("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("password_verify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$plaintextPassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$hashedPassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'Valid Password'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'Invalid Password.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("?>")])]),t._v("\n\n")])])]),a("p",[t._v("All supported hashing algorithms store information identifying which hash was used in the hash itself, so there is no need to indicate which algorithm you are using to encode the plaintext password with.")]),t._v(" "),a("p",[t._v("If the password_* functions are not available on your system (and you cannot use the compatibility pack linked in the remarks below) you can implement password verification with the "),a("code",[t._v("crypt()")]),t._v(" function.  Please note that specific precautions must be taken to avoid "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Timing_attack",target:"_blank",rel:"noopener noreferrer"}},[t._v("timing attacks"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token php language-php"}},[a("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// not guaranteed to maintain the same cryptographic strength of the full `password_hash()`")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// implementation")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CRYPT_BLOWFISH")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `crypt()` discards all characters beyond the salt length, so we can pass in")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the full hashed password")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$hashedCheck")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("crypt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$plaintextPassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$hashedPassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this a basic constant-time comparison based on the full implementation used")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in `password_hash()`")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$status")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$hashedCheck")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$status")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$hashedCheck")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$hashedPassword")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$status")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'Valid Password'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'Invalid Password'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("?>")])]),t._v("\n\n")])])]),a("h4",{attrs:{id:"syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("string password_hash ( string $password , integer $algo [, array $options ] )")])]),t._v(" "),a("li",[a("code",[t._v("boolean password_verify ( string $password , string $hash )")])]),t._v(" "),a("li",[a("code",[t._v("boolean password_needs_rehash ( string $hash , integer $algo [, array $options ] )")])]),t._v(" "),a("li",[a("code",[t._v("array password_get_info ( string $hash )")])])]),t._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),a("p",[t._v("Prior to PHP 5.5, you may use "),a("a",{attrs:{href:"https://github.com/ircmaxell/password_compat",target:"_blank",rel:"noopener noreferrer"}},[t._v("the compatibility pack"),a("OutboundLink")],1),t._v(" to provide the "),a("code",[t._v("password_*")]),t._v(" functions.  It is highly recommended that you use the compatibility pack if you are able to do so.")]),t._v(" "),a("p",[t._v("With or without the compatibility pack, "),a("a",{attrs:{href:"http://php.net/security/crypt_blowfish.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("correct Bcrypt functionality through "),a("code",[t._v("crypt()")]),t._v(" relies on PHP 5.3.7+"),a("OutboundLink")],1),t._v(" otherwise you "),a("strong",[t._v("must")]),t._v(" restrict passwords to ASCII-only character sets.")]),t._v(" "),a("blockquote"),t._v(" "),a("p",[a("strong",[t._v("Note:")]),t._v(" If you use PHP 5.5 or below you're using an "),a("a",{attrs:{href:"http://php.net/supported-versions.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("unsupported version of PHP"),a("OutboundLink")],1),t._v(" which does not receive any security updates anymore. Update as soon as possible, you can update your password hashes afterwards.")]),t._v(" "),a("h3",{attrs:{id:"algorithm-selection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#algorithm-selection"}},[t._v("#")]),t._v(" Algorithm Selection")]),t._v(" "),a("h3",{attrs:{id:"secure-algorithms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#secure-algorithms"}},[t._v("#")]),t._v(" Secure algorithms")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("bcrypt")]),t._v(" is your best option as long as you use key stretching to increase hash calculation time, since it makes "),a("a",{attrs:{href:"http://arstechnica.com/security/2015/08/cracking-all-hacked-ashley-madison-passwords-could-take-a-lifetime/",target:"_blank",rel:"noopener noreferrer"}},[t._v("brute force attacks extremely slow"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("strong",[t._v("argon2")]),t._v(" is another option which "),a("a",{attrs:{href:"https://wiki.php.net/rfc/argon2_password_hash",target:"_blank",rel:"noopener noreferrer"}},[t._v("will be available in PHP 7.2"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"insecure-algorithms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#insecure-algorithms"}},[t._v("#")]),t._v(" Insecure algorithms")]),t._v(" "),a("p",[t._v("The following hashing algorithms are "),a("strong",[t._v("insecure or unfit for purpose")]),t._v(" and therefore "),a("strong",[t._v("should not be used")]),t._v(". They were never suited for password hashing, as they're designed for fast digests instead of slow and hard to brute force password hashes.")]),t._v(" "),a("p",[a("strong",[t._v("If you use any of them")]),t._v(", even including salts, you should "),a("strong",[t._v("switch")]),t._v(" to one of the recommended secure algorithms "),a("strong",[t._v("as soon as possible")]),t._v(".")]),t._v(" "),a("p",[t._v("Algorithms considered insecure:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("MD4")]),t._v(" - "),a("a",{attrs:{href:"http://link.springer.com/article/10.1007%2Fs001459900047",target:"_blank",rel:"noopener noreferrer"}},[t._v("collision attack found in 1995"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("strong",[t._v("MD5")]),t._v(" - "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/MD5#Collision_vulnerabilities",target:"_blank",rel:"noopener noreferrer"}},[t._v("collision attack found in 2005"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("strong",[t._v("SHA-1")]),t._v(" - "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/SHA-1#Attacks",target:"_blank",rel:"noopener noreferrer"}},[t._v("collision attack demonstrated in 2015"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("Some algorithms can be safely used as message digest algorithm to prove authenticity, but "),a("strong",[t._v("never as password hashing algorithm")]),t._v(":")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("SHA-2")])]),t._v(" "),a("li",[a("strong",[t._v("SHA-3")])])]),t._v(" "),a("p",[t._v("Note, strong hashes such as SHA256 and SHA512 are unbroken and robust, however it is generally more secure to use "),a("strong",[t._v("bcrypt")]),t._v(" or "),a("strong",[t._v("argon2")]),t._v(" hash functions as brute force attacks against these algorithms are much more difficult for classical computers.")])])}),[],!1,null,null,null);s.default=n.exports}}]);