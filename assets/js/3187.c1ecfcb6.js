(window.webpackJsonp=window.webpackJsonp||[]).push([[3187],{3592:function(s,t,a){"use strict";a.r(t);var e=a(31),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"single-table-inheritance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#single-table-inheritance"}},[s._v("#")]),s._v(" Single Table Inheritance")]),s._v(" "),a("p",[s._v("Single Table Inheritance (STI) is a design pattern which is based on the idea of saving the data of multiple models which are all inheriting from the same Base model, into a single table in the database.")]),s._v(" "),a("h2",{attrs:{id:"basic-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basic-example"}},[s._v("#")]),s._v(" Basic example")]),s._v(" "),a("p",[s._v("First we need a table to hold our data")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CreateUsers")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ActiveRecord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Migration")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("change")])]),s._v("\n    create_table "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":users")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("t"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n      t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("string "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":name")]),s._v("\n      t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("string "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":password")]),s._v("\n      t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("string "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# <- This makes it an STI")]),s._v("\n\n      t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("timestamps\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("p",[s._v("Then lets create some models")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ActiveRecord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Base")]),s._v("\n   validates_presence_of "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":password")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This is a parent class. All shared logic goes here")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Admin")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("User")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Admins must have more secure passwords than regular users")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# We can add it here")]),s._v("\n   validates "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":custom_password_validation")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Guest")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("User")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Lets say that we have a guest type login. ")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# It has a static password that cannot be changed")]),s._v("\n   validates_inclusion_of "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":password")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'guest_password'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("p",[s._v("When you do a "),a("code",[s._v("Guest.create(name: 'Bob')")]),s._v(" ActiveRecord will translate this to create an entry in the Users table with "),a("code",[s._v("type: 'Guest'")]),s._v(".")]),s._v(" "),a("p",[s._v("When you retrieve the record "),a("code",[s._v("bob = User.where(name: 'Bob').first")]),s._v(" the object returned will be an instance of "),a("code",[s._v("Guest")]),s._v(", which can be forcibly treated as a User with "),a("code",[s._v("bob.becomes(User)")])]),s._v(" "),a("p",[s._v("becomes is most useful when dealing with shared partials or routes/controllers of the superclass instead of the subclass.")]),s._v(" "),a("h2",{attrs:{id:"custom-inheritance-column"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#custom-inheritance-column"}},[s._v("#")]),s._v(" Custom inheritance column")]),s._v(" "),a("p",[s._v("By default STI model class name is stored in a column named "),a("code",[s._v("type")]),s._v(". But its name can be changed by overriding "),a("code",[s._v("inheritance_column")]),s._v(" value in a base class. E.g.:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ActiveRecord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Base")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("inheritance_column "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":entity_type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# can be string as well")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Admin")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("p",[s._v("Migration in this case will look as follows:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("CreateUsers")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ActiveRecord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Migration")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("change")])]),s._v("\n    create_table "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":users")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("t"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n      t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("string "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":name")]),s._v("\n      t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("string "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":password")]),s._v("\n      t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("string "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":entity_type")]),s._v("\n\n      t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("timestamps\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("p",[s._v("When you do "),a("code",[s._v("Admin.create")]),s._v(", this record will be saved in the users table with "),a("code",[s._v('entity_type = "Admin"')])]),s._v(" "),a("h2",{attrs:{id:"rails-model-with-type-column-and-without-sti"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rails-model-with-type-column-and-without-sti"}},[s._v("#")]),s._v(" Rails model with type column and without STI")]),s._v(" "),a("p",[s._v("Having "),a("code",[s._v("type")]),s._v(" column in a Rails model without invoking STI can be achieved by assigning "),a("code",[s._v(":_type_disabled")]),s._v(" to "),a("code",[s._v("inheritance_column")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ActiveRecord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Base")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("inheritance_column "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":_type_disabled")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);