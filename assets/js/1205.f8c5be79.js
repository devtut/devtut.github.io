(window.webpackJsonp=window.webpackJsonp||[]).push([[1205],{1613:function(a,t,s){"use strict";s.r(t);var e=s(31),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"monads"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#monads"}},[a._v("#")]),a._v(" Monads")]),a._v(" "),s("p",[a._v("A monad is a data type of composable actions. "),s("code",[a._v("Monad")]),a._v(" is the class of type constructors whose values represent such actions. Perhaps "),s("code",[a._v("IO")]),a._v(" is the most recognizable one: a value of "),s("code",[a._v("IO a")]),a._v(' is a "recipe for retrieving an '),s("code",[a._v("a")]),a._v(' value from the real world".')]),a._v(" "),s("p",[a._v("We say a type constructor "),s("code",[a._v("m")]),a._v(" (such as "),s("code",[a._v("[]")]),a._v(" or "),s("code",[a._v("Maybe")]),a._v(") "),s("strong",[a._v("forms a monad")]),a._v(" if there is an "),s("code",[a._v("instance Monad m")]),a._v(" satisfying certain laws about composition of actions. We can then reason about "),s("code",[a._v("m a")]),a._v(' as an "action whose result has type '),s("code",[a._v("a")]),a._v('".')]),a._v(" "),s("h2",{attrs:{id:"no-general-way-to-extract-value-from-a-monadic-computation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#no-general-way-to-extract-value-from-a-monadic-computation"}},[a._v("#")]),a._v(" No general way to extract value from a monadic computation")]),a._v(" "),s("p",[a._v("You can wrap values into actions and pipe the result of one computation into another:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Monad")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Monad")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v("\n\n")])])]),s("p",[a._v("However, the definition of a Monad doesn’t guarantee the existence of a function of type "),s("code",[a._v("Monad m => m a -> a")]),a._v(".")]),a._v(" "),s("p",[a._v("That means there is, in general, "),s("strong",[a._v("no way to extract a value from a computation")]),a._v(" (i.e. “unwrap” it). This is the case for many instances:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("extract")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("extract")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- Sure, this works, but...")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("extract")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("undefined")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- We can’t extract a value from failure.")]),a._v("\n\n")])])]),s("p",[a._v("Specifically, there is no function "),s("code",[a._v("IO a -> a")]),a._v(", which often confuses beginners; see "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/haskell/2968/monads/10080/io-monad#t=201607281032107136794",target:"_blank",rel:"noopener noreferrer"}},[a._v("this example"),s("OutboundLink")],1),a._v(".")]),a._v(" "),s("h2",{attrs:{id:"monad-as-a-subclass-of-applicative"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#monad-as-a-subclass-of-applicative"}},[a._v("#")]),a._v(" Monad as a Subclass of Applicative")]),a._v(" "),s("p",[a._v("As of GHC 7.10, "),s("code",[a._v("Applicative")]),a._v(" is a superclass of "),s("code",[a._v("Monad")]),a._v(" (i.e., every type which is a "),s("code",[a._v("Monad")]),a._v(" must also be an "),s("code",[a._v("Applicative")]),a._v("). All the methods of "),s("code",[a._v("Applicative")]),a._v(" ("),s("code",[a._v("pure")]),a._v(", "),s("code",[a._v("<*>")]),a._v(") can be implemented in terms of  methods of "),s("code",[a._v("Monad")]),a._v(" ("),s("code",[a._v("return")]),a._v(", "),s("code",[a._v(">>=")]),a._v(").")]),a._v(" "),s("p",[a._v("It is obvious that "),s("code",[a._v("pure")]),a._v(" and "),s("code",[a._v("return")]),a._v(" serve equivalent purposes, so "),s("code",[a._v("pure = return")]),a._v(". The definition for "),s("code",[a._v("<*>")]),a._v(" is too relatively clear:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("mf")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<*>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("mx")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("mf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("mx")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("                 \n       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- = mf >>= (\\f -> mx >>= (\\x -> return (f x)))")]),a._v("\n       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- = [r   | f <- mf, x <- mx, r <- return (f x)]   -- with MonadComprehensions")]),a._v("\n       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- = [f x | f <- mf, x <- mx]                   ")]),a._v("\n\n")])])]),s("p",[a._v("This function is defined as "),s("code",[a._v("ap")]),a._v(" in the standard libraries.")]),a._v(" "),s("p",[a._v("Thus if you have already defined an instance of "),s("code",[a._v("Monad")]),a._v(" for a type, you effectively can get an instance of "),s("code",[a._v("Applicative")]),a._v(' for it "for free" by defining')]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instance")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Applicative")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("pure")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<*>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ap")]),a._v("\n\n")])])]),s("p",[a._v("As with the monad laws, these equivalencies are not enforced, but developers should ensure that they are always upheld.")]),a._v(" "),s("h2",{attrs:{id:"definition-of-monad"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#definition-of-monad"}},[a._v("#")]),a._v(" Definition of Monad")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Monad")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v("\n\n")])])]),s("p",[a._v("The most important function for dealing with monads is the "),s("strong",[a._v("bind operator "),s("code",[a._v(">>=")])]),a._v(":")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v("\n\n")])])]),s("ul",[s("li",[a._v("Think of "),s("code",[a._v("m a")]),a._v(" as "),s("strong",[a._v('"an action with an '),s("code",[a._v("a")]),a._v(' result"')]),a._v(".")]),a._v(" "),s("li",[a._v("Think of "),s("code",[a._v("a -> m b")]),a._v(" as "),s("strong",[a._v("“an action (depending on an "),s("code",[a._v("a")]),a._v(" parameter) with a "),s("code",[a._v("b")]),a._v(" result.”")]),a._v(".")])]),a._v(" "),s("p",[s("code",[a._v(">>=")]),a._v(" "),s("strong",[a._v("sequences two actions together by piping the result from the first action to the second.")])]),a._v(" "),s("p",[a._v("The other function defined by "),s("code",[a._v("Monad")]),a._v(" is:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n\n")])])]),s("p",[a._v("Its name is unfortunate: this "),s("code",[a._v("return")]),a._v(" has nothing to do with the "),s("code",[a._v("return")]),a._v(" keyword found in imperative programming languages.")]),a._v(" "),s("p",[s("code",[a._v("return x")]),a._v(" "),s("strong",[a._v("is the trivial action yielding "),s("code",[a._v("x")]),a._v(" as its result.")]),a._v(" (It is trivial in the "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/haskell/2968/monads/6144/monad-laws-and-the-maybe-monad",target:"_blank",rel:"noopener noreferrer"}},[a._v("following sense"),s("OutboundLink")],1),a._v("😃")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v("       ≡  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("--  “left identity” monad law")]),a._v("\n       "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v("  ≡  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- “right identity” monad law")]),a._v("\n\n")])])]),s("h2",{attrs:{id:"the-maybe-monad"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-maybe-monad"}},[a._v("#")]),a._v(" The Maybe monad")]),a._v(" "),s("p",[s("code",[a._v("Maybe")]),a._v(" is used to represent possibly empty values - similar to "),s("code",[a._v("null")]),a._v(" in other languages. Usually it is used as the output type of functions that can fail in some way.")]),a._v(" "),s("p",[a._v("Consider the following function:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("halve")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("halve")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("even")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("`div`")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("odd")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v("\n\n")])])]),s("p",[a._v("Think of "),s("code",[a._v("halve")]),a._v(" as an action, depending on an "),s("code",[a._v("Int")]),a._v(", that tries to halve the integer, failing if it is odd.")]),a._v(" "),s("p",[a._v("How do we "),s("code",[a._v("halve")]),a._v(" an integer three times?")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("takeOneEighth")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- (after you read the 'do' sub-section:)")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("takeOneEighth")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("                \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("halve")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("of")]),a._v("                               "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("--  do {")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("oneHalf")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v("                             "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("--     oneHalf    <- halve x")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("halve")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("oneHalf")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("of")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("oneQuarter")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v("                      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("--     oneQuarter <- halve oneHalf")]),a._v("\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("halve")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("oneQuarter")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("of")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v("                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("--     oneEighth  <- halve oneQuarter")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("oneEighth")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v("                         \n              "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("oneEighth")]),a._v("                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("--     return oneEighth }")]),a._v("\n\n")])])]),s("ul",[s("li",[s("code",[a._v("takeOneEighth")]),a._v(" is a "),s("strong",[a._v("sequence")]),a._v(" of three "),s("code",[a._v("halve")]),a._v(" steps chained together.")]),a._v(" "),s("li",[a._v("If a "),s("code",[a._v("halve")]),a._v(" step fails, we want the whole composition "),s("code",[a._v("takeOneEighth")]),a._v(" to fail.")]),a._v(" "),s("li",[a._v("If a "),s("code",[a._v("halve")]),a._v(" step succeeds, we want to pipe its result forward.")])]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instance")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Monad")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- (>>=) :: Maybe a -> (a -> Maybe b) -> Maybe b")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v("                            "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- infixl 1 >>=")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("                         "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- also, f =<< m = m >>= f")]),a._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- return :: a -> Maybe a")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("       "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("\n\n")])])]),s("p",[a._v("and now we can write:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("takeOneEighth")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("takeOneEighth")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("halve")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("halve")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("halve")]),a._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- or,")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- return x >>= halve >>= halve >>= halve             -- which is parsed as")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- (((return x) >>= halve) >>= halve) >>= halve       -- which can also be written as")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- (halve =<<) . (halve =<<) . (halve =<<) $ return x    -- or, equivalently, as")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("--  halve <=<     halve <=<     halve      $        x")]),a._v("\n\n")])])]),s("p",[s("strong",[a._v("Kleisli composition")]),a._v(" "),s("code",[a._v("<=<")]),a._v(" is defined as "),s("code",[a._v("(g <=< f) x = g =<< f x")]),a._v(", or equivalently as "),s("code",[a._v("(f >=> g) x = f x >>= g")]),a._v(". With it the above definition becomes just")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("takeOneEighth")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Maybe")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("takeOneEighth")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("halve")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<=<")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("halve")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<=<")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("halve")]),a._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- infixr 1 <=<")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- or, equivalently,                    ")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("--      halve >=> halve >=> halve               -- infixr 1 >=>    ")]),a._v("\n\n")])])]),s("p",[a._v("There are three monad laws that should be obeyed by every monad, that is every type which is an instance of the "),s("code",[a._v("Monad")]),a._v(" typeclass:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("    "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("h")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("h")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),s("p",[a._v("where "),s("code",[a._v("m")]),a._v(" is a monad, "),s("code",[a._v("f")]),a._v(" has type "),s("code",[a._v("a -> m b")]),a._v(" and "),s("code",[a._v("g")]),a._v(" has type "),s("code",[a._v("b -> m c")]),a._v(".")]),a._v(" "),s("p",[a._v("Or equivalently, using the "),s("code",[a._v(">=>")]),a._v(" Kleisli composition operator defined above:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">=>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v("                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- do { y <- return x ; g y } == g x")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("    "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">=>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v("                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- do { y <- f x ; return y } == f x")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">=>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">=>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("h")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">=>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">=>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("h")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- do { z <- do { y <- f x; g y } ; h z }")]),a._v("\n                                            "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("--  == do { y <- f x ; do { z <- g y; h z } }")]),a._v("\n\n")])])]),s("p",[a._v("Obeying these laws makes it a lot easier to reason about the monad, because it guarantees that using monadic functions and composing them behaves in a reasonable way, similar to other monads.")]),a._v(" "),s("p",[a._v("Let's check if the "),s("code",[a._v("Maybe")]),a._v(" monad obeys the three monad laws.")]),a._v(" "),s("ol",[s("li",[s("strong",[a._v("The left identity law")]),a._v(" - "),s("code",[a._v("return x >>= f = f x")])])]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("z")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("z")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("z")]),a._v("\n\n")])])]),s("ol",[s("li",[s("strong",[a._v("The right identity law")]),a._v(" - "),s("code",[a._v("m >>= return = m")])])]),a._v(" "),s("ul",[s("li",[s("code",[a._v("Just")]),a._v(" data constructor")])]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("z")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("z")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("z")]),a._v("  \n\n")])])]),s("ul",[s("li",[s("code",[a._v("Nothing")]),a._v(" data constructor")])]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v(" \n\n")])])]),s("ol",[s("li",[s("strong",[a._v("The associativity law")]),a._v(" - "),s("code",[a._v("(m >>= f) >>= g = m >>= (\\x -> f x >>= g)")])])]),a._v(" "),s("ul",[s("li",[s("code",[a._v("Just")]),a._v(" data constructor")])]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- Left-hand side")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("z")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("z")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- Right-hand side")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Just")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("z")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("z")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("z")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v("\n\n")])])]),s("ul",[s("li",[s("code",[a._v("Nothing")]),a._v(" data constructor")])]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- Left-hand side")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- Right-hand side")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Nothing")]),a._v("\n\n")])])]),s("h2",{attrs:{id:"io-monad"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#io-monad"}},[a._v("#")]),a._v(" IO monad")]),a._v(" "),s("p",[a._v("There is no way to get a value of type "),s("code",[a._v("a")]),a._v(" out of an expression of type "),s("code",[a._v("IO a")]),a._v(" and there shouldn't be. This is actually a large part of why monads are used to model "),s("code",[a._v("IO")]),a._v(".")]),a._v(" "),s("p",[a._v("An expression of type "),s("code",[a._v("IO a")]),a._v(" can be thought of as representing an action that can interact with the real world and, if executed, would result in something of type "),s("code",[a._v("a")]),a._v(". For example, the function "),s("code",[a._v("getLine :: IO String")]),a._v(" from the prelude doesn't mean that underneath "),s("code",[a._v("getLine")]),a._v(" there is some specific string that I can extract - it means that "),s("code",[a._v("getLine")]),a._v(" represents the action of getting a line from standard input.")]),a._v(" "),s("p",[a._v("Not surprisingly, "),s("code",[a._v("main :: IO ()")]),a._v(" since a Haskell program does represent a computation/action that interacts with the real world.")]),a._v(" "),s("p",[a._v("The things you "),s("strong",[a._v("can")]),a._v(" do to expressions of type "),s("code",[a._v("IO a")]),a._v(" because "),s("code",[a._v("IO")]),a._v(" is a monad:")]),a._v(" "),s("li",[a._v("\nSequence two actions using `(>>)` to produce a new action that executes the first action, discards whatever value it produced, and then executes the second action.\n"),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v('-- print the lines "Hello" then "World" to stdout')]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"World"')]),a._v("\n\n")])])])]),a._v(" "),s("li",[a._v("\nSometimes you don't want to discard the value that was produced in the first action - you'd actually like it to be fed into a second action. For that, we have `>>=`. For `IO`, it has type `(>>=) :: IO a -> (a -> IO b) -> IO b`.\n"),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- get a line from stdin and print it back out")]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v("\n\n")])])])]),a._v(" "),s("li",[a._v("\nTake a normal value and convert it into an action which just immediately returns the value you gave it. This function is less obviously useful until you start using `do` notation.\n"),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- make an action that just returns 5")]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n\n")])])])]),a._v(" "),s("p",[a._v("More from the Haskell Wiki on the IO monad "),s("a",{attrs:{href:"https://wiki.haskell.org/IO_inside",target:"_blank",rel:"noopener noreferrer"}},[a._v("here"),s("OutboundLink")],1),a._v(".")]),a._v(" "),s("h2",{attrs:{id:"list-monad"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list-monad"}},[a._v("#")]),a._v(" List Monad")]),a._v(" "),s("p",[a._v("The lists form a monad. They have a monad instantiation equivalent to this one:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("sumnd")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("xs")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ys")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("xs")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ys")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("y")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),s("p",[a._v("Or equivalently, using "),s("code",[a._v("liftM2")]),a._v(" in "),s("code",[a._v("Control.Monad")]),a._v(":")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("sumnd")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("liftM2")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),s("p",[a._v("we obtain:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("sumnd")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("13")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n")])])]),s("h2",{attrs:{id:"do-notation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#do-notation"}},[a._v("#")]),a._v(" do-notation")]),a._v(" "),s("p",[s("code",[a._v("do")]),a._v("-notation is syntactic sugar for monads. Here are the rules:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("example")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Integer")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("example")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"What\'s your name?"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("name")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v("\n      "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello, "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("name")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"What should we return?"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n          "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("\\")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("n")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("read")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("in")]),a._v("\n              "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("n")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("example")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Integer")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("example")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"What\'s your name?"')]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("name")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello, "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("name")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"What should we return?"')]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("n")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("read")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("line")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("n")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);