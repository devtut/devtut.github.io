(window.webpackJsonp=window.webpackJsonp||[]).push([[2404],{2812:function(a,t,e){"use strict";e.r(t);var s=e(31),n=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"reading-a-file-s-content-into-a-variable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reading-a-file-s-content-into-a-variable"}},[a._v("#")]),a._v(" Reading a file's content into a variable")]),a._v(" "),e("h2",{attrs:{id:"path-tiny"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#path-tiny"}},[a._v("#")]),a._v(" Path::Tiny")]),a._v(" "),e("p",[a._v("Using the idiom from "),e("a",{attrs:{href:"https://stackoverflow.com/documentation/perl/1779/reading-a-file-into-a-variable/5786/the-manual-way#t=201609131958379930125",target:"_blank",rel:"noopener noreferrer"}},[a._v("The Manual Way"),e("OutboundLink")],1),a._v(" several times in a script soon gets tedious so you might want to try a module.")]),a._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("use")]),a._v(" Path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("Tiny"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$contents")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$filename")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v("slurp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),e("p",[a._v("You can pass a "),e("code",[a._v("binmode")]),a._v(" option if you need control over file encodings, line endings etc. - see "),e("code",[a._v("man perlio")]),a._v(":")]),a._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$contents")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$filename")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v("slurp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("binmode "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('":encoding(UTF-8)"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),e("p",[e("code",[a._v("Path::Tiny")]),a._v(" also has "),e("a",{attrs:{href:"http://search.cpan.org/%7Edagolden/Path-Tiny-0.096/lib/Path/Tiny.pm",target:"_blank",rel:"noopener noreferrer"}},[a._v("a lot of other functions"),e("OutboundLink")],1),a._v(" for dealing with files so it may be a good choice.")]),a._v(" "),e("h2",{attrs:{id:"the-manual-way"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-manual-way"}},[a._v("#")]),a._v(" The manual way")]),a._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[a._v("open "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$fh")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'<'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$filename")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("or")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("die")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Could not open $filename for reading: $!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$contents")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("local")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$fh")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),e("p",[a._v("After opening the file (read "),e("code",[a._v("man perlio")]),a._v(" if you want to read specific file encodings instead of raw bytes), the trick is in the "),e("code",[a._v("do")]),a._v(" block: "),e("code",[a._v("<$fh>")]),a._v(', the file handle in a diamond operator, returns a single record from the file. The "input record separator" variable '),e("code",[a._v("$/")]),a._v(' specifies what a "record" is—by default it is set to a newline character so "a record" means "a single line". As '),e("code",[a._v("$/")]),a._v(" is a global variable, "),e("code",[a._v("local")]),a._v(" does two things: it creates a temporary local copy of "),e("code",[a._v("$/")]),a._v(" that will vanish at the end of the block, and gives it the (non-)value "),e("code",[a._v("undef")]),a._v(' (the "value" which Perl gives to uninitialized variables). When the input record separator has that (non-)value, the diamond operator will return the entire file. (It considers the entire file to be a single line.)')]),a._v(" "),e("p",[a._v("Using "),e("code",[a._v("do")]),a._v(", you can even get around manually opening a file. For repeated reading of files,")]),a._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("sub")]),a._v(" readfile")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("local")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@ARGV")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$_")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token filehandle symbol"}},[a._v("<>")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$content")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" readfile"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$filename")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),e("p",[a._v("can be used. Here, another global variable("),e("code",[a._v("@ARGV")]),a._v(") is localized to simulate the same process used when starting a perl script with parameters. "),e("code",[a._v("$/")]),a._v(" is still "),e("code",[a._v("undef")]),a._v(', since the array in front of it "eats" all incoming arguments. Next, the diamond operator '),e("code",[a._v("<>")]),a._v(" again delivers one record defined by "),e("code",[a._v("$/")]),a._v(" (the whole file) and returns from the "),e("code",[a._v("do")]),a._v(" block, which in turn return from the sub.")]),a._v(" "),e("p",[a._v("The sub has no explicit error handling, which is bad practice! If an error occurs while reading the file, you will receive "),e("code",[a._v("undef")]),a._v(" as return value, as opposed to an empty string from an empty file.")]),a._v(" "),e("p",[a._v("Another disadvantage of the last code is the fact that you cannot use PerlIO for different file encodings—you always get raw bytes.")]),a._v(" "),e("h2",{attrs:{id:"file-slurp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#file-slurp"}},[a._v("#")]),a._v(" File::Slurp")]),a._v(" "),e("p",[a._v("Don't use it. Although it has been around for a long time and is still the module most programmers will suggest, "),e("a",{attrs:{href:"http://blogs.perl.org/users/leon_timmermans/2015/08/fileslurp-is-broken-and-wrong.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("it is broken and not likely to be fixed"),e("OutboundLink")],1),a._v(".")]),a._v(" "),e("h2",{attrs:{id:"file-slurper"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#file-slurper"}},[a._v("#")]),a._v(" File::Slurper")]),a._v(" "),e("p",[a._v("This is a minimalist module that only slurps files into variables, nothing else.")]),a._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("use")]),a._v(" File"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("Slurper "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'read_text'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$contents")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" read_text"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$filename")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),e("p",[e("code",[a._v("read_text()")]),a._v(" takes two optional parameters to specify the file encoding and whether line endings should be translated between the unixish LF or DOSish CRLF standards:")]),a._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$contents")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" read_text"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$filename")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'UTF-8'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),e("h2",{attrs:{id:"slurping-a-file-into-an-array-variable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#slurping-a-file-into-an-array-variable"}},[a._v("#")]),a._v(" Slurping a file into an array variable")]),a._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[a._v("open"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$fh")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'<'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/some/path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("or")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("die")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("my")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@ary")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$fh")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),e("p",[a._v("When evaluated in list context, the diamond operator returns a list consisting of all the lines in the file (in this case, assigning the result to an array supplies list context). The line terminator is retained, and can be removed by chomping:")]),a._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[a._v("chomp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("@ary")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#removes line terminators from all the array elements.")]),a._v("\n\n")])])]),e("h2",{attrs:{id:"slurp-file-in-one-liner"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#slurp-file-in-one-liner"}},[a._v("#")]),a._v(" Slurp file in one-liner")]),a._v(" "),e("p",[a._v("Input record separator can be specified with "),e("code",[a._v("-0")]),a._v(" switch ("),e("strong",[a._v("zero")]),a._v(", not "),e("strong",[a._v("capital O")]),a._v("). It takes an octal or hexadecimal number as value. Any value "),e("code",[a._v("0400")]),a._v(" or above will cause Perl to slurp files, but by convention, the value used for this purpose is "),e("code",[a._v("0777")]),a._v(".")]),a._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[a._v("perl "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0777")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-e")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'my $file = <>; print length($file)'")]),a._v(" input"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v("txt\n\n")])])]),e("p",[a._v("Going further with minimalism, specifying "),e("code",[a._v("-n")]),a._v(" switch causes Perl to automatically read each line (in our case — the whole file) into variable "),e("code",[a._v("$_")]),a._v(".")]),a._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[a._v("perl "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0777")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("ne")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'print length($_)'")]),a._v(" input"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v("txt\n\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);