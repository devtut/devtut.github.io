(window.webpackJsonp=window.webpackJsonp||[]).push([[1202],{1610:function(a,s,t){"use strict";t.r(s);var e=t(31),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"logging"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#logging"}},[a._v("#")]),a._v(" Logging")]),a._v(" "),t("p",[a._v("Logging in Haskell is achieved usually through functions in the "),t("code",[a._v("IO")]),a._v(' monad, and so is limited to non-pure functions or "IO actions".')]),a._v(" "),t("p",[a._v("There are several ways to log information in a Haskell program: from "),t("code",[a._v("putStrLn")]),a._v(" (or "),t("code",[a._v("print")]),a._v("), to libraries such as "),t("a",{attrs:{href:"https://hackage.haskell.org/package/hslogger",target:"_blank",rel:"noopener noreferrer"}},[a._v("hslogger"),t("OutboundLink")],1),a._v(" or through "),t("code",[a._v("Debug.Trace")]),a._v(".")]),a._v(" "),t("h2",{attrs:{id:"logging-with-hslogger"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#logging-with-hslogger"}},[a._v("#")]),a._v(" Logging with hslogger")]),a._v(" "),t("p",[a._v("The "),t("code",[a._v("hslogger")]),a._v(" module provides a similar API to Python's "),t("code",[a._v("logging")]),a._v(" framework, and supports hierarchically named loggers, levels and redirection to handles outside of "),t("code",[a._v("stdout")]),a._v(" and "),t("code",[a._v("stderr")]),a._v(".")]),a._v(" "),t("p",[a._v("By default, all messages of level "),t("code",[a._v("WARNING")]),a._v(" and above are sent to stderr and all other log levels are ignored.")]),a._v(" "),t("div",{staticClass:"language-hs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-hs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token import-statement"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v("           System"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Log"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Logger")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Priority")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DEBUG")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("debugM")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("infoM")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("setLevel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n                                    "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("updateGlobalLogger")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("warningM")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("debugM")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"MyProgram.main"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"This won\'t be seen"')]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("infoM")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"MyProgram.main"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"This won\'t be seen either"')]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("warningM")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"MyProgram.main"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"This will be seen"')]),a._v("\n\n")])])]),t("p",[a._v("We can set the level of a logger by its name using "),t("code",[a._v("updateGlobalLogger")]),a._v(":")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('\n updateGlobalLogger "MyProgram.main" (setLevel DEBUG)\n\n  debugM "MyProgram.main" "This will now be seen"\n\n')])])]),t("p",[a._v("Each Logger has a name, and they are arranged hierarchically, so "),t("code",[a._v("MyProgram")]),a._v(" is a parent of "),t("code",[a._v("MyParent.Module")]),a._v(".")])])}),[],!1,null,null,null);s.default=n.exports}}]);