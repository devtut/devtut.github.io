(window.webpackJsonp=window.webpackJsonp||[]).push([[3085],{3493:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"introspection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introspection"}},[t._v("#")]),t._v(" Introspection")]),t._v(" "),a("h2",{attrs:{id:"view-an-object-s-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#view-an-object-s-methods"}},[t._v("#")]),t._v(" View an object's methods")]),t._v(" "),a("h3",{attrs:{id:"inspecting-an-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inspecting-an-object"}},[t._v("#")]),t._v(" Inspecting an Object")]),t._v(" "),a("p",[t._v("You can find the public methods an object can respond to using either the "),a("code",[t._v("methods")]),t._v(" or "),a("code",[t._v("public_methods")]),t._v(" methods, which return an array of symbols:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\nf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yay")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\np f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("methods"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sort\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [:!, :!=, :!~, :<=>, :==, :===, :=~, :__id__, :__send__, :bar, :class, :clone,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :define_singleton_method, :display, :dup, :enum_for, :eql?, :equal?, :extend,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :freeze, :frozen?, :hash, :inspect, :instance_eval, :instance_exec,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :instance_of?, :instance_variable_defined?, :instance_variable_get,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :instance_variable_set, :instance_variables, :is_a?, :itself, :kind_of?, ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :method, :methods, :nil?, :object_id, :private_methods, :protected_methods,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :public_method, :public_methods, :public_send, :remove_instance_variable,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :respond_to?, :send, :singleton_class, :singleton_method, :singleton_methods,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :taint, :tainted?, :tap, :to_enum, :to_s, :trust, :untaint, :untrust,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :untrusted?, :yay]")]),t._v("\n\n")])])]),a("p",[t._v("For a more targeted list, you can remove methods common to all objects, e.g.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("p "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("methods "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("methods"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sort\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [:bar,:yay]")]),t._v("\n\n")])])]),a("p",[t._v("Alternatively, you can pass "),a("code",[t._v("false")]),t._v(" to "),a("code",[t._v("methods")]),t._v(" or "),a("code",[t._v("public_methods")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("p f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("methods"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# public and protected singleton methods of `f`")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [:yay]")]),t._v("\n\np f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("public_methods"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [:yay, :bar]")]),t._v("\n\n")])])]),a("p",[t._v("You can find the private and protected methods of an object using "),a("code",[t._v("private_methods")]),t._v(" and "),a("code",[t._v("protected_methods")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("p f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("private_methods"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sort\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [:Array, :Complex, :DelegateClass, :Float, :Hash, :Integer, :Rational, :String,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :__callee__, :__dir__, :__method__, :`, :abort, :at_exit, :autoload, :autoload?,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :binding, :block_given?, :caller, :caller_locations, :catch,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :default_src_encoding, :eval, :exec, :exit, :exit!, :fail, :fork, :format, :gem,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :gem_original_require, :gets, :global_variables, :initialize, :initialize_clone,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :initialize_copy, :initialize_dup, :irb_binding, :iterator?, :lambda, :load,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :local_variables, :loop, :method_missing, :open, :p, :print, :printf, :proc,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :putc, :puts, :raise, :rand, :readline, :readlines, :require, :require_relative,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :respond_to_missing?, :select, :set_trace_func, :singleton_method_added,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :singleton_method_removed, :singleton_method_undefined, :sleep, :spawn,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :sprintf, :srand, :syscall, :system, :test, :throw, :trace_var, :trap,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :untrace_var, :warn]")]),t._v("\n\np f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("protected_methods\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> []")]),t._v("\n\n")])])]),a("p",[t._v("As with "),a("code",[t._v("methods")]),t._v(" and "),a("code",[t._v("public_methods")]),t._v(", you can pass "),a("code",[t._v("false")]),t._v(" to "),a("code",[t._v("private_methods")]),t._v(" and "),a("code",[t._v("protected_methods")]),t._v(" to trim away inherited methods.")]),t._v(" "),a("h3",{attrs:{id:"inspecting-a-class-or-module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inspecting-a-class-or-module"}},[t._v("#")]),t._v(" Inspecting a Class or Module")]),t._v(" "),a("p",[t._v("In addition to "),a("code",[t._v("methods")]),t._v(", "),a("code",[t._v("public_methods")]),t._v(", "),a("code",[t._v("protected_methods")]),t._v(", and "),a("code",[t._v("private_methods")]),t._v(", classes and modules expose "),a("code",[t._v("instance_methods")]),t._v(", "),a("code",[t._v("public_instance_methods")]),t._v(", "),a("code",[t._v("protected_instance_methods")]),t._v(", and "),a("code",[t._v("private_instance_methods")]),t._v(" to determine the methods exposed for objects that inherit from the class or module. As above, you can pass "),a("code",[t._v("false")]),t._v(" to these methods to exclude inherited methods:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("p "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance_methods"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sort\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [:!, :!=, :!~, :<=>, :==, :===, :=~, :__id__, :__send__, :bar, :class,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :clone, :define_singleton_method, :display, :dup, :enum_for, :eql?,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :equal?, :extend, :freeze, :frozen?, :hash, :inspect, :instance_eval,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :instance_exec, :instance_of?, :instance_variable_defined?,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :instance_variable_get, :instance_variable_set, :instance_variables,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :is_a?, :itself, :kind_of?, :method, :methods, :nil?, :object_id,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :private_methods, :protected_methods, :public_method, :public_methods,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :public_send, :remove_instance_variable, :respond_to?, :send,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :singleton_class, :singleton_method, :singleton_methods, :taint,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :tainted?, :tap, :to_enum, :to_s, :trust, :untaint, :untrust, :untrusted?]")]),t._v("\n\np "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance_methods"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [:bar]")]),t._v("\n\n")])])]),a("p",[t._v("Finally, if you forget the names of most of these in the future, you can find all of these methods using "),a("code",[t._v("methods")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("p f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("methods"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("grep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/methods/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [:private_methods, :methods, :protected_methods, :public_methods,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :singleton_methods]")]),t._v("\n\np "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("methods"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("grep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/methods/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [:public_instance_methods, :instance_methods, :private_instance_methods,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :protected_instance_methods, :private_methods, :methods,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :protected_methods, :public_methods, :singleton_methods]")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"view-an-object-s-instance-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#view-an-object-s-instance-variables"}},[t._v("#")]),t._v(" View an object's Instance Variables")]),t._v(" "),a("p",[t._v("It is possible to query an object about its instance variables using "),a("code",[t._v("instance_variables")]),t._v(", "),a("code",[t._v("instance_variable_defined?")]),t._v(", and "),a("code",[t._v("instance_variable_get")]),t._v(", and modify them using "),a("code",[t._v("instance_variable_set")]),t._v(" and "),a("code",[t._v("remove_instance_variable")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v("\n  attr_reader "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":bar")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("initialize")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@bar")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\nf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance_variables                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [:@bar]")]),t._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance_variable_defined"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@baz")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> false")]),t._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance_variable_defined"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> true")]),t._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance_variable_get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> 42")]),t._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance_variable_set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> 17")]),t._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bar                               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> 17")]),t._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("remove_instance_variable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> 17")]),t._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bar                               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> nil")]),t._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance_variables                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> []")]),t._v("\n\n")])])]),a("p",[t._v("The names of instance variables include the "),a("code",[t._v("@")]),t._v(" symbol. You will get an error if you omit it:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance_variable_defined"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":jim")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> NameError: `jim' is not allowed as an instance variable name")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"view-global-and-local-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#view-global-and-local-variables"}},[t._v("#")]),t._v(" View Global and Local Variables")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("Kernel")]),t._v(" exposes methods for getting the list of "),a("a",{attrs:{href:"http://ruby-doc.org/core-2.3.1/Kernel.html#method-i-global_variables",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("global_variables")]),a("OutboundLink")],1),t._v(" and "),a("a",{attrs:{href:"http://ruby-doc.org/core-2.3.1/Kernel.html#method-i-local_variables",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("local_variables")]),a("OutboundLink")],1),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("cats  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$demo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"in progress"')]),t._v("\np global_variables"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sort\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [:$!, :$\", :$$, :$&, :$', :$*, :$+, :$,, :$-0, :$-F, :$-I, :$-K, :$-W, :$-a,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :$-d, :$-i, :$-l, :$-p, :$-v, :$-w, :$., :$/, :$0, :$1, :$2, :$3, :$4, :$5,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :$6, :$7, :$8, :$9, :$:, :$;, :$<, :$=, :$>, :$?, :$@, :$DEBUG, :$FILENAME,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :$KCODE, :$LOADED_FEATURES, :$LOAD_PATH, :$PROGRAM_NAME, :$SAFE, :$VERBOSE,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :$\\, :$_, :$`, :$binding, :$demo, :$stderr, :$stdin, :$stdout, :$~]")]),t._v("\n\np local_variables\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [:cats]")]),t._v("\n\n")])])]),a("p",[t._v("Unlike instance variables there are no methods specifically for getting, setting, or removing global or local variables. Looking for such functionality is usually a sign that your code should be rewritten to use a Hash to store the values. However, if you must modify global or local variables by name, you can use "),a("code",[t._v("eval")]),t._v(" with a string:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("var "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$demo"')]),t._v("\neval"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("var"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> "in progress"')]),t._v("\neval"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("var"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v(' = 17"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\np "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$demo")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> 17")]),t._v("\n\n")])])]),a("p",[t._v("By default, "),a("code",[t._v("eval")]),t._v(" will evaluate your variables in the current scope. To evaluate local variables in a different scope, you must capture the "),a("strong",[t._v("binding")]),t._v(" where the local variables exist.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("local_variable_get")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bound"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":inside")]),t._v("\n  eval"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("bound"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_1")])]),t._v("\n  foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":outside")]),t._v("\n  p local_variable_get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_2")])]),t._v("\n  foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":outside")]),t._v("\n  p local_variable_get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("binding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n  \ntest_1 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> :inside")]),t._v("\ntest_2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> :outside")]),t._v("\n\n")])])]),a("p",[t._v("In the above, "),a("code",[t._v("test_1")]),t._v(" did not pass a binding to "),a("code",[t._v("local_variable_get")]),t._v(", and so the "),a("code",[t._v("eval")]),t._v(" was executed within the context of that method, where a local variable named "),a("code",[t._v("foo")]),t._v(" was set to "),a("code",[t._v(":inside")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"view-class-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#view-class-variables"}},[t._v("#")]),t._v(" View Class Variables")]),t._v(" "),a("p",[t._v("Classes and modules have the same methods for introspecting instance variables as any other object. Class and modules also have similar methods for querying the class variables ("),a("code",[t._v("@@these_things")]),t._v("):")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("p "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Module")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("methods"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("grep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/class_variable/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [:class_variables, :class_variable_get, :remove_class_variable,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=>  :class_variable_defined?, :class_variable_set]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@@instances")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("initialize")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@@instances")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bar")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.")]),t._v("times"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v("times"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\np "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("class_variables                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [:@@instances]")]),t._v("\np "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("class_variables                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> [:@@instances]")]),t._v("\np "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("class_variable_get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@@instances")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> 8")]),t._v("\np "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("class_variable_get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@@instances")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> 8")]),t._v("\n\n")])])]),a("p",[t._v("Similar to instance variables, the name of class variables must begin with "),a("code",[t._v("@@")]),t._v(", or you will get an error:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("p "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("class_variable_defined"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":instances")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> NameError: `instances' is not allowed as a class variable name")]),t._v("\n\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);