(window.webpackJsonp=window.webpackJsonp||[]).push([[401],{809:function(t,n,e){"use strict";e.r(n);var a=e(31),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"optimizing-rendering-using-changedetectionstrategy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#optimizing-rendering-using-changedetectionstrategy"}},[t._v("#")]),t._v(" Optimizing rendering using ChangeDetectionStrategy")]),t._v(" "),e("h2",{attrs:{id:"default-vs-onpush"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#default-vs-onpush"}},[t._v("#")]),t._v(" Default vs OnPush")]),t._v(" "),e("p",[t._v("Consider the following component with one input "),e("code",[t._v("myInput")]),t._v(" and an internal value called "),e("code",[t._v("someInternalValue")]),t._v(". Both of them are used in a component's template.")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Component"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Input"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@angular/core'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n@"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Component")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  template"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n  <div>\n    <p>{{myInput}}</p>\n    <p>{{someInternalValue}}</p>\n  </div>\n  ")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyComponent")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  @"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Input")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" myInput"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  someInternalValue"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("By default, the "),e("code",[t._v("changeDetection:")]),t._v(" property in the component decorator will be set to "),e("code",[t._v("ChangeDetectionStrategy.Default")]),t._v("; implicit in the example. In this situation, any changes to any of the values in the template will trigger a re-render of "),e("code",[t._v("MyComponent")]),t._v(". In other words, if I change "),e("code",[t._v("myInput")]),t._v(" or "),e("code",[t._v("someInternalValue")]),t._v(" angular 2 will exert energy and re-render the component.")]),t._v(" "),e("p",[t._v("Suppose, however, that we only want to re-render when the inputs change. Consider the following component with "),e("code",[t._v("changeDetection:")]),t._v(" set to "),e("code",[t._v("ChangeDetectionStrategy.OnPush")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Component"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ChangeDetectionStrategy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Input"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@angular/core'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n@"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Component")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  changeDetection"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ChangeDetectionStrategy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OnPush\n  template"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n  <div>\n    <p>{{myInput}}</p>\n    <p>{{someInternalValue}}</p>\n  </div>\n  ")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyComponent")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  @"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Input")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" myInput"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  someInternalValue"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("By setting "),e("code",[t._v("changeDetection:")]),t._v(" to "),e("code",[t._v("ChangeDetectionStrategy.OnPush")]),t._v(", "),e("code",[t._v("MyComponent")]),t._v(" will only re-render when its inputs change. In this case, "),e("code",[t._v("myInput")]),t._v(" will need to receive a new value from its parent to trigger a re-render.")])])}),[],!1,null,null,null);n.default=s.exports}}]);