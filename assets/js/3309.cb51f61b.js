(window.webpackJsonp=window.webpackJsonp||[]).push([[3309],{3717:function(t,e,s){"use strict";s.r(e);var a=s(31),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"advanced-operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#advanced-operators"}},[t._v("#")]),t._v(" Advanced Operators")]),t._v(" "),s("h2",{attrs:{id:"bitwise-operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bitwise-operators"}},[t._v("#")]),t._v(" Bitwise Operators")]),t._v(" "),s("p",[t._v("Swift Bitwise operators allow you to perform operations on the binary form of numbers. You can specify a binary literal by prefixing the number with "),s("code",[t._v("0b")]),t._v(", so for example "),s("code",[t._v("0b110")]),t._v(" is equivalent to the binary number 110 (the decimal number 6). Each 1 or 0 is a bit in the number.")]),t._v(" "),s("p",[t._v("Bitwise NOT "),s("code",[t._v("~")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UInt8")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b01101100")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newNumber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("number\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// newNumber is equal to 0b01101100")]),t._v("\n\n")])])]),s("p",[t._v("Here, each bit get changed to its opposite. Declaring the number as explicitly "),s("code",[t._v("UInt8")]),t._v(" ensures that the number is positive (so that we don't have to deal with negatives in the example) and that it is only 8 bits. If "),s("code",[t._v("0b01101100")]),t._v(" was a larger UInt, there would be leading 0s that would be converted to 1s and become significant upon inversion:")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UInt16")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b01101100")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number equals 0b0000000001101100")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the 0s are not significant")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newNumber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("number\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// newNumber equals 0b1111111110010011")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the 1s are now significant")]),t._v("\n\n")])])]),s("ul",[s("li",[t._v("0 -> 1")]),t._v(" "),s("li",[t._v("1 -> 0")])]),t._v(" "),s("p",[t._v("Bitwise AND "),s("code",[t._v("&")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b0110")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newNumber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b1010")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// newNumber is equal to 0b0010")]),t._v("\n\n")])])]),s("p",[t._v("Here, a given bit will be 1 if and only if the binary numbers on both sides of the "),s("code",[t._v("&")]),t._v(" operator contained a 1 at that bit location.")]),t._v(" "),s("ul",[s("li",[t._v("0 & 0 -> 0")]),t._v(" "),s("li",[t._v("0 & 1 -> 0")]),t._v(" "),s("li",[t._v("1 & 1 -> 1")])]),t._v(" "),s("p",[t._v("Bitwise OR "),s("code",[t._v("|")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b0110")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newNumber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b1000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// newNumber is equal to 0b1110")]),t._v("\n\n")])])]),s("p",[t._v("Here, a given bit will be 1 if and only if the binary number on at least one side of the "),s("code",[t._v("|")]),t._v(" operator contained a 1 at that bit location.")]),t._v(" "),s("ul",[s("li",[t._v("0 | 0 -> 0")]),t._v(" "),s("li",[t._v("0 | 1 -> 1")]),t._v(" "),s("li",[t._v("1 | 1 -> 1")])]),t._v(" "),s("p",[t._v("Bitwise XOR (Exclusive OR) "),s("code",[t._v("^")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b0110")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newNumber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b1010")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// newNumber is equal to 0b1100")]),t._v("\n\n")])])]),s("p",[t._v("Here, a given bit will be 1 if and only if the bits in that position of the two operands are different.")]),t._v(" "),s("ul",[s("li",[t._v("0 ^ 0 -> 0")]),t._v(" "),s("li",[t._v("0 ^ 1 -> 1")]),t._v(" "),s("li",[t._v("1 ^ 1 -> 0")])]),t._v(" "),s("p",[t._v("For all binary operations, the order of the operands makes no difference on the result.")]),t._v(" "),s("h2",{attrs:{id:"custom-operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#custom-operators"}},[t._v("#")]),t._v(" Custom Operators")]),t._v(" "),s("p",[t._v("Swift supports the creation of custom operators. New operators are declared at a global level using the "),s("code",[t._v("operator")]),t._v(" keyword.")]),t._v(" "),s("p",[t._v("The operator's structure is defined by three parts: operand placement, precedence, and associativity.")]),t._v(" "),s("li",[t._v("\nThe `prefix`, `infix` and `postfix` modifiers are used to start an custom operator declaration. The `prefix` and `postfix` modifiers declare whether the operator must be before or after, respectively, the value on which it acts. Such operators are urnary, like `8` and `3++` [**](https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md), since they can only act on one target. The `infix` declares a binary operator, which acts on the two values it is between, such as `2+3`.\n")]),t._v(" "),s("li",[t._v("\nOperators with higher **precedence** are calculated first. The default operator  precedence is just higher than `?`...`:` (a value of 100 in Swift 2.x). The precedence of standard Swift operators can be found [here](http://stackoverflow.com/documentation/swift/1048/advanced-operators/23548/precedence-of-standard-swift-operators#t=201609230518289001195).\n")]),t._v(" "),s("li",[t._v("\n**Associativity** defines the order of operations between operators of the same precedence. Left associative operators are calculated from left to right (reading order, like most operators), while right associative operators calculate from right to left.\n")]),t._v(" "),s("p",[t._v("Starting from Swift 3.0, one would define the precedence and associativity in a "),s("strong",[t._v("precedence group")]),t._v(" instead of the operator itself, so that multiple operators can easily share the same precedence without referring to the cryptic numbers. The list of standard precedence groups is shown "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/swift/1048/advanced-operators/23548/precedence-of-standard-swift-operators#t=201609230518289001195",target:"_blank",rel:"noopener noreferrer"}},[t._v("below"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("Operators return values based on the calculation code. This code acts as a normal function, with parameters specifying the type of input and the "),s("code",[t._v("return")]),t._v(" keyword specifying the calculated value that the operator returns.")]),t._v(" "),s("p",[t._v("Here is the definition of a simple exponential operator, since standard Swift does not have an exponential operator.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foundation")]),t._v("    \n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("infix")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("associativity")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" precedence "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("170")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" power"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" power"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("The "),s("code",[t._v("infix")]),t._v(" says that the "),s("code",[t._v("**")]),t._v(" operator works in between two values, such as "),s("code",[t._v("9**2")]),t._v(". Because the function has left associativity, "),s("code",[t._v("3**3**2")]),t._v(" is calculated as "),s("code",[t._v("(3**3)**2")]),t._v(". The precedence of "),s("code",[t._v("170")]),t._v(" is higher than all standard Swift operations, meaning that "),s("code",[t._v("3+2**4")]),t._v(" calculates to "),s("code",[t._v("19")]),t._v(", despite the left associativity of "),s("code",[t._v("**")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foundation")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("infix")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BitwiseShiftPrecedence")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" power"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" power"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("Instead of specifying the precedence and associativity explicitly, on Swift 3.0 we could use the built-in precedence group BitwiseShiftPrecedence that gives the correct values (same as "),s("code",[t._v("<<")]),t._v(", "),s("code",[t._v(">>")]),t._v(").")]),t._v(" "),s("p",[t._v("**: The increment and decrement are deprecated and will be removed in Swift 3.")]),t._v(" "),s("h2",{attrs:{id:"commutative-operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commutative-operators"}},[t._v("#")]),t._v(" Commutative Operators")]),t._v(" "),s("p",[t._v("Let's add a custom operator to multiply a CGSize")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CGFloat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CGSize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CGSize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" height "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lhs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" width "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lhs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CGSize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" height"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" height"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("Now this works")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sizeA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CGSize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("height"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sizeB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" sizeA         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//=> (height: 110, width: 220)")]),t._v("\n\n")])])]),s("p",[t._v("But if we try to do the operation in reverse, we get an error")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sizeC "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sizeB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ERROR")]),t._v("\n\n")])])]),s("p",[t._v("But it's simple enough to add:")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CGSize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CGFloat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CGSize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lhs\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("Now the operator is commutative.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sizeA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CGSize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("height"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sizeB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sizeA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//=> (height: 110, width: 220)")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"overflow-operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#overflow-operators"}},[t._v("#")]),t._v(" Overflow Operators")]),t._v(" "),s("p",[t._v("Overflow refers to what happens when an operation would result in a number that is either larger or smaller than the designated amount of bits for that number may hold.")]),t._v(" "),s("p",[t._v("Due to the way binary arithmetic works, after a number becomes too large for its bits, the number overflows down to the smallest possible number (for the bit size) and then continues counting up from there. Similarly, when a number becomes too small, it underflows up to the largest possible number (for its bit size) and continues counting down from there.")]),t._v(" "),s("p",[t._v("Because this behavior is not often desired and can lead to serious security issues, the Swift arithmetic operators "),s("code",[t._v("+")]),t._v(", "),s("code",[t._v("-")]),t._v(", and "),s("code",[t._v("*")]),t._v(" will throw errors when an operation would cause an overflow or underflow. To explicitly allow overflow and underflow, use "),s("code",[t._v("&+")]),t._v(", "),s("code",[t._v("&-")]),t._v(", and "),s("code",[t._v("&*")]),t._v(" instead.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" almostTooLarge "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("max\nalmostTooLarge "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// not allowed")]),t._v("\nalmostTooLarge "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// allowed, but result will be the value of Int.min")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"overloading-for-dictionaries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#overloading-for-dictionaries"}},[t._v("#")]),t._v(" Overloading + for Dictionaries")]),t._v(" "),s("p",[t._v("As there is currently no simple way of combining dictionaries in Swift, it can be useful to "),s("a",{attrs:{href:"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AdvancedOperators.html#//apple_ref/doc/uid/TP40014097-CH27-ID42",target:"_blank",rel:"noopener noreferrer"}},[t._v("overload"),s("OutboundLink")],1),t._v(" the "),s("code",[t._v("+")]),t._v(" and "),s("code",[t._v("+=")]),t._v(" operators in order to add this functionality using "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/swift/774/generics",target:"_blank",rel:"noopener noreferrer"}},[t._v("generics"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Combines two dictionaries together. If both dictionaries contain")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the same key, the value of the right hand side dictionary is used.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" combined "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lhs\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" rhs "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        combined"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" combined\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The mutable variant of the + overload, allowing a dictionary")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// to be appended to 'in-place'.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inout")]),t._v(" lhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" rhs "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        lhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("As of Swift 3, "),s("code",[t._v("inout")]),t._v(" should be placed before the argument type.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inout")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\n")])])]),s("p",[t._v("Example usage:")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" firstDict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" secondDict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" thirdDict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" firstDict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" secondDict "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["hello": "world", "world": "hello"]')]),t._v("\n\nthirdDict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"baz"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"qux"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["hello": "bar", "baz": "qux", "world": "hello"]')]),t._v("\n\n")])])]),s("h2",{attrs:{id:"precedence-of-standard-swift-operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#precedence-of-standard-swift-operators"}},[t._v("#")]),t._v(" Precedence of standard Swift operators")]),t._v(" "),s("p",[t._v("Operators that bound tighter (higher precedence) are listed first.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Operators")]),t._v(" "),s("th",[t._v("Precedence group (≥3.0)")]),t._v(" "),s("th",[t._v("Precedence")]),t._v(" "),s("th",[t._v("Associativity")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v(".")])]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("∞")]),t._v(" "),s("td",[t._v("left")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("?")]),t._v(", "),s("code",[t._v("!")]),t._v(", "),s("code",[t._v("++")]),t._v(", "),s("code",[t._v("--")]),t._v(", "),s("code",[t._v("[]")]),t._v(", "),s("code",[t._v("()")]),t._v(", "),s("code",[t._v("{}")])]),t._v(" "),s("td",[t._v("(postfix)")]),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("code",[t._v("!")]),t._v(", "),s("code",[t._v("~")]),t._v(", "),s("code",[t._v("+")]),t._v(", "),s("code",[t._v("-")]),t._v(", "),s("code",[t._v("++")]),t._v(", "),s("code",[t._v("--")])]),t._v(" "),s("td",[t._v("(prefix)")]),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"http://stackoverflow.com/questions/26758297/what-is-the-tilde-greater-than-operator-used-for-in-swift",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("~>")]),t._v(" (swift ≤2.3)"),s("OutboundLink")],1)]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("255")]),t._v(" "),s("td",[t._v("left")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("<<")]),t._v(", "),s("code",[t._v(">>")])]),t._v(" "),s("td",[t._v("BitwiseShiftPrecedence")]),t._v(" "),s("td",[t._v("160")]),t._v(" "),s("td",[t._v("none")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("*")]),t._v(", "),s("code",[t._v("/")]),t._v(", "),s("code",[t._v("%")]),t._v(", "),s("code",[t._v("&")]),t._v(", "),s("code",[t._v("&*")])]),t._v(" "),s("td",[t._v("MultiplicationPrecedence")]),t._v(" "),s("td",[t._v("150")]),t._v(" "),s("td",[t._v("left")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("+")]),t._v(", "),s("code",[t._v("-")]),t._v(", "),s("code",[t._v("|")]),t._v(", "),s("code",[t._v("^")]),t._v(", "),s("code",[t._v("&+")]),t._v(", "),s("code",[t._v("&-")])]),t._v(" "),s("td",[t._v("AdditionPrecedence")]),t._v(" "),s("td",[t._v("140")]),t._v(" "),s("td",[t._v("left")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("...")]),t._v(", "),s("code",[t._v("..<")])]),t._v(" "),s("td",[t._v("RangeFormationPrecedence")]),t._v(" "),s("td",[t._v("135")]),t._v(" "),s("td",[t._v("none")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("is")]),t._v(", "),s("code",[t._v("as")]),t._v(", "),s("code",[t._v("as?")]),t._v(", "),s("code",[t._v("as!")])]),t._v(" "),s("td",[t._v("CastingPrecedence")]),t._v(" "),s("td",[t._v("132")]),t._v(" "),s("td",[t._v("left")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("??")])]),t._v(" "),s("td",[t._v("NilCoalescingPrecedence")]),t._v(" "),s("td",[t._v("131")]),t._v(" "),s("td",[t._v("right")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("<")]),t._v(", "),s("code",[t._v("<=")]),t._v(", "),s("code",[t._v(">")]),t._v(", "),s("code",[t._v(">=")]),t._v(", "),s("code",[t._v("==")]),t._v(", "),s("code",[t._v("!=")]),t._v(", "),s("code",[t._v("===")]),t._v(", "),s("code",[t._v("!==")]),t._v(", "),s("code",[t._v("~=")])]),t._v(" "),s("td",[t._v("ComparisonPrecedence")]),t._v(" "),s("td",[t._v("130")]),t._v(" "),s("td",[t._v("none")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("&&")])]),t._v(" "),s("td",[t._v("LogicalConjunctionPrecedence")]),t._v(" "),s("td",[t._v("120")]),t._v(" "),s("td",[t._v("left")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("||")])]),t._v(" "),s("td",[t._v("LogicalDisjunctionPrecedence")]),t._v(" "),s("td",[t._v("110")]),t._v(" "),s("td",[t._v("left")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td",[t._v("DefaultPrecedence*")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("none")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("?")]),t._v("..."),s("code",[t._v(":")])]),t._v(" "),s("td",[t._v("TernaryPrecedence")]),t._v(" "),s("td",[t._v("100")]),t._v(" "),s("td",[t._v("right")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("=")]),t._v(", "),s("code",[t._v("+=")]),t._v(", "),s("code",[t._v("-=")]),t._v(", "),s("code",[t._v("*=")]),t._v(", "),s("code",[t._v("/=")]),t._v(", "),s("code",[t._v("%=")]),t._v(", "),s("code",[t._v("<<=")]),t._v(", "),s("code",[t._v(">>=")]),t._v(", "),s("code",[t._v("&=")]),t._v(", "),s("code",[t._v("|=")]),t._v(", "),s("code",[t._v("^=")])]),t._v(" "),s("td",[t._v("AssignmentPrecedence")]),t._v(" "),s("td",[t._v("90")]),t._v(" "),s("td",[t._v("right, assignment")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("->")])]),t._v(" "),s("td",[t._v("FunctionArrowPrecedence")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("right")])])])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("The "),s("code",[t._v("DefaultPrecedence")]),t._v(" precedence group is higher than "),s("code",[t._v("TernaryPrecedence")]),t._v(", but is unordered with the rest of the operators. Other than this group, the rest of the precedences are linear.")])]),t._v(" "),s("li",[s("p",[t._v("This table can be also be found on "),s("a",{attrs:{href:"https://developer.apple.com/reference/swift/1851035-swift_standard_library_operators",target:"_blank",rel:"noopener noreferrer"}},[t._v("Apple's API reference"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[t._v("The actual definition of the precedence groups can be found in "),s("a",{attrs:{href:"https://github.com/apple/swift/blob/e6f8843c701a0ea72ddfe0b5538b815767a4ee5d/stdlib/public/core/Policy.swift#L532",target:"_blank",rel:"noopener noreferrer"}},[t._v("the source code on GitHub"),s("OutboundLink")],1)])])])])}),[],!1,null,null,null);e.default=n.exports}}]);