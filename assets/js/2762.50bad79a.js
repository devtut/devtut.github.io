(window.webpackJsonp=window.webpackJsonp||[]).push([[2762],{3170:function(t,a,s){"use strict";s.r(a);var e=s(31),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"partial-functions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#partial-functions"}},[t._v("#")]),t._v(" Partial functions")]),t._v(" "),s("p",[t._v("As you probably know if you came from OOP school, specializing an abstract class and use it is a practice you should keep in mind when writing your code.")]),t._v(" "),s("p",[t._v("What if you could define an abstract function and specialize it in order to create different versions of it? Thinks it as a sort of "),s("strong",[t._v("function Inheritance")]),t._v(" where you bind specific params to make them reliable for a specific scenario.")]),t._v(" "),s("h2",{attrs:{id:"raise-the-power"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#raise-the-power"}},[t._v("#")]),t._v(" Raise the power")]),t._v(" "),s("p",[t._v("Let's suppose we want raise "),s("strong",[t._v("x")]),t._v(" to a number "),s("strong",[t._v("y")]),t._v(".")]),t._v(" "),s("p",[t._v("You'd write this as:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("raise_power")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("y\n\n")])])]),s("p",[t._v("What if your "),s("strong",[t._v("y")]),t._v(" value can assume a finite set of values?")]),t._v(" "),s("p",[t._v("Let's suppose "),s("strong",[t._v("y")]),t._v(" can be one of "),s("strong",[t._v("[3,4,5]")]),t._v(" and let's say you don't want offer end user the possibility to use such function since it is very computationally intensive. In fact you would check if provided "),s("strong",[t._v("y")]),t._v(" assumes a valid value and rewrite your function as:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("raise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("y\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" NumberNotInRangeException"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"You should provide a valid exponent"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("Messy?\nLet's use the abstract form and specialize it to all three cases: let's implement them "),s("strong",[t._v("partially")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" functors "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" partial\nraise_to_three "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" partial"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nraise_to_four "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" partial"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nraise_to_five "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" partial"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("What happens here?\nWe fixed the "),s("strong",[t._v("y")]),t._v(" params and we defined three different functions.")]),t._v(" "),s("p",[t._v("No need to use the abstract function defined above (you could make it "),s("strong",[t._v("private")]),t._v(") but you could use "),s("strong",[t._v("partial applied")]),t._v(" functions to deal with raising a number to a fixed value.")]),t._v(" "),s("h4",{attrs:{id:"syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),s("ul",[s("li",[t._v("partial(function, **params_you_want_fix)")])]),t._v(" "),s("h4",{attrs:{id:"parameters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Param")]),t._v(" "),s("th",[t._v("details")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("x")]),t._v(" "),s("td",[t._v("the number to be raised")])]),t._v(" "),s("tr",[s("td",[t._v("y")]),t._v(" "),s("td",[t._v("the exponent")])]),t._v(" "),s("tr",[s("td",[t._v("raise")]),t._v(" "),s("td",[t._v("the function to be specialized")])])])]),t._v(" "),s("h4",{attrs:{id:"remarks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),s("p",[t._v("As stated in Python doc the "),s("strong",[t._v("functools.partial")]),t._v(":")]),t._v(" "),s("blockquote"),t._v(" "),s("p",[t._v("Return a new partial object which when called will behave like func called with the positional arguments args and keyword arguments keywords. If more arguments are supplied to the call, they are appended to args. If additional keyword arguments are supplied, they extend and override keywords.")]),t._v(" "),s("p",[t._v("Check "),s("a",{attrs:{href:"https://docs.python.org/2/library/functools.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("this link"),s("OutboundLink")],1),t._v(" to see how "),s("strong",[t._v("partial")]),t._v(" can be implemented.")])])}),[],!1,null,null,null);a.default=n.exports}}]);