(window.webpackJsonp=window.webpackJsonp||[]).push([[2970],{3378:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"the-date-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-date-class"}},[t._v("#")]),t._v(" The Date class")]),t._v(" "),a("h2",{attrs:{id:"formatting-dates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#formatting-dates"}},[t._v("#")]),t._v(" Formatting Dates")]),t._v(" "),a("p",[t._v("To format "),a("code",[t._v("Dates")]),t._v(" we use the "),a("code",[t._v('format(date, format="%Y-%m-%d")')]),t._v(" function with either the "),a("code",[t._v("POSIXct")]),t._v(" (given from "),a("code",[t._v("as.POSIXct()")]),t._v(") or "),a("code",[t._v("POSIXlt")]),t._v(" (given from "),a("code",[t._v("as.POSIXlt()")]),t._v(")")]),t._v(" "),a("p",[t._v("For more, see "),a("code",[t._v("?strptime")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"parsing-strings-into-date-objects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parsing-strings-into-date-objects"}},[t._v("#")]),t._v(" Parsing Strings into Date Objects")]),t._v(" "),a("p",[t._v("R contains a Date class, which is created with "),a("code",[t._v("as.Date()")]),t._v(", which takes a string or vector of strings, and if the date is not in ISO 8601 date format "),a("code",[t._v("YYYY-MM-DD")]),t._v(", a formatting string of "),a("code",[t._v("strptime")]),t._v("-style tokens.")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("as.Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2016-08-01'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# in ISO format, so does not require formatting string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## [1] "2016-08-01"')]),t._v("\n\nas.Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'05/23/16'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" format "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%m/%d/%y'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## [1] "2016-05-23"')]),t._v("\n\nas.Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'March 23rd, 2016'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%B %drd, %Y'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# add separators and literals to format")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## [1] "2016-03-23"')]),t._v("\n\nas.Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'  2016-08-01  foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# leading whitespace and all trailing characters are ignored")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## [1] "2016-08-01"')]),t._v("\n\nas.Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2016-01-01'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2016-01-02'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# [1] "2016-01-01" "2016-01-02"')]),t._v("\n\n")])])]),a("h2",{attrs:{id:"dates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dates"}},[t._v("#")]),t._v(" Dates")]),t._v(" "),a("p",[t._v("To coerce a variable to a date use the "),a("code",[t._v("as.Date()")]),t._v(" function.")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" as.Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2016-8-23"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" x\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2016-08-23"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" class"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Date"')]),t._v("\n\n")])])]),a("p",[t._v("The "),a("code",[t._v("as.Date()")]),t._v(" function allows you to provide a format argument. The default is "),a("code",[t._v("%Y-%m-%d")]),t._v(", which is Year-month-day.")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" as.Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"23-8-2016"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" format"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d-%m-%Y"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# To read in an European-style date")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2016-08-23"')]),t._v("\n\n")])])]),a("p",[t._v("The format string can be placed either within a pair of single quotes or double quotes.  Dates are usually expressed in a variety of forms such as: "),a("code",[t._v('"d-m-yy"')]),t._v(" or "),a("code",[t._v('"d-m-YYYY"')]),t._v(" or "),a("code",[t._v('"m-d-yy"')]),t._v(" or "),a("code",[t._v('"m-d-YYYY"')]),t._v(" or "),a("code",[t._v('"YYYY-m-d"')]),t._v(" or "),a("code",[t._v('"YYYY-d-m"')]),t._v(". These formats can also be expressed by replacing "),a("code",[t._v('"-"')]),t._v(" by "),a("code",[t._v('"/"')]),t._v('. Furher, dates are also expressed in the forms, say, "Nov 6, 1986" or "November 6, 1986" or "6 Nov, 1986" or "6 November, 1986" and so on. The '),a("strong",[t._v("as.Date()")]),t._v(" function accepts all such character strings and when we mention the appropriate format of the string, it always outputs the date in the form "),a("code",[t._v('"YYYY-m-d"')]),t._v(".")]),t._v(" "),a("p",[t._v("Suppose we have a date string "),a("code",[t._v('"9-6-1962"')]),t._v(" in the format "),a("code",[t._v('"%d-%m-%Y"')]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# It tries to interprets the string as YYYY-m-d")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" as.Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"9-6-1962"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0009-06-19"')]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#interprets as "%Y-%m-%d"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \nas.Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"9/6/1962"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0009-06-19"')]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#again interprets as "%Y-%m-%d"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# It has no problem in understanding, if the date is in form  YYYY-m-d or YYYY/m/d")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" as.Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1962-6-9"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1962-06-09"')]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# no problem")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" as.Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1962/6/9"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1962-06-09"')]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# no problem")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n\n")])])]),a("p",[t._v("By specifying the correct format of the input string, we can get the desired results. We use the following codes for specifying the formats to the "),a("strong",[t._v("as.Date()")]),t._v(" function.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Format Code")]),t._v(" "),a("th",[t._v("Meaning")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("%d")])]),t._v(" "),a("td",[t._v("day")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("%m")])]),t._v(" "),a("td",[t._v("month")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("%y")])]),t._v(" "),a("td",[t._v("year in 2-digits")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("%Y")])]),t._v(" "),a("td",[t._v("year in 4-digits")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("%b")])]),t._v(" "),a("td",[t._v("abbreviated month in 3 chars")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("%B")])]),t._v(" "),a("td",[t._v("full name of the month")])])])]),t._v(" "),a("p",[t._v("Consider the following example specifying the "),a("strong",[t._v("format")]),t._v(" parameter:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" as.Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"9-6-1962"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("format"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d-%m-%Y"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1962-06-09"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n")])])]),a("p",[t._v("The parameter name "),a("strong",[t._v("format")]),t._v(" can be omitted.")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" as.Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"9-6-1962"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d-%m-%Y"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1962-06-09"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n")])])]),a("p",[t._v("Some times, names of the months abbreviated to the first three characters are used in the writing the dates. In which case we use the format specifier "),a("code",[t._v("%b")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" as.Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"6Nov1962"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d%b%Y"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1962-11-06"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n")])])]),a("p",[t._v("Note that, there are no either "),a("code",[t._v("'-'")]),t._v(" or "),a("code",[t._v("'/'")]),t._v(" or white spaces between the members in the date string. The format string should exactly match that input string. Consider the following example:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" as.Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"6 Nov, 1962"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d %b, %Y"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1962-11-06"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n")])])]),a("p",[t._v("Note that, there is a comma in the date string and hence a comma in the format specification too. If comma is omitted in the format string, it results in an "),a("code",[t._v("NA")]),t._v(". An example usage of "),a("code",[t._v("%B")]),t._v(" format specifier is as follows:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" as.Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"October 12, 2016"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%B %d, %Y"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2016-10-12"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" as.Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12 October, 2016"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d %B, %Y"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2016-10-12"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n\n")])])]),a("p",[a("code",[t._v("%y")]),t._v(" format is system specific and hence, should be used with caution. Other parameters used with this function are "),a("strong",[t._v("origin")]),t._v(" and "),a("strong",[t._v("tz")]),t._v("( time zone).")]),t._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),a("h3",{attrs:{id:"related-topics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#related-topics"}},[t._v("#")]),t._v(" Related topics")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://stackoverflow.com/documentation/r/1157",target:"_blank",rel:"noopener noreferrer"}},[t._v("Date and Time"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"jumbled-notes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jumbled-notes"}},[t._v("#")]),t._v(" Jumbled notes")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Date")]),t._v(": Stores time as number of days since UNIX epoch on "),a("code",[t._v("1970-01-01")]),t._v(". with negative values for earlier dates.")]),t._v(" "),a("li",[t._v("It is represented as an integer (however, it is not enforced in the internal representation)")]),t._v(" "),a("li",[t._v("They are always printed following the rules of the current Gregorian calendar, even though the calendar was not in use a long time ago.")]),t._v(" "),a("li",[t._v("It doesn't keep track of timezones, so it should not be used to truncate the time out of "),a("code",[t._v("POSIXct")]),t._v(" or "),a("code",[t._v("POSIXlt")]),t._v(" objects.")]),t._v(" "),a("li",[a("code",[t._v("sys.Date()")]),t._v(" returns an object of class "),a("code",[t._v("Date")])])]),t._v(" "),a("h3",{attrs:{id:"more-notes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#more-notes"}},[t._v("#")]),t._v(" More notes")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/hadley/lubridate",target:"_blank",rel:"noopener noreferrer"}},[t._v("lubridate"),a("OutboundLink")],1),t._v("'s "),a("code",[t._v("ymd")]),t._v(", "),a("code",[t._v("mdy")]),t._v(", etc. are alternatives to "),a("code",[t._v("as.Date")]),t._v(" that also parse to Date class; see "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/r/1157/date-and-time/7018/parsing-dates-and-datetimes-from-strings-with-lubridate",target:"_blank",rel:"noopener noreferrer"}},[t._v("Parsing dates and datetimes from strings with lubridate"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/Rdatatable/data.table/wiki",target:"_blank",rel:"noopener noreferrer"}},[t._v("data.table"),a("OutboundLink")],1),t._v("'s experimental IDate class is derived from and is mostly interchangeable with Date, but is stored as integer instead of double.")])])])}),[],!1,null,null,null);s.default=n.exports}}]);