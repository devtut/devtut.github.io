(window.webpackJsonp=window.webpackJsonp||[]).push([[1022],{1430:function(t,s,e){"use strict";e.r(s);var a=e(31),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"stack-and-heap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stack-and-heap"}},[t._v("#")]),t._v(" Stack and Heap")]),t._v(" "),e("h2",{attrs:{id:"value-types-in-use"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#value-types-in-use"}},[t._v("#")]),t._v(" Value types in use")]),t._v(" "),e("p",[t._v("Value types simply contain a "),e("strong",[e("strong",[t._v("value")])]),t._v(".")]),t._v(" "),e("p",[t._v("All value types are derived from the "),e("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/system.valuetype.aspx",target:"_blank",rel:"noopener noreferrer"}},[t._v("System.ValueType"),e("OutboundLink")],1),t._v(" class, and this includes most of the built in types.")]),t._v(" "),e("p",[t._v("When creating a new value type, the an area of memory called "),e("strong",[e("strong",[t._v("the stack")])]),t._v(" is used."),e("br"),t._v("\nThe stack will grow accordingly, by the size the declared type. So for example, an int will always be allocated 32 bits of memory on the stack. When the value type is no longer in scope, the space on the stack will be deallocated.")]),t._v(" "),e("p",[t._v("The code below demonstrates a value type being assigned to a new variable. A struct is being used as a convenient way to create a custom value type (the System.ValueType class cannot be otherwise extended).")]),t._v(" "),e("p",[t._v("The important thing to understand is that when assigning a value type, the value itself "),e("strong",[e("strong",[t._v("copied")])]),t._v(" to the new variable, meaning we have two distinct instances of the object, that cannot affect each other.")]),t._v(" "),e("div",{staticClass:"language-dotnet extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dotnet"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PersonAsValueType")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" Name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Program")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token return-type class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PersonAsValueType")]),t._v(" personA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        personA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bob"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" personB "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" personA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        personA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Linda"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("                "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Outputs 'False' - because ")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ReferenceEquals")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// personA and personB are referencing ")]),t._v("\n                personA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// different areas of memory")]),t._v("\n                personB"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                \n\n        Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("personA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Outputs 'Linda'")]),t._v("\n        Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("personB"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Outputs 'Bob'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"reference-types-in-use"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reference-types-in-use"}},[t._v("#")]),t._v(" Reference types in use")]),t._v(" "),e("p",[t._v("Reference types are comprised of both a "),e("strong",[e("strong",[t._v("reference")])]),t._v(" to a memory area, and a "),e("strong",[e("strong",[t._v("value")])]),t._v(" stored within that area."),e("br"),t._v("\nThis is analogous to pointers in C/C++.")]),t._v(" "),e("p",[t._v("All reference types are stored on what is known as "),e("strong",[e("strong",[t._v("the heap")])]),t._v("."),e("br"),t._v("\nThe heap is simply a managed area of memory where objects are stored. When a new object is instantiated, a part of the heap will be allocated for use by that object, and a  reference to that location of the heap will be returned. The heap is managed and maintained by the "),e("strong",[t._v("garbage collector")]),t._v(", and does not allow for manual intervention.")]),t._v(" "),e("p",[t._v("In addition to the memory space required for the instance itself, additional space is required to store the reference itself, along with additional temporary information required by the .NET CLR.")]),t._v(" "),e("p",[t._v("The code below demonstrates a reference type being assigned to a new variable. In this instance, we are using a class, all classes are reference types (even if static).")]),t._v(" "),e("p",[t._v("When a reference type is assigned to another variable, it is the "),e("strong",[e("strong",[t._v("reference")])]),t._v(" to the object that is copied over, "),e("strong",[t._v("not")]),t._v(" the value itself. This is an important distinction between value types and reference types.")]),t._v(" "),e("p",[t._v("The implications of this are that we now have "),e("strong",[t._v("two")]),t._v(" references to the same object."),e("br"),t._v("\nAny changes to the values within that object will be reflected by both variables.")]),t._v(" "),e("div",{staticClass:"language-dotnet extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dotnet"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PersonAsReferenceType")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" Name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Program")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token return-type class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PersonAsReferenceType")]),t._v(" personA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        personA "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("PersonAsReferenceType")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bob"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" personB "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" personA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        personA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Linda"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("               "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Outputs 'True' - because")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ReferenceEquals")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// personA and personB are referencing ")]),t._v("\n                personA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the *same* memory location")]),t._v("\n                personB"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("personA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Outputs 'Linda'")]),t._v("\n        Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("personB"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Outputs 'Linda'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("h4",{attrs:{id:"remarks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),e("p",[t._v("It's worth noting that on declaring a reference type, its initial value will be "),e("code",[t._v("null")]),t._v(". This is because it does not yet point to a location in memory, and is a perfectly valid state."),e("br"),t._v("\nHowever, with the exception of nullable types, value types must typically always have a value.")])])}),[],!1,null,null,null);s.default=n.exports}}]);