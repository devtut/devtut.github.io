(window.webpackJsonp=window.webpackJsonp||[]).push([[3277],{3685:function(t,a,s){"use strict";s.r(a);var e=s(31),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#join"}},[t._v("#")]),t._v(" JOIN")]),t._v(" "),s("p",[t._v("JOIN is a method of combining (joining) information from two tables. The result is a stitched set of columns from both tables, defined by the join type (INNER/OUTER/CROSS and LEFT/RIGHT/FULL, explained below) and join criteria (how rows from both tables relate).")]),t._v(" "),s("p",[t._v("A table may be joined to itself or to any other table. If information from more than two tables needs to be accessed, multiple joins can be specified in a FROM clause.")]),t._v(" "),s("h2",{attrs:{id:"self-join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#self-join"}},[t._v("#")]),t._v(" Self Join")]),t._v(" "),s("p",[t._v("A table may be joined to itself, with different rows matching each other by some condition. In this use case, aliases must be used in order to distinguish the two occurrences of the table.")]),t._v(" "),s("p",[t._v("In the below example, for each Employee in the "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/sql/280/example-database#t=201604180847497343904",target:"_blank",rel:"noopener noreferrer"}},[t._v("example database Employees table"),s("OutboundLink")],1),t._v(", a record is returned containing the employee's first name together with the corresponding first name of the employee's manager. Since managers are also employees, the table is joined with itself:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" \n    e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FName "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Employee"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FName "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Manager"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("   \n    Employees e\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v("   \n    Employees m \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ManagerId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id\n\n")])])]),s("p",[t._v("This query will return the following data:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Employee")]),t._v(" "),s("th",[t._v("Manager")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("John")]),t._v(" "),s("td",[t._v("James")])]),t._v(" "),s("tr",[s("td",[t._v("Michael")]),t._v(" "),s("td",[t._v("James")])]),t._v(" "),s("tr",[s("td",[t._v("Johnathon")]),t._v(" "),s("td",[t._v("John")])])])]),t._v(" "),s("h3",{attrs:{id:"so-how-does-this-work"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#so-how-does-this-work"}},[t._v("#")]),t._v(" So how does this work?")]),t._v(" "),s("p",[t._v("The original table contains these records:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Id")]),t._v(" "),s("th",[t._v("FName")]),t._v(" "),s("th",[t._v("LName")]),t._v(" "),s("th",[t._v("PhoneNumber")]),t._v(" "),s("th",[t._v("ManagerId")]),t._v(" "),s("th",[t._v("DepartmentId")]),t._v(" "),s("th",[t._v("Salary")]),t._v(" "),s("th",[t._v("HireDate")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("James")]),t._v(" "),s("td",[t._v("Smith")]),t._v(" "),s("td",[t._v("1234567890")]),t._v(" "),s("td",[t._v("NULL")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1000")]),t._v(" "),s("td",[t._v("01-01-2002")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("John")]),t._v(" "),s("td",[t._v("Johnson")]),t._v(" "),s("td",[t._v("2468101214")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("400")]),t._v(" "),s("td",[t._v("23-03-2005")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Michael")]),t._v(" "),s("td",[t._v("Williams")]),t._v(" "),s("td",[t._v("1357911131")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("600")]),t._v(" "),s("td",[t._v("12-05-2009")])]),t._v(" "),s("tr",[s("td",[t._v("4")]),t._v(" "),s("td",[t._v("Johnathon")]),t._v(" "),s("td",[t._v("Smith")]),t._v(" "),s("td",[t._v("1212121212")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("500")]),t._v(" "),s("td",[t._v("24-07-2016")])])])]),t._v(" "),s("p",[t._v("The first action is to create a "),s("strong",[t._v("Cartesian")]),t._v(" product of all records in the tables used in the "),s("strong",[t._v("FROM")]),t._v(" clause.  In this case it's the Employees table twice, so the intermediate table will look like this (I've removed any fields not used in this example):")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("e.Id")]),t._v(" "),s("th",[t._v("e.FName")]),t._v(" "),s("th",[t._v("e.ManagerId")]),t._v(" "),s("th",[t._v("m.Id")]),t._v(" "),s("th",[t._v("m.FName")]),t._v(" "),s("th",[t._v("m.ManagerId")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("James")]),t._v(" "),s("td",[t._v("NULL")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("James")]),t._v(" "),s("td",[t._v("NULL")])]),t._v(" "),s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("James")]),t._v(" "),s("td",[t._v("NULL")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("John")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("James")]),t._v(" "),s("td",[t._v("NULL")]),t._v(" "),s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Michael")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("James")]),t._v(" "),s("td",[t._v("NULL")]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("Johnathon")]),t._v(" "),s("td",[t._v("2")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("John")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("James")]),t._v(" "),s("td",[t._v("NULL")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("John")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("John")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("John")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Michael")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("John")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("Johnathon")]),t._v(" "),s("td",[t._v("2")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Michael")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("James")]),t._v(" "),s("td",[t._v("NULL")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Michael")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("John")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Michael")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Michael")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Michael")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("Johnathon")]),t._v(" "),s("td",[t._v("2")])]),t._v(" "),s("tr",[s("td",[t._v("4")]),t._v(" "),s("td",[t._v("Johnathon")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("James")]),t._v(" "),s("td",[t._v("NULL")])]),t._v(" "),s("tr",[s("td",[t._v("4")]),t._v(" "),s("td",[t._v("Johnathon")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("John")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("4")]),t._v(" "),s("td",[t._v("Johnathon")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Michael")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("4")]),t._v(" "),s("td",[t._v("Johnathon")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("Johnathon")]),t._v(" "),s("td",[t._v("2")])])])]),t._v(" "),s("p",[t._v("The next action is to only keep the records that meet the "),s("strong",[t._v("JOIN")]),t._v(" criteria, so any records where the aliased "),s("code",[t._v("e")]),t._v(" table "),s("code",[t._v("ManagerId")]),t._v(" equals the aliased "),s("code",[t._v("m")]),t._v(" table "),s("code",[t._v("Id")]),t._v(":")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("e.Id")]),t._v(" "),s("th",[t._v("e.FName")]),t._v(" "),s("th",[t._v("e.ManagerId")]),t._v(" "),s("th",[t._v("m.Id")]),t._v(" "),s("th",[t._v("m.FName")]),t._v(" "),s("th",[t._v("m.ManagerId")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("John")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("James")]),t._v(" "),s("td",[t._v("NULL")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Michael")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("James")]),t._v(" "),s("td",[t._v("NULL")])]),t._v(" "),s("tr",[s("td",[t._v("4")]),t._v(" "),s("td",[t._v("Johnathon")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("John")]),t._v(" "),s("td",[t._v("1")])])])]),t._v(" "),s("p",[t._v("Then, each expression used within the "),s("strong",[t._v("SELECT")]),t._v(" clause is evaluated to return this table:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("e.FName")]),t._v(" "),s("th",[t._v("m.FName")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("John")]),t._v(" "),s("td",[t._v("James")])]),t._v(" "),s("tr",[s("td",[t._v("Michael")]),t._v(" "),s("td",[t._v("James")])]),t._v(" "),s("tr",[s("td",[t._v("Johnathon")]),t._v(" "),s("td",[t._v("John")])])])]),t._v(" "),s("p",[t._v("Finally, column names "),s("code",[t._v("e.FName")]),t._v(" and "),s("code",[t._v("m.FName")]),t._v(" are replaced by their alias column names, assigned with the "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/sql/222/select/1264/select-using-column-aliases#t=201609282325090459635",target:"_blank",rel:"noopener noreferrer"}},[t._v("AS"),s("OutboundLink")],1),t._v(" operator:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Employee")]),t._v(" "),s("th",[t._v("Manager")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("John")]),t._v(" "),s("td",[t._v("James")])]),t._v(" "),s("tr",[s("td",[t._v("Michael")]),t._v(" "),s("td",[t._v("James")])]),t._v(" "),s("tr",[s("td",[t._v("Johnathon")]),t._v(" "),s("td",[t._v("John")])])])]),t._v(" "),s("h2",{attrs:{id:"differences-between-inner-outer-joins"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#differences-between-inner-outer-joins"}},[t._v("#")]),t._v(" Differences between inner/outer joins")]),t._v(" "),s("p",[t._v("SQL has various join types to specify whether (non-)matching rows are included in the result: "),s("code",[t._v("INNER JOIN")]),t._v(", "),s("code",[t._v("LEFT OUTER JOIN")]),t._v(", "),s("code",[t._v("RIGHT OUTER JOIN")]),t._v(", and "),s("code",[t._v("FULL OUTER JOIN")]),t._v(" (the "),s("code",[t._v("INNER")]),t._v(" and "),s("code",[t._v("OUTER")]),t._v(" keywords are optional). The figure below underlines the differences between these types of joins: the blue area represents the results returned by the join, and the white area represents the results that the join will not return.")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://i.stack.imgur.com/3bs7C.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://i.stack.imgur.com/3bs7C.png",alt:"Venn diagrams representing SQL inner/outer joins"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("Cross Join SQL Pictorial Presentation ("),s("a",{attrs:{href:"http://www.w3resource.com/sql/joins/cross-join.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("reference"),s("OutboundLink")],1),t._v(") :")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://www.w3resource.com/sql/joins/cross-join.php",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://i.stack.imgur.com/gdMOZ.png",alt:"enter image description here"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("Below are examples from "),s("a",{attrs:{href:"http://stackoverflow.com/a/38578/3709746",target:"_blank",rel:"noopener noreferrer"}},[t._v("this"),s("OutboundLink")],1),t._v(" answer.")]),t._v(" "),s("p",[t._v("For instance there are two tables as below :")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("A    B\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n\n")])])]),s("p",[t._v("Note that (1,2) are unique to A, (3,4) are common, and (5,6) are unique to B.")]),t._v(" "),s("h3",{attrs:{id:"inner-join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inner-join"}},[t._v("#")]),t._v(" Inner Join")]),t._v(" "),s("p",[t._v("An inner join using either of the equivalent queries gives the intersection of the two tables, i.e. the two rows they have in common:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INNER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" b\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--+--")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"left-outer-join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#left-outer-join"}},[t._v("#")]),t._v(" Left outer join")]),t._v(" "),s("p",[t._v("A left outer join will give all rows in A, plus any common rows in B:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OUTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  b\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--+-----")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"right-outer-join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#right-outer-join"}},[t._v("#")]),t._v(" Right outer join")]),t._v(" "),s("p",[t._v("Similarly, a right outer join will give all rows in B, plus any common rows in A:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RIGHT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OUTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\na    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  b\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-----+----")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"full-outer-join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#full-outer-join"}},[t._v("#")]),t._v(" Full outer join")]),t._v(" "),s("p",[t._v("A full outer join will give you the union of A and B, i.e., all the rows in A and all the rows in B. If something in A doesn't have a corresponding datum in B, then the B portion is null, and vice versa.")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FULL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OUTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n a   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  b\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-----+-----")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"join-terminology-inner-outer-semi-anti"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#join-terminology-inner-outer-semi-anti"}},[t._v("#")]),t._v(" JOIN Terminology: Inner, Outer, Semi, Anti...")]),t._v(" "),s("p",[t._v("Let's say we have two tables (A and B) and some of their rows match (relative to the given JOIN condition, whatever it may be in the particular case):")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://i.stack.imgur.com/TbHy6.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"http://i.stack.imgur.com/TbHy6.png",alt:"Join Terminology Overview"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("We can use various join types to include or exclude matching or non-matching rows from either side, and correctly name the join by picking the corresponding terms from the diagram above.")]),t._v(" "),s("p",[t._v("The examples below use the following test data:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" A "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    X "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" B "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    Y "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" A "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Amy'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'John'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Lisa'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Marco'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Phil'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" B "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Lisa'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Marco'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Phil'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Tim'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Vincent'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"inner-join-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inner-join-2"}},[t._v("#")]),t._v(" Inner Join")]),t._v(" "),s("p",[t._v("Combines left and right rows that match.")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://i.stack.imgur.com/j4eti.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"http://i.stack.imgur.com/j4eti.png",alt:"Inner Join"}}),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" A "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" B "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" X "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nX      Y\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("------ -----")]),t._v("\nLisa   Lisa\nMarco  Marco\nPhil   Phil\n\n")])])]),s("h3",{attrs:{id:"left-outer-join-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#left-outer-join-2"}},[t._v("#")]),t._v(" Left Outer Join")]),t._v(" "),s("p",[t._v('Sometimes abbreviated to "left join". Combines left and right rows that match, and includes non-matching left rows.')]),t._v(" "),s("p",[s("a",{attrs:{href:"http://i.stack.imgur.com/5UjhU.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"http://i.stack.imgur.com/5UjhU.png",alt:"Left Outer Join"}}),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" A "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" B "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" X "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nX      Y\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-----  -----")]),t._v("\nAmy    "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\nJohn   "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\nLisa   Lisa\nMarco  Marco\nPhil   Phil\n\n")])])]),s("h3",{attrs:{id:"right-outer-join-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#right-outer-join-2"}},[t._v("#")]),t._v(" Right Outer Join")]),t._v(" "),s("p",[t._v('Sometimes abbreviated to "right join". Combines left and right rows that match, and includes non-matching right rows.')]),t._v(" "),s("p",[s("a",{attrs:{href:"http://i.stack.imgur.com/Lrg4z.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"http://i.stack.imgur.com/Lrg4z.png",alt:"Right Outer Join"}}),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" A "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RIGHT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" B "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" X "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nX      Y\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-----  -------")]),t._v("\nLisa   Lisa\nMarco  Marco\nPhil   Phil\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("   Tim\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("   Vincent\n\n")])])]),s("h3",{attrs:{id:"full-outer-join-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#full-outer-join-2"}},[t._v("#")]),t._v(" Full Outer Join")]),t._v(" "),s("p",[t._v('Sometimes abbreviated to "full join". Union of left and right outer join.')]),t._v(" "),s("p",[s("a",{attrs:{href:"http://i.stack.imgur.com/XCCMm.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"http://i.stack.imgur.com/XCCMm.png",alt:"Full Outer Join"}}),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" A "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FULL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" B "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" X "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nX      Y\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-----  -------")]),t._v("\nAmy    "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\nJohn   "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\nLisa   Lisa\nMarco  Marco\nPhil   Phil\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("   Tim\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("   Vincent\n\n")])])]),s("h3",{attrs:{id:"left-semi-join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#left-semi-join"}},[t._v("#")]),t._v(" Left Semi Join")]),t._v(" "),s("p",[t._v("Includes left rows that match right rows.")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://i.stack.imgur.com/UGEsN.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"http://i.stack.imgur.com/UGEsN.png",alt:"Left Semi Join"}}),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" A "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" X "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Y "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nX\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-----")]),t._v("\nLisa\nMarco\nPhil\n\n")])])]),s("h3",{attrs:{id:"right-semi-join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#right-semi-join"}},[t._v("#")]),t._v(" Right Semi Join")]),t._v(" "),s("p",[t._v("Includes right rows that match left rows.")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://i.stack.imgur.com/OwH1z.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"http://i.stack.imgur.com/OwH1z.png",alt:"Right Semi Join"}}),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" B "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" X "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nY\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-----")]),t._v("\nLisa\nMarco\nPhil\n\n")])])]),s("p",[t._v("As you can see, there is no dedicated IN syntax for left vs. right semi join - we achieve the effect simply by switching the table positions within SQL text.")]),t._v(" "),s("h3",{attrs:{id:"left-anti-semi-join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#left-anti-semi-join"}},[t._v("#")]),t._v(" Left Anti Semi Join")]),t._v(" "),s("p",[t._v("Includes left rows that do "),s("strong",[t._v("not")]),t._v(" match right rows.")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://i.stack.imgur.com/I3KVl.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"http://i.stack.imgur.com/I3KVl.png",alt:"Left Anti Semi Join"}}),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" A "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" X "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Y "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nX\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----")]),t._v("\nAmy\nJohn\n\n")])])]),s("p",[s("strong",[t._v("WARNING:")]),t._v(" Be careful if you happen to be using NOT IN on a NULL-able column! More details "),s("a",{attrs:{href:"http://stackoverflow.com/a/132402/533120",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"right-anti-semi-join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#right-anti-semi-join"}},[t._v("#")]),t._v(" Right Anti Semi Join")]),t._v(" "),s("p",[t._v("Includes right rows that do "),s("strong",[t._v("not")]),t._v(" match left rows.")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://i.stack.imgur.com/sPY3h.png",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"http://i.stack.imgur.com/sPY3h.png",alt:"Right Anti Semi Join"}}),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" B "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" X "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nY\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-------")]),t._v("\nTim\nVincent\n\n")])])]),s("p",[t._v("As you can see, there is no dedicated NOT IN syntax for left vs. right anti semi join - we achieve the effect simply by switching the table positions within SQL text.")]),t._v(" "),s("h3",{attrs:{id:"cross-join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cross-join"}},[t._v("#")]),t._v(" Cross Join")]),t._v(" "),s("p",[t._v("A Cartesian product of all left with all right rows.")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" A "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CROSS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" B"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nX      Y\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-----  -------")]),t._v("\nAmy    Lisa\nJohn   Lisa\nLisa   Lisa\nMarco  Lisa\nPhil   Lisa\nAmy    Marco\nJohn   Marco\nLisa   Marco\nMarco  Marco\nPhil   Marco\nAmy    Phil\nJohn   Phil\nLisa   Phil\nMarco  Phil\nPhil   Phil\nAmy    Tim\nJohn   Tim\nLisa   Tim\nMarco  Tim\nPhil   Tim\nAmy    Vincent\nJohn   Vincent\nLisa   Vincent\nMarco  Vincent\nPhil   Vincent\n\n")])])]),s("p",[t._v("Cross join is equivalent to an inner join with join condition which always matches, so the following query would have returned the same result:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" A "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" B "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"self-join-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#self-join-2"}},[t._v("#")]),t._v(" Self-Join")]),t._v(" "),s("p",[t._v("This simply denotes a table joining with itself. A self-join can be any of the join types discussed above. For example, this is a an inner self-join:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" A A1 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" A A2 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("LEN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("X"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("LEN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("X"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nX     X\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----  -----")]),t._v("\nAmy   John\nAmy   Lisa\nAmy   Marco\nJohn  Marco\nLisa  Marco\nPhil  Marco\nAmy   Phil\n\n")])])]),s("h2",{attrs:{id:"left-outer-join-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#left-outer-join-3"}},[t._v("#")]),t._v(" Left Outer Join")]),t._v(" "),s("p",[t._v("A Left Outer Join (also known as a Left Join or Outer Join) is a Join that ensures all rows from the left table are represented; if no matching row from the right table exists, its corresponding fields are "),s("code",[t._v("NULL")]),t._v(".")]),t._v(" "),s("p",[t._v("The following example will select all departments and the first name of employees that work in that department.  Departments with no employees are still returned in the results, but will have NULL for the employee name:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v("          Departments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Employees"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FName\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("            Departments \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OUTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" Employees \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v("              Departments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Employees"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DepartmentId\n\n")])])]),s("p",[t._v("This would return the following from the "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/sql/280/example-database#t=201604180847497343904",target:"_blank",rel:"noopener noreferrer"}},[t._v("example database"),s("OutboundLink")],1),t._v(":")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Departments.Name")]),t._v(" "),s("th",[t._v("Employees.FName")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("HR")]),t._v(" "),s("td",[t._v("James")])]),t._v(" "),s("tr",[s("td",[t._v("HR")]),t._v(" "),s("td",[t._v("John")])]),t._v(" "),s("tr",[s("td",[t._v("HR")]),t._v(" "),s("td",[t._v("Johnathon")])]),t._v(" "),s("tr",[s("td",[t._v("Sales")]),t._v(" "),s("td",[t._v("Michael")])]),t._v(" "),s("tr",[s("td",[t._v("Tech")]),t._v(" "),s("td",[t._v("NULL")])])])]),t._v(" "),s("h3",{attrs:{id:"so-how-does-this-work-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#so-how-does-this-work-2"}},[t._v("#")]),t._v(" So how does this work?")]),t._v(" "),s("p",[t._v("There are two tables in the FROM clause:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Id")]),t._v(" "),s("th",[t._v("FName")]),t._v(" "),s("th",[t._v("LName")]),t._v(" "),s("th",[t._v("PhoneNumber")]),t._v(" "),s("th",[t._v("ManagerId")]),t._v(" "),s("th",[t._v("DepartmentId")]),t._v(" "),s("th",[t._v("Salary")]),t._v(" "),s("th",[t._v("HireDate")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("James")]),t._v(" "),s("td",[t._v("Smith")]),t._v(" "),s("td",[t._v("1234567890")]),t._v(" "),s("td",[t._v("NULL")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1000")]),t._v(" "),s("td",[t._v("01-01-2002")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("John")]),t._v(" "),s("td",[t._v("Johnson")]),t._v(" "),s("td",[t._v("2468101214")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("400")]),t._v(" "),s("td",[t._v("23-03-2005")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Michael")]),t._v(" "),s("td",[t._v("Williams")]),t._v(" "),s("td",[t._v("1357911131")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("600")]),t._v(" "),s("td",[t._v("12-05-2009")])]),t._v(" "),s("tr",[s("td",[t._v("4")]),t._v(" "),s("td",[t._v("Johnathon")]),t._v(" "),s("td",[t._v("Smith")]),t._v(" "),s("td",[t._v("1212121212")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("500")]),t._v(" "),s("td",[t._v("24-07-2016")])])])]),t._v(" "),s("p",[t._v("and")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Id")]),t._v(" "),s("th",[t._v("Name")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("HR")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("Sales")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Tech")])])])]),t._v(" "),s("p",[t._v("First a "),s("strong",[t._v("Cartesian")]),t._v(" product is created from the two tables giving an intermediate table."),s("br"),t._v("\nThe records that meet the join criteria ("),s("strong",[t._v("Departments.Id = Employees.DepartmentId")]),t._v(") are highlighted in bold; these are passed to the next stage of the query.")]),t._v(" "),s("p",[t._v("As this is a LEFT OUTER JOIN all records are returned from the LEFT side of the join (Departments), while any records on the RIGHT side are given a NULL marker if they do not match the join criteria.  In the table below this will return "),s("strong",[t._v("Tech")]),t._v(" with "),s("code",[t._v("NULL")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Id")]),t._v(" "),s("th",[t._v("Name")]),t._v(" "),s("th",[t._v("Id")]),t._v(" "),s("th",[t._v("FName")]),t._v(" "),s("th",[t._v("LName")]),t._v(" "),s("th",[t._v("PhoneNumber")]),t._v(" "),s("th",[t._v("ManagerId")]),t._v(" "),s("th",[t._v("DepartmentId")]),t._v(" "),s("th",[t._v("Salary")]),t._v(" "),s("th",[t._v("HireDate")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("strong",[t._v("1")])]),t._v(" "),s("td",[s("strong",[t._v("HR")])]),t._v(" "),s("td",[s("strong",[t._v("1")])]),t._v(" "),s("td",[s("strong",[t._v("James")])]),t._v(" "),s("td",[s("strong",[t._v("Smith")])]),t._v(" "),s("td",[s("strong",[t._v("1234567890")])]),t._v(" "),s("td",[s("strong",[t._v("NULL")])]),t._v(" "),s("td",[s("strong",[t._v("1")])]),t._v(" "),s("td",[s("strong",[t._v("1000")])]),t._v(" "),s("td",[s("strong",[t._v("01-01-2002")])])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("1")])]),t._v(" "),s("td",[s("strong",[t._v("HR")])]),t._v(" "),s("td",[s("strong",[t._v("2")])]),t._v(" "),s("td",[s("strong",[t._v("John")])]),t._v(" "),s("td",[s("strong",[t._v("Johnson")])]),t._v(" "),s("td",[s("strong",[t._v("2468101214")])]),t._v(" "),s("td",[s("strong",[t._v("1")])]),t._v(" "),s("td",[s("strong",[t._v("1")])]),t._v(" "),s("td",[s("strong",[t._v("400")])]),t._v(" "),s("td",[s("strong",[t._v("23-03-2005")])])]),t._v(" "),s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("HR")]),t._v(" "),s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Michael")]),t._v(" "),s("td",[t._v("Williams")]),t._v(" "),s("td",[t._v("1357911131")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("600")]),t._v(" "),s("td",[t._v("12-05-2009")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("1")])]),t._v(" "),s("td",[s("strong",[t._v("HR")])]),t._v(" "),s("td",[s("strong",[t._v("4")])]),t._v(" "),s("td",[s("strong",[t._v("Johnathon")])]),t._v(" "),s("td",[s("strong",[t._v("Smith")])]),t._v(" "),s("td",[s("strong",[t._v("1212121212")])]),t._v(" "),s("td",[s("strong",[t._v("2")])]),t._v(" "),s("td",[s("strong",[t._v("1")])]),t._v(" "),s("td",[s("strong",[t._v("500")])]),t._v(" "),s("td",[s("strong",[t._v("24-07-2016")])])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("Sales")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("James")]),t._v(" "),s("td",[t._v("Smith")]),t._v(" "),s("td",[t._v("1234567890")]),t._v(" "),s("td",[t._v("NULL")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1000")]),t._v(" "),s("td",[t._v("01-01-2002")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("Sales")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("John")]),t._v(" "),s("td",[t._v("Johnson")]),t._v(" "),s("td",[t._v("2468101214")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("400")]),t._v(" "),s("td",[t._v("23-03-2005")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("2")])]),t._v(" "),s("td",[s("strong",[t._v("Sales")])]),t._v(" "),s("td",[s("strong",[t._v("3")])]),t._v(" "),s("td",[s("strong",[t._v("Michael")])]),t._v(" "),s("td",[s("strong",[t._v("Williams")])]),t._v(" "),s("td",[s("strong",[t._v("1357911131")])]),t._v(" "),s("td",[s("strong",[t._v("1")])]),t._v(" "),s("td",[s("strong",[t._v("2")])]),t._v(" "),s("td",[s("strong",[t._v("600")])]),t._v(" "),s("td",[s("strong",[t._v("12-05-2009")])])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("Sales")]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("Johnathon")]),t._v(" "),s("td",[t._v("Smith")]),t._v(" "),s("td",[t._v("1212121212")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("500")]),t._v(" "),s("td",[t._v("24-07-2016")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Tech")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("James")]),t._v(" "),s("td",[t._v("Smith")]),t._v(" "),s("td",[t._v("1234567890")]),t._v(" "),s("td",[t._v("NULL")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1000")]),t._v(" "),s("td",[t._v("01-01-2002")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Tech")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("John")]),t._v(" "),s("td",[t._v("Johnson")]),t._v(" "),s("td",[t._v("2468101214")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("400")]),t._v(" "),s("td",[t._v("23-03-2005")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Tech")]),t._v(" "),s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Michael")]),t._v(" "),s("td",[t._v("Williams")]),t._v(" "),s("td",[t._v("1357911131")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("600")]),t._v(" "),s("td",[t._v("12-05-2009")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("Tech")]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("Johnathon")]),t._v(" "),s("td",[t._v("Smith")]),t._v(" "),s("td",[t._v("1212121212")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("500")]),t._v(" "),s("td",[t._v("24-07-2016")])])])]),t._v(" "),s("p",[t._v("Finally each expression used within the "),s("strong",[t._v("SELECT")]),t._v(" clause is evaluated to return our final table:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Departments.Name")]),t._v(" "),s("th",[t._v("Employees.FName")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("HR")]),t._v(" "),s("td",[t._v("James")])]),t._v(" "),s("tr",[s("td",[t._v("HR")]),t._v(" "),s("td",[t._v("John")])]),t._v(" "),s("tr",[s("td",[t._v("Sales")]),t._v(" "),s("td",[t._v("Richard")])]),t._v(" "),s("tr",[s("td",[t._v("Tech")]),t._v(" "),s("td",[t._v("NULL")])])])]),t._v(" "),s("h2",{attrs:{id:"implicit-join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#implicit-join"}},[t._v("#")]),t._v(" Implicit Join")]),t._v(" "),s("p",[t._v("Joins can also be performed by having several tables in the "),s("code",[t._v("from")]),t._v(" clause, separated with commas "),s("code",[t._v(",")]),t._v(" and defining the relationship between them in the "),s("code",[t._v("where")]),t._v(" clause. This technique is called an Implicit Join (since it doesn't actually contain a "),s("code",[t._v("join")]),t._v(" clause).")]),t._v(" "),s("p",[t._v("All RDBMSs support it, but the syntax is usually advised against. The reasons why it is a bad idea to use this syntax are:")]),t._v(" "),s("ul",[s("li",[t._v("It is possible to get accidental cross joins which then return incorrect results, especially if you have a lot of joins in the query.")]),t._v(" "),s("li",[t._v("If you intended a cross join, then it is not clear from the syntax (write out CROSS JOIN instead), and someone is likely to change it during maintenance.")])]),t._v(" "),s("p",[t._v("The following example will select employee's first names and the name of the departments they work for:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("   Employee e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Departments d\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v("  e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DeptartmentId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id\n\n")])])]),s("p",[t._v("This would return the following from the "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/sql/280/example-database#t=201604180847497343904",target:"_blank",rel:"noopener noreferrer"}},[t._v("example database"),s("OutboundLink")],1),t._v(":")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("e.FName")]),t._v(" "),s("th",[t._v("d.Name")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("James")]),t._v(" "),s("td",[t._v("HR")])]),t._v(" "),s("tr",[s("td",[t._v("John")]),t._v(" "),s("td",[t._v("HR")])]),t._v(" "),s("tr",[s("td",[t._v("Richard")]),t._v(" "),s("td",[t._v("Sales")])])])]),t._v(" "),s("h2",{attrs:{id:"basic-explicit-inner-join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#basic-explicit-inner-join"}},[t._v("#")]),t._v(" Basic explicit inner join")]),t._v(" "),s("p",[t._v('A basic join (also called "inner join") queries data from two tables, with their relationship defined in a '),s("code",[t._v("join")]),t._v(" clause.")]),t._v(" "),s("p",[t._v("The following example will select employees' first names (FName) from the Employees table and the name of the department they work for (Name) from the Departments table:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Employees"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Departments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("   Employees\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v("   Departments\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" Employees"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DepartmentId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Departments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id\n\n")])])]),s("p",[t._v("This would return the following from the "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/sql/280/example-database#t=201604180847497343904",target:"_blank",rel:"noopener noreferrer"}},[t._v("example database"),s("OutboundLink")],1),t._v(":")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Employees.FName")]),t._v(" "),s("th",[t._v("Departments.Name")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("James")]),t._v(" "),s("td",[t._v("HR")])]),t._v(" "),s("tr",[s("td",[t._v("John")]),t._v(" "),s("td",[t._v("HR")])]),t._v(" "),s("tr",[s("td",[t._v("Richard")]),t._v(" "),s("td",[t._v("Sales")])])])]),t._v(" "),s("h2",{attrs:{id:"cross-join-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cross-join-2"}},[t._v("#")]),t._v(" CROSS JOIN")]),t._v(" "),s("p",[t._v("Cross join does a Cartesian product of the two members, A Cartesian product means each row of one table is combined with each row of the second table in the join. For example, if "),s("code",[t._v("TABLEA")]),t._v(" has 20 rows and "),s("code",[t._v("TABLEB")]),t._v(" has 20 rows, the result would be "),s("code",[t._v("20*20 = 400")]),t._v(" output rows.")]),t._v(" "),s("p",[t._v("Using "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/sql/280/example-databases#t=201604180847497343904",target:"_blank",rel:"noopener noreferrer"}},[t._v("example database"),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FName\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("   Departments d\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CROSS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" Employees e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),s("p",[t._v("Which returns:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("d.Name")]),t._v(" "),s("th",[t._v("e.FName")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("HR")]),t._v(" "),s("td",[t._v("James")])]),t._v(" "),s("tr",[s("td",[t._v("HR")]),t._v(" "),s("td",[t._v("John")])]),t._v(" "),s("tr",[s("td",[t._v("HR")]),t._v(" "),s("td",[t._v("Michael")])]),t._v(" "),s("tr",[s("td",[t._v("HR")]),t._v(" "),s("td",[t._v("Johnathon")])]),t._v(" "),s("tr",[s("td",[t._v("Sales")]),t._v(" "),s("td",[t._v("James")])]),t._v(" "),s("tr",[s("td",[t._v("Sales")]),t._v(" "),s("td",[t._v("John")])]),t._v(" "),s("tr",[s("td",[t._v("Sales")]),t._v(" "),s("td",[t._v("Michael")])]),t._v(" "),s("tr",[s("td",[t._v("Sales")]),t._v(" "),s("td",[t._v("Johnathon")])]),t._v(" "),s("tr",[s("td",[t._v("Tech")]),t._v(" "),s("td",[t._v("James")])]),t._v(" "),s("tr",[s("td",[t._v("Tech")]),t._v(" "),s("td",[t._v("John")])]),t._v(" "),s("tr",[s("td",[t._v("Tech")]),t._v(" "),s("td",[t._v("Michael")])]),t._v(" "),s("tr",[s("td",[t._v("Tech")]),t._v(" "),s("td",[t._v("Johnathon")])])])]),t._v(" "),s("p",[t._v("It is recommended to write an explicit CROSS JOIN if you want to do a cartesian join, to highlight that this is what you want.")]),t._v(" "),s("h2",{attrs:{id:"joining-on-a-subquery"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#joining-on-a-subquery"}},[t._v("#")]),t._v(" Joining on a Subquery")]),t._v(" "),s("p",[t._v("Joining a subquery is often used when you want to get aggregate data from a child/details table and display that along with records from the parent/header table. For example, you might want to get a count of child records, an average of some numeric column in child records, or the top or bottom row based on a date or numeric field. This example uses aliases, which arguable makes queries easier to read when you have multiple tables involved. Here's what a fairly typical subquery join looks like. In this case we are retrieving all rows from the parent table Purchase Orders and retrieving only the first row for each parent record of the child table PurchaseOrderLineItems.")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" po"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" po"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PODate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" po"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("VendorName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" po"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Status")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ItemNo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n  item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Cost"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Price\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" PurchaseOrders po\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" \n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PurchaseOrderId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ItemNo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Cost"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Price"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Min")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" Id \n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" PurchaseOrderLineItems l\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PurchaseOrderId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ItemNo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Description"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Cost"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Price\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" item "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PurchaseOrderId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" po"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Id\n\n")])])]),s("h2",{attrs:{id:"cross-apply-lateral-join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cross-apply-lateral-join"}},[t._v("#")]),t._v(" CROSS APPLY & LATERAL JOIN")]),t._v(" "),s("p",[t._v("A very interesting type of JOIN is the LATERAL JOIN (new in PostgreSQL 9.3+), "),s("br"),t._v("\nwhich is also known as CROSS APPLY/OUTER APPLY in SQL-Server & Oracle.")]),t._v(" "),s("p",[t._v("The basic idea is that a table-valued function (or inline subquery) gets applied for every row you join.")]),t._v(" "),s("p",[t._v("This makes it possible to, for example, only join the first matching entry in another table. "),s("br"),t._v("\nThe difference between a normal and a lateral join lies in the fact that you can use a column that you previously joined "),s("strong",[t._v("in the subquery")]),t._v(' that you "CROSS APPLY".')]),t._v(" "),s("p",[t._v("Syntax:")]),t._v(" "),s("p",[t._v("PostgreSQL 9.3+")]),t._v(" "),s("blockquote"),t._v(" "),s("p",[t._v("left | right | inner JOIN "),s("strong",[t._v("LATERAL")])]),t._v(" "),s("p",[t._v("SQL-Server:")]),t._v(" "),s("blockquote"),t._v(" "),s("p",[t._v("CROSS | OUTER "),s("strong",[t._v("APPLY")])]),t._v(" "),s("p",[s("code",[t._v("INNER JOIN LATERAL")]),t._v(" is the same as "),s("code",[t._v("CROSS APPLY")]),t._v(" "),s("br"),t._v("\nand "),s("code",[t._v("LEFT JOIN LATERAL")]),t._v(" is the same as "),s("code",[t._v("OUTER APPLY")])]),t._v(" "),s("p",[t._v("Example usage (PostgreSQL 9.3+):")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" T_Contacts \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--LEFT JOIN T_MAP_Contacts_Ref_OrganisationalUnit ON MAP_CTCOU_CT_UID = T_Contacts.CT_UID AND MAP_CTCOU_SoftDeleteStatus = 1 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--WHERE T_MAP_Contacts_Ref_OrganisationalUnit.MAP_CTCOU_UID IS NULL -- 989")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" LATERAL \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" \n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--MAP_CTCOU_UID    ")]),t._v("\n         MAP_CTCOU_CT_UID   \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("MAP_CTCOU_COU_UID  \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("MAP_CTCOU_DateFrom \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("MAP_CTCOU_DateTo   \n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" T_MAP_Contacts_Ref_OrganisationalUnit \n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" MAP_CTCOU_SoftDeleteStatus "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" \n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" MAP_CTCOU_CT_UID "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" T_Contacts"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CT_UID \n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*  \n    AND \n    ( \n        (__in_DateFrom <= T_MAP_Contacts_Ref_OrganisationalUnit.MAP_KTKOE_DateTo) \n        AND \n        (__in_DateTo >= T_MAP_Contacts_Ref_OrganisationalUnit.MAP_KTKOE_DateFrom) \n    ) \n    */")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" MAP_CTCOU_DateFrom \n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" FirstOE \n\n")])])]),s("p",[t._v("And for SQL-Server")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" T_Contacts \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--LEFT JOIN T_MAP_Contacts_Ref_OrganisationalUnit ON MAP_CTCOU_CT_UID = T_Contacts.CT_UID AND MAP_CTCOU_SoftDeleteStatus = 1 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--WHERE T_MAP_Contacts_Ref_OrganisationalUnit.MAP_CTCOU_UID IS NULL -- 989")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- CROSS APPLY -- = INNER JOIN ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OUTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("APPLY")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- = LEFT JOIN ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TOP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" \n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--MAP_CTCOU_UID    ")]),t._v("\n         MAP_CTCOU_CT_UID   \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("MAP_CTCOU_COU_UID  \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("MAP_CTCOU_DateFrom \n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("MAP_CTCOU_DateTo   \n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" T_MAP_Contacts_Ref_OrganisationalUnit \n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" MAP_CTCOU_SoftDeleteStatus "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" \n   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" MAP_CTCOU_CT_UID "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" T_Contacts"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CT_UID \n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*  \n    AND \n    ( \n        (@in_DateFrom <= T_MAP_Contacts_Ref_OrganisationalUnit.MAP_KTKOE_DateTo) \n        AND \n        (@in_DateTo >= T_MAP_Contacts_Ref_OrganisationalUnit.MAP_KTKOE_DateFrom) \n    ) \n    */")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" MAP_CTCOU_DateFrom \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" FirstOE \n\n")])])]),s("h2",{attrs:{id:"full-join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#full-join"}},[t._v("#")]),t._v(" FULL JOIN")]),t._v(" "),s("p",[t._v("One type of JOIN that is less known, is the FULL JOIN. "),s("br"),t._v("\n(Note: FULL JOIN is not supported by MySQL as per 2016)")]),t._v(" "),s("p",[t._v("A FULL OUTER JOIN returns all rows from the left table, and all rows from the right table.")]),t._v(" "),s("p",[t._v("If there are rows in the left table that do not have matches in the right table, or if there are rows in right table that do not have matches in the left table, then those rows will be listed, too.")]),t._v(" "),s("p",[t._v("Example 1 :")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Table1\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FULL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" Table2 \n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" \n\n")])])]),s("p",[t._v("Example 2:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" \n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COALESCE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T_Budget"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Year")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tYear"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Year")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" RPT_BudgetInYear \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COALESCE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T_Budget"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" RPT_Value \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" T_Budget \n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FULL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" tfu_RPT_All_CreateYearInterval"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@budget_year_from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@budget_year_to")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" tYear \n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" tYear"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Year")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" T_Budget"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Year")]),t._v(" \n\n")])])]),s("p",[t._v("Note that if you're using soft-deletes, you'll have to check the soft-delete status again in the WHERE-clause (because FULL JOIN behaves kind-of like a UNION); "),s("br"),t._v("\nIt's easy to overlook this little fact, since you put AP_SoftDeleteStatus = 1 in the join clause.")]),t._v(" "),s("p",[t._v("Also, if you are doing a FULL JOIN, you'll usually have to allow NULL in the WHERE-clause; forgetting to allow NULL on a value will have the same effects as an INNER join, which is something you don't want if you're doing a FULL JOIN.")]),t._v(" "),s("p",[t._v("Example:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" \n     T_AccountPlan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AP_UID\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("T_AccountPlan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AP_Code\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("T_AccountPlan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AP_Lang_EN\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("T_BudgetPositions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BUP_Budget\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("T_BudgetPositions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BUP_UID \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("T_BudgetPositions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BUP_Jahr\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" T_BudgetPositions    \n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FULL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" T_AccountPlan\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" T_AccountPlan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AP_UID "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" T_BudgetPositions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BUP_AP_UID \n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" T_AccountPlan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AP_SoftDeleteStatus "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T_BudgetPositions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BUP_SoftDeleteStatus "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" T_BudgetPositions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BUP_SoftDeleteStatus "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T_AccountPlan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AP_SoftDeleteStatus "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" T_AccountPlan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AP_SoftDeleteStatus "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\n")])])]),s("h2",{attrs:{id:"recursive-joins"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#recursive-joins"}},[t._v("#")]),t._v(" Recursive JOINs")]),t._v(" "),s("p",[t._v("Recursive joins are often used to obtain parent-child data.\nIn SQL, they are implemented with recursive "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/sql/747/common-table-expressions#t=201608060613313832648",target:"_blank",rel:"noopener noreferrer"}},[t._v("common table expressions"),s("OutboundLink")],1),t._v(", for example:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" RECURSIVE MyDescendants "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Name\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" People\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" Name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'John Doe'")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALL")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" People"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" People\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" MyDescendants "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" People"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MyDescendants"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Parent\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" MyDescendants"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),s("h4",{attrs:{id:"syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("[ { INNER | { { LEFT | RIGHT | FULL } [ OUTER ] } } ] JOIN")])])]),t._v(" "),s("h4",{attrs:{id:"remarks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),s("p",[t._v("Joins, as their name suggests, are a way of querying data from several tables in a joint fashion, with the rows displaying columns taken from more than one table.")])])}),[],!1,null,null,null);a.default=n.exports}}]);