(window.webpackJsonp=window.webpackJsonp||[]).push([[552],{960:function(t,e,s){"use strict";s.r(e);var n=s(31),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"comments"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#comments"}},[t._v("#")]),t._v(" Comments")]),t._v(" "),s("p",[t._v("Comments are used to indicate something to the person reading the code. Comments are treated like a blank by the compiler and do not change anything in the code's actual meaning. There are two syntaxes used for comments in C, the original "),s("code",[t._v("/* */")]),t._v(" and the slightly newer "),s("code",[t._v("//")]),t._v(".  Some documentation systems use specially formatted comments to help produce the documentation for code.")]),t._v(" "),s("h2",{attrs:{id:"commenting-using-the-preprocessor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commenting-using-the-preprocessor"}},[t._v("#")]),t._v(" Commenting using the preprocessor")]),t._v(" "),s("p",[t._v('Large chunks of code can also be "commented out" using the preprocessor directives '),s("code",[t._v("#if 0")]),t._v(" and "),s("code",[t._v("#endif")]),t._v(". This is useful when the code contains multi-line comments that otherwise would not nest.")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/* Starts the "comment", anything from here on is removed by preprocessor */')]),t._v(" ")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* A large amount of code with multi-line comments */")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* lots of code */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ... some comment describing the if statement ... */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("someTest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* some more comments */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 0 */")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/* code from here on is "uncommented" (included in compiled executable) */')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" \n\n")])])]),s("h2",{attrs:{id:"delimited-comments"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#delimited-comments"}},[t._v("#")]),t._v(" /* */ delimited comments")]),t._v(" "),s("p",[t._v("A comment starts with a forward slash followed immediately by an asterisk ("),s("code",[t._v("/*")]),t._v("), and ends as soon as an asterisk immediately followed by a forward slash ("),s("code",[t._v("*/")]),t._v(") is encountered. Everything in between these character combinations is a comment and is treated as a blank (basically ignored) by the compiler.")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* this is a comment */")]),t._v("\n\n")])])]),s("p",[t._v("The comment above is a single line comment. Comments of this "),s("code",[t._v("/*")]),t._v(" type can span multiple lines, like so:")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* this is a\nmulti-line\ncomment */")]),t._v("\n\n")])])]),s("p",[t._v("Though it is not strictly necessary, a common style convention with multi-line comments is to put leading spaces and asterisks on the lines subsequent to the first, and the "),s("code",[t._v("/*")]),t._v(" and "),s("code",[t._v("*/")]),t._v(" on new lines, such that they all line up:")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* \n * this is a\n * multi-line\n * comment\n */")]),t._v("\n\n")])])]),s("p",[t._v("The extra asterisks do not have any functional effect on the comment as none of them have a related forward slash.")]),t._v(" "),s("p",[t._v("These "),s("code",[t._v("/*")]),t._v(" type of comments can be used on their own line, at the end of a code line, or even within lines of code:")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* this comment is on its own line */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*this comment is at the end of a line */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("complexCondition1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* this comment is within a line of code */")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("complexCondition2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* this comment is within an if, on its own line */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("Comments cannot be nested. This is because any subsequent "),s("code",[t._v("/*")]),t._v(" will be ignored (as part of the comment) and the first "),s("code",[t._v("*/")]),t._v(" reached will be treated as ending the comment. The comment in the following example "),s("strong",[t._v("will not work")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* outer comment, means this is ignored => /* attempted inner comment */")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" ends the comment"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" not this one "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n\n")])])]),s("p",[t._v("To comment blocks of code that contain comments of this type, that would otherwise be nested, see the "),s("a",{attrs:{href:"https://stackoverflow.com/documentation/c/10670/comments/32034/commenting-using-the-preprocessor",target:"_blank",rel:"noopener noreferrer"}},[t._v("Commenting using the preprocessor"),s("OutboundLink")],1),t._v(" example below")]),t._v(" "),s("h2",{attrs:{id:"delimited-comments-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#delimited-comments-2"}},[t._v("#")]),t._v(" // delimited comments")]),t._v(" "),s("p",[t._v("C99 introduced the use of C++-style single-line comments. This type of comment starts with two forward slashes and runs to the end of a line:")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this is a comment")]),t._v("\n\n")])])]),s("p",[t._v("This type of comment does not allow multi-line comments, though it is possible to make a comment block by adding several single line comments one after the other:")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// each of these lines are a single-line comment")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// note how each must start with")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the double forward-slash")]),t._v("\n\n")])])]),s("p",[t._v("This type of comment may be used on its own line or at the end of a code line. However, because they run "),s("strong",[t._v("to the end of the line")]),t._v(", they may "),s("strong",[t._v("not")]),t._v(" be used within a code line")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this comment is on its own line")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this comment is at the end of a line")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this comment is within an if, on its own line")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"possible-pitfall-due-to-trigraphs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#possible-pitfall-due-to-trigraphs"}},[t._v("#")]),t._v(" Possible pitfall due to trigraphs")]),t._v(" "),s("p",[t._v("While writing "),s("code",[t._v("//")]),t._v(" delimited comments, it is possible to make a typographical error that affects their expected operation. If one types:")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Why did I do this??/")]),t._v("\n\n")])])]),s("p",[t._v("The "),s("code",[t._v("/")]),t._v(" at the end was a typo but now will get interpreted into "),s("code",[t._v("\\")]),t._v(". This is because the "),s("code",[t._v("??/")]),t._v(" forms a "),s("a",{attrs:{href:"https://stackoverflow.com/documentation/c/7111/multi-character-character-sequence/23858/trigraphs",target:"_blank",rel:"noopener noreferrer"}},[t._v("trigraph"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("??/")]),t._v(" trigraph is actually a longhand notation for "),s("code",[t._v("\\")]),t._v(", which is the line continuation symbol. This means that the compiler thinks the next line is a continuation of the current line, that is, a continuation of the comment, which may not be what is intended.")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Start at 20 ??/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" bar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The following will cause a compilation error (undeclared variable 'bar')")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// because 'int bar = 0;' is part of the comment on the preceding line")]),t._v("\nbar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),s("h4",{attrs:{id:"syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("/*...*/")])]),t._v(" "),s("li",[s("code",[t._v("//...")]),t._v(" (C99 and later only)")])])])}),[],!1,null,null,null);e.default=a.exports}}]);