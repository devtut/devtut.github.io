(window.webpackJsonp=window.webpackJsonp||[]).push([[2026],{2434:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge"}},[t._v("#")]),t._v(" MERGE")]),t._v(" "),a("p",[t._v("Starting with SQL Server 2008, it is possible to perform insert, update, or delete operations in a single statement using the MERGE statement.")]),t._v(" "),a("p",[t._v("The MERGE statement allows you to join a data source with a target table or view, and then perform multiple actions against the target based on the results of that join.")]),t._v(" "),a("h2",{attrs:{id:"merge-to-insert-update-delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge-to-insert-update-delete"}},[t._v("#")]),t._v(" MERGE to Insert / Update / Delete")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MERGE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" targetTable\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("USING")]),t._v(" sourceTable \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("targetTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PKID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sourceTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PKID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCHED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("targetTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PKID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("THEN")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCHED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("targetTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PKID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("THEN")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" \n        targetTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ColumnA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sourceTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ColumnA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n        targetTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ColumnB "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sourceTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ColumnB\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCHED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("THEN")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ColumnA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ColumnB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sourceTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ColumnA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sourceTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ColumnB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCHED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" SOURCE "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("THEN")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--< Required")]),t._v("\n\n")])])]),a("p",[t._v("Description:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("MERGE INTO targetTable")]),t._v(" - table to be modified")]),t._v(" "),a("li",[a("code",[t._v("USING sourceTable")]),t._v(" - source of data (can be table or view or table valued function)")]),t._v(" "),a("li",[a("code",[t._v("ON ...")]),t._v(" - join condition between "),a("code",[t._v("targetTable")]),t._v(" and "),a("code",[t._v("sourceTable")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("WHEN MATCHED")]),t._v(" - actions to take when a match is found\n")]),a("li",[a("ul")]),t._v(" "),a("li",[a("code",[t._v("AND (targetTable.PKID > 100)")]),t._v(" - additional condition(s) that must be satisfied in order for the action to be taken")])]),t._v(" "),a("p",[t._v("Comments:")]),t._v(" "),a("p",[t._v("If a specific action is not needed then omit the condition e.g. removing "),a("code",[t._v("WHEN NOT MATCHED THEN INSERT")]),t._v(" will prevent records from being inserted")]),t._v(" "),a("p",[t._v("Merge statement requires a terminating semicolon.")]),t._v(" "),a("p",[t._v("Restrictions:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("WHEN MATCHED")]),t._v(" does not allow "),a("code",[t._v("INSERT")]),t._v(" action")]),t._v(" "),a("li",[a("code",[t._v("UPDATE")]),t._v(" action can update a row only once. This implies that the join condition must produce unique matches.")])]),t._v(" "),a("h2",{attrs:{id:"merge-using-cte-source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge-using-cte-source"}},[t._v("#")]),t._v(" Merge Using CTE Source")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" SourceTableCTE "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" SourceTable\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MERGE")]),t._v("  \n TargetTable "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" target\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("USING")]),t._v(" SourceTableCTE "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" source  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PKID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PKID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCHED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("THEN")]),t._v("     \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ColumnA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ColumnA\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCHED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("THEN")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ColumnA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ColumnA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"merge-using-derived-source-table"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge-using-derived-source-table"}},[t._v("#")]),t._v(" MERGE using Derived Source Table")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MERGE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" TargetTable  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" Target  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("USING")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Value1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Value2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Value3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" Source "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PKID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ColumnA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" Target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PKID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PKID \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCHED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("THEN")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ColumnA"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ColumnA\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCHED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("THEN")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PKID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ColumnA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PKID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ColumnA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"merge-example-synchronize-source-and-target-table"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge-example-synchronize-source-and-target-table"}},[t._v("#")]),t._v(" Merge Example - Synchronize Source And Target Table")]),t._v(" "),a("p",[t._v("To Illustrate the MERGE Statement, consider the following two tables -")]),t._v(" "),a("li",[t._v("\n**dbo.Product** : This table contains information about the product that company is currently selling\n")]),t._v(" "),a("li",[t._v("\n**dbo.ProductNew**: This table contains information about the product that the company will sell in the future.\n")]),t._v(" "),a("p",[t._v("The following T-SQL will create and populate these two tables")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("IF")]),t._v(" OBJECT_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("N"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dbo.Product'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("N"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'U'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" dbo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Product\nGO\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" dbo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Product "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nProductID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nProductName NVARCHAR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nPRICE MONEY\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("IF")]),t._v(" OBJECT_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("N"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dbo.ProductNew'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("N"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'U'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" dbo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ProductNew\nGO\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" dbo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ProductNew "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nProductID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nProductName NVARCHAR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nPRICE MONEY\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" dbo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Product "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'IPod'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'IPhone'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ChromeCast'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'raspberry pi'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" dbo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ProductNew "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Asus Notebook'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hp Notebook'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Dell Notebook'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'raspberry pi'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("Now, Suppose we want to synchoronize the dbo.Product Target Table with the dbo.ProductNew table. Here is the criterion for this task:")]),t._v(" "),a("li",[t._v("\nProduct that exist in both the dbo.ProductNew source table and the dbo.Product target table are updated in the dbo.Product target table with new new Products.\n")]),t._v(" "),a("li",[t._v("\nAny product in the dbo.ProductNew source table that do not exist in the dob.Product target table are inserted into the dbo.Product  target table.\n")]),t._v(" "),a("li",[a("p",[t._v("Any Product in the dbo.Product target table that do not exist in the dbo.ProductNew source table must be deleted from the dbo.Product target table.\nHere is the MERGE statement to perform this task.")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MERGE")]),t._v(" dbo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Product "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" SourceTbl \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("USING")]),t._v(" dbo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ProductNew "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" TargetTbl "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SourceTbl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ProductID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" TargetTbl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ProductID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCHED")]),t._v(" \n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" SourceTbl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ProductName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<>")]),t._v(" TargetTbl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ProductName\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" SourceTbl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Price "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<>")]),t._v(" TargetTbl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Price\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("THEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" SourceTbl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ProductName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" TargetTbl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ProductName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                SourceTbl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Price "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" TargetTbl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Price\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCHED")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("THEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ProductID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ProductName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TargetTbl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ProductID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TargetTbl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ProductName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TargetTbl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCHED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" SOURCE \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("THEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v("\nOUTPUT $"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("action")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" INSERTED"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DELETED"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("Note:Semicolon must be present in the end of MERGE statement.\n"),a("a",{attrs:{href:"https://i.stack.imgur.com/GULoi.jpg",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://i.stack.imgur.com/GULoi.jpg",alt:"enter image description here"}}),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"merge-using-except"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge-using-except"}},[t._v("#")]),t._v(" Merge using EXCEPT")]),t._v(" "),a("p",[t._v("Use EXCEPT to prevent updates to unchanged records")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MERGE")]),t._v(" TargetTable targ\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("USING")]),t._v(" SourceTable "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" src\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" targ"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCHED")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXISTS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXCEPT")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" targ"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("THEN")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" field "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCHED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" TARGET\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("THEN")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            id\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("field\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("field\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCHED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" SOURCE\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("THEN")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h4",{attrs:{id:"syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),a("li",[t._v("As per MSDN - [https://msdn.microsoft.com/en-us/library/bb510625.aspx](https://msdn.microsoft.com/en-us/library/bb510625.aspx)\n[ WITH "),a("common_table_expression",[t._v(" [,...n] ] MERGE [ TOP ( expression )\n[ PERCENT ] ] [ INTO ] "),a("target_table",[t._v(" [ WITH ( "),a("merge_hint",[t._v(" ) ] [ [\nAS ] table_alias ] USING "),a("table_source",[t._v(" ON "),a("merge_search_condition",[t._v(" [\nWHEN MATCHED [ AND "),a("clause_search_condition",[t._v(" ] THEN "),a("merge_matched",[t._v(" ]\n[ ...n ] [ WHEN NOT MATCHED [ BY TARGET ] [ AND\n"),a("clause_search_condition",[t._v(" ] THEN "),a("merge_not_matched",[t._v(" ] [ WHEN NOT\nMATCHED BY SOURCE [ AND "),a("clause_search_condition",[t._v(" ] THEN\n"),a("merge_matched",[t._v(" ] [ ...n ] [ "),a("output_clause",[t._v(" ] [ OPTION (\n"),a("query_hint",[t._v(" [ ,...n ] ) ] ; "),a("target_table",[t._v(" ::= { [ database_name .\nschema_name . | schema_name . ] target_table } "),a("merge_hint",[t._v("::= { { [\n"),a("table_hint_limited",[t._v(" [ ,...n ] ] [ [ , ] INDEX ( index_val [ ,...n ]\n) ] } } "),a("table_source",[t._v(" ::= { table_or_view_name [ [ AS ] table_alias\n] [ "),a("tablesample_clause",[t._v(" ] [ WITH ( table_hint [ [ , ]...n ] ) ] |\nrowset_function [ [ AS ] table_alias ] [ ( bulk_column_alias [ ,...n\n] ) ] | user_defined_function [ [ AS ] table_alias ] | OPENXML\n"),a("openxml_clause",[t._v(" | derived_table [ AS ] table_alias [ ( column_alias\n[ ,...n ] ) ] | "),a("joined_table",[t._v(" | "),a("pivoted_table",[t._v(" | "),a("unpivoted_table",[t._v("\n} "),a("merge_search_condition",[t._v(" ::= "),a("search_condition",[a("merge_matched",[t._v("::=\n{ UPDATE SET "),a("set_clause",[t._v(" | DELETE } "),a("set_clause",[t._v("::= SET {\ncolumn_name = { expression | DEFAULT | NULL } | { udt_column_name.{ {\nproperty_name = expression | field_name = expression } | method_name\n( argument [ ,...n ] ) } } | column_name { .WRITE ( expression ,\n@Offset , @Length ) } | @variable = expression | @variable = column =\nexpression | column_name { += | -= | *= | /= | %= | &= | ^= | |= }\nexpression | @variable { += | -= | *= | /= | %= | &= | ^= | |= }\nexpression | @variable = column { += | -= | *= | /= | %= | &= | ^= |\n|= } expression } [ ,...n ] "),a("merge_not_matched",[t._v("::= { INSERT [ (\ncolumn_list ) ] { VALUES ( values_list ) | DEFAULT VALUES } }\n"),a("clause_search_condition",[t._v(" ::= "),a("search_condition",[t._v(" ::= { [ NOT ] | (\n"),a("search_condition",[t._v(" ) } [ { AND | OR } [ NOT ] { | (\n"),a("search_condition",[t._v(" ) } ] [ ,...n ] ::= { expression { = | < > | ! = |\n"),a("blockquote",[a("p",[t._v("| > = | ! > | < | < = | ! < } expression | string_expression [ NOT ] LIKE string_expression [ ESCAPE 'escape_character' ] | expression [\nNOT ] BETWEEN expression AND expression | expression IS [ NOT ] NULL\n| CONTAINS ( { column | * } , '< contains_search_condition >' ) |\nFREETEXT ( { column | * } , 'freetext_string' ) | expression [ NOT ]\nIN ( subquery | expression [ ,...n ] ) | expression { = | < > | ! = |\n| > = | ! > | < | < = | ! < } { ALL | SOME | ANY} ( subquery ) | EXISTS ( subquery ) } "),a("output_clause",[t._v("::= { [ OUTPUT "),a("dml_select_list",[t._v("\nINTO { @table_variable | output_table } [ (column_list) ] ] [ OUTPUT\n"),a("dml_select_list",[t._v(" ] } "),a("dml_select_list",[t._v("::= { "),a("column_name",[t._v(" |\nscalar_expression } [ [AS] column_alias_identifier ] [ ,...n ]\n"),a("column_name",[t._v(" ::= { DELETED | INSERTED | from_table_name } . { * |\ncolumn_name } | $action")])],1)],1)],1)],1)],1)],1)])])],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1),t._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),a("p",[t._v("Performs insert, update, or delete operations on a target table based on the results of a join with a source table. For example, you can synchronize two tables by inserting, updating, or deleting rows in one table based on differences found in the other table.")])])}),[],!1,null,null,null);s.default=n.exports}}]);