(window.webpackJsonp=window.webpackJsonp||[]).push([[3135],{3543:function(a,t,e){"use strict";e.r(t);var s=e(31),n=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"activerecord"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#activerecord"}},[a._v("#")]),a._v(" ActiveRecord")]),a._v(" "),e("h2",{attrs:{id:"creating-a-model-via-generator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-model-via-generator"}},[a._v("#")]),a._v(" Creating a Model via generator")]),a._v(" "),e("p",[a._v("Ruby on Rails provides a "),e("code",[a._v("model")]),a._v(" generator you can use to create ActiveRecord models. Simply use "),e("code",[a._v("rails generate model")]),a._v(" and provide the model name.")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[a._v("$ rails g model user\n\n")])])]),e("p",[a._v("In addition to the model file in "),e("code",[a._v("app/models")]),a._v(", the generator will also create:")]),a._v(" "),e("ul",[e("li",[a._v("the Test in "),e("code",[a._v("test/models/user_test.rb")])]),a._v(" "),e("li",[a._v("the Fixtures in "),e("code",[a._v("test/fixtures/users.yml")])]),a._v(" "),e("li",[a._v("the database Migration in "),e("code",[a._v("db/migrate/XXX_create_users.rb")])])]),a._v(" "),e("p",[a._v("You can also generate some fields for the model when generating it.")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[a._v("$ rails g model user email"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":string")]),a._v(" sign_in_count"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":integer")]),a._v(" birthday"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":date")]),a._v("\n\n")])])]),e("p",[a._v("This will create the columns email, sign_in_count and birthday in your database, with the appropriate types.")]),a._v(" "),e("h2",{attrs:{id:"creating-a-model-manually"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-model-manually"}},[a._v("#")]),a._v(" Creating a Model manually")]),a._v(" "),e("p",[a._v("While using scaffolding is a fast and easy if you are new to Rails or you are creating a new application, later it can be useful just to do it on your own ato avoid the need to go through the scaffold-generated code to slim it down (remove unused parts, etc.).")]),a._v(" "),e("p",[a._v("Creating a model can be as simple as creating a file under "),e("code",[a._v("app/models")]),a._v(".")]),a._v(" "),e("p",[a._v("The most simple model, in "),e("code",[a._v("ActiveRecord")]),a._v(", is a class that extends "),e("code",[a._v("ActiveRecord::Base")]),a._v(".")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ActiveRecord")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Base")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("end")]),a._v("\n\n")])])]),e("p",[a._v("Model files are stored in "),e("code",[a._v("app/models/")]),a._v(", and the file name corresponds to the singular name of the class:")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# user")]),a._v("\napp"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("models"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("user"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("rb\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# SomeModel")]),a._v("\napp"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("models"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("some_model"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("rb\n\n")])])]),e("p",[a._v("The class will inherit all the ActiveRecord features: query methods, validations, callbacks, etc.")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Searches the User with ID 1")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("User")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("find"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),e("p",[a._v("Note: Make sure that the table for the corresponding model exists. If not, you can create the table by creating a "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/ruby-on-rails/828/activerecord/2879/creating-a-migration",target:"_blank",rel:"noopener noreferrer"}},[a._v("Migration"),e("OutboundLink")],1)]),a._v(" "),e("p",[a._v("You can generate a model and it's migration by terminal from the following command")]),a._v(" "),e("p",[e("code",[a._v("rails g model column_name1:data_type1, column_name2:data_type2, ...")])]),a._v(" "),e("p",[a._v("and  can also assign foreign key(relationship) to the model by following command")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[a._v("rails g model column_name"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":data_type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" model_name"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":references")]),a._v("\n\n")])])]),e("h2",{attrs:{id:"introduction-to-callbacks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#introduction-to-callbacks"}},[a._v("#")]),a._v(" Introduction to Callbacks")]),a._v(" "),e("p",[a._v("A callback is a method that gets called at specific moments of an object's lifecycle (right before or after creation, deletion, update, validation, saving or loading from the database).")]),a._v(" "),e("p",[a._v("For instance, say you have a listing that expires within 30 days of creation.")]),a._v(" "),e("p",[a._v("One way to do that is like this:")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Listing")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ApplicationRecord")]),a._v("\n  after_create "),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":set_expiry_date")]),a._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token method-definition"}},[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("set_expiry_date")])]),a._v("\n    expiry_date "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Date")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("today "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("30.")]),a._v("days\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("self")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("update_column"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":expires_on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" expiry_date"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("end")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("end")]),a._v("\n\n")])])]),e("p",[a._v("All of the available methods for callbacks are as follows, in the same order that they are called during the operation of each object:")]),a._v(" "),e("p",[e("strong",[a._v("Creating an Object")])]),a._v(" "),e("ul",[e("li",[a._v("before_validation")]),a._v(" "),e("li",[a._v("after_validation")]),a._v(" "),e("li",[a._v("before_save")]),a._v(" "),e("li",[a._v("around_save")]),a._v(" "),e("li",[a._v("before_create")]),a._v(" "),e("li",[a._v("around_create")]),a._v(" "),e("li",[a._v("after_create")]),a._v(" "),e("li",[a._v("after_save")]),a._v(" "),e("li",[a._v("after_commit/after_rollback")])]),a._v(" "),e("p",[e("strong",[a._v("Updating an Object")])]),a._v(" "),e("ul",[e("li",[a._v("before_validation")]),a._v(" "),e("li",[a._v("after_validation")]),a._v(" "),e("li",[a._v("before_save")]),a._v(" "),e("li",[a._v("around_save")]),a._v(" "),e("li",[a._v("before_update")]),a._v(" "),e("li",[a._v("around_update")]),a._v(" "),e("li",[a._v("after_update")]),a._v(" "),e("li",[a._v("after_save")]),a._v(" "),e("li",[a._v("after_commit/after_rollback")])]),a._v(" "),e("p",[e("strong",[a._v("Destroying an Object")])]),a._v(" "),e("ul",[e("li",[a._v("before_destroy")]),a._v(" "),e("li",[a._v("around_destroy")]),a._v(" "),e("li",[a._v("after_destroy")]),a._v(" "),e("li",[a._v("after_commit/after_rollback")])]),a._v(" "),e("p",[e("strong",[e("strong",[a._v("NOTE:")]),a._v(" after_save runs both on create and update, but always after the more specific callbacks after_create and after_update, no matter the order in which the macro calls were executed.")])]),a._v(" "),e("h2",{attrs:{id:"manually-testing-your-models"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#manually-testing-your-models"}},[a._v("#")]),a._v(" Manually Testing Your Models")]),a._v(" "),e("p",[a._v("Testing your Active Record models through your command line interface is simple.\nNavigate to the app directory in your terminal and type in "),e("code",[a._v("rails console")]),a._v(" to start the Rails console. From here, you can run active record methods on your database.")]),a._v(" "),e("p",[a._v("For example, if you had a database schema with a Users table having a "),e("code",[a._v("name:string")]),a._v(" column and "),e("code",[a._v("email:string")]),a._v(", you could run:")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("User")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("create name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"John"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" email"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"john@example.com"')]),a._v("\n\n")])])]),e("p",[a._v("Then, to show that record, you could run:")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("User")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("find_by email"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"john@example.com"')]),a._v("\n\n")])])]),e("p",[a._v("Or if this is your first or only record, you could simply get the first record by running:")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("User")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("first\n\n")])])]),e("h2",{attrs:{id:"creating-a-migration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-migration"}},[a._v("#")]),a._v(" Creating A Migration")]),a._v(" "),e("h3",{attrs:{id:"add-remove-fields-in-existing-tables"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add-remove-fields-in-existing-tables"}},[a._v("#")]),a._v(" Add/remove fields in existing tables")]),a._v(" "),e("p",[a._v("Create a migration by running:")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[a._v("rails generate migration "),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("AddTitleToCategories")]),a._v(" title"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":string")]),a._v("\n\n")])])]),e("p",[a._v("This will create a migration that adds a "),e("code",[a._v("title")]),a._v(" column to a "),e("code",[a._v("categories")]),a._v(" table:")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AddTitleToCategories")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ActiveRecord")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Migration")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5.0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token method-definition"}},[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("change")])]),a._v("\n    add_column "),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":categories")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":title")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":string")]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("end")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("end")]),a._v("\n\n")])])]),e("p",[a._v("Similarly, you can generate a migration to remove a column: "),e("code",[a._v("rails generate migration RemoveTitleFromCategories title:string")])]),a._v(" "),e("p",[a._v("This will create a migration that removes a "),e("code",[a._v("title")]),a._v(" column from the "),e("code",[a._v("categories")]),a._v(" table:")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("RemoveTitleFromCategories")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ActiveRecord")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Migration")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5.0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token method-definition"}},[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("change")])]),a._v("\n    remove_column "),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":categories")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":title")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":string")]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("end")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("end")]),a._v("\n\n")])])]),e("p",[a._v("While, strictly speaking, specifying "),e("strong",[a._v("type")]),a._v(" ("),e("code",[a._v(":string")]),a._v(" in this case) is "),e("strong",[a._v("not necessary")]),a._v(" for removing a column, "),e("strong",[a._v("it's helpful")]),a._v(", since it provides the information necessary for "),e("strong",[a._v("rolling it back")]),a._v(".")]),a._v(" "),e("h3",{attrs:{id:"create-a-table"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-a-table"}},[a._v("#")]),a._v(" Create a table")]),a._v(" "),e("p",[a._v("Create a migration by running:")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[a._v("rails g "),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("CreateUsers")]),a._v(" name bio\n\n")])])]),e("p",[a._v("Rails recognizes the intent to create a table from the "),e("code",[a._v("Create")]),a._v(" prefix, the rest of the migration name will be used as a table name. The given example generates the following:")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CreateUsers")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ActiveRecord")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Migration")]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token method-definition"}},[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("change")])]),a._v("\n    create_table "),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":users")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("t"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("\n      t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("string "),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":name")]),a._v("\n      t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("string "),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":bio")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("end")]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("end")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("end")]),a._v("\n\n")])])]),e("p",[a._v("Notice that the creation command didn't specify types of columns and the default "),e("code",[a._v("string")]),a._v(" was used.")]),a._v(" "),e("h3",{attrs:{id:"create-a-join-table"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-a-join-table"}},[a._v("#")]),a._v(" Create a join table")]),a._v(" "),e("p",[a._v("Create a migration by running:")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[a._v("rails g "),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("CreateJoinTableParticipation")]),a._v(" user"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":references")]),a._v(" group"),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":references")]),a._v("\n\n")])])]),e("p",[a._v("Rails detects the intent to create a join table by finding "),e("code",[a._v("JoinTable")]),a._v(" in migration name. Everything else is determined from the names of the fields you give after the name.")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CreateJoinTableParticipation")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ActiveRecord")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Migration")]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token method-definition"}},[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("change")])]),a._v("\n    create_join_table "),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":users")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":groups")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("t"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# t.index [:user_id, :group_id]")]),a._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# t.index [:group_id, :user_id]")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("end")]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("end")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("end")]),a._v("\n\n")])])]),e("p",[a._v("Uncomment the necessary "),e("code",[a._v("index")]),a._v(" statements and delete the rest.")]),a._v(" "),e("h3",{attrs:{id:"precedence"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#precedence"}},[a._v("#")]),a._v(" Precedence")]),a._v(" "),e("p",[a._v("Notice that the example migration name "),e("code",[a._v("CreateJoinTableParticipation")]),a._v(" matches the rule for table creation: it has a "),e("code",[a._v("Create")]),a._v(" prefix. But it did not generate a simple "),e("code",[a._v("create_table")]),a._v(". This is because migration generator ("),e("a",{attrs:{href:"https://github.com/rails/rails/blob/ff044c3c3a0a85d26d7c000abeeed835a3bee0bf/activerecord/lib/rails/generators/active_record/migration/migration_generator.rb#L19",target:"_blank",rel:"noopener noreferrer"}},[a._v("source code"),e("OutboundLink")],1),a._v(") uses a "),e("strong",[a._v("first match")]),a._v(" of the following list:")]),a._v(" "),e("li",[a._v("\n`(Add|Remove)"),e("ignored",[a._v("(To|From)"),e("table_name",[a._v("`\n")])],1)],1),a._v(" "),e("li",[a._v("\n`"),e("ignored",[a._v("JoinTable"),e("ignored",[a._v("`\n")])],1)],1),a._v(" "),e("li",[a._v("\n`Create"),e("table_name",[a._v("`\n")])],1),a._v(" "),e("h2",{attrs:{id:"create-a-join-table-using-migrations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-a-join-table-using-migrations"}},[a._v("#")]),a._v(" Create a Join Table using Migrations")]),a._v(" "),e("p",[a._v("Specially useful for "),e("code",[a._v("has_and_belongs_to_many")]),a._v(" relation, you can manually create a join table using the "),e("code",[a._v("create_table")]),a._v(" method.\nSuppose you have two models "),e("code",[a._v("Tags")]),a._v(" and "),e("code",[a._v("Proyects")]),a._v(", and you'd like to associate them using a "),e("code",[a._v("has_and_belongs_to_many")]),a._v(" relation. You need a join table to associate instances of both classes.")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CreateProjectsTagsJoinTableMigration")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ActiveRecord")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Migration")]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token method-definition"}},[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("change")])]),a._v("\n    create_table "),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":projects_tags")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("t"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("\n      t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("integer "),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":project_id")]),a._v("\n      t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("integer "),e("span",{pre:!0,attrs:{class:"token symbol"}},[a._v(":tag_id")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("end")]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("end")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("end")]),a._v("\n\n")])])]),e("p",[a._v("The actual name of the table needs to follow this convention: the model which alphabetically precedes the other must go first. "),e("strong",[a._v("P")]),a._v("roject preceds "),e("strong",[a._v("T")]),a._v("ags so the name of the table is projects_tags.")]),a._v(" "),e("p",[a._v("Also since the purpose of this table is to route the association between the instances of two models, the actual id of every record in this table is not necessary. You specify this by passing "),e("code",[a._v("id: false")])]),a._v(" "),e("p",[a._v("Finally, as is convention in Rails, the table name must be the compound plural form of the individual models, but the column of the table must be in singular form.")]),a._v(" "),e("h2",{attrs:{id:"using-a-model-instance-to-update-a-row"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#using-a-model-instance-to-update-a-row"}},[a._v("#")]),a._v(" Using a model instance to update a row")]),a._v(" "),e("p",[a._v("Let's say you have a "),e("code",[a._v("User")]),a._v(" model")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ActiveRecord")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Base")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("end")]),a._v("\n\n")])])]),e("p",[a._v("Now to update the "),e("code",[a._v("first_name")]),a._v(" and "),e("code",[a._v("last_name")]),a._v(" of a user with "),e("code",[a._v("id = 1")]),a._v(", you can write the following code.")]),a._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[a._v("user "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[a._v("User")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("find"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nuser"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("update"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("first_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Kashif'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" last_name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Liaqat'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),e("p",[a._v("Calling "),e("code",[a._v("update")]),a._v(" will attempt to update the given attributes in a single transaction, returning "),e("code",[a._v("true")]),a._v(" if successful and "),e("code",[a._v("false")]),a._v(" if not.")])])}),[],!1,null,null,null);t.default=n.exports}}]);