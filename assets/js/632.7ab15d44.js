(window.webpackJsonp=window.webpackJsonp||[]).push([[632],{1041:function(e,t,a){"use strict";a.r(t);var n=a(31),o=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"compiling-and-building"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compiling-and-building"}},[e._v("#")]),e._v(" Compiling and Building")]),e._v(" "),a("p",[e._v("Programs written in C++ need to be compiled before they can be run. There is a large variety of compilers available depending on your operating system.")]),e._v(" "),a("h2",{attrs:{id:"compiling-with-gcc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compiling-with-gcc"}},[e._v("#")]),e._v(" Compiling with GCC")]),e._v(" "),a("p",[e._v("Assuming a single source file named "),a("code",[e._v("main.cpp")]),e._v(", the command to compile and link an non-optimized executable is as follows (Compiling without optimization is useful for initial development and debugging, although "),a("a",{attrs:{href:"https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#index-Og-723",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("-Og")]),a("OutboundLink")],1),e._v(" is officially recommended for newer GCC versions).")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("g"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("o app "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Wall main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("O0\n\n")])])]),a("p",[e._v("To produce an optimized executable for use in production, use one of the "),a("a",{attrs:{href:"https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#index-O-716",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("-O")]),a("OutboundLink")],1),e._v(" options (see: "),a("a",{attrs:{href:"https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#index-O1-717",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("-O1")]),a("OutboundLink")],1),e._v(", "),a("a",{attrs:{href:"https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#index-O2-718",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("-O2")]),a("OutboundLink")],1),e._v(", "),a("a",{attrs:{href:"https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#index-O3-719",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("-O3")]),a("OutboundLink")],1),e._v(", "),a("a",{attrs:{href:"https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#index-Os-721",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("-Os")]),a("OutboundLink")],1),e._v(", "),a("a",{attrs:{href:"https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#index-Ofast-722",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("-Ofast")]),a("OutboundLink")],1),e._v("):")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("g"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("o app "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Wall "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("O2 main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n\n")])])]),a("p",[e._v("If the -O option is omitted, -O0, which means no optimizations, is used as default (specifying -O without a number resolves to -O1).")]),e._v(" "),a("p",[e._v("Alternatively, use optimization flags from the "),a("code",[e._v("O")]),e._v(" groups (or more experimental optimizations) directly. The following example builds with "),a("code",[e._v("-O2")]),e._v(" optimization, plus one flag from the "),a("code",[e._v("-O3")]),e._v(" optimization level:")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("g"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("o app "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Wall "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("O2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("ftree"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("partial"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("pre main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n\n")])])]),a("p",[e._v("To produce a platform-specific optimized executable (for use in production on the machine with the same architecture), use:")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("g"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("o app "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Wall "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("O2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("march"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("native main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n\n")])])]),a("p",[e._v("Either of the above will produce a binary file that can be run with "),a("code",[e._v(".\\app.exe")]),e._v(" on Windows and "),a("code",[e._v("./app")]),e._v(" on Linux, Mac OS, etc.")]),e._v(" "),a("p",[e._v("The "),a("a",{attrs:{href:"https://gcc.gnu.org/onlinedocs/gcc/Overall-Options.html#index-o-86",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("-o")]),a("OutboundLink")],1),e._v(" flag can also be skipped. In this case, GCC will create default output executable "),a("code",[e._v("a.exe")]),e._v(" on Windows and "),a("code",[e._v("a.out")]),e._v(" on Unix-like systems.\nTo compile a file without linking it, use the "),a("a",{attrs:{href:"https://gcc.gnu.org/onlinedocs/gcc/Overall-Options.html#index-c-82",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("-c")]),a("OutboundLink")],1),e._v(" option:")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("g"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("o file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("o "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Wall "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("c file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n\n")])])]),a("p",[e._v("This produces an object file named "),a("code",[e._v("file.o")]),e._v(" which can later be linked with other files to produce a binary:")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("g"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("o app file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("o otherfile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("o\n\n")])])]),a("p",[e._v("More about optimization options can be found at "),a("a",{attrs:{href:"https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("gcc.gnu.org"),a("OutboundLink")],1),e._v(". Of particular note are "),a("code",[e._v("-Og")]),e._v(" (optimization with an emphasis on debugging experience -- recommended for the standard edit-compile-debug cycle) and "),a("code",[e._v("-Ofast")]),e._v(" (all optimizations, including ones disregarding strict standards compliance).")]),e._v(" "),a("p",[e._v("The "),a("a",{attrs:{href:"https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wall-307",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("-Wall")]),a("OutboundLink")],1),e._v(" flag enables warnings for many common errors and should always be used. To improve code quality it is often encouraged also to use "),a("a",{attrs:{href:"https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wextra-310",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("-Wextra")]),a("OutboundLink")],1),e._v(" and other warning flags which are not automatically enabled by "),a("code",[e._v("-Wall")]),e._v(" and "),a("code",[e._v("-Wextra")]),e._v(".")]),e._v(" "),a("p",[e._v("If the code expects a specific C++ standard, specify which standard to use by including the "),a("a",{attrs:{href:"https://gcc.gnu.org/onlinedocs/gcc/C-Dialect-Options.html#index-std-112",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("-std=")]),a("OutboundLink")],1),e._v(" flag. Supported values correspond to the year of finalization for each version of the ISO C++ standard. As of GCC 6.1.0, valid values for the "),a("code",[e._v("std=")]),e._v(" flag are "),a("code",[e._v("c++98")]),e._v("/"),a("code",[e._v("c++03")]),e._v(", "),a("code",[e._v("c++11")]),e._v(", "),a("code",[e._v("c++14")]),e._v(", and "),a("code",[e._v("c++17")]),e._v("/"),a("code",[e._v("c++1z")]),e._v(". Values separated by a forward slash are equivalent.")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("g"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("11")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("file"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\n")])])]),a("p",[e._v("GCC includes some compiler-specific extensions that are disabled when they conflict with a standard specified by the "),a("code",[e._v("-std=")]),e._v(" flag. To compile with all extensions enabled, the value "),a("code",[e._v("gnu++XX")]),e._v(" may be used, where "),a("code",[e._v("XX")]),e._v(" is any of the years used by the "),a("code",[e._v("c++")]),e._v(" values listed above.")]),e._v(" "),a("p",[e._v("The default standard will be used if none is specified. For versions of GCC prior to 6.1.0, the default is "),a("code",[e._v("-std=gnu++03")]),e._v("; in GCC 6.1.0 and greater, the default is "),a("code",[e._v("-std=gnu++14")]),e._v(".")]),e._v(" "),a("p",[e._v("Note that due to bugs in GCC, the "),a("code",[e._v("-pthread")]),e._v(" flag must be present at compilation and linking for GCC to support the C++ standard threading functionality introduced with C++11, such as "),a("code",[e._v("std::thread")]),e._v(" and "),a("code",[e._v("std::wait_for")]),e._v(". Omitting it when using threading functions may result in "),a("a",{attrs:{href:"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=58929",target:"_blank",rel:"noopener noreferrer"}},[e._v("no warnings but invalid results"),a("OutboundLink")],1),e._v(" on some platforms.")]),e._v(" "),a("h3",{attrs:{id:"linking-with-libraries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linking-with-libraries"}},[e._v("#")]),e._v(" Linking with libraries:")]),e._v(" "),a("p",[e._v("Use the "),a("code",[e._v("-l")]),e._v(" option to pass the library name:")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("g"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v(" main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("lpcre2"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[e._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("pcre")]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v(" is the PCRE2 library "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),e._v("bit code "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("units")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("UTF"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")])])]),e._v("\n\n")])])]),a("p",[e._v("If the library is not in the standard library path, add the path with "),a("code",[e._v("-L")]),e._v(" option:")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("g"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v(" main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("L"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("my"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("custom"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("path"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("lmylib\n\n")])])]),a("p",[e._v("Multiple libraries can be linked together:")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("g"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v(" main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("lmylib1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("lmylib2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("lmylib3\n\n")])])]),a("p",[e._v("If one library depends on another, put the dependent library "),a("strong",[e._v("before")]),e._v(" the independent library:")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("g"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v(" main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("lchild"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("lib "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("lbase"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("lib\n\n")])])]),a("p",[e._v("Or let the linker determine the ordering itself via "),a("code",[e._v("--start-group")]),e._v(" and "),a("code",[e._v("--end-group")]),e._v(" (note: this has significant performance cost):")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("g"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v(" main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Wl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v("start"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("group "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("lbase"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("lib "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("lchild"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("lib "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Wl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v("end"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("group\n\n")])])]),a("h2",{attrs:{id:"compiling-with-visual-studio-graphical-interface-hello-world"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compiling-with-visual-studio-graphical-interface-hello-world"}},[e._v("#")]),e._v(" Compiling with Visual Studio (Graphical Interface) - Hello World")]),e._v(" "),a("ol",[a("li",[e._v("Download and install "),a("a",{attrs:{href:"https://www.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Visual Studio Community 2015"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Open Visual Studio Community\n")]),a("li",[e._v("Click File -> New -> Project\n"),a("a",{attrs:{href:"http://i.stack.imgur.com/bFNzb.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"http://i.stack.imgur.com/bFNzb.png",alt:"enter image description here"}}),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Click Templates -> Visual C++ -> Win32 Console Application and then name the project "),a("strong",[e._v("MyFirstProgram")]),e._v(".\n"),a("a",{attrs:{href:"http://i.stack.imgur.com/kYTy1.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"http://i.stack.imgur.com/kYTy1.png",alt:"enter image description here"}}),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Click Ok\n")]),a("li",[e._v("Click Next in the following window.\n"),a("a",{attrs:{href:"http://i.stack.imgur.com/Rebpz.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"http://i.stack.imgur.com/Rebpz.png",alt:"enter image description here"}}),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Check the "),a("code",[e._v("Empty project")]),e._v(" box and then click Finish:\n"),a("a",{attrs:{href:"http://i.stack.imgur.com/P0P5J.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"http://i.stack.imgur.com/P0P5J.png",alt:"enter image description here"}}),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Right click on folder Source File then -> Add --\x3e New Item :\n"),a("a",{attrs:{href:"http://i.stack.imgur.com/DLwEd.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"http://i.stack.imgur.com/DLwEd.png",alt:"enter image description here"}}),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Select C++ File and name the file main.cpp, then click Add:\n"),a("a",{attrs:{href:"http://i.stack.imgur.com/zQaws.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"http://i.stack.imgur.com/zQaws.png",alt:"enter image description here"}}),a("OutboundLink")],1),e._v("\n10: Copy and paste the following code in the new file main.cpp:")])]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[e._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("include")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("<iostream>")])]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[e._v("::")]),e._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello World!\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n")])])]),a("p",[e._v("You environment should look like:\n"),a("a",{attrs:{href:"http://i.stack.imgur.com/vTBkv.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"http://i.stack.imgur.com/vTBkv.png",alt:"enter image description here"}}),a("OutboundLink")],1)]),e._v(" "),a("ol",[a("li",[e._v("Click Debug -> Start "),a("strong",[e._v("Without")]),e._v(" Debugging (or press ctrl + F5) :")])]),e._v(" "),a("p",[a("a",{attrs:{href:"http://i.stack.imgur.com/B3twO.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"http://i.stack.imgur.com/B3twO.png",alt:"enter image description here"}}),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Done. You should get the following console output :\n["),a("img",{attrs:{src:"http://i.stack.imgur.com/1AwnS.png",alt:"enter image description here"}}),e._v("](http://i.stack.imgur.com/1AwnS.png)")]),e._v(" "),a("h2",{attrs:{id:"online-compilers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#online-compilers"}},[e._v("#")]),e._v(" Online Compilers")]),e._v(" "),a("p",[e._v("Various websites provide online access to C++ compilers. Online compiler's feature set vary significantly from site to site, but usually they allow to do the following:")]),e._v(" "),a("ul",[a("li",[e._v("Paste your code into a web form in the browser.")]),e._v(" "),a("li",[e._v("Select some compiler options and compile the code.")]),e._v(" "),a("li",[e._v("Collect compiler and/or program output.")])]),e._v(" "),a("p",[e._v("Online compiler website behavior is usually quite restrictive as they allow anyone to run compilers and execute arbitrary code on their server side, whereas ordinarily remote arbitrary code execution is considered as vulnerability.")]),e._v(" "),a("p",[e._v("Online compilers may be useful for the following purposes:")]),e._v(" "),a("ul",[a("li",[e._v("Run a small code snippet from a machine which lacks C++ compiler (smartphones, tablets, etc.).")]),e._v(" "),a("li",[e._v("Ensure that code compiles successfully with different compilers and runs the same way regardless the compiler it was compiled with.")]),e._v(" "),a("li",[e._v("Learn or teach basics of C++.")]),e._v(" "),a("li",[e._v("Learn modern C++ features (C++14 and C++17 in near future) when up-to-date C++ compiler is not available on local machine.")]),e._v(" "),a("li",[e._v("Spot a bug in your compiler by comparison with a large set of other compilers. Check if a compiler bug was fixed in future versions, which are unavailable on your machine.")]),e._v(" "),a("li",[e._v("Solve online judge problems.")])]),e._v(" "),a("p",[e._v("What online compilers should "),a("strong",[e._v("not")]),e._v(" be used for:")]),e._v(" "),a("ul",[a("li",[e._v("Develop full-featured (even small) applications using C++. Usually online compilers do not allow to link with third-party libraries or download build artifacts.")]),e._v(" "),a("li",[e._v("Perform intensive computations. Sever-side computing resources are limited, so any user-provided program will be killed after a few seconds of execution. The permitted execution time is usually enough for testing and learning.")]),e._v(" "),a("li",[e._v("Attack compiler server itself or any third-party hosts on the net.")])]),e._v(" "),a("p",[e._v("Examples:")]),e._v(" "),a("blockquote"),e._v(" "),a("p",[e._v("Disclaimer: documentation author(s) are not affiliated with any resources listed below. Websites are listed alphabetically.")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://codepad.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://codepad.org/"),a("OutboundLink")],1),e._v(" Online compiler with code sharing. Editing code after compiling with a source code warning or error does not work so well.")]),e._v(" "),a("li",[a("a",{attrs:{href:"http://coliru.stacked-crooked.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://coliru.stacked-crooked.com/"),a("OutboundLink")],1),e._v(" Online compiler for which you specify the command line.  Provides both GCC and Clang compilers for use.")]),e._v(" "),a("li",[a("a",{attrs:{href:"http://cpp.sh/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://cpp.sh/"),a("OutboundLink")],1),e._v(" - Online compiler with C++14 support. Does not allow you to edit compiler command line, but some options are available via GUI controls.")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://gcc.godbolt.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://gcc.godbolt.org/"),a("OutboundLink")],1),e._v(" - Provides a wide list of compiler versions, architectures, and disassembly output. Very useful when you need to inspect what your code compiles into by different compilers. GCC, Clang, MSVC ("),a("code",[e._v("CL")]),e._v("), Intel compiler ("),a("code",[e._v("icc")]),e._v("), ELLCC, and Zapcc are present, with one or more of these compilers available for the ARM, ARMv8 (as ARM64), Atmel AVR, MIPS, MIPS64, MSP430, PowerPC, x86, and x64 architecutres. Compiler command line arguments may be edited.")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://ideone.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://ideone.com/"),a("OutboundLink")],1),e._v(" - Widely used on the Net to illustrate code snippet behavior.  Provides both GCC and Clang for use, but doesn't allow you to edit the compiler command line.")]),e._v(" "),a("li",[a("a",{attrs:{href:"http://melpon.org/wandbox",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://melpon.org/wandbox"),a("OutboundLink")],1),e._v(" - Supports numerous Clang and GNU/GCC compiler versions.")]),e._v(" "),a("li",[a("a",{attrs:{href:"http://onlinegdb.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://onlinegdb.com/"),a("OutboundLink")],1),e._v(" - An extremely minimalistic IDE that includes an editor, a compiler (gcc), and a debugger (gdb).")]),e._v(" "),a("li",[a("a",{attrs:{href:"http://rextester.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://rextester.com/"),a("OutboundLink")],1),e._v(" - Provides Clang, GCC, and Visual Studio compilers for both C and C++ (along with compilers for other languages), with the Boost library available for use.")]),e._v(" "),a("li",[a("a",{attrs:{href:"http://tutorialspoint.com/compile_cpp11_online.php",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://tutorialspoint.com/compile_cpp11_online.php"),a("OutboundLink")],1),e._v(" - Full-featured UNIX shell with GCC, and a user-friendly project explorer.")]),e._v(" "),a("li",[a("a",{attrs:{href:"http://webcompiler.cloudapp.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://webcompiler.cloudapp.net/"),a("OutboundLink")],1),e._v(" - Online Visual Studio 2015 compiler, provided by Microsoft as part of RiSE4fun.")])]),e._v(" "),a("h2",{attrs:{id:"compiling-with-visual-c-command-line"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compiling-with-visual-c-command-line"}},[e._v("#")]),e._v(" Compiling with Visual C++ (Command Line)")]),e._v(" "),a("p",[e._v("For programmers coming from GCC or Clang to Visual Studio, or programmers more comfortable with the command line in general, you can use the Visual C++ compiler from the command line as well as the IDE.")]),e._v(" "),a("p",[e._v("If you desire to compile your code from the command line in Visual Studio, you first need to set up the command line environment.  This can be done either by opening the "),a("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/f2ccy3wt.aspx#Anchor_0",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("Visual Studio Command Prompt")]),e._v("/"),a("code",[e._v("Developer Command Prompt")]),e._v("/"),a("code",[e._v("x86 Native Tools Command Prompt")]),e._v("/"),a("code",[e._v("x64 Native Tools Command Prompt")]),e._v(" or similar"),a("OutboundLink")],1),e._v(" (as provided by your version of Visual Studio), or at the command prompt, by navigating to the "),a("code",[e._v("VC")]),e._v(" subdirectory of the compiler's install directory (typically "),a("code",[e._v("\\Program Files (x86)\\Microsoft Visual Studio x\\VC")]),e._v(", where "),a("code",[e._v("x")]),e._v(" is the version number (such as "),a("code",[e._v("10.0")]),e._v(" for 2010, or "),a("code",[e._v("14.0")]),e._v(" for 2015) and running the "),a("code",[e._v("VCVARSALL")]),e._v(" batch file with a command-line parameter specified "),a("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/f2ccy3wt.aspx#Anchor_1",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("Note that unlike GCC, Visual Studio doesn't provide a front-end for the linker ("),a("code",[e._v("link.exe")]),e._v(") via the compiler ("),a("code",[e._v("cl.exe")]),e._v("), but instead provides the linker as a separate program, which the compiler calls as it exits.  "),a("code",[e._v("cl.exe")]),e._v(" and "),a("code",[e._v("link.exe")]),e._v(" can be used separately with different files and options, or "),a("code",[e._v("cl")]),e._v(" can be told to pass files and options to "),a("code",[e._v("link")]),e._v(" if both tasks are done together.  Any linking options specified to "),a("code",[e._v("cl")]),e._v(" will be translated into options for "),a("code",[e._v("link")]),e._v(", and any files not processed by "),a("code",[e._v("cl")]),e._v(" will be passed directly to "),a("code",[e._v("link")]),e._v(".  As this is mainly a simple guide to compiling with the Visual Studio command line, arguments for "),a("code",[e._v("link")]),e._v(" will not be described at this time; if you need a list, see "),a("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/y0zzbyt4.aspx",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("Note that arguments to "),a("code",[e._v("cl")]),e._v(" are case-sensitive, while arguments to "),a("code",[e._v("link")]),e._v(" are not.")]),e._v(" "),a("p",[e._v('[Be advised that some of the following examples use the Windows shell "current directory" variable, '),a("code",[e._v("%cd%")]),e._v(", when specifying absolute path names.  For anyone unfamiliar with this variable, it expands to the current working directory.  From the command line, it will be the directory you were in when you ran "),a("code",[e._v("cl")]),e._v(", and is specified in the command prompt by default (if your command prompt is "),a("code",[e._v("C:\\src>")]),e._v(", for example, then "),a("code",[e._v("%cd%")]),e._v(" is "),a("code",[e._v("C:\\src\\")]),e._v(").]")]),e._v(" "),a("p",[e._v("Assuming a single source file named "),a("code",[e._v("main.cpp")]),e._v(" in the current folder, the command to compile and link an unoptimised executable (useful for initial development and debugging) is (use either of the following):")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("cl main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Generates object file "main.obj".')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Performs linking with "main.obj".')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Generates executable "main.exe".')]),e._v("\n\ncl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("Od main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Same as above.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// "/Od" is the "Optimisation: disabled" option, and is the default when no /O is specified.')]),e._v("\n\n")])])]),a("p",[e._v('Assuming an additional source file "niam.cpp" in the same directory, use the following:')]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("cl main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp niam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Generates object files "main.obj" and "niam.obj".')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Performs linking with "main.obj" and "niam.obj".')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Generates executable "main.exe".')]),e._v("\n\n")])])]),a("p",[e._v("You can also use wildcards, as one would expect:")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("cl main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp src\\"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Generates object file "main.obj", plus one object file for each ".cpp" file in folder')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('//  "%cd%\\src".')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Performs linking with "main.obj", and every additional object file generated.')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// All object files will be in the current folder.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Generates executable "main.exe".')]),e._v("\n\n")])])]),a("p",[e._v("To rename or relocate the executable, use one of the following:")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("cl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("o name main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Generates executable named "name.exe".')]),e._v("\n\ncl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("o folder\\ main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Generates executable named "main.exe", in folder "%cd%\\folder".')]),e._v("\n\ncl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("o folder\\name main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Generates executable named "name.exe", in folder "%cd%\\folder".')]),e._v("\n\ncl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("Fename main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Same as "/o name".')]),e._v("\n\ncl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("Fefolder\\ main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Same as "/o folder\\".')]),e._v("\n\ncl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("Fefolder\\name main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Same as "/o folder\\name".')]),e._v("\n\n")])])]),a("p",[e._v("Both "),a("code",[e._v("/o")]),e._v(" and "),a("code",[e._v("/Fe")]),e._v(" pass their parameter (let's call it "),a("code",[e._v("o-param")]),e._v(") to "),a("code",[e._v("link")]),e._v(" as "),a("code",[e._v("/OUT:o-param")]),e._v(", appending the appropriate extension (generally "),a("code",[e._v(".exe")]),e._v(" or "),a("code",[e._v(".dll")]),e._v(') to "name" '),a("code",[e._v("o-param")]),e._v("s as necessary.  While both "),a("code",[e._v("/o")]),e._v(" and "),a("code",[e._v("/Fe")]),e._v(" are to my knowledge identical in functionality, the latter is preferred for Visual Studio.  "),a("code",[e._v("/o")]),e._v(" is marked as deprecated, and appears to mainly be provided for programmers more familiar with GCC or Clang.")]),e._v(" "),a("p",[e._v("Note that while the space between "),a("code",[e._v("/o")]),e._v(" and the specified folder and/or name is optional, there "),a("strong",[e._v("cannot")]),e._v(" be a space between "),a("code",[e._v("/Fe")]),e._v(" and the specified folder and/or name.")]),e._v(" "),a("p",[e._v("Similarly, to produce an optimised executable (for use in production), use:")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("cl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("O1 main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Optimise for executable size.  Produces small programs, at the possible expense of slower")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//  execution.")]),e._v("\n\ncl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("O2 main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Optimise for execution speed.  Produces fast programs, at the possible expense of larger")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//  file size.")]),e._v("\n\ncl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("GL main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Generates special object files used for whole-program optimisation, which allows CL to")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//  take every module (translation unit) into consideration during optimisation.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Passes the option "/LTCG" (Link-Time Code Generation) to LINK, telling it to call CL during')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//  the linking phase to perform additional optimisations.  If linking is not performed at this")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('//  time, the generated object files should be linked with "/LTCG".')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Can be used with other CL optimisation options.")]),e._v("\n\n")])])]),a("p",[e._v("Finally, to produce a platform-specific optimized executable (for use in production on the machine with the specified architecture), choose the appropriate command prompt or "),a("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/x4d2c09s.aspx",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("VCVARSALL")]),e._v(" parameter"),a("OutboundLink")],1),e._v(" for the target platform.  "),a("code",[e._v("link")]),e._v(" should detect the desired platform from the object files; if not, use the "),a("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/5wy54dk2.aspx",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("/MACHINE")]),e._v(" option"),a("OutboundLink")],1),e._v(" to explicitly specify the target platform.")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// If compiling for x64, and LINK doesn't automatically detect target platform:")]),e._v("\ncl main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("link "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("machine"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("X64\n\n")])])]),a("p",[e._v("Any of the above will produce an executable with the name specified by "),a("code",[e._v("/o")]),e._v(" or "),a("code",[e._v("/Fe")]),e._v(", or if neither is provided, with a name identical to the first source or object file specified to the compiler.")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("cl a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Generates "a.exe".')]),e._v("\n\ncl d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("obj a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Generates "d.exe".')]),e._v("\n\ncl y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("lib n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("obj\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Generates "n.exe".')]),e._v("\n\ncl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("o yo zp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("obj pz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Generates "yo.exe".')]),e._v("\n\n")])])]),a("p",[e._v("To compile a file(s) without linking, use:")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("cl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("c main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Generates object file "main.obj".')]),e._v("\n\n")])])]),a("p",[e._v("This tells "),a("code",[e._v("cl")]),e._v(" to exit without calling "),a("code",[e._v("link")]),e._v(", and produces an object file, which can later be linked with other files to produce a binary.")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("cl main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("obj niam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Generates object file "niam.obj".')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Performs linking with "main.obj" and "niam.obj".')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Generates executable "main.exe".')]),e._v("\n\nlink main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("obj niam"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("obj\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Performs linking with "main.obj" and "niam.obj".')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Generates executable "main.exe".')]),e._v("\n\n")])])]),a("p",[e._v("There are other valuable command line parameters as well, which it would be very useful for users to know:")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("cl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("EHsc main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// "/EHsc" specifies that only standard C++ ("synchronous") exceptions will be caught,')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('//  and `extern "C"` functions will not throw exceptions.')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// This is recommended when writing portable, platform-independent code.")]),e._v("\n\ncl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("clr main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// "/clr" specifies that the code should be compiled to use the common language runtime,')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//  the .NET Framework's virtual machine.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Enables the use of Microsoft\'s C++/CLI language in addition to standard ("native") C++,')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//  and creates an executable that requires .NET to run.")]),e._v("\n\ncl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("Za main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// "/Za" specifies that Microsoft extensions should be disabled, and code should be')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//  compiled strictly according to ISO C++ specifications.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// This is recommended for guaranteeing portability.")]),e._v("\n\ncl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("Zi main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// "/Zi" generates a program database (PDB) file for use when debugging a program, without')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('//  affecting optimisation specifications, and passes the option "/DEBUG" to LINK.')]),e._v("\n\ncl "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("LD dll"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// "/LD" tells CL to configure LINK to generate a DLL instead of an executable.')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// LINK will output a DLL, in addition to an LIB and EXP file for use when linking.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// To use the DLL in other programs, pass its associated LIB to CL or LINK when compiling those")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//  programs.")]),e._v("\n\ncl main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("link "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("LINKER_OPTION\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// "/link" passes everything following it directly to LINK, without parsing it in any way.')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// Replace "/LINKER_OPTION" with any desired LINK option(s).')]),e._v("\n\n")])])]),a("p",[e._v("For anyone more familiar with *nix systems and/or GCC/Clang, "),a("code",[e._v("cl")]),e._v(", "),a("code",[e._v("link")]),e._v(", and other Visual Studio command line tools can accept parameters specified with a hyphen (such as "),a("code",[e._v("-c")]),e._v(") instead of a slash (such as "),a("code",[e._v("/c")]),e._v(").  Additionally, Windows recognises either a slash or a backslash as a valid path separator, so *nix-style paths can be used as well.  This makes it easy to convert simple compiler command lines from "),a("code",[e._v("g++")]),e._v(" or "),a("code",[e._v("clang++")]),e._v(" to "),a("code",[e._v("cl")]),e._v(", or vice versa, with minimal changes.")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("g"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("o app src"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\ncl  "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("o app src"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n\n")])])]),a("p",[e._v("Of course, when porting command lines that use more complex "),a("code",[e._v("g++")]),e._v(" or "),a("code",[e._v("clang++")]),e._v(" options, you need to look up equivalent commands in the applicable compiler documentations and/or on resource sites, but this makes it easier to get things started with minimal time spent learning about new compilers.")]),e._v(" "),a("p",[e._v("In case you need specific language features for your code, a specific release of MSVC was required. From "),a("a",{attrs:{href:"https://blogs.msdn.microsoft.com/vcblog/2016/06/07/standards-version-switches-in-the-compiler/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Visual C++ 2015 Update 3"),a("OutboundLink")],1),e._v(" on it is possible to choose the version of the standard to compile with via the "),a("code",[e._v("/std")]),e._v(" flag. Possible values are "),a("code",[e._v("/std:c++14")]),e._v(" and "),a("code",[e._v("/std:c++latest")]),e._v(" ("),a("code",[e._v("/std:c++17")]),e._v(" will follow soon).")]),e._v(" "),a("p",[e._v("Note: In older versions of this compiler, specific feature flags were available however this was mostly used for previews of new features.")]),e._v(" "),a("h2",{attrs:{id:"compiling-with-clang"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compiling-with-clang"}},[e._v("#")]),e._v(" Compiling with Clang")]),e._v(" "),a("p",[e._v("As the "),a("a",{attrs:{href:"http://clang.llvm.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Clang"),a("OutboundLink")],1),e._v(" front-end is designed for being compatible with GCC, most programs that can be compiled via "),a("a",{attrs:{href:"https://stackoverflow.com/documentation/c%2B%2B/206/introduction-to-c/1334/compiling-with-gcc",target:"_blank",rel:"noopener noreferrer"}},[e._v("GCC"),a("OutboundLink")],1),e._v(" will compile when you swap "),a("code",[e._v("g++")]),e._v(" by "),a("code",[e._v("clang++")]),e._v(" in the build scripts. If no "),a("code",[e._v("-std=version")]),e._v(" is given, gnu11 will be used.")]),e._v(" "),a("p",[e._v("Windows users who are used to "),a("a",{attrs:{href:"https://stackoverflow.com/documentation/c%2B%2B/206/introduction-to-c/5959/compiling-with-visual-c-command-line",target:"_blank",rel:"noopener noreferrer"}},[e._v("MSVC"),a("OutboundLink")],1),e._v(" can swap "),a("code",[e._v("cl.exe")]),e._v(" with "),a("code",[e._v("clang-cl.exe")]),e._v(". By default, clang tries to be compatible with the highest version of MSVC that has been installed.")]),e._v(" "),a("p",[e._v("In the case of compiling with visual studio, clang-cl can be used by changing the "),a("code",[e._v("Platform toolset")]),e._v(" in the project properties.")]),e._v(" "),a("p",[e._v("In both cases, clang is only compatible via its front-end, though it also tries to generate binary compatible object files. Users of clang-cl should note that "),a("a",{attrs:{href:"http://clang.llvm.org/docs/MSVCCompatibility.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("the compatibility with MSVC is not complete yet"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("To use clang or clang-cl, one could use the default installation on certain Linux distributions or those bundled with IDEs (like XCode on Mac). For other versions of this compiler or on platforms which don't have this installed, this can be download from the "),a("a",{attrs:{href:"http://llvm.org/releases/download.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("official download page"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("If you're using CMake to build your code you can usually switch the compiler by setting the "),a("code",[e._v("CC")]),e._v(" and "),a("code",[e._v("CXX")]),e._v(" environment variables like this:")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("mkdir build\ncd build\nCC"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("clang CXX"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("clang"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v(" cmake "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\ncmake "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),e._v("build "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n\n")])])]),a("p",[e._v("See also "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/cmake/862/introduction-to-cmake#t=201608042347032067346",target:"_blank",rel:"noopener noreferrer"}},[e._v("introduction to Cmake"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"the-c-compilation-process"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-c-compilation-process"}},[e._v("#")]),e._v(" The C++ compilation process")]),e._v(" "),a("p",[e._v("When you develop a C++ program, the next step is to compile the program before running it. The compilation is the process which converts the program written in human readable language like C, C++ etc into a machine code, directly understood by the Central Processing Unit.  For example, if you have a C++ source code file named prog.cpp and you execute the compile command,")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n  g++ -Wall -ansi -o prog prog.cpp\n\n")])])]),a("p",[e._v("There are 4 main stages involved in creating an executable file from the source file.")]),e._v(" "),a("li",[e._v("\nThe C++ the preprocessor takes a C++ source code file and deals with the headers(#include), macros(#define) and other preprocessor directives.\n")]),e._v(" "),a("li",[a("p",[e._v("The expanded C++ source code file produced by the C++ preprocessor is\ncompiled into the assembly language for the platform.")])]),e._v(" "),a("li",[a("p",[e._v("The assembler code generated by the compiler is assembled into the\nobject code for the platform.")])]),e._v(" "),a("li",[a("p",[e._v("The object code file produced by the assembler is linked together"),a("br"),e._v("\nwith the object code files for any library functions used to produce\neither a library or an executable file.")])]),e._v(" "),a("p",[a("strong",[e._v("Preprocessing")])]),e._v(" "),a("p",[e._v("The preprocessor handles the preprocessor directives, like #include and #define. It is agnostic of the syntax of C++, which is why it must be used with care.")]),e._v(" "),a("p",[e._v("It works on one C++ source file at a time by replacing #include directives with the content of the respective files (which is usually just declarations), doing replacement of macros (#define), and selecting different portions of text depending of #if, #ifdef and #ifndef directives.")]),e._v(" "),a("p",[e._v("The preprocessor works on a stream of preprocessing tokens. Macro substitution is defined as replacing tokens with other tokens (the operator ## enables merging two tokens when it make sense).")]),e._v(" "),a("p",[e._v("After all this, the preprocessor produces a single output that is a stream of tokens resulting from the transformations described above. It also adds some special markers that tell the compiler where each line came from so that it can use those to produce sensible error messages.")]),e._v(" "),a("p",[e._v("Some errors can be produced at this stage with clever use of the #if and #error directives.")]),e._v(" "),a("p",[e._v("By using below compiler flag, we can stop the process at preprocessing stage.")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("g"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("E prog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n\n")])])]),a("p",[a("strong",[e._v("Compilation")])]),e._v(" "),a("p",[e._v("The compilation step is performed on each output of the preprocessor. The compiler parses the pure C++ source code (now without any preprocessor directives) and converts it into assembly code. Then invokes underlying back-end(assembler in toolchain) that assembles that code into machine code producing actual binary file in some format(ELF, COFF, a.out, ...). This object file contains the compiled code (in binary form) of the symbols defined in the input. Symbols in object files are referred to by name.")]),e._v(" "),a("p",[e._v("Object files can refer to symbols that are not defined. This is the case when you use a declaration, and don't provide a definition for it. The compiler doesn't mind this, and will happily produce the object file as long as the source code is well-formed.")]),e._v(" "),a("p",[e._v("Compilers usually let you stop compilation at this point. This is very useful because with it you can compile each source code file separately. The advantage this provides is that you don't need to recompile everything if you only change a single file.")]),e._v(" "),a("p",[e._v("The produced object files can be put in special archives called static libraries, for easier reusing later on.")]),e._v(" "),a("p",[e._v('It\'s at this stage that "regular" compiler errors, like syntax errors or failed overload resolution errors, are reported.')]),e._v(" "),a("p",[e._v("In order to stop the process after the compile step, we can use the -S option:")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("g"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Wall "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("ansi "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("S prog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n\n")])])]),a("p",[a("strong",[e._v("Assembling")])]),e._v(" "),a("p",[e._v("The assembler creates object code. On a UNIX system you may see files with a .o suffix (.OBJ on MSDOS) to indicate object code files. In this phase the assembler converts those object files from assembly code into machine level instructions and the file created is a relocatable object code. Hence, the compilation phase generates the relocatable object program and this program can be used in different places without having to compile again.")]),e._v(" "),a("p",[e._v("To stop the process after the assembly step, you can use the -c option:")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("g"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Wall "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("ansi "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("c prog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cpp\n\n")])])]),a("p",[a("strong",[e._v("Linking")])]),e._v(" "),a("p",[e._v("The linker is what produces the final compilation output from the object files the assembler produced. This output can be either a shared (or dynamic) library (and while the name is similar, they don't have much in common with static libraries mentioned earlier) or an executable.")]),e._v(" "),a("p",[e._v("It links all the object files by replacing the references to undefined symbols with the correct addresses. Each of these symbols can be defined in other object files or in libraries. If they are defined in libraries other than the standard library, you need to tell the linker about them.")]),e._v(" "),a("p",[e._v("At this stage the most common errors are missing definitions or duplicate definitions. The former means that either the definitions don't exist (i.e. they are not written), or that the object files or libraries where they reside were not given to the linker. The latter is obvious: the same symbol was defined in two different object files or libraries.")]),e._v(" "),a("h2",{attrs:{id:"compiling-with-code-blocks-graphical-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compiling-with-code-blocks-graphical-interface"}},[e._v("#")]),e._v(" Compiling with Code::Blocks (Graphical interface)")]),e._v(" "),a("li",[e._v("\nDownload and install Code::Blocks [here](http://www.codeblocks.org/downloads/binaries). If you're on Windows, be careful to select a file for which the name contains `mingw`, the other files don't install any compiler.\n")]),e._v(" "),a("li",[e._v('\nOpen Code::Blocks and click on "Create a new project":\n['),a("img",{attrs:{src:"https://i.stack.imgur.com/z4Oll.png",alt:"enter image description here"}}),e._v("](https://i.stack.imgur.com/z4Oll.png)\n")]),e._v(" "),a("li",[e._v('\nSelect "Console application" and click "Go":\n['),a("img",{attrs:{src:"https://i.stack.imgur.com/0wBAn.png",alt:"enter image description here"}}),e._v("](https://i.stack.imgur.com/0wBAn.png)\n")]),e._v(" "),a("li",[e._v('\nClick "Next", select "C++", click "Next", select a name for your project and choose a folder to save it in, click "Next" and then click "Finish".\n')]),e._v(" "),a("li",[e._v('\nNow you can edit and compile your code. A default code that prints "Hello world!" in the console is already there. To compile and/or run your program, press one of the three compile/run buttons in the toolbar:\n['),a("img",{attrs:{src:"https://i.stack.imgur.com/wCmdw.png",alt:"enter image description here"}}),e._v("](https://i.stack.imgur.com/wCmdw.png)\nTo compile without running, press ["),a("img",{attrs:{src:"https://i.stack.imgur.com/gOkY9.png",alt:"Build"}}),e._v("](https://i.stack.imgur.com/gOkY9.png), to run without compiling again, press ["),a("img",{attrs:{src:"https://i.stack.imgur.com/eLjbt.png",alt:"Run"}}),e._v("](https://i.stack.imgur.com/eLjbt.png) and to compile and then run, press ["),a("img",{attrs:{src:"https://i.stack.imgur.com/Zgyi8.png",alt:"Build and run"}}),e._v('](https://i.stack.imgur.com/Zgyi8.png).\nCompiling and running the default "Hello world!" code gives the following result:\n['),a("img",{attrs:{src:"https://i.stack.imgur.com/qbVy8.png",alt:"enter image description here"}}),e._v("](https://i.stack.imgur.com/qbVy8.png)\n")]),e._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[e._v("#")]),e._v(" Remarks")]),e._v(" "),a("p",[e._v("Most operating systems ship without a compiler, and they have to be installed later. Some common compilers choices are:")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://gcc.gnu.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("GCC, the GNU Compiler Collection"),a("OutboundLink")],1),e._v(" "),a("a",{attrs:{href:"/questions/tagged/g%2b%2b"}},[e._v("g++")])]),e._v(" "),a("li",[a("a",{attrs:{href:"http://clang.llvm.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("clang: a C language family frontend for LLVM"),a("OutboundLink")],1),e._v(" "),a("a",{attrs:{href:"/questions/tagged/clang%2b%2b"}},[e._v("clang++")])]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("MSVC, Microsoft Visual C++ (included in Visual Studio)"),a("OutboundLink")],1),e._v(" "),a("a",{attrs:{href:"/questions/tagged/visual-c%2b%2b"}},[e._v("visual-c++")])]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.embarcadero.com/products/cbuilder",target:"_blank",rel:"noopener noreferrer"}},[e._v("C++Builder, Embarcadero C++Builder"),a("OutboundLink")],1),e._v(" (included in RAD Studio) "),a("a",{attrs:{href:"/questions/tagged/c%2b%2bbuilder"}},[e._v("c++builder")])])]),e._v(" "),a("p",[e._v("Please consult the appropriate compiler manual, on how to compile a C++ program.")]),e._v(" "),a("p",[e._v("Another option to use a specific compiler with its own specific build system, it is possible to let generic "),a("a",{attrs:{href:"https://stackoverflow.com/documentation/c%2B%2B/8200/build-systems",target:"_blank",rel:"noopener noreferrer"}},[e._v("build systems"),a("OutboundLink")],1),e._v(" configure the project for a specific compiler or for the default installed one.")])])}),[],!1,null,null,null);t.default=o.exports}}]);