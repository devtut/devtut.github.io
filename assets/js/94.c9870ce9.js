(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{502:function(e,a,s){"use strict";s.r(a);var t=s(31),n=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"android-kernel-optimization"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#android-kernel-optimization"}},[e._v("#")]),e._v(" Android Kernel Optimization")]),e._v(" "),s("h2",{attrs:{id:"low-ram-configuration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#low-ram-configuration"}},[e._v("#")]),e._v(" Low RAM Configuration")]),e._v(" "),s("p",[e._v("Android now supports devices with 512MB of RAM. This documentation is intended to help OEMs optimize and configure Android 4.4 for low-memory devices. Several of these optimizations are generic enough that they can be applied to previous releases as well.")]),e._v(" "),s("p",[s("strong",[e._v("Enable Low Ram Device flag")])]),e._v(" "),s("p",[e._v("We are introducing a new API called ActivityManager.isLowRamDevice() for applications to determine if they should turn off specific memory-intensive features that work poorly on low-memory devices.")]),e._v(" "),s("p",[e._v('For 512MB devices, this API is expected to return: "true" It can be enabled by the following system property in the device makefile.')]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[e._v("PRODUCT_PROPERTY_OVERRIDES "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+=")]),e._v(" ro"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("low_ram"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n\n")])])]),s("p",[s("strong",[e._v("Disable JIT")])]),e._v(" "),s("p",[e._v("System-wide JIT memory usage is dependent on the number of applications running and the code footprint of those applications. The JIT establishes a maximum translated code cache size and touches the pages within it as needed. JIT costs somewhere between 3M and 6M across a typical running system.")]),e._v(" "),s("p",[e._v("The large apps tend to max out the code cache fairly quickly (which by default has been 1M). On average, JIT cache usage runs somewhere between 100K and 200K bytes per app. Reducing the max size of the cache can help somewhat with memory usage, but if set too low will send the JIT into a thrashing mode. For the really low-memory devices, we recommend the JIT be disabled entirely.")]),e._v(" "),s("p",[e._v("This can be achieved by adding the following line to the product makefile:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[e._v("PRODUCT_PROPERTY_OVERRIDES "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+=")]),e._v(" dalvik"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("jit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("codecachesize"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n\n")])])]),s("h2",{attrs:{id:"how-to-add-a-cpu-governor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#how-to-add-a-cpu-governor"}},[e._v("#")]),e._v(" How to add a CPU Governor")]),e._v(" "),s("p",[e._v("The CPU governor itself is just 1 C file, which is located in  kernel_source/drivers/cpufreq/,  for example: cpufreq_smartass2.c. You are responsible yourself for find the governor (look in an existing kernel repo for your device)\nBut in order to successfully call and compile this file into your kernel you will have to make the following changes:")]),e._v(" "),s("ol",[s("li",[e._v("Copy your governor file (cpufreq_govname.c) and browse to  kernel_source/drivers/cpufreq, now paste it.")]),e._v(" "),s("li",[e._v("and open Kconfig (this is the interface of the config menu layout) when adding a kernel, you want it to show up in your config. You can do that by adding the choice of governor.")])]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[e._v("config CPU_FREQ_GOV_GOVNAMEHERE\ntristate "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"'gov_name_lowercase' cpufreq governor\"")]),e._v("\ndepends on CPU_FREQ\nhelp\ngovernor' "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v(" a custom governor"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("\n\n")])])]),s("p",[e._v("for example, for smartassV2.")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[e._v("config CPU_FREQ_GOV_SMARTASS2\n tristate "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"'smartassV2' cpufreq governor\"")]),e._v("\n depends on CPU_FREQ\n help\n "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'smartassV2'")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v(" a "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"smart"')]),e._v(" optimized governor"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" \n\n")])])]),s("p",[e._v("next to adding the choice, you also must declare the possibility that the governor gets chosen as default governor.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("\nconfig CPU_FREQ_DEFAULT_GOV_GOVNAMEHERE\n bool \"gov_name_lowercase\"\n select CPU_FREQ_GOV_GOVNAMEHERE\n help\n Use the CPUFreq governor 'govname' as default.\n\n")])])]),s("p",[e._v("for example, for smartassV2.")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[e._v("config CPU_FREQ_DEFAULT_GOV_SMARTASS2\n bool "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"smartass2"')]),e._v("\n select CPU_FREQ_GOV_SMARTASS2\n help\n "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Use")]),e._v(" the "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("CPUFreq")]),e._v(" governor "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'smartassV2'")]),e._v(" as "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("default")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n\n")])])]),s("p",[e._v("– can’t find the right place to put it? Just search for  "),s("code",[e._v("“CPU_FREQ_GOV_CONSERVATIVE”")]),e._v(",  and place the code beneath, same thing counts for "),s("code",[e._v("“CPU_FREQ_DEFAULT_GOV_CONSERVATIVE”")])]),e._v(" "),s("p",[e._v("Now that Kconfig is finished you can save and close the file.")]),e._v(" "),s("li",[e._v("While still in the `/drivers/cpufreq` folder, open Makefile.\nIn Makefile, add the line corresponding to your CPU Governor. for example:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[e._v("obj"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("CONFIG_CPU_FREQ_GOV_SMARTASS2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("    "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+=")]),e._v(" cpufreq_smartass2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("o\n\n")])])]),s("p",[e._v("Be ware that you do not call the native C file, but the O file! which is the compiled C file. Save the file.")]),e._v(" "),s("li",[e._v("Move to:  `kernel_source/includes/linux`.  Now open `cpufreq.h`\nScroll down until you see something like:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[e._v("#elif "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("defined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n extern struct cpufreq_governor cpufreq_gov_ondemand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n #define CPUFREQ_DEFAULT_GOVERNOR    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("amp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("cpufreq_gov_ondemand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n")])])]),s("p",[e._v("(other cpu governors are also listed there)")]),e._v(" "),s("p",[e._v("Now add your entry with the selected CPU Governor, example:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[e._v("#elif "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("defined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("CONFIG_CPU_FREQ_DEFAULT_GOV_SMARTASS2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n extern struct cpufreq_governor cpufreq_gov_smartass2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n #define CPUFREQ_DEFAULT_GOVERNOR "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("amp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("cpufreq_gov_smartass2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n")])])]),s("p",[e._v("Save the file and close it.")]),e._v(" "),s("p",[e._v("The initial CPU Governor setup is now complete. when you’ve done all steps successfully, you should be able to choose your governor from the menu ("),s("code",[e._v("menuconfig")]),e._v(", "),s("code",[e._v("xconfig")]),e._v(", "),s("code",[e._v("gconfig")]),e._v(", "),s("code",[e._v("nconfig")]),e._v("). Once checked in the menu it will be included to the kernel.")]),e._v(" "),s("p",[e._v("Commit that is nearly the same as above instructions:  "),s("a",{attrs:{href:"https://github.com/broodplank/samsung-kernel-msm7x30/commit/bd319103c20c9a9357852d6f535aaa999cee867a",target:"_blank",rel:"noopener noreferrer"}},[e._v("Add smartassV2 and lulzactive governor commit"),s("OutboundLink")],1)]),e._v(" "),s("h2",{attrs:{id:"i-o-schedulers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-o-schedulers"}},[e._v("#")]),e._v(" I/O Schedulers")]),e._v(" "),s("p",[e._v("You can enhance your kernel by adding new I/O schedulers if needed. Globally, governors and schedulers are the same; they both provide a way how the system should work. However, for the schedulers it is all about the input/output datastream except for the CPU settings. I/O schedulers decide how an upcoming I/O activity will be scheduled. The standard schedulers such as "),s("strong",[e._v("noop")]),e._v(" or "),s("strong",[e._v("cfq")]),e._v(" are performing very reasonably.")]),e._v(" "),s("p",[e._v("I/O schedulers can be found in "),s("strong",[e._v("kernel_source/block")]),e._v(".")]),e._v(" "),s("li",[e._v("\nCopy your I/O scheduler file (for example, **sio-iosched.c**) and browse to **kernel_source/block**. Paste the scheduler file there.\n")]),e._v(" "),s("li",[e._v("\nNow open **Kconfig.iosched** and add your choice to the **Kconfig**, for example for **SIO**:\n"),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[e._v("config IOSCHED_SIO\n  tristate "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Simple I/O scheduler"')]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("default")]),e._v(" y\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("help"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("The")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Simple")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("I")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("O")]),e._v(" scheduler is an extremely simple scheduler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    based on noop and deadline"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" that relies on deadlines "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("to")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("ensure")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("fairness"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")])]),e._v(" The")]),e._v(" algorithm does not "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("do")]),e._v(" any sorting but\n    basic merging"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" trying "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("to")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("keep")]),e._v(" a minimum "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("overhead"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")])]),e._v(" It")]),e._v(" is aimed\n    mainly "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" aleatory access devices "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("eg"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" flash devices"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n\n")])])])]),e._v(" "),s("li",[e._v("\nThen set the default choice option as follows:\n"),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("default")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"sio"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" DEFAULT_SIO\n\n")])])]),s("p",[e._v("Save the file.\n")])]),e._v(" "),s("li",[e._v("\nOpen the "),s("strong",[e._v("Makefile")]),e._v(" in "),s("strong",[e._v("kernel_source/block/")]),e._v(" and simply add the following line for "),s("strong",[e._v("SIO")]),e._v(":"),s("p"),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[e._v("obj"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("CONFIG_IOSCHED_SIO"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("    "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+=")]),e._v(" sio"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("iosched"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("o\n\n")])])]),s("p",[e._v("Save the file and you are done! The I/O schedulers should now pop up at the menu config.\n")])]),s("p"),e._v(" "),s("p",[e._v("Similar commit on GitHub: "),s("a",{attrs:{href:"https://github.com/broodplank/samsung-kernel-msm7x30/commit/8c13ea91070ff072a64de4358d0429e35697678d",target:"_blank",rel:"noopener noreferrer"}},[e._v("added Simple I/O scheduler"),s("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);a.default=n.exports}}]);