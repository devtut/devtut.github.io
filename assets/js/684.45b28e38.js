(window.webpackJsonp=window.webpackJsonp||[]).push([[684],{1091:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"operator-precedence"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operator-precedence"}},[t._v("#")]),t._v(" operator precedence")]),t._v(" "),a("h2",{attrs:{id:"logical-and-operators-short-circuit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logical-and-operators-short-circuit"}},[t._v("#")]),t._v(" Logical && and || operators: short-circuit")]),t._v(" "),a("p",[t._v("&& has precedence over ||, this means that parentheses are placed to evaluate what would be evaluated together.")]),t._v(" "),a("p",[t._v("c++ uses short-circuit evaluation in && and || to not do unnecessary executions."),a("br"),t._v("\nIf the left hand side of || returns true the right hand side does not need to be evaluated anymore.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<string>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"True"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"False"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//let's evaluate 3 booleans with || and && to illustrate operator precedence")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//precedence does not mean that && will be evaluated first but rather where    ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//parentheses would be added")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//example 1")]),t._v("\n    result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// eq. False("A") || (False("B") && False("C"))')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//FalseA")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//FalseB")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"Short-circuit evaluation skip of C"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//A is false so we have to evaluate the right of ||,")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//B being false we do not have to evaluate C to know that the result is false")]),t._v("\n    \n\n    \n    result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// eq. True("A") || (False("B") && False("C"))')]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" :====================="')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//TrueA")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"Short-circuit evaluation skip of B"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"Short-circuit evaluation skip of C"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//A is true so we do not have to evaluate ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        the right of || to know that the result is true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//If || had precedence over && the equivalent evaluation would be:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// (True("A") || False("B")) && False("C")')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//What would print")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//TrueA")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"Short-circuit evaluation skip of B"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//FalseC")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Because the parentheses are placed differently ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//the parts that get evaluated are differently")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//which makes that the end result in this case would be False because C is false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"arithmetic-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arithmetic-operators"}},[t._v("#")]),t._v(" Arithmetic operators")]),t._v(" "),a("p",[t._v("Arithmetic operators in C++ have the same precedence as they do in mathematics:")]),t._v(" "),a("p",[t._v("Multiplication and division have left associativity(meaning that they will be evaluated from left to right) and they have higher precedence than addition and subtraction, which also have left associativity.")]),t._v(" "),a("p",[t._v("We can also force the precedence of expression using parentheses "),a("code",[t._v("(")]),t._v(" "),a("code",[t._v(")")]),t._v(". Just the same way as you would do that in normal mathematics.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// volume of a spherical shell = 4 pi R^3 - 4 pi r^3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" vol "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("R"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("R"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("R"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pi"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Addition:")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// equal to: 2+(4/2)         result: 4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// equal to: (3+3)/2         result: 3")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//With Multiplication")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// equal to: 3+((4/2)*6)     result: 15")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// equal to: (3*(3+6))/9     result: 3")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Division and Modulo")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" g "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// equal to: 3 % 1 = 0  3 - 0 = 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// equal to: 3 % 1 = 0  3 - 0 = 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// equal to: 3 / 1 = 3  3 % 3 = 0  3 - 0 = 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// equal to: 3 / 1 = 3  3 % 3 = 0  3 - 0 = 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// equal to: 1 % 3 = 1  3 / 1 = 3  3 - 3 = 0")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"logical-and-and-or-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logical-and-and-or-operators"}},[t._v("#")]),t._v(" Logical AND and OR operators")]),t._v(" "),a("p",[t._v("These operators have the usual precedence in C++: AND before OR.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// You can drive with a foreign license for up to 60 days")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" can_drive "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" has_domestic_license "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" has_foreign_license "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" num_days "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("This code is equivalent to the following:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// You can drive with a foreign license for up to 60 days")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" can_drive "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" has_domestic_license "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("has_foreign_license "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" num_days "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("Adding the parenthesis does not change the behavior, though, it does make it easier to read. By adding these parentheses, no confusion exist about the intent of the writer.")]),t._v(" "),a("h2",{attrs:{id:"unary-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unary-operators"}},[t._v("#")]),t._v(" Unary Operators")]),t._v(" "),a("p",[t._v("Unary operators act on the object upon which they are called and have high precedence. (See Remarks)")]),t._v(" "),a("p",[t._v("When used postfix, the action occurs only after the entire operation is evaluated, leading to some interesting arithmetics:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// result: 2")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// result: 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" minusa"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// result: -1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// result: true")]),t._v("\n\na"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// equal to: (a==4) 4 / 2   result: 2 ('a' incremented postfix)")]),t._v("\ncout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prints 5!")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// equal to: (a+1) == 6 / 2 result: 3")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// points to arr[0] which is 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ptr1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ptr2 points to arr[0] which is still 1; ptr1 incremented")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prints  2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// receives the value of arr[0] before it is incremented")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prints 1")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prints arr[0] which is now 2")]),t._v("\n\n")])])]),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),a("p",[t._v("Operators are listed top to bottom, in descending precedence. Operators with the same number have equal precedence and the same associativity.")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("::")])]),t._v(" "),a("li",[t._v("The postfix operators: "),a("code",[t._v("[]")]),t._v(" "),a("code",[t._v("()")]),t._v(" "),a("code",[t._v("T(...)")]),t._v(" "),a("code",[t._v(".")]),t._v(" "),a("code",[t._v("->")]),t._v(" "),a("code",[t._v("++")]),t._v(" "),a("code",[t._v("--")]),t._v(" "),a("code",[t._v("dynamic_cast")]),t._v(" "),a("code",[t._v("static_cast")]),t._v(" "),a("code",[t._v("reinterpret_cast")]),t._v(" "),a("code",[t._v("const_cast")]),t._v(" "),a("code",[t._v("typeid")])]),t._v(" "),a("li",[t._v("The unary prefix operators: "),a("code",[t._v("++")]),t._v(" "),a("code",[t._v("--")]),t._v(" "),a("code",[t._v("*")]),t._v(" "),a("code",[t._v("&")]),t._v(" "),a("code",[t._v("+")]),t._v(" "),a("code",[t._v("-")]),t._v(" "),a("code",[t._v("!")]),t._v(" "),a("code",[t._v("~")]),t._v(" "),a("code",[t._v("sizeof")]),t._v(" "),a("code",[t._v("new")]),t._v(" "),a("code",[t._v("delete")]),t._v(" "),a("code",[t._v("delete[]")]),t._v("; the C-style cast notation, "),a("code",[t._v("(T)...")]),t._v(";  (C++11 and above) "),a("code",[t._v("sizeof...")]),t._v(" "),a("code",[t._v("alignof")]),t._v(" "),a("code",[t._v("noexcept")])]),t._v(" "),a("li",[a("code",[t._v(".*")]),t._v(" and "),a("code",[t._v("->*")])]),t._v(" "),a("li",[a("code",[t._v("*")]),t._v(", "),a("code",[t._v("/")]),t._v(", and "),a("code",[t._v("%")]),t._v(", binary arithmetic operators")]),t._v(" "),a("li",[a("code",[t._v("+")]),t._v(" and "),a("code",[t._v("-")]),t._v(", binary arithmetic operators")]),t._v(" "),a("li",[a("code",[t._v("<<")]),t._v(" and "),a("code",[t._v(">>")])]),t._v(" "),a("li",[a("code",[t._v("<")]),t._v(", "),a("code",[t._v(">")]),t._v(", "),a("code",[t._v("<=")]),t._v(", "),a("code",[t._v(">=")])]),t._v(" "),a("li",[a("code",[t._v("==")]),t._v(" and "),a("code",[t._v("!=")])]),t._v(" "),a("li",[a("code",[t._v("&")]),t._v(", the bitwise AND operator")]),t._v(" "),a("li",[a("code",[t._v("^")])]),t._v(" "),a("li",[a("code",[t._v("|")])]),t._v(" "),a("li",[a("code",[t._v("&&")])]),t._v(" "),a("li",[a("code",[t._v("||")])]),t._v(" "),a("li",[a("code",[t._v("?:")]),t._v(" (ternary conditional operator)")]),t._v(" "),a("li",[a("code",[t._v("=")]),t._v(", "),a("code",[t._v("*=")]),t._v(", "),a("code",[t._v("/=")]),t._v(", "),a("code",[t._v("%=")]),t._v(", "),a("code",[t._v("+=")]),t._v(", "),a("code",[t._v("-=")]),t._v(", "),a("code",[t._v(">>=")]),t._v(", "),a("code",[t._v("<<=")]),t._v(", "),a("code",[t._v("&=")]),t._v(", "),a("code",[t._v("^=")]),t._v(", "),a("code",[t._v("|=")])]),t._v(" "),a("li",[a("code",[t._v("throw")])]),t._v(" "),a("li",[a("code",[t._v(",")]),t._v(" (the comma operator)")])]),t._v(" "),a("p",[t._v("The assignment, compound assignment, and ternary conditional operators are right-associative. All other binary operators are left-associative.")]),t._v(" "),a("p",[t._v("The rules for the ternary conditional operator are a bit more complicated than simple precedence rules can express.")]),t._v(" "),a("ul",[a("li",[t._v("An operand binds less tightly to a "),a("code",[t._v("?")]),t._v(" on its left or a "),a("code",[t._v(":")]),t._v(" on its right than to any other operator. Effectively, the second operand of the conditional operator is parsed as though it is parenthesized. This allows an expression such as "),a("code",[t._v("a ? b , c : d")]),t._v(" to be syntactically valid.")]),t._v(" "),a("li",[t._v("An operand binds more tightly to a "),a("code",[t._v("?")]),t._v(" on its right than to an assignment operator or "),a("code",[t._v("throw")]),t._v(" on its left, so "),a("code",[t._v("a = b ? c : d")]),t._v(" is equivalent to "),a("code",[t._v("a = (b ? c : d)")]),t._v(" and "),a("code",[t._v("throw a ? b : c")]),t._v(" is equivalent to "),a("code",[t._v("throw (a ? b : c)")]),t._v(".")]),t._v(" "),a("li",[t._v("An operand binds more tightly to an assignment operator on its right than to "),a("code",[t._v(":")]),t._v(" on its left, so "),a("code",[t._v("a ? b : c = d")]),t._v(" is equivalent to "),a("code",[t._v("a ? b : (c = d)")]),t._v(".")])])])}),[],!1,null,null,null);s.default=n.exports}}]);