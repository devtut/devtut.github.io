(window.webpackJsonp=window.webpackJsonp||[]).push([[3179],{3587:function(t,s,a){"use strict";a.r(s);var n=a(31),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"rails-on-docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rails-on-docker"}},[t._v("#")]),t._v(" Rails on docker")]),t._v(" "),a("p",[t._v("This tutorial will start with Docker installed and with a Rails app")]),t._v(" "),a("h2",{attrs:{id:"docker-and-docker-compose"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-and-docker-compose"}},[t._v("#")]),t._v(" Docker and docker-compose")]),t._v(" "),a("p",[t._v("First of all, we will need to create our "),a("code",[t._v("Dockerfile")]),t._v(". A good example can be found on this "),a("a",{attrs:{href:"https://nickjanetakis.com/blog/dockerize-a-rails-5-postgres-redis-sidekiq-action-cable-app-with-docker-compose",target:"_blank",rel:"noopener noreferrer"}},[t._v("blog"),a("OutboundLink")],1),t._v(" by Nick Janetakis.")]),t._v(" "),a("p",[t._v("This code contains the script that will be executed on our docker machine at the moment of start.For this reason, we are installing all the required libraries and ends with the start of Puma (RoR dev server)")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Use the barebones version of Ruby 2.3.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FROM")]),t._v(" ruby"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.3")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("slim\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optionally set a maintainer name to let people know who made this image.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAINTAINER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Nick")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Janetakis")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("nick"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("janetakis"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@gmail")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Install dependencies:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - build-essential: To ensure certain gems can be compiled")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - nodejs: Compile assets")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - libpq-dev: Communicate with postgres through the postgres gem")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RUN")]),t._v(" apt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("get update "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" apt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("get install "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("qq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("no"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("install"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("recommends \\\n      build"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("essential nodejs libpq"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("dev git\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set an environment variable to store where the app is installed to inside")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# of the Docker image. The name matches the project name out of convention only.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ENV")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("INSTALL_PATH")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("mh"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("backend\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RUN")]),t._v(" mkdir "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$INSTALL_PATH")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This sets the context of where commands will be running in and is documented")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# on Docker's website extensively.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WORKDIR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$INSTALL_PATH")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# We want binstubs to be available so we can directly call sidekiq and")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# potentially other binaries as command overrides without depending on")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# bundle exec.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COPY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Gemfile")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$INSTALL_PATH")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ENV")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BUNDLE_GEMFILE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$INSTALL_PATH")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Gemfile")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ENV")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BUNDLE_JOBS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ENV")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BUNDLE_PATH")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("gembox\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RUN")]),t._v(" bundle install\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Copy in the application code from your work station at the current directory")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# over to the working directory.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COPY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Ensure the static assets are exposed to a volume so that nginx can read")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# in these values later.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VOLUME")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$INSTALL_PATH/public"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ENV")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RAILS_LOG_TO_STDOUT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The default command that gets run will be to start the Puma server.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CMD")]),t._v(" bundle exec puma "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),t._v(" config"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("puma"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rb\n\n")])])]),a("p",[t._v("Also, we will use docker-compose, for that, we will create "),a("code",[t._v("docker-compose.yml")]),t._v(".\nThe explanation of this file will be more a docker-compose tutorial than an integration with Rails and I will not cover here.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),t._v("\n\nservices"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  backend"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    links"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#whatever you need to link like db")]),t._v("\n    build"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("scripts"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sh\n    ports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3000:3000'")]),t._v("\n    volumes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("backend\n    volumes_from"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" gembox\n    env_file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("docker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env\n    stdin_open"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    tty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n")])])]),a("p",[t._v("Just with these two files you will have enough to run "),a("code",[t._v("docker-compose up")]),t._v(" and wake up your docker")])])}),[],!1,null,null,null);s.default=e.exports}}]);