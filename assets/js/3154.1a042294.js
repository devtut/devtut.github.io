(window.webpackJsonp=window.webpackJsonp||[]).push([[3154],{3562:function(t,a,e){"use strict";e.r(a);var s=e(31),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"file-uploads"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#file-uploads"}},[t._v("#")]),t._v(" File Uploads")]),t._v(" "),e("h2",{attrs:{id:"single-file-upload-using-carrierwave"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#single-file-upload-using-carrierwave"}},[t._v("#")]),t._v(" Single file upload using Carrierwave")]),t._v(" "),e("p",[t._v("Start using File Uploads in Rails is quite simple, first thing you have to do is to choice plugin for managing uploads. The most common onces are "),e("strong",[t._v("Carrierwave")]),t._v(" and "),e("strong",[t._v("Paperclip")]),t._v(". Both are similar in functionality and rich in documentation on")]),t._v(" "),e("p",[t._v("Let's have an look on example with simple avatar upload image with Carrierwave")]),t._v(" "),e("p",[t._v("After "),e("code",[t._v("bundle install")]),t._v(" Carrierwave, type in console")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[t._v("$ rails generate uploader "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ProfileUploader")]),t._v("\n\n")])])]),e("p",[t._v("This will create an config file located at "),e("strong",[t._v("/app/uploaders/profile_uploader.rb")])]),t._v(" "),e("p",[t._v("Here you can set up storage (i.e local or cloud), apply extensions for image manipulations (i.e. generting thumbs via MiniMagick) and set server-side extension white list")]),t._v(" "),e("p",[t._v("Next, create new migration with string tipe for user_pic and mount uploader for it in "),e("strong",[t._v("user.rb")]),t._v(" model.")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[t._v("mount_uploader "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":user_pic")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ProfileUploader")]),t._v("\n\n")])])]),e("p",[t._v("Next, display an form to upload avatar (may be an edit view for the user)")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" form_for "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@user")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" html"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" multipart"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("f"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("%>\n    <%= f.file_field :user_pic, accept: 'image/png, image/jpg' %>")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" f"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("submit "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"update profile pic"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"btn"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("%>\n<% end %>")]),t._v("\n\n")])])]),e("p",[t._v("Make sure to include { multipart: true } in order form can process uploads. Accept is an optional to set client-side extension white-list.")]),t._v(" "),e("p",[t._v("To display an avatar, simply do")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" image_tag "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@user")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user_pic"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("url "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"nested-model-multiple-uploads"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nested-model-multiple-uploads"}},[t._v("#")]),t._v(" Nested model - multiple uploads")]),t._v(" "),e("p",[t._v("If you want to create multiple uploads, first thing you might want to do is create new model and set up relations")]),t._v(" "),e("p",[t._v("Let's say you want an multiple images for the Product model. Create an new model and make it "),e("code",[t._v("belongs_to")]),t._v(" your parent model")]),t._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[t._v("rails g model "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ProductPhoto")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#product.rb")]),t._v("\nhas_many "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":product_photos")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dependent"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":destroy")]),t._v("\naccepts_nested_attributes_for "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":product_photos")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#product_photo.rb")]),t._v("\nbelongs_to "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":product")]),t._v("\nmount_uploader "),e("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":image_url")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ProductPhotoUploader")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# make sure to include uploader (Carrierwave example)")]),t._v("\n\n")])])]),e("p",[e("strong",[t._v("accepts_nested_attributes_for")]),t._v(" is must, because it allow us to create nested form, so we can upload new file, change product name and set price from an single form")]),t._v(" "),e("p",[t._v("Next, create form in a view (edit/create)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\n   <%= form_for @product, html: { multipart: true } do |product|%>\n\n        <%= product.text_field :price # just normal type of field %>\n\n        <%= product.fields_for :product_photos do |photo| # nested fields %>\n            <%= photo.file_field :image, :multiple => true, name: "product_photos[image_url][]" %>\n        <% end %>\n        <%= p.submit "Update", class: "btn" %>\n    <% end %>\n\n')])])]),e("p",[t._v("Controller is nothing special, if you don't want to create an new one, just make an new one inside your product controller")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n # create an action\n  def upload_file\n    printer = Product.find_by_id(params[:id])\n    @product_photo = printer.prodcut_photos.create(photo_params)\n  end\n\n  # strong params\n  private\n    def photo_params\n      params.require(:product_photos).permit(:image)\n    end\n\n")])])]),e("p",[t._v("Display all images in a view")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n   <% @product.product_photos.each do |i| %>\n        <%= image_tag i.image.url, class: 'img-rounded' %>\n    <% end %>\n\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);