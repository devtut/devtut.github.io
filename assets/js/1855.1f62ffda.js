(window.webpackJsonp=window.webpackJsonp||[]).push([[1855],{2263:function(t,a,s){"use strict";s.r(a);var e=s(31),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"null-safety"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#null-safety"}},[t._v("#")]),t._v(" Null Safety")]),t._v(" "),s("h2",{attrs:{id:"smart-casts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#smart-casts"}},[t._v("#")]),t._v(" Smart casts")]),t._v(" "),s("p",[t._v("If the compiler can infer that an object can't be null at a certain point, you don't have to use the special operators anymore:")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello!"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Compile error")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The compiler now knows that string can't be null")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// It works now!")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("blockquote"),t._v(" "),s("p",[s("strong",[t._v("Note:")]),t._v(" The compiler won't allow you to smart cast mutable variables that could potentially be modified between the null-check and the intended usage.\nIf a variable is accessible from outside the scope of the current block (because they are members of a non-local object, for example), you need to create a new, local reference which you can then smart cast and use.")]),t._v(" "),s("h2",{attrs:{id:"assertion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assertion"}},[t._v("#")]),t._v(" Assertion")]),t._v(" "),s("p",[s("code",[t._v("!!")]),t._v(" suffixes ignore nullability and returns a non-null version of that type. "),s("code",[t._v("KotlinNullPointerException")]),t._v(" will be thrown if the object is a "),s("code",[t._v("null")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" message"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//KotlinNullPointerException thrown, app crashes")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"nullable-and-non-nullable-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nullable-and-non-nullable-types"}},[t._v("#")]),t._v(" Nullable and Non-Nullable types")]),t._v(" "),s("p",[t._v("Normal types, like "),s("code",[t._v("String")]),t._v(", are not nullable. To make them able to hold null values, you have to explicitly denote that by putting a "),s("code",[t._v("?")]),t._v(" behind them: "),s("code",[t._v("String?")])]),t._v(" "),s("h2",{attrs:{id:"eliminate-nulls-from-an-iterable-and-array"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eliminate-nulls-from-an-iterable-and-array"}},[t._v("#")]),t._v(" Eliminate nulls from an Iterable and array")]),t._v(" "),s("p",[t._v("Sometimes we need to change type from "),s("code",[t._v("Collection<T?>")]),t._v(" to "),s("code",[t._v("Collections<T>")]),t._v(". In that case, "),s("code",[t._v("filterNotNull")]),t._v(" is our solution.")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" List"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Int"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" List"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Int"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("filterNotNull")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"null-coalescing-elvis-operator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#null-coalescing-elvis-operator"}},[t._v("#")]),t._v(" Null Coalescing / Elvis Operator")]),t._v(" "),s("p",[t._v("Sometimes it is desirable to evaluate a nullable expression in an if-else fashion. The elvis operator, "),s("code",[t._v("?:")]),t._v(", can be used in Kotlin for such a situation.")]),t._v(" "),s("p",[t._v("For instance:")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("first")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Nothing here."')]),t._v("\n\n")])])]),s("p",[t._v("The expression above returns "),s("code",[t._v('"Nothing here"')]),t._v(" if "),s("code",[t._v("data?.first()")]),t._v(" or "),s("code",[t._v("data")]),t._v(" itself yield a "),s("code",[t._v("null")]),t._v(" value else the result of "),s("code",[t._v("data?.first()")]),t._v(".")]),t._v(" "),s("p",[t._v("It is also possible to throw exceptions using the same syntax to abort code execution.")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("second")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IllegalArgumentException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Value can\'t be null!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("blockquote"),t._v(" "),s("p",[t._v("Reminder: NullPointerExceptions can be thrown using the "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/kotlin/2080/null-safety/12693/assertion",target:"_blank",rel:"noopener noreferrer"}},[t._v("assertion operator"),s("OutboundLink")],1),t._v(" (e.g. "),s("code",[t._v("data!!.second()!!")]),t._v(")")]),t._v(" "),s("h2",{attrs:{id:"safe-call-operator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#safe-call-operator"}},[t._v("#")]),t._v(" Safe call operator")]),t._v(" "),s("p",[t._v("To access functions and properties of nullable types, you have to use special operators.")]),t._v(" "),s("p",[t._v("The first one, "),s("code",[t._v("?.")]),t._v(", gives you the property or function you're trying to access, or it gives you null if the object is null:")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("apply"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("code"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" like "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n```kotlin\nobj"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("This will call "),s("code",[t._v("foo")]),t._v(" and "),s("code",[t._v("bar")]),t._v(" on "),s("code",[t._v("obj")]),t._v(" (which is "),s("code",[t._v("this")]),t._v(" in the "),s("code",[t._v("apply")]),t._v(" block) only if "),s("code",[t._v("obj")]),t._v(" is non-null, skipping the entire block otherwise.")]),t._v(" "),s("p",[t._v("To bring a nullable variable into scope as a non-nullable reference without making it the implicit receiver of function and property calls, you can use "),s("a",{attrs:{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/let.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("let")]),s("OutboundLink")],1),t._v(" instead of "),s("code",[t._v("apply")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("nullable"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("let")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" notnull "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("\n    notnull"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    notnull"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[s("code",[t._v("notnull")]),t._v(" could be named anything, or even left out and used through "),s("a",{attrs:{href:"https://stackoverflow.com/documentation/kotlin/1280/functions/4199/lambda-functions",target:"_blank",rel:"noopener noreferrer"}},[t._v("the implicit lambda parameter "),s("code",[t._v("it")]),t._v("."),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"elvis-operator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#elvis-operator"}},[t._v("#")]),t._v(" Elvis Operator (?😃")]),t._v(" "),s("p",[t._v("In Kotlin, we can declare variable which can hold "),s("code",[t._v("null reference")]),t._v(".\nSuppose we have a nullable reference "),s("code",[t._v("a")]),t._v(', we can say "if '),s("code",[t._v("a")]),t._v(" is not null, use it, otherwise use some non-null value "),s("code",[t._v("x")]),t._v('"')]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Nullable String Value"')]),t._v("\n\n")])])]),s("p",[t._v("Now, "),s("code",[t._v("a")]),t._v(" can be null. So when we need to access value of "),s("code",[t._v("a")]),t._v(", then we need to perform safety check, whether it contains value or not. We can perform this safety check by conventional "),s("code",[t._v("if...else")]),t._v(" statement.")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n")])])]),s("p",[t._v("But here comes advance operator "),s("code",[t._v("Elvis")]),t._v("(Operator Elvis : "),s("code",[t._v("?:")]),t._v("). Above "),s("code",[t._v("if...else")]),t._v(" can be expressed with the Elvis operator as below:")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n")])])]),s("p",[t._v("If the expression to the left of "),s("code",[t._v("?:")]),t._v(" (here : "),s("code",[t._v("a?.length")]),t._v(") is not null, the elvis operator returns it, otherwise it returns the expression to the right (here: "),s("code",[t._v("-1")]),t._v("). Right-hand side expression is evaluated only if the left-hand side is null.")])])}),[],!1,null,null,null);a.default=n.exports}}]);