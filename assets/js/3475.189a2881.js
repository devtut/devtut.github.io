(window.webpackJsonp=window.webpackJsonp||[]).push([[3475],{3883:function(s,t,a){"use strict";a.r(t);var e=a(31),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"introduction-to-syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction-to-syntax"}},[s._v("#")]),s._v(" Introduction to Syntax")]),s._v(" "),a("h2",{attrs:{id:"intellisense-helper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#intellisense-helper"}},[s._v("#")]),s._v(" Intellisense Helper")]),s._v(" "),a("p",[s._v("One interesting thing is the ability to add you own comments into Visual Studio Intellisense. So you can make your own written functions and classes self-explanatory. To do so, you must type the comment symbol three times the line above your function.")]),s._v(" "),a("p",[s._v("Once done, Visual Studio will automatically add an XML documentation :")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("''' <summary>")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("''' This function returns a hello to your name")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("''' </summary>")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("''' <param name=\"Name\">Your Name</param>")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("''' <returns></returns>")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("''' <remarks></remarks>")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v(" Test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello "')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" Name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v("\n\n")])])]),a("p",[s._v("After that, if you type in your Test function somewhere in your code, this little help will show up :")]),s._v(" "),a("p",[a("a",{attrs:{href:"http://i.stack.imgur.com/0RsEi.png",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"http://i.stack.imgur.com/0RsEi.png",alt:"Intellisense Help"}}),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"declaring-a-variable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#declaring-a-variable"}},[s._v("#")]),s._v(" Declaring a Variable")]),s._v(" "),a("p",[s._v("In VB.NET, every variable must be declared before it is used (If "),a("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/y9341s4f.aspx",target:"_blank",rel:"noopener noreferrer"}},[s._v("Option Explicit"),a("OutboundLink")],1),s._v(" is set to "),a("strong",[s._v("On")]),s._v("). There are two ways of declaring variables:")]),s._v(" "),a("ul",[a("li",[s._v("Inside a "),a("code",[s._v("Function")]),s._v(" or a "),a("code",[s._v("Sub")]),s._v(":")])]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" w "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'Declares a variable named w of type Object (invalid if Option Strict is On)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'Declares a variable named x of type String")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("45")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'Declares a variable named y of type Long and assigns it the value 45")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" z "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("45")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'Declares a variable named z whose type is inferred")]),s._v("\n           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'from the type of the assigned value (Integer here) (if Option Infer is On)")]),s._v("\n           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'otherwise the type is Object (invalid if Option Strict is On)")]),s._v("\n           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'and assigns that value (45) to it ")]),s._v("\n\n")])])]),a("p",[s._v("See "),a("a",{attrs:{href:"http://stackoverflow.com/a/2489467/256431",target:"_blank",rel:"noopener noreferrer"}},[s._v("this answer"),a("OutboundLink")],1),s._v(" for full details about "),a("code",[s._v("Option Explicit")]),s._v(", "),a("code",[s._v("Strict")]),s._v(" and "),a("code",[s._v("Infer")]),s._v(".")]),s._v(" "),a("ul",[a("li",[s._v("Inside a "),a("code",[s._v("Class")]),s._v(" or a "),a("code",[s._v("Module")]),s._v(":")])]),s._v(" "),a("p",[s._v("These variables (also called fields in this context) will be accessible for each instance of the "),a("code",[s._v("Class")]),s._v(" they are declared in. They might be accessible from outside the declared "),a("code",[s._v("Class")]),s._v(" depending on the modifier ("),a("code",[s._v("Public")]),s._v(", "),a("code",[s._v("Private")]),s._v(", "),a("code",[s._v("Protected")]),s._v(", "),a("code",[s._v("Protected Friend")]),s._v(" or "),a("code",[s._v("Friend")]),s._v(")")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Private")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'Declares a private field named x of type Object (invalid if Option Strict is On)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'Declares a public field named y of type String")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Friend")]),s._v(" z "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("45")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'Declares a friend field named z of type Integer and assigns it the value 45")]),s._v("\n\n")])])]),a("p",[s._v("These fields can also be declared with "),a("code",[s._v("Dim")]),s._v(" but the meaning changes depending on the enclosing type:")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Class")]),s._v(" SomeClass\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" z "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("45")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' Same meaning as Private z As Integer = 45")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Class")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Structure")]),s._v(" SomeStructure\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' Same meaning as Public y As String")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Structure")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"comments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comments"}},[s._v("#")]),s._v(" Comments")]),s._v(" "),a("p",[s._v("The first interesting thing to know is how to write comments.")]),s._v(" "),a("p",[s._v("In VB .NET, you write a comment by writing an apostrophe ' or writing "),a("code",[s._v("REM")]),s._v(". This means the rest of the line will not be taken into account by the compiler.")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'This entire line is a comment")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'This comment is here to say we give 0 value to x")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("REM")]),s._v(" There are no such things as multiline comments")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'So we have to start everyline with the apostrophe or REM")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"modifiers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#modifiers"}},[s._v("#")]),s._v(" Modifiers")]),s._v(" "),a("p",[s._v("Modifiers are a way to indicate how external objects can access an object's data.")]),s._v(" "),a("ul",[a("li",[s._v("Public")])]),s._v(" "),a("p",[s._v("Means any object can access this without restriction")]),s._v(" "),a("ul",[a("li",[s._v("Private")])]),s._v(" "),a("p",[s._v("Means only the declaring object can access and view this")]),s._v(" "),a("ul",[a("li",[s._v("Protected")])]),s._v(" "),a("p",[s._v("Means only the declaring object and any object that inherits from it can access and view this.")]),s._v(" "),a("ul",[a("li",[s._v("Friend")])]),s._v(" "),a("p",[s._v("Means only the delcaring object, any object that inherits from it and any object in the same namespace can access and view this.")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MyClass")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Private")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Friend")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Property")]),s._v(" Hello "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),s._v("\n  \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Protected")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v(" Test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Class")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"writing-a-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#writing-a-function"}},[s._v("#")]),s._v(" Writing a function")]),s._v(" "),a("p",[s._v("A function is a block of code that will be called several times during the execution. Instead of writing the same piece of code again and again, one can write this code inside a function and call that function whenever it is needed.")]),s._v(" "),a("p",[s._v("A function :")]),s._v(" "),a("ul",[a("li",[s._v("Must be declared in a "),a("strong",[s._v("class")]),s._v(" or a "),a("strong",[s._v("module")])]),s._v(" "),a("li",[s._v("Returns a value (specified by the return type)")]),s._v(" "),a("li",[s._v("Has a "),a("strong",[s._v("modifier")])]),s._v(" "),a("li",[s._v("Can take parameters to do its processing")])]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v(" AddNumbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("X "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Y "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Return")]),s._v(" X "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" Y\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v("\n\n")])])]),a("p",[s._v("A Function Name, could be used as the return statement")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v(" sealBarTypeValidation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Boolean")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" err "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v(" rbSealBarType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("SelectedValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Then")]),s._v("\n        err "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Return")]),s._v(" err\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v("\n\n")])])]),a("p",[s._v("is just the same as")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v(" sealBarTypeValidation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Boolean")]),s._v("\n    sealBarTypeValidation "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("        \n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v(" rbSealBarType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("SelectedValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Then")]),s._v("\n        sealBarTypeValidation "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"object-initializers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-initializers"}},[s._v("#")]),s._v(" Object Initializers")]),s._v(" "),a("li",[s._v("\nNamed Types\n"),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" someInstance "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" SomeClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("argument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("With")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Member1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Member2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value2\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'...")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])]),a("p",[s._v("Is equivalent to")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" someInstance "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" SomeClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("argument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n someInstance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Member1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value1\n someInstance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Member2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value2\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'...")]),s._v("\n\n")])])])]),s._v(" "),a("li",[s._v("\nAnonymous Types **(Option Infer must be On)**\n"),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[s._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" anonymousInstance "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("With")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Member1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Member2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value2\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'...")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])]),a("p",[s._v("Although similar "),a("code",[s._v("anonymousInstance")]),s._v(" doesn't have same type as "),a("code",[s._v("someInstance")]),s._v("\nMember name must be unique in the anonymous type, and can be taken from a variable or another object member name")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[s._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" anonymousInstance "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("With")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      value1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      value2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value3\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'...")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' usage : anonymousInstance.value1 or anonymousInstance.value3")]),s._v("\n\n")])])]),a("p",[s._v("Each member can be preceded by the "),a("code",[s._v("Key")]),s._v(" keyword. Those members will be "),a("code",[s._v("ReadOnly")]),s._v(" properties, those without will be read/write properties")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[s._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" anonymousInstance "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("With")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      Key value1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Member2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      Key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Member3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value3\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'...")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])]),a("p",[s._v("Two anonymous instance defined with the same members (name, type, presence of "),a("code",[s._v("Key")]),s._v(" and order) will have the same anonymous type.")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[s._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" anon1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("With")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" Key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Value "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" anon2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("With")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" Key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Value "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  anon1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GetType")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Is")]),s._v(" anon2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GetType")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' True")]),s._v("\n\n")])])]),a("p",[s._v("Anonymous types are structurally equatable. Two instance of the same anonymous types having at least one "),a("code",[s._v("Key")]),s._v(" property with the same "),a("code",[s._v("Key")]),s._v(" values will be equal. You have to use "),a("code",[s._v("Equals")]),s._v(" method to test it, using "),a("code",[s._v("=")]),s._v(" won't compile and "),a("code",[s._v("Is")]),s._v(" will compare the object reference.")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[s._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" anon1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("With")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" Key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Salary "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" anon2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("With")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" Key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Bar"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Salary "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" anon3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("With")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" Key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Salary "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  anon1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Equals"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("anon2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' False")]),s._v("\n  anon1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Equals"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("anon3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' True although non-Key Salary isn't the same")]),s._v("\n\n")])])])]),s._v(" "),a("p",[s._v("Both Named and Anonymous types initializer can be nested and mixed")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n   Dim anonymousInstance = New With {\n        value,\n        Key .someInstance = New SomeClass(argument) With {\n            .Member1 = value1,\n            .Member2 = value2\n            '...\n        }\n        '...\n    }\n\n")])])]),a("h2",{attrs:{id:"collection-initializer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collection-initializer"}},[s._v("#")]),s._v(" Collection Initializer")]),s._v(" "),a("li",[s._v("\nArrays\n"),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" names "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Bar"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' Inferred as String()")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" numbers "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' Inferred as Integer()")]),s._v("\n\n")])])])]),s._v(" "),a("li",[s._v("\nContainers (`List(Of T)`, `Dictionary(Of TKey, TValue)`, etc.)\n"),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" names "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" From "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Bar"')]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'...")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" indexedDays "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" Dictionary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" From "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Sun"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Mon"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'...")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])]),a("p",[s._v("Is equivalent to")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" indexedDays "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" Dictionary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n indexedDays"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Sun"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n indexedDays"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Mon"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'...")]),s._v("\n\n")])])]),a("p",[s._v("Items can be the result of a constructor, a method call, a property access. It can also be mixed with Object initializer.")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" someList "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" SomeClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" From "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" SomeClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("argument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" SomeClass "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("With")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Member "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n     otherClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("PropertyReturningSomeClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n     FunctionReturningSomeClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'...")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])]),a("p",[s._v("It is not possible to use Object initializer syntax "),a("strong",[s._v("AND")]),s._v(" collection initializer syntax for the same object at the same time. For example, these "),a("strong",[s._v("won't")]),s._v(" work")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" numbers "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("With")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Capacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("_")]),s._v("\n                                     From "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" numbers "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" From "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Capacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" numbers "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("With")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Capacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])])]),s._v(" "),a("li",[s._v("\nCustom Type\n"),a("p",[s._v("We can also allow collection initializer syntax by providing for a custom type."),a("br"),s._v("\nIt must implement `IEnumerable` and have an accessible and compatible by overload rules `Add` method (instance, Shared or even extension method)")]),s._v("\n**Contrived example :**\n"),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Class")]),s._v(" Person\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Implements")]),s._v(" IEnumerable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' Inherits from IEnumerable")]),s._v("\n\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ReadOnly")]),s._v(" relationships "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n         relationships "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" Add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("relationName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n         relationships"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("relationName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" Iterator "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v(" GetEnumerator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" IEnumerator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("_")]),s._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Implements")]),s._v(" IEnumerable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("GetEnumerator\n\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("For")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Each")]),s._v(" relation "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("In")]),s._v(" relationships\n             Yield relation\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Next")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v("\n\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v(" IEnumerable_GetEnumerator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" IEnumerator "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("_")]),s._v(" \n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Implements")]),s._v(" IEnumerable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("GetEnumerator\n\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Return")]),s._v(" GetEnumerator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Class")]),s._v("\n\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' Usage")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" somePerson "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" From "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"FriendName"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"CoWorkerName"')]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'...")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])]),a("p",[s._v("If we wanted to add Person object to a "),a("code",[s._v("List(Of Person)")]),s._v(" by just putting the name in the collection initializer (but we can't modify the List(Of Person) class) we can use an Extension method")]),s._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' Inside a Module")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Runtime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("CompilerServices"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Extension"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" Add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("target "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n     target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' Usage")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" people "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" From "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Name1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' no need to create Person object here")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Name2"')]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);