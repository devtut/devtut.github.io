(window.webpackJsonp=window.webpackJsonp||[]).push([[479],{887:function(a,s,t){"use strict";t.r(s);var e=t(31),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"bash-parameter-expansion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bash-parameter-expansion"}},[a._v("#")]),a._v(" Bash Parameter Expansion")]),a._v(" "),t("p",[a._v("The "),t("code",[a._v("$")]),a._v(" character introduces parameter expansion, command substitution, or arithmetic expansion. The parameter name or symbol to be expanded may be enclosed in braces, which are optional but serve to protect the variable to be expanded from characters immediately following it which could be interpreted as part of the name.")]),a._v(" "),t("p",[a._v("Read more in the "),t("a",{attrs:{href:"https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Bash User Manual"),t("OutboundLink")],1),a._v(".")]),a._v(" "),t("h2",{attrs:{id:"modifying-the-case-of-alphabetic-characters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#modifying-the-case-of-alphabetic-characters"}},[a._v("#")]),a._v(" Modifying the case of alphabetic characters")]),a._v(" "),t("p",[a._v("To uppercase")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("v")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Just the first character")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${v"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("^")]),a._v("}")]),a._v('"')]),a._v("\nHello\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# All characters")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${v"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("^^")]),a._v("}")]),a._v('"')]),a._v("\nHELLO\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Alternative")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("v")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello world"')]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("declare")]),a._v(" -u "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("string")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$v")]),a._v('"')]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$string")]),a._v('"')]),a._v("\nHELLO WORLD\n\n")])])]),t("p",[a._v("To lowercase")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("v")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"BYE"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Just the first character")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${v"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(",")]),a._v("}")]),a._v('"')]),a._v("\nbYE\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# All characters")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${v"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(",,")]),a._v("}")]),a._v('"')]),a._v("\nbye\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Alternative")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("v")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"HELLO WORLD"')]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("declare")]),a._v(" -l "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("string")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$v")]),a._v('"')]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$string")]),a._v('"')]),a._v("\nhello world\n\n")])])]),t("p",[a._v("Toggle Case")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("v")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello World"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# All chars")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${v~~}")]),a._v('"')]),a._v("\nhELLO wORLD\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${v~}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Just the first char")]),a._v("\nhello World\n\n")])])]),t("h2",{attrs:{id:"length-of-parameter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#length-of-parameter"}},[a._v("#")]),a._v(" Length of parameter")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Length of a string")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'12345'")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("#")]),a._v("var}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n\n")])])]),t("p",[a._v("Note that it's the length in number of "),t("strong",[a._v("characters")]),a._v(" which is not necessarily the same as the number of "),t("strong",[a._v("bytes")]),a._v(" (like in UTF-8 where most characters are encoded in more than one byte), nor the number of "),t("strong",[a._v("glyphs/graphemes")]),a._v(" (some of which are combinations of characters), nor is it necessarily the same as the display width.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Number of array elements")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("myarr")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("#")]),a._v("myarr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("@"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Works for positional parameters as well")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("set")]),a._v(" -- "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("#")]),a._v("@}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# But more commonly (and portably to other shells), one would use")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$#")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"replace-pattern-in-string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#replace-pattern-in-string"}},[a._v("#")]),a._v(" Replace pattern in string")]),a._v(" "),t("p",[a._v("First match:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'I am a string'")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${a"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("a"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("A}")]),a._v('"')]),a._v("\nI Am a string\n\n")])])]),t("p",[a._v("All matches:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${a"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("a"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("A}")]),a._v('"')]),a._v("\nI Am A string\n\n")])])]),t("p",[a._v("Match at the beginning:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${a"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("#")]),a._v("I"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("y}")]),a._v('"')]),a._v("\ny am a string\n\n")])])]),t("p",[a._v("Match at the end:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${a"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v("g"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("N}")]),a._v('"')]),a._v("\nI am a strinN\n\n")])])]),t("p",[a._v("Replace a pattern with nothing:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${a"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("g"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("}")]),a._v('"')]),a._v("\nI am a strin\n\n")])])]),t("p",[a._v("Add prefix to array items:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("A")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("hello world"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${A"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("@"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("#")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("R}")]),a._v('"')]),a._v("\nRhello Rworld\n\n")])])]),t("h2",{attrs:{id:"substrings-and-subarrays"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#substrings-and-subarrays"}},[a._v("#")]),a._v(" Substrings and subarrays")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'0123456789abcdef'")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Define a zero-based offset")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${var"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("3}")]),a._v('"')]),a._v("\n3456789abcdef\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Offset and length of substring")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${var"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("3"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("4}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3456")]),a._v("\n\n")])])]),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Negative length counts from the end of the string")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${var"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("3"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":-")]),a._v("5}")]),a._v('"')]),a._v("\n3456789a\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Negative offset counts from the end")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Needs a space to avoid confusion with ${var:-6}")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${var"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" -6}")]),a._v('"')]),a._v("\nabcdef\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Alternative: parentheses")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${var"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("(-6)}")]),a._v('"')]),a._v("\nabcdef\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Negative offset and negative length")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${var"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" -6"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":-")]),a._v("5}")]),a._v('"')]),a._v("\na\n\n")])])]),t("p",[a._v("The same expansions apply if the parameter is a "),t("strong",[a._v("positional parameter")]),a._v(" or the "),t("strong",[a._v("element of a subscripted array")]),a._v(":")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Set positional parameter $1")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("set")]),a._v(" -- 0123456789abcdef\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Define offset")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${1"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("5}")]),a._v('"')]),a._v("\n56789abcdef\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Assign to array element")]),a._v("\nmyarr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'0123456789abcdef'")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Define offset and length")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${myarr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("7"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("3}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("789")]),a._v("\n\n")])])]),t("p",[a._v("Analogous expansions apply to "),t("strong",[a._v("positional parameters")]),a._v(", where offsets are one-based:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Set positional parameters $1, $2, ...")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("set")]),a._v(" -- "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("9")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" a b c d e f\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Define an offset (beware $0 (not a positional parameter)")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# is being considered here as well)")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${@"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("10}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\na\nb \nc\nd\ne\nf\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Define an offset and a length")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${@"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("10"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("3}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\na\nb\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# No negative lengths allowed for positional parameters")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${@"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("10"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":-")]),a._v("2}")]),a._v('"')]),a._v("\nbash: -2: substring expression "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Negative offset counts from the end")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Needs a space to avoid confusion with ${@:-10:2}")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${@"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" -10"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("2}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ${@:0} is $0 which is not otherwise a positional parameters or part")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# of $@")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${@"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("0"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("2}")]),a._v('"')]),a._v("\n/usr/bin/bash\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n\n")])])]),t("p",[a._v("Substring expansion can be used with "),t("strong",[a._v("indexed arrays")]),a._v(":")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Create array (zero-based indices)")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("myarr")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("9")]),a._v(" a b c d e f"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Elements with index 5 and higher")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${myarr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("@"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("12}")]),a._v('"')]),a._v("\nc\nd\ne\nf\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 3 elements, starting with index 5")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${myarr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("@"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("5"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("3}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# The last element of the array")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%s\\n'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${myarr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("@"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" -1}")]),a._v('"')]),a._v("\nf\n\n")])])]),t("h2",{attrs:{id:"delete-a-pattern-from-the-beginning-of-a-string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#delete-a-pattern-from-the-beginning-of-a-string"}},[a._v("#")]),a._v(" Delete a pattern from the beginning of a string")]),a._v(" "),t("p",[a._v("Shortest match:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'I am a string'")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${a"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("#")]),a._v("*a}")]),a._v('"')]),a._v("\nm a string\n\n")])])]),t("p",[a._v("Longest match:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${a"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("##")]),a._v("*a}")]),a._v('"')]),a._v("\n string\n\n")])])]),t("h2",{attrs:{id:"parameter-indirection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameter-indirection"}},[a._v("#")]),a._v(" Parameter indirection")]),a._v(" "),t("p",[t("code",[a._v("Bash")]),a._v(" indirection permits to get the value of a variable whose name is contained in another variable. Variables example:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("red")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"the color red"')]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("green")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"the color green"')]),a._v("\n\n$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("color")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("red\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("color}")]),a._v('"')]),a._v("\nthe color red\n$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("color")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("green\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("color}")]),a._v('"')]),a._v("\nthe color green\n\n")])])]),t("p",[a._v("Some more examples that demonstrate the indirect expansion usage:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\n$ foo=10\n $ x=foo\n $ echo ${x}      #Classic variable print  \n foo  \n \n $ foo=10\n $ x=foo\n $ echo ${!x}     #Indirect expansion\n 10\n\n")])])]),t("p",[a._v("One more example:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("argtester")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("((")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<=")]),a._v('"$#"'),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("))")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${i}")]),a._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("done")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" argtester -ab -cd -ef \n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#i expanded to 1 ")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#i expanded to 2")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#i expanded to 3")]),a._v("\n\n$ "),t("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("argtester")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("((")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<=")]),a._v('"$#"'),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("))")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("i}")]),a._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("done")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" argtester -ab -cd -ef \n-ab     "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# i=1 --\x3e expanded to $1 ---\x3e expanded to first argument sent to function")]),a._v("\n-cd     "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# i=2 --\x3e expanded to $2 ---\x3e expanded to second argument sent to function")]),a._v("\n-ef     "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# i=3 --\x3e expanded to $3 ---\x3e expanded to third argument sent to function")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"default-value-substitution"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#default-value-substitution"}},[a._v("#")]),a._v(" Default value substitution")]),a._v(" "),t("blockquote"),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${parameter"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":-")]),a._v("word}")]),a._v("\n\n")])])]),t("p",[a._v("If parameter is unset or null, the expansion of word is substituted.\nOtherwise, the value of parameter is substituted.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("unset")]),a._v(" var\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${var"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":-")]),a._v("XX}")]),a._v('"')]),a._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Parameter is unset -> expansion XX occurs")]),a._v("\nXX\n$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("                "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Parameter is null -> expansion XX occurs")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${var"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":-")]),a._v("XX}")]),a._v('"')]),a._v("\nXX\n$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("23")]),a._v("                "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Parameter is not null -> original expansion occurs")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${var"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":-")]),a._v("XX}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("23")]),a._v("\n\n")])])]),t("blockquote"),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${parameter"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v("word}")]),a._v("\n\n")])])]),t("p",[a._v("If parameter is unset or null, the expansion of word is assigned to\nparameter. The value of parameter is then substituted. Positional\nparameters and special parameters may not be assigned to in this way.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("unset")]),a._v(" var\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${var"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v("XX}")]),a._v('"')]),a._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Parameter is unset -> word is assigned to XX")]),a._v("\nXX\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$var")]),a._v('"')]),a._v("\nXX\n$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("                "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Parameter is null -> word is assigned to XX")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${var"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v("XX}")]),a._v('"')]),a._v("\nXX\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$var")]),a._v('"')]),a._v("\nXX\n$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("23")]),a._v("                "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Parameter is not null -> no assignment occurs")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${var"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":=")]),a._v("XX}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("23")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$var")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("23")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"delete-a-pattern-from-the-end-of-a-string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#delete-a-pattern-from-the-end-of-a-string"}},[a._v("#")]),a._v(" Delete a pattern from the end of a string")]),a._v(" "),t("p",[a._v("Shortest match:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'I am a string'")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${a"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v("a*}")]),a._v('"')]),a._v("\nI am \n\n")])])]),t("p",[a._v("Longest match:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${a"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%%")]),a._v("a*}")]),a._v('"')]),a._v("\nI \n\n")])])]),t("h2",{attrs:{id:"parameter-expansion-and-filenames"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameter-expansion-and-filenames"}},[a._v("#")]),a._v(" Parameter expansion and filenames")]),a._v(" "),t("p",[a._v("You can use Bash Parameter Expansion to emulate common filename-processing operations like "),t("code",[a._v("basename")]),a._v(" and "),t("code",[a._v("dirname")]),a._v(".")]),a._v(" "),t("p",[a._v("We will use this as our example path:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("FILENAME")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/tmp/example/myfile.txt"')]),a._v("\n\n")])])]),t("p",[a._v("To emulate "),t("code",[a._v("dirname")]),a._v(" and return the directory name of a file path:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${FILENAME"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("*}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#Out: /tmp/example")]),a._v("\n\n")])])]),t("p",[a._v("To emulate "),t("code",[a._v("basename $FILENAME")]),a._v(" and return the filename of a file path:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${FILENAME"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("##")]),a._v("*"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#Out: myfile.txt")]),a._v("\n\n")])])]),t("p",[a._v("To emulate "),t("code",[a._v("basename $FILENAME .txt")]),a._v(" and return the filename without the "),t("code",[a._v(".txt.")]),a._v(" extension:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("BASENAME")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${FILENAME"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("##")]),a._v("*"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${BASENAME"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%%")]),a._v(".txt}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#Out: myfile")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"error-if-variable-is-empty-or-unset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#error-if-variable-is-empty-or-unset"}},[a._v("#")]),a._v(" Error if variable is empty or unset")]),a._v(" "),t("p",[a._v("The semantics for this are similar to that of default value substitution, but instead of substituting a default value, it errors out with the provided error message. The forms are "),t("code",[a._v("${VARNAME?ERRMSG}")]),a._v(" and "),t("code",[a._v("${VARNAME:?ERRMSG}")]),a._v(". The form with "),t("code",[a._v(":")]),a._v(" will error our if the variable is "),t("strong",[a._v("unset")]),a._v(" "),t("strong",[a._v("or")]),a._v(" "),t("strong",[a._v("empty")]),a._v(", whereas the form without will only error out if the variable is "),t("strong",[a._v("unset")]),a._v(". If an error is thrown, the "),t("code",[a._v("ERRMSG")]),a._v(" is output and the exit code is set to "),t("code",[a._v("1")]),a._v(".")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("FOO")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ./script.sh: line 4: FOO: EMPTY")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"FOO is '),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${FOO"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":?")]),a._v("EMPTY}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# FOO is ")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"FOO is '),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${FOO?UNSET}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ./script.sh: line 8: BAR: EMPTY")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"BAR is '),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${BAR"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":?")]),a._v("EMPTY}")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ./script.sh: line 10: BAR: UNSET")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"BAR is '),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${BAR?UNSET}")]),a._v('"')]),a._v("\n\n")])])]),t("p",[a._v("The run the full example above each of the erroring echo statements needs to be commented out to proceed.")]),a._v(" "),t("h2",{attrs:{id:"munging-during-expansion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#munging-during-expansion"}},[a._v("#")]),a._v(" Munging during expansion")]),a._v(" "),t("p",[a._v("Variables don't necessarily have to expand to their values - substrings can be extracted during expansion, which can be useful for extracting file extensions or parts of paths. Globbing characters keep their usual meanings, so "),t("code",[a._v(".*")]),a._v(" refers to a literal dot, followed by any sequence of characters; it's not a regular expression.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("v")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("foo-bar-baz\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${v"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%%")]),a._v("-*}")]),a._v("\nfoo\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${v"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v("-*}")]),a._v("\nfoo-bar\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${v"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("##")]),a._v("*-}")]),a._v("\nbaz\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${v"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("#")]),a._v("*-}")]),a._v("\nbar-baz\n\n")])])]),t("p",[a._v("It's also possible to expand a variable using a default value - say I want to invoke the user's editor, but if they've not set one I'd like to give them "),t("code",[a._v("vim")]),a._v(".")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("EDITOR")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("nano\n$ "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${EDITOR"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":-")]),a._v("vim}")]),a._v(" /tmp/some_file\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# opens nano")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("unset")]),a._v(" EDITOR\n$ $ "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${EDITOR"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":-")]),a._v("vim}")]),a._v(" /tmp/some_file\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# opens vim")]),a._v("\n\n")])])]),t("p",[a._v("There are two different ways of performing this expansion, which differ in whether the relevant variable is empty or unset. Using "),t("code",[a._v(":-")]),a._v(" will use the default if the variable is either unset or empty, whilst "),t("code",[a._v("-")]),a._v(" only uses the default if the variable is unset, but will use the variable if it is set to the empty string:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"set"')]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("b")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("unset")]),a._v(" c\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${a"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":-")]),a._v("default_a}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${b"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":-")]),a._v("default_b}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${c"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":-")]),a._v("default_c}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("set")]),a._v(" default_b default_c\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${a-default_a}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${b-default_b}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${c-default_c}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("set")]),a._v(" default_c\n\n")])])]),t("p",[a._v("Similar to defaults, alternatives can be given; where a default is used if a particular variable isn't available, an alternative is used if the variable is available.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"set"')]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("b")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${a"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":+")]),a._v("alternative_a}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${b"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":+")]),a._v("alternative_b}")]),a._v("\nalternative_a\n\n")])])]),t("p",[a._v("Noting that these expansions can be nested, using alternatives becomes particularly useful when supplying arguments to command line flags;")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("output_file")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/tmp/foo\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("wget")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${output_file"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":+")]),a._v('"-o ${output_file}')]),a._v('"'),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" www.stackexchange.com\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# expands to wget -o /tmp/foo www.stackexchange.com")]),a._v("\n$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("unset")]),a._v(" output_file\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("wget")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${output_file"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":+")]),a._v('"-o ${output_file}')]),a._v('"'),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" www.stackexchange.com\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# expands to wget  www.stackexchange.com ")]),a._v("\n\n")])])]),t("h4",{attrs:{id:"syntax"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[a._v("#")]),a._v(" Syntax")]),a._v(" "),t("ul",[t("li",[a._v("${parameter:offset} # Substring starting at offset")]),a._v(" "),t("li",[a._v('${parameter:offset:length} # Substring of length "length" starting at offset')]),a._v(" "),t("li",[a._v("${#parameter} # Length of parameter")]),a._v(" "),t("li",[a._v("${parameter/pattern/string} # Replace the first occurrence of pattern with string")]),a._v(" "),t("li",[a._v("${parameter//pattern/string} # Replace all occurrences of pattern with string")]),a._v(" "),t("li",[a._v("${parameter/#pattern/string} # Replace pattern with string if pattern is at the beginning")]),a._v(" "),t("li",[a._v("${parameter/%pattern/string} # Replace pattern with string if pattern is at the ending")]),a._v(" "),t("li",[a._v("${parameter#pattern} # Remove shortest match of pattern from beginning of parameter")]),a._v(" "),t("li",[a._v("${parameter##pattern} # Remove longest match of pattern from beginning of  parameter")]),a._v(" "),t("li",[a._v("${parameter%pattern} # Remove shortest match of pattern from end of parameter")]),a._v(" "),t("li",[a._v("${parameter%%pattern} # Remove longest match of pattern from end of parameter")]),a._v(" "),t("li",[a._v("${parameter:-word} # Expand to word if parameter unset/undefined")]),a._v(" "),t("li",[a._v("${parameter:=word} # Expand to word if parameter unset/undefined and set parameter")]),a._v(" "),t("li",[a._v("${parameter:+word} # Expand to word if parameter set/defined")])])])}),[],!1,null,null,null);s.default=n.exports}}]);