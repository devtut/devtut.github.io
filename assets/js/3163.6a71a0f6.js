(window.webpackJsonp=window.webpackJsonp||[]).push([[3163],{3571:function(s,t,a){"use strict";a.r(t);var e=a(31),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"mongoid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mongoid"}},[s._v("#")]),s._v(" Mongoid")]),s._v(" "),a("h2",{attrs:{id:"fields"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fields"}},[s._v("#")]),s._v(" Fields")]),s._v(" "),a("p",[s._v("As per the "),a("a",{attrs:{href:"https://docs.mongodb.com/ecosystem/tutorial/mongoid-documents/#fields",target:"_blank",rel:"noopener noreferrer"}},[s._v("Mongoid Documentation"),a("OutboundLink")],1),s._v(", there are 16 valid field types:")]),s._v(" "),a("ul",[a("li",[s._v("Array")]),s._v(" "),a("li",[s._v("BigDecimal")]),s._v(" "),a("li",[s._v("Boolean")]),s._v(" "),a("li",[s._v("Date")]),s._v(" "),a("li",[s._v("DateTime")]),s._v(" "),a("li",[s._v("Float")]),s._v(" "),a("li",[s._v("Hash")]),s._v(" "),a("li",[s._v("Integer")]),s._v(" "),a("li",[s._v("BSON::ObjectId")]),s._v(" "),a("li",[s._v("BSON::Binary")]),s._v(" "),a("li",[s._v("Range")]),s._v(" "),a("li",[s._v("Regexp")]),s._v(" "),a("li",[s._v("String")]),s._v(" "),a("li",[s._v("Symbol")]),s._v(" "),a("li",[s._v("Time")]),s._v(" "),a("li",[s._v("TimeWithZone")])]),s._v(" "),a("p",[s._v("To add a field (let's call it "),a("code",[s._v("name")]),s._v(" and have it be a "),a("code",[s._v("String")]),s._v("), add this to your model file:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("field "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),s._v("\n\n")])])]),a("p",[s._v("To set a default value, just pass in the "),a("code",[s._v("default")]),s._v(" option:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("field "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" default"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\n\n")])])]),a("h2",{attrs:{id:"installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[s._v("#")]),s._v(" Installation")]),s._v(" "),a("p",[s._v("First, add "),a("code",[s._v("Mongoid")]),s._v(" to your "),a("code",[s._v("Gemfile")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("gem "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mongoid"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"~> 4.0.0"')]),s._v("\n\n")])])]),a("p",[s._v("and then run "),a("code",[s._v("bundle install")]),s._v(". Or just run:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("$ gem install mongoid\n\n")])])]),a("p",[s._v("After installation, run the generator to create the config file:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("$ rails g mongoid"),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":config")]),s._v("\n\n")])])]),a("p",[s._v("which will create the file "),a("code",[s._v("(myapp)/config/mongoid.yml")]),s._v(".")]),s._v(" "),a("h2",{attrs:{id:"creating-a-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-model"}},[s._v("#")]),s._v(" Creating a Model")]),s._v(" "),a("p",[s._v("Create a model (lets call it "),a("code",[s._v("User")]),s._v(") by running:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("$ rails g model "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("User")]),s._v("\n\n")])])]),a("p",[s._v("which will generate the file "),a("code",[s._v("app/models/user.rb")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Mongoid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Document")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("p",[s._v("This is all you need to have a model (albeit nothing but an "),a("code",[s._v("id")]),s._v(" field). Unlike "),a("code",[s._v("ActiveRecord")]),s._v(", there is no migration files. All the database information for the model is contained in the model file.")]),s._v(" "),a("p",[s._v("Timestamps are not automatically included in your model when you generate it. To add "),a("code",[s._v("created_at")]),s._v(" and "),a("code",[s._v("updated_at")]),s._v(" to your model, add")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Mongoid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Timestamps")]),s._v("\n\n")])])]),a("p",[s._v("to your model underneath "),a("code",[s._v("include Mongoid::Document")]),s._v(" like so:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Mongoid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Document")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Mongoid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Timestamps")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"classic-associations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#classic-associations"}},[s._v("#")]),s._v(" Classic Associations")]),s._v(" "),a("p",[s._v("Mongoid allows the classic "),a("code",[s._v("ActiveRecord")]),s._v(" associations:")]),s._v(" "),a("ul",[a("li",[s._v("One-to-one: "),a("code",[s._v("has_one")]),s._v(" / "),a("code",[s._v("belongs_to")])]),s._v(" "),a("li",[s._v("One-to-many: "),a("code",[s._v("has_many")]),s._v(" / "),a("code",[s._v("belongs_to")])]),s._v(" "),a("li",[s._v("Many-to-many: "),a("code",[s._v("has_and_belongs_to_many")])])]),s._v(" "),a("p",[s._v("To add an association (lets say the User "),a("code",[s._v("has_many")]),s._v(" posts), you can add this to your "),a("code",[s._v("User")]),s._v(" model file:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("has_many "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":posts")]),s._v("\n\n")])])]),a("p",[s._v("and this to your "),a("code",[s._v("Post")]),s._v(" model file:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("belongs_to "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":user")]),s._v("\n\n")])])]),a("p",[s._v("This will add a "),a("code",[s._v("user_id")]),s._v(" field in your "),a("code",[s._v("Post")]),s._v(" model, add a "),a("code",[s._v("user")]),s._v(" method to your "),a("code",[s._v("Post")]),s._v(" class, and add a "),a("code",[s._v("posts")]),s._v(" method to your "),a("code",[s._v("User")]),s._v(" class.")]),s._v(" "),a("h2",{attrs:{id:"embedded-associations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#embedded-associations"}},[s._v("#")]),s._v(" Embedded Associations")]),s._v(" "),a("p",[s._v("Mongoid allows Embedded Associations:")]),s._v(" "),a("ul",[a("li",[s._v("One-to-one: "),a("code",[s._v("embeds_one")]),s._v(" / "),a("code",[s._v("embedded_in")])]),s._v(" "),a("li",[s._v("One-to-many: "),a("code",[s._v("embeds_many")]),s._v(" / "),a("code",[s._v("embedded_in")])])]),s._v(" "),a("p",[s._v("To add an association (lets say the User "),a("code",[s._v("embeds_many")]),s._v(" addresses), add this to your "),a("code",[s._v("User")]),s._v(" file:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("embeds_many "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":addresses")]),s._v("\n\n")])])]),a("p",[s._v("and this to your "),a("code",[s._v("Address")]),s._v(" model file:")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[s._v("embedded_in "),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":user")]),s._v("\n\n")])])]),a("p",[s._v("This will embed "),a("code",[s._v("Address")]),s._v(" in your "),a("code",[s._v("User")]),s._v(" model, adding a "),a("code",[s._v("addresses")]),s._v(" method to your "),a("code",[s._v("User")]),s._v(" class.")]),s._v(" "),a("h2",{attrs:{id:"database-calls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#database-calls"}},[s._v("#")]),s._v(" Database Calls")]),s._v(" "),a("p",[s._v("Mongoid tries to have similar syntax to "),a("code",[s._v("ActiveRecord")]),s._v(" when it can. It supports these calls (and many more)")]),s._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("first "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Gets first user from the database")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Gets the count of all users from the database")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("find"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("params"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Returns the user with the id found in params[:id]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Bob"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Returns a Mongoid::Criteria object that can be chained")]),s._v("\n                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#with other queries (like another 'where' or an 'any_in')")]),s._v("\n                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Does NOT return any objects from database")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Bob"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("entries "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#Returns all objects with name "Bob" from database')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Bob'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Alice'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("entries "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#Returns all objects with name "Bob" or "Alice" from database')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("any_in"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Bob"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Joe"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("first "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#Returns the first object with name "Bob" or "Joe"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":name")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Bob'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("exists"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# will return true if there is one or more users with name bob")]),s._v("\n\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);