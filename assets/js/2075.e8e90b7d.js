(window.webpackJsonp=window.webpackJsonp||[]).push([[2075],{2483:function(t,a,s){"use strict";s.r(a);var e=s(31),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"transaction-isolation-levels"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#transaction-isolation-levels"}},[t._v("#")]),t._v(" Transaction isolation levels")]),t._v(" "),s("h2",{attrs:{id:"read-uncommitted"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#read-uncommitted"}},[t._v("#")]),t._v(" Read Uncommitted")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ISOLATION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEVEL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNCOMMITTED")]),t._v("\n\n")])])]),s("p",[t._v('This is the most permissive isolation level, in that it does not cause any locks at all. It specifies that statements can read all rows, including rows that have been written in transactions but not yet committed (i.e., they are still in transaction). This isolation level can be subject to "dirty reads".')]),t._v(" "),s("h2",{attrs:{id:"read-committed"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#read-committed"}},[t._v("#")]),t._v(" Read Committed")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ISOLATION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEVEL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMITTED")]),t._v("\n\n")])])]),s("p",[t._v("This isolation level is the 2nd most permissive. It prevents dirty reads. The behavior of "),s("code",[t._v("READ COMMITTED")]),t._v(" depends on the setting of the "),s("code",[t._v("READ_COMMITTED_SNAPSHOT")]),t._v(":")]),t._v(" "),s("li",[t._v("\nIf set to OFF (the default setting) the transaction uses shared locks to prevent other transactions from modifying rows used by the current transaction, as well as block the current transaction from reading rows modified by other transactions.\n")]),t._v(" "),s("li",[t._v("\nIf set to ON, the `READCOMMITTEDLOCK` table hint can be used to request shared locking instead of row versioning for transactions running in `READ COMMITTED` mode.\n")]),t._v(" "),s("p",[t._v("Note: "),s("code",[t._v("READ COMMITTED")]),t._v(" is the default SQL Server behavior.")]),t._v(" "),s("h2",{attrs:{id:"what-are-dirty-reads"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-are-dirty-reads"}},[t._v("#")]),t._v(' What are "dirty reads"?')]),t._v(" "),s("p",[t._v("Dirty reads (or uncommitted reads) are reads of rows which are being modified by an open transaction.")]),t._v(" "),s("p",[t._v("This behavior can be replicated by using 2 separate queries: one to open a transaction and write some data to a table without committing, the other to select the data to be written (but not yet committed) with this isolation level.")]),t._v(" "),s("p",[s("strong",[t._v("Query 1")]),t._v(" - Prepare a transaction but do not finish it:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" dbo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("demo "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    col1 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    col2 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nGO\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--This row will get committed normally:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BEGIN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" dbo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("demo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("col1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" col2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("99")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Normal transaction'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMIT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('--This row will be "stuck" in an open transaction, causing a dirty read')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BEGIN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" dbo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("demo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("col1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" col2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Dirty read'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--Do not COMMIT TRANSACTION or ROLLBACK TRANSACTION here")]),t._v("\n\n")])])]),s("p",[s("strong",[t._v("Query 2")]),t._v(" - Read the rows including the open transaction:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ISOLATION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEVEL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNCOMMITTED")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" dbo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("demo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),s("p",[t._v("Returns:")]),t._v(" "),s("blockquote"),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("col1        col2\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----------- ---------------------------------------")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("99")]),t._v("          Normal "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("          Dirty "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("read")]),t._v("\n\n")])])]),s("p",[t._v("P.S.: Don't forget to clean up this demo data:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMIT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" dbo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("demo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nGO\n\n")])])]),s("h2",{attrs:{id:"repeatable-read"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#repeatable-read"}},[t._v("#")]),t._v(" Repeatable Read")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ISOLATION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEVEL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REPEATABLE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),t._v("\n\n")])])]),s("p",[t._v("This transaction isolation level is slightly less permissive than "),s("code",[t._v("READ COMMITTED")]),t._v(", in that shared locks are placed on all data read by each statement in the transaction and are held "),s("strong",[t._v("until the transaction completes")]),t._v(", as opposed to being released after each statement.")]),t._v(" "),s("p",[t._v("Note: Use this option only when necessary, as it is more likely to cause database performance degradation as well as deadlocks than "),s("code",[t._v("READ COMMITTED")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"snapshot"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#snapshot"}},[t._v("#")]),t._v(" Snapshot")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ISOLATION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEVEL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SNAPSHOT")]),t._v("\n\n")])])]),s("p",[t._v("Specifies that data read by any statement in a transaction will be the transactionally consistent version of the data that existed at the start of the transaction, i.e., it will only read data that has been committed prior to the transaction starting.")]),t._v(" "),s("p",[s("code",[t._v("SNAPSHOT")]),t._v(" transactions do not request or cause any locks on the data that is being read, as it is only reading the version (or snapshot) of the data that existed at the time the transaction began.")]),t._v(" "),s("p",[t._v("A transaction running in "),s("code",[t._v("SNAPSHOT")]),t._v(" isolation level read only its own data changes while it is running. For example, a transaction could update some rows and then read the updated rows, but that change will only be visible to the current transaction until it is committed.")]),t._v(" "),s("p",[t._v("Note: The "),s("code",[t._v("ALLOW_SNAPSHOT_ISOLATION")]),t._v(" database option must be set to ON before the "),s("code",[t._v("SNAPSHOT")]),t._v(" isolation level can be used.")]),t._v(" "),s("h2",{attrs:{id:"serializable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#serializable"}},[t._v("#")]),t._v(" Serializable")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ISOLATION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEVEL")]),t._v(" SERIALIZEABLE\n\n")])])]),s("p",[t._v("This isolation level is the most restrictive. It requests "),s("strong",[t._v("range locks")]),t._v(" the range of key values that are read by each statement in the transaction. This also means that "),s("code",[t._v("INSERT")]),t._v(" statements from other transactions will be blocked if the rows to be inserted are in the range locked by the current transaction.")]),t._v(" "),s("p",[t._v("This option has the same effect as setting "),s("code",[t._v("HOLDLOCK")]),t._v(" on all tables in all "),s("code",[t._v("SELECT")]),t._v(" statements in a transaction.")]),t._v(" "),s("p",[t._v("Note: This transaction isolation has the lowest concurrency and should only be used when necessary.")]),t._v(" "),s("h4",{attrs:{id:"syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),s("li",[t._v("SET TRANSACTION ISOLATION LEVEL\n{ READ UNCOMMITTED\n| READ COMMITTED\n| REPEATABLE READ\n| SNAPSHOT\n| SERIALIZABLE\n}\n[ ; ]")]),t._v(" "),s("h4",{attrs:{id:"remarks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),s("p",[t._v("MSDN Reference: "),s("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/ms173763.aspx",target:"_blank",rel:"noopener noreferrer"}},[t._v("SET TRANSACTION ISOLATION LEVEL"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);