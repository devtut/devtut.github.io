(window.webpackJsonp=window.webpackJsonp||[]).push([[3132],{3540:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"activerecord-query-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#activerecord-query-interface"}},[t._v("#")]),t._v(" ActiveRecord Query Interface")]),t._v(" "),a("p",[t._v("ActiveRecord is the M in MVC which is the layer of the system responsible for representing business data and logic. The technique that connects the rich objects of an application to tables in a relational database management system is "),a("strong",[t._v("O")]),t._v("bject "),a("strong",[t._v("R")]),t._v("elational "),a("strong",[t._v("M")]),t._v("apper("),a("strong",[t._v("ORM")]),t._v(").")]),t._v(" "),a("p",[t._v("ActiveRecord will perform queries on the database for you and is compatible with most database systems. Regardless of which database system you're using, the ActiveRecord method format will always be the same.")]),t._v(" "),a("h2",{attrs:{id:"where"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#where"}},[t._v("#")]),t._v(" .where")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("where")]),t._v(" method is available on any "),a("code",[t._v("ActiveRecord")]),t._v(" model and allows querying the database for a set of records matching the given criteria.")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("where")]),t._v(" method accepts a hash where the keys correspond to the column names on the table that the model represents.")]),t._v(" "),a("p",[t._v("As a simple example, we will use the following model:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ActiveRecord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Base")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#attribute :first_name, :string")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#attribute :last_name, :string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("To find all people with the first name of "),a("code",[t._v("Sven")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("people "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Sven'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npeople"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_sql "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# \"SELECT * FROM people WHERE first_name='Sven'\"")]),t._v("\n\n")])])]),a("p",[t._v("To find all people with the first name of "),a("code",[t._v("Sven")]),t._v(" and last name of "),a("code",[t._v("Schrodinger")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("people "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Sven'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" last_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Schrodinger'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npeople"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_sql "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# \"SELECT * FROM people WHERE first_name='Sven' AND last_name='Schrodinger'\"")]),t._v("\n\n")])])]),a("p",[t._v("In the above example, the sql output shows that records will only be returned if both the "),a("code",[t._v("first_name")]),t._v(" and the "),a("code",[t._v("last_name")]),t._v(" match.")]),t._v(" "),a("p",[a("strong",[t._v("query with OR condition")])]),t._v(" "),a("p",[t._v("To find records with "),a("code",[t._v("first_name == 'Bruce'")]),t._v(" OR "),a("code",[t._v("last_name == 'Wayne'")])]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'first_name = ? or last_name = ?'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Bruce'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Wayne'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# SELECT \"users\".* FROM \"users\" WHERE (first_name = 'Bruce' or last_name = 'Wayne')")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"where-with-an-array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#where-with-an-array"}},[t._v("#")]),t._v(" .where with an array")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("where")]),t._v(" method on any ActiveRecord model can be used to generate SQL of the form "),a("code",[t._v("WHERE column_name IN (a, b, c, ...)")]),t._v(".  This is achieved by passing an array as argument.")]),t._v(" "),a("p",[t._v("As a simple example, we will use the following model:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ActiveRecord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Base")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#attribute :first_name, :string")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#attribute :last_name, :string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\npeople "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mark'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mary'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npeople"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_sql "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# \"SELECT * FROM people WHERE first_name IN ('Mark', 'Mary')\"")]),t._v("\n\n")])])]),a("p",[t._v("If the array contains a "),a("code",[t._v("nil")]),t._v(", the SQL will be modified to check if the column is "),a("code",[t._v("null")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("people "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mark'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mary'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npeople"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_sql "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# \"SELECT * FROM people WHERE first_name IN ('Mark', 'Mary') OR first_name IS NULL\"")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"scopes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scopes"}},[t._v("#")]),t._v(" Scopes")]),t._v(" "),a("p",[t._v("Scopes act as predefined filters on "),a("code",[t._v("ActiveRecord")]),t._v(" models.")]),t._v(" "),a("p",[t._v("A scope is defined using the "),a("code",[t._v("scope")]),t._v(" class method.")]),t._v(" "),a("p",[t._v("As a simple example, we will use the following model:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ActiveRecord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Base")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#attribute :first_name, :string")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#attribute :last_name, :string")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#attribute :age, :integer")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# define a scope to get all people under 17")]),t._v("\n  scope "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":minors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# define a scope to search a person by last name")]),t._v("\n  scope "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":with_last_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("last_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("Scopes can be called directly off the model class:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("minors "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("minors\n\n")])])]),a("p",[t._v("Scopes can be chained:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("peters_children "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("minors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("with_last_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Peters'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("The "),a("code",[t._v("where")]),t._v(" method and other query type methods can also be chained:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("mary_smith "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("with_last_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Smith'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mary'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("Behind the scenes, scopes are simply syntactic sugar for a standard class method. For example, these methods are functionally identical:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("scope "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":with_last_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This ^ is the same as this:")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("with_last_name")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("Default Scope")])]),t._v(" "),a("p",[t._v("in your model to set a default scope for all operations on the model.")]),t._v(" "),a("blockquote"),t._v(" "),a("p",[t._v("There is one notable difference between the "),a("code",[t._v("scope")]),t._v(" method and a class method: "),a("code",[t._v("scope")]),t._v("-defined scopes will "),a("strong",[t._v("always")]),t._v(" return an "),a("code",[t._v("ActiveRecord::Relation")]),t._v(", even if the logic within returns nil. Class methods, however, have no such safety net and can break chainability if they return something else.")]),t._v(" "),a("h2",{attrs:{id:"get-first-and-last-record"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-first-and-last-record"}},[t._v("#")]),t._v(" Get first and last record")]),t._v(" "),a("p",[t._v("Rails have very easy way to get "),a("code",[t._v("first")]),t._v(" and "),a("code",[t._v("last")]),t._v(" record from database.")]),t._v(" "),a("p",[t._v("To get the "),a("code",[t._v("first")]),t._v(" record from "),a("code",[t._v("users")]),t._v(" table we need to type following command:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("first\n\n")])])]),a("p",[t._v("It will generate following "),a("code",[t._v("sql")]),t._v(" query:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SELECT")]),t._v("  `users`"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FROM")]),t._v(" `users`  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BY")]),t._v(" `users`"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("`id` "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ASC")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LIMIT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n")])])]),a("p",[t._v("And will return following record:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#<User:0x007f8a6db09920 id: 1, first_name: foo, created_at: Thu, 16 Jun 2016 21:43:03 UTC +00:00, updated_at: Thu, 16 Jun 2016 21:43:03 UTC +00:00 >")]),t._v("\n\n")])])]),a("p",[t._v("To get the "),a("code",[t._v("last")]),t._v(" record from "),a("code",[t._v("users")]),t._v(" table we need to type following command:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("last\n\n")])])]),a("p",[t._v("It will generate following "),a("code",[t._v("sql")]),t._v(" query:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SELECT")]),t._v("  `users`"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FROM")]),t._v(" `users`  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BY")]),t._v(" `users`"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("`id` "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DESC")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LIMIT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n")])])]),a("p",[t._v("And will return following record:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#<User:0x007f8a6db09920 id: 10, first_name: bar, created_at: Thu, 16 Jun 2016 21:43:03 UTC +00:00, updated_at: Thu, 16 Jun 2016 21:43:03 UTC +00:00 >")]),t._v("\n\n")])])]),a("p",[t._v("Passing an integer to "),a("strong",[t._v("first")]),t._v(" and "),a("strong",[t._v("last")]),t._v(" method creates a "),a("strong",[t._v("LIMIT")]),t._v(" query and returns array of objects.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("It will generate following "),a("code",[t._v("sql")]),t._v(" query.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SELECT")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"users"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"users"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"users"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ASC")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LIMIT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\n")])])]),a("p",[t._v("And")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("It will generate following "),a("code",[t._v("sql")]),t._v(" query.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SELECT")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"users"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"users"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"users"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DESC")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("LIMIT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"where-not"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#where-not"}},[t._v("#")]),t._v(" where.not")]),t._v(" "),a("p",[a("code",[t._v("where")]),t._v(" clauses can be negated using the "),a("code",[t._v("where.not")]),t._v(" syntax:")]),t._v(" "),a("p",[t._v("Supported by ActiveRecord 4.0 and later.")]),t._v(" "),a("h2",{attrs:{id:"ordering"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ordering"}},[t._v("#")]),t._v(" Ordering")]),t._v(" "),a("p",[t._v("You can order "),a("strong",[t._v("ActiveRecord")]),t._v(" query results by using "),a("strong",[a("code",[t._v(".order")])]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":created_at")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> => [#<User id: 2, created_at: "2015-08-12 21:36:23">, #<User id: 11, created_at: "2015-08-15 10:21:48">]')]),t._v("\n\n")])])]),a("p",[t._v("If not specified, ordering will be performed in ascending order. You can specify it by doing:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("created_at"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":asc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> => [#<User id: 2, created_at: "2015-08-12 21:36:23">, #<User id: 11, created_at: "2015-08-15 10:21:48">]')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("created_at"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":desc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> [#<User id: 7585, created_at: "2016-07-13 17:15:27">, #<User id: 7583, created_at: "2016-07-13 16:51:18">]')]),t._v("\n\n")])])]),a("p",[a("strong",[a("code",[t._v(".order")])]),t._v(" also accepts a string, so you could also do")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"created_at DESC"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> [#<User id: 7585, created_at: "2016-07-13 17:15:27">, #<User id: 7583, created_at: "2016-07-13 16:51:18">]')]),t._v("\n\n")])])]),a("p",[t._v("As the string is raw SQL, you can also specify a table and not only an attribute. Assuming you want to order "),a("code",[t._v("users")]),t._v(" according to their "),a("code",[t._v("role")]),t._v(" name, you can do this:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ActiveRecord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Base")]),t._v("\n    belongs_to "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":role")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Role")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ActiveRecord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Base")]),t._v("\n  has_many "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":users")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("includes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":role")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"roles.name ASC"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("The "),a("code",[t._v("order")]),t._v(" scope can also accept an Arel node:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("includes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":role")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arel_table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("asc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"includes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#includes"}},[t._v("#")]),t._v(" Includes")]),t._v(" "),a("p",[t._v("ActiveRecord with "),a("code",[t._v("includes")]),t._v(" ensures that all of the specified associations are loaded using the minimum possible number of queries. So when querying a table for data with an associated table, both tables are loaded into memory.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@authors")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Author")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("includes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":books")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("books"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" bestseller"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# this will print  results without additional db hitting")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@authors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("each")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("author"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" \n  author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("books"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("each")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("book"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n    puts book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("title\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[a("code",[t._v("Author.joins(:books).where(books: { bestseller: true } )")]),t._v(" will load only "),a("strong",[t._v("authors")]),t._v(" with conditions into memory "),a("strong",[t._v("without loading books")]),t._v(". Use "),a("code",[t._v("joins")]),t._v(" when additional information about nested associations isn't required.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@authors")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Author")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("joins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":books")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("books"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" bestseller"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# this will print results without additional queries")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@authors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("each")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("author"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" puts author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# this will print results with additional db queries")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@authors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("each")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("author"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" \n  author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("books"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("each")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("book"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n    puts book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("title\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"find-by"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#find-by"}},[t._v("#")]),t._v(" .find_by")]),t._v(" "),a("p",[t._v("You can find records by any field in your table using "),a("code",[t._v("find_by")]),t._v(".")]),t._v(" "),a("p",[t._v("So, if you have a "),a("code",[t._v("User")]),t._v(" model with a "),a("code",[t._v("first_name")]),t._v(" attribute you can do:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("find_by"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> #<User id: 2005, first_name: "John", last_name: "Smith">')]),t._v("\n\n")])])]),a("p",[t._v("Mind that "),a("code",[t._v("find_by")]),t._v(" doesn't throw any exception by default. If the result is an empty set, it returns "),a("code",[t._v("nil")]),t._v(" instead of "),a("code",[t._v("find")]),t._v(".")]),t._v(" "),a("p",[t._v("If the exception is needed may use "),a("code",[t._v("find_by!")]),t._v(" that raises an "),a("code",[t._v("ActiveRecord::RecordNotFound")]),t._v(" error like "),a("code",[t._v("find")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"delete-all"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete-all"}},[t._v("#")]),t._v(" .delete_all")]),t._v(" "),a("p",[t._v("If you need to delete a lot of records quickly, "),a("strong",[t._v("ActiveRecord")]),t._v(" gives "),a("strong",[a("code",[t._v(".delete_all")])]),t._v(" method. to be called directly on a model, to delete all records in that table, or a collection. Beware though, as "),a("strong",[a("code",[t._v(".delete_all")])]),t._v(" does not instantiate any object hence does not provide any callback ("),a("code",[t._v("before_*")]),t._v(" and "),a("code",[t._v("after_destroy")]),t._v(" don't get triggered).")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delete_all\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> 39  <-- .delete_all return the number of rows deleted")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delete_all \n\n")])])]),a("h2",{attrs:{id:"activerecord-case-insensitive-search"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#activerecord-case-insensitive-search"}},[t._v("#")]),t._v(" ActiveRecord case insensitive search")]),t._v(" "),a("p",[t._v("If you need to search an ActiveRecord model for similar values, you might be tempted to use "),a("code",[t._v("LIKE")]),t._v(" or "),a("code",[t._v("ILIKE")]),t._v(" but this isn't portable between database engines.  Similarly, resorting to always downcasing or upcasing can create performance issues.")]),t._v(" "),a("p",[t._v("You can use ActiveRecord's underlying Arel "),a("code",[t._v("matches")]),t._v(" method to do this in a safe way:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("addresses "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Address")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arel_table\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Address")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("addresses"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":address")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("matches"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%street%"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("Arel will apply the appropriate LIKE or ILIKE construct for the database engine configured.")]),t._v(" "),a("h2",{attrs:{id:"group-and-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#group-and-count"}},[t._v("#")]),t._v(" .group and .count")]),t._v(" "),a("p",[t._v("We have a "),a("code",[t._v("Product")]),t._v(" model and we want to group them by their "),a("code",[t._v("category")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Product")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("select"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":category")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":category")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("This will query the database as follows:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"product"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"category"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"product"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"product"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"category"')]),t._v("\n\n")])])]),a("p",[t._v("Make sure that the grouped field is also selected. Grouping is especially useful for counting the occurrence - in this case - of "),a("code",[t._v("categories")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Product")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("select"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":category")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":category")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count\n\n")])])]),a("p",[t._v("As the query shows, it will use the database for counting, which is much more efficient, than retrieving all record first and do the counting in the code:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"products"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"category"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AS")]),t._v(" count_categories"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"products"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"category"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AS")]),t._v(" products_category "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"products"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"products"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"category"')]),t._v("\n\n")])])]),a("h2",{attrs:{id:"distinct-or-uniq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#distinct-or-uniq"}},[t._v("#")]),t._v(" .distinct (or .uniq)")]),t._v(" "),a("p",[t._v("If you want to remove duplicates from a result, you can use "),a("code",[t._v(".distinct()")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Customers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("select"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":country")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("distinct\n\n")])])]),a("p",[t._v("This queries the database as follows:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DISTINCT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"customers"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"country"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"customers"')]),t._v("\n\n")])])]),a("p",[a("code",[t._v(".uniq()")]),t._v(" has the same effect. With Rails 5.0 it got deprecated and it will be removed from Rails with version 5.1. The reason is, that the word "),a("code",[t._v("unique")]),t._v(" doesn't have the same meaning as distinct and it can be misleading. Furthermore "),a("code",[t._v("distinct")]),t._v(" is closer to the SQL syntax.")]),t._v(" "),a("h2",{attrs:{id:"joins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#joins"}},[t._v("#")]),t._v(" Joins")]),t._v(" "),a("p",[a("code",[t._v("joins()")]),t._v(" allows you to join tables to your current model. For ex.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("joins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":posts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("will produce the following SQL query:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SELECT "')]),t._v("users"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('".* FROM "')]),t._v("users"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" INNER JOIN "')]),t._v("posts"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" ON "')]),t._v("posts"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),t._v("user_id"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" = "')]),t._v("users"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),t._v("id"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n\n")])])]),a("p",[t._v("Having table joined, you will have access to it:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("joins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":posts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("posts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" title"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("Pay attention on plural form. If your relation is "),a("code",[t._v(":has_many")]),t._v(", then the "),a("code",[t._v("joins()")]),t._v(" argument should be pluralized. Otherwise, use singular.")]),t._v(" "),a("p",[t._v("Nested "),a("code",[t._v("joins")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("joins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("posts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":images")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("images"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" caption"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'First post'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("which will produce:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SELECT "')]),t._v("users"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('".* FROM "')]),t._v("users"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" INNER JOIN "')]),t._v("posts"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" ON "')]),t._v("posts"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),t._v("user_id"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" = "')]),t._v("users"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),t._v("id"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" INNER JOIN "')]),t._v("images"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" ON "')]),t._v("images"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),t._v("post_id"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" = "')]),t._v("images"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),t._v("id"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n\n")])])]),a("h2",{attrs:{id:"limit-and-offset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#limit-and-offset"}},[t._v("#")]),t._v(" Limit and Offset")]),t._v(" "),a("p",[t._v("You can use "),a("code",[t._v("limit")]),t._v(" to tell the number of records to be fetched, and use "),a("code",[t._v("offset")]),t._v(" to tell the number of records to skip before starting to return the records.")]),t._v(" "),a("p",[t._v("For Example")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("limit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#returns first three records")]),t._v("\n\n")])])]),a("p",[t._v("It will generate following sql query.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SELECT  `users`.* FROM `users` LIMIT 3"')]),t._v("\n\n")])])]),a("p",[t._v("As offset is not mentioned in above query so it will return first three records.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("limit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#returns 5 records starting from 31th i.e from 31 to 35")]),t._v("\n\n")])])]),a("p",[t._v("It will generate following sql query.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SELECT  `users`.* FROM `users` LIMIT 5 OFFSET 30"')]),t._v("\n\n")])])]),a("h2",{attrs:{id:"activerecord-bang-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#activerecord-bang-methods"}},[t._v("#")]),t._v(" ActiveRecord Bang (!) methods")]),t._v(" "),a("p",[t._v("If you need an "),a("strong",[t._v("ActiveRecord")]),t._v(" method to raise an exception instead of a "),a("code",[t._v("false")]),t._v(" value in case of failure, you can add "),a("strong",[a("code",[t._v("!")])]),t._v(" to them. This is very important. As some exceptions/failures are hard to catch if you don't use ! on them. I recommended doing this in your development cycle to write all your ActiveRecord code this way to save you time and trouble.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ActiveRecord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Base")]),t._v("\n  validates "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":last_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" presence"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> ActiveRecord::RecordInvalid: Validation failed: Last name can't be blank")]),t._v("\n\n")])])]),a("p",[t._v("The "),a("strong",[t._v("ActiveRecord")]),t._v(" methods which accept a "),a("strong",[t._v("bang")]),t._v(" ("),a("code",[t._v("!")]),t._v(") are:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v(".create!")])]),t._v(" "),a("li",[a("code",[t._v(".take!")])]),t._v(" "),a("li",[a("code",[t._v(".first!")])]),t._v(" "),a("li",[a("code",[t._v(".last!")])]),t._v(" "),a("li",[a("code",[t._v(".find_by!")])]),t._v(" "),a("li",[a("code",[t._v(".find_or_create_by!")])]),t._v(" "),a("li",[a("code",[t._v("#save!")])]),t._v(" "),a("li",[a("code",[t._v("#update!")])]),t._v(" "),a("li",[t._v("all AR dynamic finders")])])])}),[],!1,null,null,null);s.default=n.exports}}]);