(window.webpackJsonp=window.webpackJsonp||[]).push([[1190],{1598:function(a,t,s){"use strict";s.r(t);var e=s(31),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"generalized-algebraic-data-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generalized-algebraic-data-types"}},[a._v("#")]),a._v(" Generalized Algebraic Data Types")]),a._v(" "),s("h2",{attrs:{id:"basic-usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#basic-usage"}},[a._v("#")]),a._v(" Basic Usage")]),a._v(" "),s("p",[a._v("When the "),s("code",[a._v("GADTs")]),a._v(" extension is enabled, besides regular data declarations, you can also declare generalized algebraic datatypes as follows:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DataType")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Constr1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Foo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DataType")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Constr2")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Show")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DataType")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Constr3")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DataType")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),a._v("\n\n")])])]),s("p",[a._v("A GADT declaration lists the types of all constructors a datatype has, explicitly. Unlike regular datatype declarations, the type of a constructor can be any N-ary (including nullary) function that ultimately results in the datatype applied to some arguments.")]),a._v(" "),s("p",[a._v("In this case we've declared that the type "),s("code",[a._v("DataType")]),a._v(" has three constructors: "),s("code",[a._v("Constr1")]),a._v(", "),s("code",[a._v("Constr2")]),a._v(" and "),s("code",[a._v("Constr3")]),a._v(".")]),a._v(" "),s("p",[a._v("The "),s("code",[a._v("Constr1")]),a._v(" constructor is no different from one declared using a regular data declaration: "),s("code",[a._v("data DataType a = Constr1 Int a (Foo a) | ...")])]),a._v(" "),s("p",[s("code",[a._v("Constr2")]),a._v(" however requires that "),s("code",[a._v("a")]),a._v(" has an instance of "),s("code",[a._v("Show")]),a._v(", and so when using the constructor the instance would need to exist. On the other hand, when pattern-matching on it, the fact that "),s("code",[a._v("a")]),a._v(" is an instance of "),s("code",[a._v("Show")]),a._v(" comes into scope, so you can write:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("foo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("DataType")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("foo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("val")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("case")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("val")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("of")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Constr2")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("show")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("\n\n")])])]),s("p",[a._v("Note that the "),s("code",[a._v("Show a")]),a._v(" constraint doesn't appear in the type of the function, and is only visible in the code to the right of "),s("code",[a._v("->")]),a._v(".")]),a._v(" "),s("p",[s("code",[a._v("Constr3")]),a._v(" has type "),s("code",[a._v("DataType Int")]),a._v(", which means that whenever a value of type "),s("code",[a._v("DataType a")]),a._v(" is a "),s("code",[a._v("Constr3")]),a._v(", it is known that "),s("code",[a._v("a ~ Int")]),a._v(". This information, too, can be recovered with a pattern match.")])])}),[],!1,null,null,null);t.default=n.exports}}]);