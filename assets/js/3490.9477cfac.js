(window.webpackJsonp=window.webpackJsonp||[]).push([[3490],{3898:function(s,t,e){"use strict";e.r(t);var a=e(31),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"short-circuiting-operators-andalso-orelse"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#short-circuiting-operators-andalso-orelse"}},[s._v("#")]),s._v(" Short-Circuiting Operators (AndAlso - OrElse)")]),s._v(" "),e("h2",{attrs:{id:"orelse-usage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#orelse-usage"}},[s._v("#")]),s._v(" OrElse Usage")]),s._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' The OrElse operator is the homologous of AndAlso. It lets us perform a boolean ")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' comparison evaluating the second condition only if the first one is False")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v(" testFunction"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OrElse")]),s._v(" otherFunction"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Then")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' If testFunction(5) is True, otherFunction(4) is not called.")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' Insert code to be executed.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v("\n\n")])])]),e("h2",{attrs:{id:"andalso-usage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#andalso-usage"}},[s._v("#")]),s._v(" AndAlso Usage")]),s._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' Sometimes we don't need to evaluate all the conditions in an if statement's boolean check.")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' Let's suppose we have a list of strings:")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" MyCollection "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" List"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" List"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' We want to evaluate the first value inside our list:")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v(" MyCollection"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Count "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("And")]),s._v(" MyCollection"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Equals"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Somevalue"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Yes, I\'ve found Somevalue in the collection!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v(" \n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' If MyCollection is empty, an exception will be thrown at runtime.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' This because it evaluates both first and second condition of the ")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' if statement regardless of the outcome of the first condition.")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' Now let's apply the AndAlso operator")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v(" MyCollection"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Count "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AndAlso")]),s._v(" MyCollection"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Equals"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Somevalue"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Yes, I\'ve found Somevalue in the collection!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v(" \n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' This won't throw any exception because the compiler evaluates just the first condition.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' If the first condition returns False, the second expression isn't evaluated at all.")]),s._v("\n\n")])])]),e("h2",{attrs:{id:"avoiding-nullreferenceexception"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#avoiding-nullreferenceexception"}},[s._v("#")]),s._v(" Avoiding NullReferenceException")]),s._v(" "),e("h3",{attrs:{id:"orelse"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#orelse"}},[s._v("#")]),s._v(" OrElse")]),s._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" Main"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" elements "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" List"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("Nothing")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" average "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Double")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" AverageElementsOrElse"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("elements"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("average"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' Writes 0 to Console")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Try")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'Throws ArgumentNullException")]),s._v("\n        average "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" AverageElementsOr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("elements"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Catch")]),s._v(" ex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" ArgumentNullException\n        Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Try")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v(" AverageElementsOrElse"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByVal")]),s._v(" elements "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" IEnumerable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Double")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' elements.Count is not called if elements is Nothing so it cannot crash")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("elements "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Is")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("Nothing")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OrElse")]),s._v(" elements"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Count "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Then")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Else")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Return")]),s._v(" elements"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Average"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v(" AverageElementsOr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByVal")]),s._v(" elements "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" IEnumerable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Double")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' elements.Count is always called so it can crash if elements is Nothing")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("elements "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Is")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("Nothing")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Or")]),s._v(" elements"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Count "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Then")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Else")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Return")]),s._v(" elements"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Average"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v("\n\n")])])]),e("h3",{attrs:{id:"andalso"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#andalso"}},[s._v("#")]),s._v(" AndAlso")]),s._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" Main"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" elements "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" List"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("Nothing")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" average "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Double")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" AverageElementsAndAlso"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("elements"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("average"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' Writes 0 to Console")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Try")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'Throws ArgumentNullException")]),s._v("\n        average "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" AverageElementsAnd"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("elements"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Catch")]),s._v(" ex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" ArgumentNullException\n        Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Try")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v(" AverageElementsAndAlso"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByVal")]),s._v(" elements "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" IEnumerable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Double")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' elements.Count is not called if elements is Nothing so it cannot crash")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Not")]),s._v(" elements "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Is")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("Nothing")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AndAlso")]),s._v(" elements"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Count "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Then")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Return")]),s._v(" elements"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Average"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Else")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v(" AverageElementsAnd"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByVal")]),s._v(" elements "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" IEnumerable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Of")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Double")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' elements.Count is always called so it can crash if elements is Nothing")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Not")]),s._v(" elements "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Is")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("Nothing")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("And")]),s._v(" elements"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Count "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Then")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Return")]),s._v(" elements"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Average"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Else")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("If")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Function")]),s._v("\n\n")])])]),e("p",[e("a",{attrs:{href:"http://stackoverflow.com/documentation/vb.net/1501/visual-basic-14-0-features/4878/null-conditional-operator",target:"_blank",rel:"noopener noreferrer"}},[s._v("Visual Basic 14.0 introduced the null conditional operator"),e("OutboundLink")],1),s._v(", allowing to rewrite the functions in a cleaner way, mimicking the behavior of the "),e("code",[s._v("AndAlso")]),s._v(" version of the example.")]),s._v(" "),e("h4",{attrs:{id:"syntax"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[s._v("#")]),s._v(" Syntax")]),s._v(" "),e("ul",[e("li",[s._v("result = expression1 AndAlso expression2")]),s._v(" "),e("li",[s._v("result = expression1 OrElse expression2")])]),s._v(" "),e("h4",{attrs:{id:"parameters"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[s._v("#")]),s._v(" Parameters")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("Parameter")]),s._v(" "),e("th",[s._v("Details")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("result")]),s._v(" "),e("td",[s._v("Required. Any Boolean expression. The result is the Boolean result of comparison of the two expressions.")])]),s._v(" "),e("tr",[e("td",[s._v("expression1")]),s._v(" "),e("td",[s._v("Required. Any Boolean expression.")])]),s._v(" "),e("tr",[e("td",[s._v("expression2")]),s._v(" "),e("td",[s._v("Required. Any Boolean expression.")])])])]),s._v(" "),e("h4",{attrs:{id:"remarks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[s._v("#")]),s._v(" Remarks")]),s._v(" "),e("p",[e("strong",[s._v("'AndAlso'")]),s._v(" and "),e("strong",[s._v("'OrElse'")]),s._v(" are "),e("strong",[s._v("ShortCircuiting")]),s._v(" operators that means that the execution is shorter because the compiler doesn't evaluate all the expressions in a boolean comparision if the first one provides the desidered result.")])])}),[],!1,null,null,null);t.default=n.exports}}]);