(window.webpackJsonp=window.webpackJsonp||[]).push([[2239],{2647:function(e,n,t){"use strict";t.r(n);var r=t(31),s=Object(r.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"oauth-2-0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#oauth-2-0"}},[e._v("#")]),e._v(" OAuth 2.0")]),e._v(" "),t("h2",{attrs:{id:"oauth-2-with-redis-implementation-grant-type-password"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#oauth-2-with-redis-implementation-grant-type-password"}},[e._v("#")]),e._v(" OAuth 2 with Redis Implementation - grant_type: password")]),e._v(" "),t("p",[e._v("In this example I will be using oauth2 in rest api with redis database")]),e._v(" "),t("blockquote"),e._v(" "),t("p",[e._v("**Important:** You will need to install redis database on your machine,\nDownload it from [here](https://redis.io/download) for linux users and from [here](https://github.com/ServiceStack/redis-windows)  to install\nwindows version, and we will be using redis manager desktop app,\ninstall it  from [here](https://redisdesktop.com/download).")]),e._v(" "),t("p",[e._v("Now we have to set our node.js server to use redis database.")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Creating Server file: app.js")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n   var express = require('express'),\n  bodyParser = require('body-parser'),\n  oauthserver = require('oauth2-server'); // Would be: 'oauth2-server'\n\nvar app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use(bodyParser.json());\n\napp.oauth = oauthserver({\n  model: require('./routes/Oauth2/model'),\n  grants: ['password', 'refresh_token'],\n  debug: true\n});\n\n// Handle token grant requests\napp.all('/oauth/token', app.oauth.grant());\n\napp.get('/secret', app.oauth.authorise(), function (req, res) {\n  // Will require a valid access_token\n  res.send('Secret area');\n});\n\napp.get('/public', function (req, res) {\n  // Does not require an access_token\n  res.send('Public area');\n});\n\n// Error handling\napp.use(app.oauth.errorHandler());\n\napp.listen(3000);\n\n")])])]),t("ul",[t("li",[t("strong",[e._v("Create Oauth2 model in routes/Oauth2/model.js")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\nvar model = module.exports,\n  util = require('util'),\n  redis = require('redis');\n\nvar db = redis.createClient();\n\nvar keys = {\n  token: 'tokens:%s',\n  client: 'clients:%s',\n  refreshToken: 'refresh_tokens:%s',\n  grantTypes: 'clients:%s:grant_types',\n  user: 'users:%s'\n};\n\nmodel.getAccessToken = function (bearerToken, callback) {\n  db.hgetall(util.format(keys.token, bearerToken), function (err, token) {\n    if (err) return callback(err);\n\n    if (!token) return callback();\n\n    callback(null, {\n      accessToken: token.accessToken,\n      clientId: token.clientId,\n      expires: token.expires ? new Date(token.expires) : null,\n      userId: token.userId\n    });\n  });\n};\n\nmodel.getClient = function (clientId, clientSecret, callback) {\n  db.hgetall(util.format(keys.client, clientId), function (err, client) {\n    if (err) return callback(err);\n\n    if (!client || client.clientSecret !== clientSecret) return callback();\n\n    callback(null, {\n      clientId: client.clientId,\n      clientSecret: client.clientSecret\n    });\n  });\n};\n\nmodel.getRefreshToken = function (bearerToken, callback) {\n  db.hgetall(util.format(keys.refreshToken, bearerToken), function (err, token) {\n    if (err) return callback(err);\n\n    if (!token) return callback();\n\n    callback(null, {\n      refreshToken: token.accessToken,\n      clientId: token.clientId,\n      expires: token.expires ? new Date(token.expires) : null,\n      userId: token.userId\n    });\n  });\n};\n\nmodel.grantTypeAllowed = function (clientId, grantType, callback) {\n  db.sismember(util.format(keys.grantTypes, clientId), grantType, callback);\n};\n\nmodel.saveAccessToken = function (accessToken, clientId, expires, user, callback) {\n  db.hmset(util.format(keys.token, accessToken), {\n    accessToken: accessToken,\n    clientId: clientId,\n    expires: expires ? expires.toISOString() : null,\n    userId: user.id\n  }, callback);\n};\n\nmodel.saveRefreshToken = function (refreshToken, clientId, expires, user, callback) {\n  db.hmset(util.format(keys.refreshToken, refreshToken), {\n    refreshToken: refreshToken,\n    clientId: clientId,\n    expires: expires ? expires.toISOString() : null,\n    userId: user.id\n  }, callback);\n};\n\nmodel.getUser = function (username, password, callback) {\n  db.hgetall(util.format(keys.user, username), function (err, user) {\n    if (err) return callback(err);\n\n    if (!user || password !== user.password) return callback();\n\n    callback(null, {\n      id: username\n    });\n  });\n};\n\n")])])]),t("p",[e._v("You only need to install redis on your machine and run the following node file")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n #! /usr/bin/env node\n\nvar db = require('redis').createClient();\n\ndb.multi()\n  .hmset('users:username', {\n    id: 'username',\n    username: 'username',\n    password: 'password'\n  })\n  .hmset('clients:client', {\n    clientId: 'client', \n    clientSecret: 'secret'\n  })//clientId + clientSecret to base 64 will generate Y2xpZW50OnNlY3JldA==\n  .sadd('clients:client:grant_types', [\n    'password',\n    'refresh_token'\n  ])\n  .exec(function (errs) {\n    if (errs) {\n      console.error(errs[0].message);\n      return process.exit(1);\n    }\n\n    console.log('Client and user added successfully');\n    process.exit();\n  });\n\n")])])]),t("p",[t("strong",[e._v("Note")]),e._v(": This file will set credentials for your frontend to request token So your request from")]),e._v(" "),t("p",[e._v("Sample redis database after calling the above file:\n"),t("a",{attrs:{href:"https://i.stack.imgur.com/8kn1X.png",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://i.stack.imgur.com/8kn1X.png",alt:"enter image description here"}}),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Request will be as follows:")]),e._v(" "),t("p",[e._v("Sample Call to api"),t("a",{attrs:{href:"https://i.stack.imgur.com/D7TCi.png",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://i.stack.imgur.com/D7TCi.png",alt:"enter image description here"}}),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Header:")]),e._v(" "),t("li",[e._v("\nauthorization: Basic followed by the password set when you first setup redis:\n"),t("blockquote",[e._v("\na. clientId + secretId to base64\n")])]),e._v(" "),t("li",[e._v("\nData form:\n"),t("blockquote",[e._v("\nusername: user that request token\n")]),e._v(" "),t("blockquote",[e._v("\npassword: user password\n")]),e._v(" "),t("blockquote",[e._v("\ngrant_type: depends on what options do you want, I choose passwod which takes only username and password to be created in redis, Data on redis will be as below:\n")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"access_token"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1d3fe602da12a086ecb2b996fd7b7ae874120c4f"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"token_type"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"bearer"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Will be used to access api + access+token e.g. bearer 1d3fe602da12a086ecb2b996fd7b7ae874120c4f")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"expires_in"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3600")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"refresh_token"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"b6ad56e5c9aba63c85d7e21b1514680bbf711450"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n")])])])]),e._v(" "),t("blockquote"),e._v(" "),t("p",[e._v("username: user that request token")]),e._v(" "),t("blockquote"),e._v(" "),t("p",[e._v("grant_type: depends on what options do you want, I choose passwod which takes only username and password to be created in redis, Data on redis will be as below:")]),e._v(" "),t("p",[e._v("So We need to call our api and grab some secured data with our access token we have just created, see below:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://i.stack.imgur.com/5C93O.png",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://i.stack.imgur.com/5C93O.png",alt:"enter image description here"}}),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("when token expires api will throw an error that the token expires and you cannot have access to any of the api calls, see image below :")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://i.stack.imgur.com/ijnIf.png",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://i.stack.imgur.com/ijnIf.png",alt:"enter image description here"}}),t("OutboundLink")],1)]),e._v(" "),t("blockquote"),e._v(" "),t("p",[e._v("Lets see what to do if the token expires, Let me first explain it to\nyou, if access token expires a refresh_token exists in redis that\nreference the expired access_token So what we need is to call\noauth/token again with the refresh_token grant_type and set the\nauthorization to the Basic clientId:clientsecret ( to base 64 ! ) and\nfinally send the refresh_token, this will generate a new access_token\nwith a new expiry data.")]),e._v(" "),t("p",[e._v("The following picture shows how to get a new access token:\n"),t("a",{attrs:{href:"https://i.stack.imgur.com/mECkH.png",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://i.stack.imgur.com/mECkH.png",alt:"enter image description here"}}),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"hope-to-help"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hope-to-help"}},[e._v("#")]),e._v(" Hope to Help!")])])}),[],!1,null,null,null);n.default=s.exports}}]);