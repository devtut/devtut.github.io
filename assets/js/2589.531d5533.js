(window.webpackJsonp=window.webpackJsonp||[]).push([[2589],{2997:function(e,t,s){"use strict";s.r(t);var a=s(31),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"embedding-managed-code-c-vb"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#embedding-managed-code-c-vb"}},[e._v("#")]),e._v(" Embedding Managed Code (C# | VB)")]),e._v(" "),s("p",[e._v("This topic is to briefly describe how C# or VB .NET Managed code can be scripted and utilised within a PowerShell script. This topic is not exploring all facets of the Add-Type cmdlet.")]),e._v(" "),s("p",[e._v("For more information on the Add-Type cmdlet, please refer to the MSDN documentation (for 5.1) here: "),s("a",{attrs:{href:"https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.utility/add-type",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.utility/add-type"),s("OutboundLink")],1)]),e._v(" "),s("h2",{attrs:{id:"c-example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-example"}},[e._v("#")]),e._v(" C# Example")]),e._v(" "),s("p",[e._v("This example shows how to embed some basic C# into a PowerShell script, add it to the runspace/session and utilise the code within PowerShell syntax.")]),e._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$code")]),e._v(" = "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"\nusing System;\n\nnamespace MyNameSpace\n{\n    public class Responder\n    {\n        public static void StaticRespond()\n        {\n            Console.WriteLine("')]),e._v("Static Response"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('");\n        }\n\n        public void Respond()\n        {\n            Console.WriteLine("')]),e._v("Instance Respond"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('");\n        }\n    }\n}\n"')]),e._v("@\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Check the type has not been previously added within the session, otherwise an exception is raised")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-not")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("[System.Management.Automation.PSTypeName]")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'MyNameSpace.Responder'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("Type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("Add-Type")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("TypeDefinition "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$code")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Language CSharp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("[MyNameSpace.Responder]")]),e._v("::StaticRespond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$instance")]),e._v(" = "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("New-Object")]),e._v(" MyNameSpace"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Responder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$instance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Respond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n")])])]),s("h2",{attrs:{id:"vb-net-example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vb-net-example"}},[e._v("#")]),e._v(" VB.NET Example")]),e._v(" "),s("p",[e._v("This example shows how to embed some basic C# into a PowerShell script, add it to the runspace/session and utilise the code within PowerShell syntax.")]),e._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$code")]),e._v(" = @"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"\nImports System\n\nNamespace MyNameSpace\n    Public Class Responder\n        Public Shared Sub StaticRespond()\n            Console.WriteLine("')]),e._v("Static Response"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('")\n        End Sub\n\n        Public Sub Respond()\n            Console.WriteLine("')]),e._v("Instance Respond"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('")\n        End Sub\n    End Class\nEnd Namespace\n"')]),e._v("@\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Check the type has not been previously added within the session, otherwise an exception is raised")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-not")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("[System.Management.Automation.PSTypeName]")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'MyNameSpace.Responder'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("Type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("Add-Type")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("TypeDefinition "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$code")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Language VisualBasic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("[MyNameSpace.Responder]")]),e._v("::StaticRespond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$instance")]),e._v(" = "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("New-Object")]),e._v(" MyNameSpace"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Responder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$instance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Respond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n")])])]),s("h4",{attrs:{id:"parameters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[e._v("#")]),e._v(" Parameters")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Parameter")]),e._v(" "),s("th",[e._v("Details")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("-TypeDefinition<String_>")]),e._v(" "),s("td",[e._v("Accepts the code as a string")])]),e._v(" "),s("tr",[s("td",[e._v("-Language<String_>")]),e._v(" "),s("td",[e._v("Specifies the Managed Code language.Accepted values: CSharp, CSharpVersion3, CSharpVersion2, VisualBasic, JScript")])])])]),e._v(" "),s("h4",{attrs:{id:"remarks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[e._v("#")]),e._v(" Remarks")]),e._v(" "),s("h3",{attrs:{id:"removing-added-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#removing-added-types"}},[e._v("#")]),e._v(" Removing Added types")]),e._v(" "),s("p",[e._v("In later versions of PowerShell, Remove-TypeData has been added to the PowerShell cmdlet libraries which can allow for removal of a type within a session. For more details on this cmdlet, go here: "),s("a",{attrs:{href:"https://msdn.microsoft.com/en-us/powershell/reference/4.0/microsoft.powershell.utility/remove-typedata",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://msdn.microsoft.com/en-us/powershell/reference/4.0/microsoft.powershell.utility/remove-typedata"),s("OutboundLink")],1)]),e._v(" "),s("h3",{attrs:{id:"csharp-and-net-syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csharp-and-net-syntax"}},[e._v("#")]),e._v(" CSharp and .NET syntax")]),e._v(" "),s("p",[e._v("For those experience with .NET it goes without saying that the differing versions of C# can be quite radically different in their level of support for certain syntax.")]),e._v(" "),s("p",[e._v("If utilising Powershell 1.0 and/or -Language CSharp, the managed code will be utilising .NET 2.0 which is lacking in a number of features which C# developers typically use without a second thought these days, such as Generics, Linq and Lambda. On top of this is formal polymorphism, which is handled with defaulted parameters in later versions of C#/.NET.")])])}),[],!1,null,null,null);t.default=n.exports}}]);