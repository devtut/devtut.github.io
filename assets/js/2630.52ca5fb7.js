(window.webpackJsonp=window.webpackJsonp||[]).push([[2630],{3038:function(t,a,s){"use strict";s.r(a);var e=s(31),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"splatting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#splatting"}},[t._v("#")]),t._v(" Splatting")]),t._v(" "),s("p",[t._v("Splatting is a method of passing multiple parameters to a command as a single unit. This is done by storing the parameters and their values as key-value pairs in a "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/powershell/8083/hashtables",target:"_blank",rel:"noopener noreferrer"}},[t._v("hashtable"),s("OutboundLink")],1),t._v(" and splatting it to a cmdlet using the splatting operator "),s("code",[t._v("@")]),t._v(".")]),t._v(" "),s("p",[t._v("Splatting can make a command more readable and allows you to reuse parameters in mulitple command calls.")]),t._v(" "),s("h2",{attrs:{id:"piping-and-splatting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#piping-and-splatting"}},[t._v("#")]),t._v(" Piping and Splatting")]),t._v(" "),s("p",[t._v("Declaring the splat is useful for reusing sets of parameters multiple times or with slight variations:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$splat")]),t._v(" = @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Class")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Win32_SystemEnclosure"')]),t._v("\n   Property = "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Manufacturer"')]),t._v("\n   ErrorAction = "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Stop"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get-WmiObject")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ComputerName "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$env")]),t._v(":COMPUTERNAME @splat\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get-WmiObject")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ComputerName "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Computer2"')]),t._v(" @splat\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get-WmiObject")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ComputerName "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Computer3"')]),t._v(" @splat\n\n")])])]),s("p",[t._v("However, if the splat is not indented for reuse, you may not wish to declare it. It can be piped instead:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[t._v("@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   ComputerName = "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$env")]),t._v(":COMPUTERNAME\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Class")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Win32_SystemEnclosure"')]),t._v("\n   Property = "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Manufacturer"')]),t._v("\n   ErrorAction = "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Stop"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get-WmiObject")]),t._v(" @_ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"passing-a-switch-parameter-using-splatting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#passing-a-switch-parameter-using-splatting"}},[t._v("#")]),t._v(" Passing a Switch parameter using Splatting")]),t._v(" "),s("p",[t._v("To use Splatting to call "),s("code",[t._v("Get-Process")]),t._v(" with the "),s("code",[t._v("-FileVersionInfo")]),t._v(" switch similar to this:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get-Process")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("FileVersionInfo\n\n")])])]),s("p",[t._v("This is the call using splatting:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$MyParameters")]),t._v(" = @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    FileVersionInfo = "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("$true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get-Process")]),t._v(" @MyParameters\n\n")])])]),s("p",[s("strong",[t._v("Note:")]),t._v(" This is useful because you can create a default set of paramaters and make the call many times  like this")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$MyParameters")]),t._v(" = @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    FileVersionInfo = "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("$true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get-Process")]),t._v(" @MyParameters "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Name WmiPrvSE\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get-Process")]),t._v(" @MyParameters "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Name explorer\n\n")])])]),s("h2",{attrs:{id:"splatting-from-top-level-function-to-a-series-of-inner-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#splatting-from-top-level-function-to-a-series-of-inner-function"}},[t._v("#")]),t._v(" Splatting From Top Level Function to a Series of Inner Function")]),t._v(" "),s("p",[t._v("Without splatting it is very cumbersome to try and pass values down through the call stack. But if you combine splatting with the power of the "),s("strong",[t._v("@PSBoundParameters")]),t._v(" then you can pass the top level parameter collection down through the layers.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Function")]),t._v(" Outer"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Method\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Param")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("[string]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$First")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("[string]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$Second")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Write-Host")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$First")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("NoNewline\n    \n    Inner"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Method @PSBoundParameters\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Function")]),t._v(" Inner"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Method\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Param")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("[string]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$Second")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Write-Host")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" {0}!"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("f "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$Second")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$parameters")]),t._v(" = @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    First = "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\n    Second = "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\nOuter"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Method @parameters\n\n")])])]),s("h2",{attrs:{id:"splatting-parameters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#splatting-parameters"}},[t._v("#")]),t._v(" Splatting parameters")]),t._v(" "),s("p",[t._v("Splatting is done by replacing the dollar-sign "),s("code",[t._v("$")]),t._v(" with the splatting operator "),s("code",[t._v("@")]),t._v(" when using a variable containing a "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/powershell/8083/hashtables",target:"_blank",rel:"noopener noreferrer"}},[t._v("HashTable"),s("OutboundLink")],1),t._v(" of parameters and values in a command call.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$MyParameters")]),t._v(" = @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Name = "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"iexplore"')]),t._v("\n    FileVersionInfo = "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("$true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get-Process")]),t._v(" @MyParameters\n\n")])])]),s("p",[t._v("Without splatting:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get-Process")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"iexplore"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("FileVersionInfo\n\n")])])]),s("p",[t._v("You can combine normal parameters with splatted parameters to easily add common parameters to your calls.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$MyParameters")]),t._v(" = @"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ComputerName = "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"StackOverflow-PC"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get-Process")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"iexplore"')]),t._v(" @MyParameters\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Invoke-Command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ScriptBlock "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Something to excute remotely"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" @MyParameters\n\n")])])]),s("h4",{attrs:{id:"remarks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),s("p",[s("strong",[t._v("Note:")]),t._v(" The "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/powershell/8981/special-operators/27942/array-expression-operator",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array expression operator or "),s("code",[t._v("@()")]),s("OutboundLink")],1),t._v(" have very different behavior than the Splatting operator "),s("code",[t._v("@")]),t._v(".")]),t._v(" "),s("p",[t._v("Read more at "),s("a",{attrs:{href:"https://technet.microsoft.com/en-us/library/jj672955.aspx",target:"_blank",rel:"noopener noreferrer"}},[t._v("about_Splatting @ TechNet"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);