(window.webpackJsonp=window.webpackJsonp||[]).push([[3478],{3886:function(t,s,e){"use strict";e.r(s);var a=e(31),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"looping"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#looping"}},[t._v("#")]),t._v(" Looping")]),t._v(" "),e("h2",{attrs:{id:"for-next"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#for-next"}},[t._v("#")]),t._v(" For...Next")]),t._v(" "),e("p",[e("code",[t._v("For")]),t._v("..."),e("code",[t._v("Next")]),t._v(" loop is used for repeating the same action for a finite number of times. The statements inside the following loop will be executed 11 times. The first time, "),e("code",[t._v("i")]),t._v(" will have the value 0, the second time it will have the value 1, the last time it will have the value 10.")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Execute the action")]),t._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Writeline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ToString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n")])])]),e("p",[t._v("Any integer expression can be used to parameterize the loop. It is permitted, but not required, for the control variable (in this case "),e("code",[t._v("i")]),t._v(") to also be stated after the "),e("code",[t._v("Next")]),t._v(". It is permitted for the control variable to be declared in advance, rather than within the "),e("code",[t._v("For")]),t._v(" statement.")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" StartIndex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" EndIndex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" StartIndex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" EndIndex "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Execute the action")]),t._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Writeline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ToString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v(" i\n\n")])])]),e("p",[t._v("Being able to define the Start and End integers allows loops to be created that directly reference other objects, such as:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" DataGridView1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Rows"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Writeline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DataGridView1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Rows"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Cells"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ToString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n")])])]),e("p",[t._v("This would then loop through every row in "),e("code",[t._v("DataGridView1")]),t._v(" and perform the action of writing the value of Column 1 to the Console. "),e("strong",[t._v("(The -1 is because the first row of the counted rows would be 1, not 0)")])]),t._v(" "),e("p",[t._v("It is also possible to define how the control variable must increment.")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Step")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Writeline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ToString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v(" \n\n")])])]),e("p",[t._v("This outputs:")]),t._v(" "),e("blockquote"),t._v(" "),e("p",[t._v("1 3 5 7 9")]),t._v(" "),e("p",[t._v("It is also possible to decrement the control variable (count down).")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Step")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Writeline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ToString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n")])])]),e("p",[t._v("This outputs:")]),t._v(" "),e("blockquote"),t._v(" "),e("p",[t._v("10 9 8 7 6 5 4 3 2 1")]),t._v(" "),e("p",[t._v("You should not attempt to use (read or update) the control variable outside the loop.")]),t._v(" "),e("h2",{attrs:{id:"for-each-next-loop-for-looping-through-collection-of-items"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#for-each-next-loop-for-looping-through-collection-of-items"}},[t._v("#")]),t._v(" For Each...Next loop for looping through collection of items")]),t._v(" "),e("p",[t._v("You can use a "),e("code",[t._v("For Each...Next")]),t._v(" loop to iterate through any "),e("code",[t._v("IEnumerable")]),t._v(" type. This includes arrays, lists, and anything else that may be of type IEnumerable or returns an IEnumerable.")]),t._v(" "),e("p",[t._v("An example of looping through a DataTable's Rows property would look like this:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Each")]),t._v(" row "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" DataRow "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("In")]),t._v(" DataTable1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Rows\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Each time this loops, row will be the next item out of Rows")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Here we print the first column's value from the row variable.")]),t._v("\n    Debug"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Row"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v(" \n\n")])])]),e("p",[t._v("An important thing to note is that the collection must not be modified while in a "),e("code",[t._v("For Each")]),t._v(" loop. Doing so will cause a "),e("code",[t._v("System.InvalidOperationException")]),t._v(" with the message:")]),t._v(" "),e("blockquote"),t._v(" "),e("p",[t._v("Collection was modified; enumeration operation may not execute.")]),t._v(" "),e("h2",{attrs:{id:"short-circuiting"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#short-circuiting"}},[t._v("#")]),t._v(" Short Circuiting")]),t._v(" "),e("p",[t._v("Any loop may be terminated or continued early at any point by using the "),e("code",[t._v("Exit")]),t._v(" or "),e("code",[t._v("Continue")]),t._v(" statements.")]),t._v(" "),e("p",[e("strong",[t._v("Exiting")])]),t._v(" "),e("p",[t._v("You can stop any loop by exiting early. To do this, you can use the keyword "),e("code",[t._v("Exit")]),t._v(" along with the name of the loop.")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Loop")]),t._v(" "),e("th",[t._v("Exit Statement")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("For")]),t._v(" "),e("td",[e("code",[t._v("Exit For")])])]),t._v(" "),e("tr",[e("td",[t._v("For Each")]),t._v(" "),e("td",[e("code",[t._v("Exit For")])])]),t._v(" "),e("tr",[e("td",[t._v("Do While")]),t._v(" "),e("td",[e("code",[t._v("Exit Do")])])]),t._v(" "),e("tr",[e("td",[t._v("While")]),t._v(" "),e("td",[e("code",[t._v("Exit While")])])])])]),t._v(" "),e("p",[t._v("Exiting a loop early is a great way to boost performance by only looping the necessary number of times to satisfy the application's needs. Below is example where the loop will exit once it finds the number "),e("code",[t._v("2")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Numbers "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" SoughtValue "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" SoughtIndex\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Each")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("In")]),t._v(" Numbers\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v(" \n        SoughtIndex "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Exit")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\nDebug"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SoughtIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),e("p",[e("strong",[t._v("Continuing")])]),t._v(" "),e("p",[t._v("Along with exiting early, you can also decide that you need to just move on to the next loop iteration. This is easily done by using the "),e("code",[t._v("Continue")]),t._v(" statement. Just like "),e("code",[t._v("Exit")]),t._v(", it is proceeded by the loop name.")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Loop")]),t._v(" "),e("th",[t._v("Continue Statement")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("For")]),t._v(" "),e("td",[e("code",[t._v("Continue For")])])]),t._v(" "),e("tr",[e("td",[t._v("For Each")]),t._v(" "),e("td",[e("code",[t._v("Continue For")])])]),t._v(" "),e("tr",[e("td",[t._v("Do While")]),t._v(" "),e("td",[e("code",[t._v("Continue Do")])])]),t._v(" "),e("tr",[e("td",[t._v("While")]),t._v(" "),e("td",[e("code",[t._v("Continue While")])])])])]),t._v(" "),e("p",[t._v("Here's an example of preventing even numbers from being added to the sum.")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Numbers "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" SumOdd "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Each")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("In")]),t._v(" Numbers\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" Numbers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Continue")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v("\n    SumOdd "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Numbers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n")])])]),e("p",[e("strong",[t._v("Usage Advice")])]),t._v(" "),e("p",[t._v("There are two alternative techniques that can be used instead of using "),e("code",[t._v("Exit")]),t._v(" or "),e("code",[t._v("Continue")]),t._v(".")]),t._v(" "),e("p",[t._v("You can declare a new Boolean variable, initializing it to one value and conditionally setting it to the other value inside the loop; you then use a conditional statement (e.g. "),e("code",[t._v("If")]),t._v(") based on that variable to avoid execution of the statements inside the loop in subsequent iterations.")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Found "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Boolean")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" FoundIndex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("To")]),t._v(" N "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Not")]),t._v(" Found "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AndAlso")]),t._v(" A"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SoughtValue "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n        FoundIndex "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n        Found "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("\n\n")])])]),e("p",[t._v("One of the objections to this technique is that it may be inefficient. For example, if in the above example "),e("code",[t._v("N")]),t._v(" is 1000000 and the first element of the array "),e("code",[t._v("A")]),t._v(" is equal to "),e("code",[t._v("SoughtValue")]),t._v(", the loop will iterate a further 999999 times without doing anything useful. However, this technique can have the advantage of greater clarity in some cases.")]),t._v(" "),e("p",[t._v("You can use the "),e("code",[t._v("GoTo")]),t._v(" statement to jump out of the loop. Note that you cannot use "),e("code",[t._v("GoTo")]),t._v(" to jump "),e("strong",[t._v("into")]),t._v(" a loop.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\n   Dim FoundIndex As Integer\n    For i As Integer = 0 To N - 1\n        If A(i) = SoughtValue Then\n            FoundIndex = i\n            GoTo Found\n        End If\n    Next\n    Debug.Print("Not found")\nFound:\n    Debug.Print(FoundIndex)\n\n')])])]),e("p",[t._v("This technique can sometimes be the neatest way to jump out of the loop and avoid one or more statements that are executed just after the natural end of the loop.")]),t._v(" "),e("p",[t._v("You should consider all of the alternatives, and use whichever one best fits your requirements, considering such things as efficiency, speed of writing the code, and readability (thus maintainability).")]),t._v(" "),e("p",[t._v("Do not be put off using "),e("code",[t._v("GoTo")]),t._v(" on those occasions when it is the best alternative.")]),t._v(" "),e("h2",{attrs:{id:"while-loop-to-iterate-while-some-condition-is-true"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#while-loop-to-iterate-while-some-condition-is-true"}},[t._v("#")]),t._v(" While loop to iterate while some condition is true")]),t._v(" "),e("p",[t._v("A "),e("code",[t._v("While")]),t._v(" loop starts by evaluating a condition. If it is true, the body of the loop is executed. After the body of the loop is executed, the "),e("code",[t._v("While")]),t._v(" condition is evaluated again to determine whether to re-execute the body.")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" iteration "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("While")]),t._v(" iteration "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n  Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Writeline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iteration"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ToString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  iteration "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("While")]),t._v("\n\n")])])]),e("p",[t._v("This outputs:")]),t._v(" "),e("blockquote"),t._v(" "),e("p",[t._v("1 2 3 4 5 6 7 8 9 10")]),t._v(" "),e("p",[e("strong",[t._v("Warning:")]),t._v(" A "),e("code",[t._v("While")]),t._v(" loop can lead to an "),e("strong",[t._v("infinite loop")]),t._v(". Consider what would happen if the line of code that increments "),e("code",[t._v("iteration")]),t._v(" were removed. In such a case the condition would never be True and the loop would continue indefinitely.")]),t._v(" "),e("h2",{attrs:{id:"do-loop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#do-loop"}},[t._v("#")]),t._v(" Do...Loop")]),t._v(" "),e("p",[t._v("Use "),e("code",[t._v("Do...Loop")]),t._v(" to repeat a block of statements "),e("code",[t._v("While")]),t._v(" or "),e("code",[t._v("Until")]),t._v(" a condition is true, checking the condition either at the beginning or at the end of the loop.")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Do")]),t._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Write"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Loop")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("While")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\n")])])]),e("p",[t._v("or")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Do")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("While")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Write"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Loop")]),t._v("\n\n")])])]),e("blockquote"),t._v(" "),e("p",[t._v("0 1 2 3 4 5 6 7 8 9")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Do")]),t._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Write"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Loop")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Until")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\n")])])]),e("p",[t._v("or")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Do")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Until")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Write"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Loop")]),t._v("\n\n")])])]),e("blockquote"),t._v(" "),e("p",[t._v("0 1 2 3 4 5 6 7 8 9")]),t._v(" "),e("p",[e("code",[t._v("Continue Do")]),t._v(" can be used to skip to the next iteration of the loop:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Do")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("While")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n    x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Mod")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Continue")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Do")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Write"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Loop")]),t._v("\n\n")])])]),e("blockquote"),t._v(" "),e("p",[t._v("1 3 5 7 9")]),t._v(" "),e("p",[t._v("You can terminate the loop with "),e("code",[t._v("Exit Do")]),t._v(" - note that in this example, the lack of any condition would otherwise cause an infinite loop:")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Do")]),t._v("\n    Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Write"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Exit")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Do")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("If")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Loop")]),t._v("\n\n")])])]),e("blockquote"),t._v(" "),e("p",[t._v("0 1 2 3 4 5 6 7 8 9")]),t._v(" "),e("h2",{attrs:{id:"nested-loop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nested-loop"}},[t._v("#")]),t._v(" Nested Loop")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[t._v("A nested "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("loop")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("loop")]),t._v(" within a "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("loop")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" an inner "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("loop")]),t._v(" within the body "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" an outer one"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" How this works "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" that the first pass "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" the outer "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("loop")]),t._v(" triggers the inner "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("loop")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" which executes "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" completion"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Then")]),t._v(" the second pass "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" the outer "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("loop")]),t._v(" triggers the inner "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("loop")]),t._v(" again"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" This repeats "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("until")]),t._v(" the outer "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("loop")]),t._v(" finishes"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" a break within either the inner "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" outer "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("loop")]),t._v(" would interrupt this process"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n")])])]),e("p",[t._v("The Structure of a For Next nested loop is :")]),t._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" counter1"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("startNumber "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" endNumber "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Step")]),t._v(" increment"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("For")]),t._v(" counter2"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("startNumber "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" endNumber "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Step")]),t._v(" increment"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        One "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" more VB statements\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v(" counter2\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Next")]),t._v("  counter1\n\n")])])]),e("p",[t._v("Example :")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n   For  firstCounter = 1 to 5\n\n      Print “First Loop of ” + firstCounter\n\n    For   secondCounter= 1 to 4\n\n      Print “Second Loop of ” + secondCounter\n\n    Next secondCounter\n\n  Next firstCounter\n\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);