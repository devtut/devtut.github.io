(window.webpackJsonp=window.webpackJsonp||[]).push([[3434],{3841:function(s,t,e){"use strict";e.r(t);var a=e(31),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"passing-arguments-byref-or-byval"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#passing-arguments-byref-or-byval"}},[s._v("#")]),s._v(" Passing Arguments ByRef or ByVal")]),s._v(" "),e("p",[s._v("The "),e("code",[s._v("ByRef")]),s._v(" and "),e("code",[s._v("ByVal")]),s._v(" modifiers are part of a procedure's signature and indicate how an argument is passed to a procedure. In VBA a parameter is passed "),e("code",[s._v("ByRef")]),s._v(" unless specified otherwise (i.e. "),e("code",[s._v("ByRef")]),s._v(" is implicit if absent).")]),s._v(" "),e("p",[e("strong",[s._v("Note")]),s._v(" In many other programming languages (including VB.NET), parameters are implicitly passed by value if no modifier is specified: consider specifying "),e("code",[s._v("ByRef")]),s._v(" modifiers explicitly to avoid possible confusion.")]),s._v(" "),e("h2",{attrs:{id:"passing-simple-variables-byref-and-byval"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#passing-simple-variables-byref-and-byval"}},[s._v("#")]),s._v(" Passing Simple Variables ByRef And ByVal")]),s._v(" "),e("p",[s._v("Passing "),e("code",[s._v("ByRef")]),s._v(" or "),e("code",[s._v("ByVal")]),s._v(" indicates whether the actual value of an argument is passed to the "),e("code",[s._v("CalledProcedure")]),s._v(" by the "),e("code",[s._v("CallingProcedure")]),s._v(", or whether a reference (called a pointer in some other languages) is passed to the "),e("code",[s._v("CalledProcedure")]),s._v(".")]),s._v(" "),e("p",[s._v("If an argument is passed "),e("code",[s._v("ByRef")]),s._v(", the memory address of the argument is passed to the "),e("code",[s._v("CalledProcedure")]),s._v(" and any modification to that parameter by the "),e("code",[s._v("CalledProcedure")]),s._v(" is made to the value in the "),e("code",[s._v("CallingProcedure")]),s._v(".")]),s._v(" "),e("p",[s._v("If an argument is passed "),e("code",[s._v("ByVal")]),s._v(", the actual value, not a reference to the variable, is passed to the "),e("code",[s._v("CalledProcedure")]),s._v(".")]),s._v(" "),e("p",[s._v("A simple example will illustrate this clearly:")]),s._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" CalledProcedure"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByRef")]),s._v(" X "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByVal")]),s._v(" Y "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    X "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("321")]),s._v("\n    Y "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("654")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" CallingProcedure"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" A "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" B "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),s._v("\n    A "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v("\n    B "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("456")]),s._v("\n\n    Debug"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Print "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"BEFORE CALL => A: "')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CStr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("A"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"B: "')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CStr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("B"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("''Result : BEFORE CALL => A: 123 B: 456")]),s._v("\n\n    CalledProcedure X"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("A"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("B\n\n    Debug"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Print "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"AFTER CALL =  A: "')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CStr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("A"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"B: "')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CStr")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("B"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("''Result : AFTER CALL => A: 321 B: 456")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n")])])]),e("p",[s._v("Another example:")]),s._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" Main"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" IntVarByVal "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" IntVarByRef "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),s._v("\n    \n    IntVarByVal "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n    IntVarByRef "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n    \n    SubChangeArguments IntVarByVal"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" IntVarByRef "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v('\'5 goes in as a "copy". 10 goes in as a reference')]),s._v("\n    Debug"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Print "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"IntVarByVal: "')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" IntVarByVal "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'prints 5 (no change made by SubChangeArguments)")]),s._v("\n    Debug"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Print "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"IntVarByRef: "')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" IntVarByRef "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'prints 99 (the variable was changed in SubChangeArguments)")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" SubChangeArguments"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByVal")]),s._v(" ParameterByVal "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByRef")]),s._v(" ParameterByRef "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    ParameterByVal "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ParameterByVal "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' 5 + 2 = 7 (changed only inside this Sub)")]),s._v("\n    ParameterByRef "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ParameterByRef "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("89")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("' 10 + 89 = 99 (changes the IntVarByRef itself - in the Main Sub)")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n")])])]),e("h2",{attrs:{id:"byref"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#byref"}},[s._v("#")]),s._v(" ByRef")]),s._v(" "),e("h3",{attrs:{id:"default-modifier"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#default-modifier"}},[s._v("#")]),s._v(" Default modifier")]),s._v(" "),e("p",[s._v("If no modifier is specified for a parameter, that parameter is implicitly passed by reference.")]),s._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" DoSomething1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("foo "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n")])])]),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" DoSomething2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByRef")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n")])])]),e("p",[s._v("The "),e("code",[s._v("foo")]),s._v(" parameter is passed "),e("code",[s._v("ByRef")]),s._v(" in both "),e("code",[s._v("DoSomething1")]),s._v(" and "),e("code",[s._v("DoSomething2")]),s._v(".")]),s._v(" "),e("blockquote"),s._v(" "),e("p",[e("strong",[s._v("Watch out!")]),s._v(" If you're coming to VBA with experience from other languages, this is very likely the exact opposite behavior to the one you're used to. In many other programming languages (including VB.NET), the implicit/default modifier passes parameters by value.")]),s._v(" "),e("h3",{attrs:{id:"passing-by-reference"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#passing-by-reference"}},[s._v("#")]),s._v(" Passing by reference")]),s._v(" "),e("li",[s._v("\nWhen a **value** is passed `ByRef`, the procedure receives **a reference** to the value.\n"),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" Test"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),s._v("\n    foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("\n    DoSomething foo\n    Debug"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Print foo\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Private")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" DoSomething"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByRef")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n")])])]),e("p",[s._v("Calling the above "),e("code",[s._v("Test")]),s._v(" procedure outputs 84. "),e("code",[s._v("DoSomething")]),s._v(" is given "),e("code",[s._v("foo")]),s._v(" and receives a "),e("strong",[s._v("reference")]),s._v(" to the value, and therefore works with the same memory address as the caller.\n")])]),s._v(" "),e("li",[s._v("\nWhen a "),e("strong",[s._v("reference")]),s._v(" is passed "),e("code",[s._v("ByRef")]),s._v(", the procedure receives "),e("strong",[s._v("a reference")]),s._v(" to the pointer."),e("p"),s._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" Test"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" Collection\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Set")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" Collection\n    DoSomething foo\n    Debug"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Print foo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Count\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Private")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" DoSomething"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByRef")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" Collection"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    foo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Add "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Set")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("Nothing")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n")])])]),e("p",[s._v("The above code raises "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/vba/8917/vba-run-time-errors/27750/run-time-error-91-object-variable-or-with-block-variable-not-set#t=201702220411103495763",target:"_blank",rel:"noopener noreferrer"}},[s._v("run-time error 91"),e("OutboundLink")],1),s._v(", because the caller is calling the "),e("code",[s._v("Count")]),s._v(" member of an object that no longer exists, because "),e("code",[s._v("DoSomething")]),s._v(" was given a "),e("strong",[s._v("reference")]),s._v(" to the object pointer and assigned it to "),e("code",[s._v("Nothing")]),s._v(" before returning.\n")])]),e("p"),s._v(" "),e("h3",{attrs:{id:"forcing-byval-at-call-site"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forcing-byval-at-call-site"}},[s._v("#")]),s._v(" Forcing ByVal at call site")]),s._v(" "),e("p",[s._v("Using parentheses at the call site, you can override "),e("code",[s._v("ByRef")]),s._v(" and force an argument to be passed "),e("code",[s._v("ByVal")]),s._v(":")]),s._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" Test"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),s._v("\n    foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("\n    DoSomething "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("foo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    Debug"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Print foo\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Private")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" DoSomething"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByRef")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n")])])]),e("p",[s._v("The above code outputs 42, regardless of whether "),e("code",[s._v("ByRef")]),s._v(" is specified implicitly or explicitly.")]),s._v(" "),e("blockquote"),s._v(" "),e("p",[e("strong",[s._v("Watch out!")]),s._v(" Because of this, using extraneous parentheses in procedure calls can easily introduce bugs. Pay attention to the whitespace between the procedure name and the argument list:")]),s._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[s._v("bar "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" DoSomething"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("foo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'function call, no whitespace; parens are part of args list")]),s._v("\nDoSomething "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("foo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'procedure call, notice whitespace; parens are NOT part of args list")]),s._v("\nDoSomething foo "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'procedure call does not force the foo parameter to be ByVal")]),s._v("\n\n")])])]),e("h2",{attrs:{id:"byval"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#byval"}},[s._v("#")]),s._v(" ByVal")]),s._v(" "),e("h3",{attrs:{id:"passing-by-value"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#passing-by-value"}},[s._v("#")]),s._v(" Passing by value")]),s._v(" "),e("li",[s._v("\nWhen a **value** is passed `ByVal`, the procedure receives **a copy** of the value.\n"),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" Test"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),s._v("\n    foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("\n    DoSomething foo\n    Debug"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Print foo\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Private")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" DoSomething"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByVal")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Long")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n")])])]),e("p",[s._v("Calling the above "),e("code",[s._v("Test")]),s._v(" procedure outputs 42. "),e("code",[s._v("DoSomething")]),s._v(" is given "),e("code",[s._v("foo")]),s._v(" and receives "),e("strong",[s._v("a copy")]),s._v(" of the value. The copy is multiplied by 2, and then discarded when the procedure exits; the caller's copy was never altered.\n")])]),s._v(" "),e("li",[s._v("\nWhen a "),e("strong",[s._v("reference")]),s._v(" is passed "),e("code",[s._v("ByVal")]),s._v(", the procedure receives "),e("strong",[s._v("a copy")]),s._v(" of the pointer."),e("p"),s._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" Test"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Dim")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" Collection\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Set")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("New")]),s._v(" Collection\n    DoSomething foo\n    Debug"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Print foo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Count\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Private")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" DoSomething"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByVal")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" Collection"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    foo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Add "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Set")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("Nothing")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n")])])]),e("p",[s._v("Calling the above "),e("code",[s._v("Test")]),s._v(" procedure outputs 1. "),e("code",[s._v("DoSomething")]),s._v(" is given "),e("code",[s._v("foo")]),s._v(" and receives "),e("strong",[s._v("a copy")]),s._v(" of "),e("strong",[s._v("the pointer")]),s._v(" to the "),e("code",[s._v("Collection")]),s._v(" object. Because the "),e("code",[s._v("foo")]),s._v(" object variable in the "),e("code",[s._v("Test")]),s._v(" scope points to the same object, adding an item in "),e("code",[s._v("DoSomething")]),s._v(" adds the item to the same object. Because it's "),e("strong",[s._v("a copy")]),s._v(" of the pointer, setting its reference to "),e("code",[s._v("Nothing")]),s._v(" does not affect the caller's own copy.\n")])]),e("p"),s._v(" "),e("h4",{attrs:{id:"remarks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[s._v("#")]),s._v(" Remarks")]),s._v(" "),e("h3",{attrs:{id:"passing-arrays"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#passing-arrays"}},[s._v("#")]),s._v(" Passing arrays")]),s._v(" "),e("p",[s._v("Arrays "),e("strong",[s._v("must")]),s._v(' be passed by reference. This code compiles, but raises run-time error 424 "Object Required":')]),s._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" Test"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    DoSomething Array"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Private")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" DoSomething"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByVal")]),s._v(" foo "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Variant")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    foo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Add "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n")])])]),e("p",[s._v("This code does not compile:")]),s._v(" "),e("div",{staticClass:"language-vb extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vb"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Private")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v(" DoSomething"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ByVal")]),s._v(" foo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("As")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Variant")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("'ByVal is illegal for arrays")]),s._v("\n    foo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Add "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("End")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Sub")]),s._v("\n\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);