(window.webpackJsonp=window.webpackJsonp||[]).push([[2744],{3152:function(t,a,s){"use strict";s.r(a);var n=s(31),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"math-module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#math-module"}},[t._v("#")]),t._v(" Math Module")]),t._v(" "),s("h2",{attrs:{id:"rounding-round-floor-ceil-trunc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rounding-round-floor-ceil-trunc"}},[t._v("#")]),t._v(" Rounding: round, floor, ceil, trunc")]),t._v(" "),s("p",[t._v("In addition to the built-in "),s("code",[t._v("round")]),t._v(" function, the "),s("code",[t._v("math")]),t._v(" module provides the "),s("code",[t._v("floor")]),t._v(", "),s("code",[t._v("ceil")]),t._v(", and "),s("code",[t._v("trunc")]),t._v(" functions.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.55")]),t._v("\ny "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.55")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# round to the nearest integer")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("round")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("round")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -2")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the second argument gives how many decimal places to round to (defaults to 0)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("round")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  1.6")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("round")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -1.6")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# math is a module so import it first, then use it.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" math\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# get the largest integer less than x")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("floor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  1")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("floor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -2")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# get the smallest integer greater than x")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ceil"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  2")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ceil"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -1")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# drop fractional part of x")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("trunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  1, equivalent to math.floor for positive numbers")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("trunc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -1, equivalent to math.ceil for negative numbers")]),t._v("\n\n")])])]),s("p",[s("code",[t._v("floor")]),t._v(", "),s("code",[t._v("ceil")]),t._v(", "),s("code",[t._v("trunc")]),t._v(", and "),s("code",[t._v("round")]),t._v(" always return a "),s("code",[t._v("float")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("round")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1.0")]),t._v("\n\n")])])]),s("p",[s("code",[t._v("round")]),t._v(" always breaks ties away from zero.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("round")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1.0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("round")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2.0")]),t._v("\n\n")])])]),s("p",[s("code",[t._v("floor")]),t._v(", "),s("code",[t._v("ceil")]),t._v(", and "),s("code",[t._v("trunc")]),t._v(" always return an "),s("code",[t._v("Integral")]),t._v(" value, while "),s("code",[t._v("round")]),t._v(" returns an "),s("code",[t._v("Integral")]),t._v(" value if called with one argument.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("round")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("round")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.33")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1.3")]),t._v("\n\n")])])]),s("p",[s("code",[t._v("round")]),t._v(" breaks ties towards the nearest even number. This corrects the bias towards larger numbers when performing a large number of calculations.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("round")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("round")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"warning"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#warning"}},[t._v("#")]),t._v(" Warning!")]),t._v(" "),s("p",[t._v("As with any floating-point representation, some fractions "),s("strong",[t._v("cannot be represented exactly")]),t._v(". This can lead to some unexpected rounding behavior.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("round")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.675")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2.67, not 2.68!")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"warning-about-the-floor-trunc-and-integer-division-of-negative-numbers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#warning-about-the-floor-trunc-and-integer-division-of-negative-numbers"}},[t._v("#")]),t._v(" Warning about the floor, trunc, and integer division of negative numbers")]),t._v(" "),s("p",[t._v("Python (and C++ and Java) round away from zero for negative numbers. Consider:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("floor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"trigonometry"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#trigonometry"}},[t._v("#")]),t._v(" Trigonometry")]),t._v(" "),s("h3",{attrs:{id:"calculating-the-length-of-the-hypotenuse"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#calculating-the-length-of-the-hypotenuse"}},[t._v("#")]),t._v(" Calculating the length of the hypotenuse")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hypot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Just a shorthand for SquareRoot(2**2 + 4**2)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 4.47213595499958")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"converting-degrees-to-from-radians"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#converting-degrees-to-from-radians"}},[t._v("#")]),t._v(" Converting degrees to/from radians")]),t._v(" "),s("p",[t._v("All "),s("code",[t._v("math")]),t._v(" functions expect "),s("strong",[t._v("radians")]),t._v(" so you need to convert degrees to radians:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("radians"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("45")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Convert 45 degrees to radians")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 0.7853981633974483")]),t._v("\n\n")])])]),s("p",[t._v("All results of the inverse trigonometic functions return the result in radians, so you may need to convert it back to degrees:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("degrees"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("asin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Convert the result of asin to degrees")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 90.0")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"sine-cosine-tangent-and-inverse-functions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sine-cosine-tangent-and-inverse-functions"}},[t._v("#")]),t._v(" Sine, cosine, tangent and inverse functions")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Sine and arc sine")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pi "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 1.0")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("radians"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("90")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Sine of 90 degrees")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 1.0")]),t._v("\n\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("asin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Out: 1.5707963267948966    # "= pi / 2"')]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("asin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pi\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 0.5")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Cosine and arc cosine:")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pi "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 6.123233995736766e-17 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Almost zero but not exactly because "pi" is a float with limited precision!')]),t._v("\n\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("acos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 0.0")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Tangent and arc tangent:")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pi"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 1.633123935319537e+16 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Very large but not exactly "Inf" because "pi" is a float with limited precision')]),t._v("\n\n")])])]),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("atan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Out: 1.5707963267948966 # This is just "pi / 2"')]),t._v("\n\n")])])]),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("atan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'inf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Out: 1.5707963267948966 # This is just "pi / 2"')]),t._v("\n\n")])])]),s("p",[t._v("Apart from the "),s("code",[t._v("math.atan")]),t._v(" there is also a two-argument "),s("code",[t._v("math.atan2")]),t._v(" function, which computes the correct quadrant and avoids pitfalls of division by zero:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("atan2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Equivalent to "math.atan(1/2)"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 0.4636476090008061 # ≈ 26.57 degrees, 1st quadrant")]),t._v("\n\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("atan2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Not equal to "math.atan(-1/-2)" == "math.atan(1/2)"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: -2.677945044588987 # ≈ -153.43 degrees (or 206.57 degrees), 3rd quadrant")]),t._v("\n\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("atan2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# math.atan(1/0) would raise ZeroDivisionError")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Out: 1.5707963267948966 # This is just "pi / 2"')]),t._v("\n\n")])])]),s("h3",{attrs:{id:"hyperbolic-sine-cosine-and-tangent"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hyperbolic-sine-cosine-and-tangent"}},[t._v("#")]),t._v(" Hyperbolic sine, cosine and tangent")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Hyperbolic sine function")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sinh"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 11.548739357257746")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("asinh"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 0.8813735870195429")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Hyperbolic cosine function")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cosh"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 11.591953275521519")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("acosh"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 0.0")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Hyperbolic tangent function")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tanh"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 0.99627207622075")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("atanh"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = 0.5493061443340549")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"logarithms"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#logarithms"}},[t._v("#")]),t._v(" Logarithms")]),t._v(" "),s("p",[s("code",[t._v("math.log(x)")]),t._v(" gives the natural (base "),s("code",[t._v("e")]),t._v(") logarithm of "),s("code",[t._v("x")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1.0")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0.0")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4.605170185988092")]),t._v("\n\n")])])]),s("p",[s("code",[t._v("math.log")]),t._v(" can lose precision with numbers close to 1, due to the limitations of floating-point numbers. In order to accurately calculate logs close to 1, use "),s("code",[t._v("math.log1p")]),t._v(", which evaluates the natural logarithm of 1 plus the argument:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e-20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0.0")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log1p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e-20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1e-20")]),t._v("\n\n")])])]),s("p",[s("code",[t._v("math.log10")]),t._v(" can be used for logs base 10:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log10"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1.0")]),t._v("\n\n")])])]),s("p",[t._v("When used with two arguments, "),s("code",[t._v("math.log(x, base)")]),t._v(" gives the logarithm of "),s("code",[t._v("x")]),t._v(" in the given "),s("code",[t._v("base")]),t._v(" (i.e. "),s("code",[t._v("log(x) / log(base)")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2.0")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("27")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3.0")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0.0")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"constants"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#constants"}},[t._v("#")]),t._v(" Constants")]),t._v(" "),s("p",[s("code",[t._v("math")]),t._v(" modules includes two commonly used mathematical constants.")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("math.pi")]),t._v(" - The mathematical constant pi")]),t._v(" "),s("li",[s("code",[t._v("math.e")]),t._v(" - The mathematical constant "),s("strong",[t._v("e")]),t._v(" (base of natural logarithm)")])]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" math "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" pi\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.141592653589793")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" e\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.718281828459045")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n")])])]),s("p",[t._v('Python 3.5 and higher have constants for infinity and NaN ("not a number"). The older syntax of passing a string to '),s("code",[t._v("float()")]),t._v(" still works.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'inf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-inf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# NaN never compares equal to anything, even itself")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nan "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'nan'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: False")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"infinity-and-nan-not-a-number"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#infinity-and-nan-not-a-number"}},[t._v("#")]),t._v(' Infinity and NaN ("not a number")')]),t._v(" "),s("p",[t._v('In all versions of Python, we can represent infinity and NaN ("not a number") as follows:')]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("pos_inf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'inf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# positive infinity")]),t._v("\nneg_inf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-inf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# negative infinity")]),t._v("\nnot_a_num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'nan'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# NaN ("not a number")')]),t._v("\n\n")])])]),s("p",[t._v("In Python 3.5 and higher, we can also use the defined constants "),s("code",[t._v("math.inf")]),t._v(" and "),s("code",[t._v("math.nan")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("pos_inf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inf\nneg_inf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inf\nnot_a_num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nan\n\n")])])]),s("p",[t._v("The string representations display as "),s("code",[t._v("inf")]),t._v(" and "),s("code",[t._v("-inf")]),t._v(" and "),s("code",[t._v("nan")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("pos_inf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" neg_inf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" not_a_num\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: (inf, -inf, nan)")]),t._v("\n\n")])])]),s("p",[t._v("We can test for either positive or negative infinity with the "),s("code",[t._v("isinf")]),t._v(" method:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isinf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pos_inf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True")]),t._v("\n\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isinf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("neg_inf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True")]),t._v("\n\n")])])]),s("p",[t._v("We can test specifically for positive infinity or for negative infinity by direct comparison:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("pos_inf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'inf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or  == math.inf in Python 3.5+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True")]),t._v("\n\nneg_inf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-inf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or  == -math.inf in Python 3.5+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True")]),t._v("\n\nneg_inf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" pos_inf\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: False")]),t._v("\n\n")])])]),s("p",[t._v("Python 3.2 and higher also allows checking for finiteness:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isfinite"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pos_inf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: False")]),t._v("\n\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isfinite"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True")]),t._v("\n\n")])])]),s("p",[t._v("Comparison operators work as expected for positive and negative infinity:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sys\n\nsys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("float_info"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("max")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 1.7976931348623157e+308  (this is system-dependent)")]),t._v("\n\npos_inf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" sys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("float_info"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("max")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True")]),t._v("\n\nneg_inf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("sys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("float_info"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("max")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True")]),t._v("\n\n")])])]),s("p",[t._v("But if an arithmetic expression produces a value larger than the maximum that can be represented as a "),s("code",[t._v("float")]),t._v(", it will become infinity:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("pos_inf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" sys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("float_info"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("max")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0000001")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True")]),t._v("\n\nneg_inf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("sys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("float_info"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("max")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0000001")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True")]),t._v("\n\n")])])]),s("p",[t._v("However division by zero does not give a result of infinity (or negative infinity where appropriate), rather it raises a "),s("code",[t._v("ZeroDivisionError")]),t._v(" exception.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("except")]),t._v(" ZeroDivisionError"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Division by zero"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: Division by zero")]),t._v("\n\n")])])]),s("p",[t._v("Arithmetic operations on infinity just give infinite results, or sometimes NaN:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" pos_inf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" neg_inf\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" neg_inf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" pos_inf\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True")]),t._v("\n\npos_inf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" neg_inf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" neg_inf\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" pos_inf\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: nan")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" neg_inf\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: nan")]),t._v("\n\npos_inf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" pos_inf\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: nan")]),t._v("\n\n")])])]),s("p",[t._v("NaN is never equal to anything, not even itself. We can test for it is with the "),s("code",[t._v("isnan")]),t._v(" method:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("not_a_num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" not_a_num\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: False")]),t._v("\n\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isnan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("not_a_num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nOut"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n\n")])])]),s("p",[t._v('NaN always compares as "not equal", but never less than or greater than:')]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("not_a_num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or any random value")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True")]),t._v("\n\nnot_a_num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v("   not_a_num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v("   not_a_num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: False")]),t._v("\n\n")])])]),s("p",[t._v('Arithmetic operations on NaN always give NaN. This includes multiplication by -1: there is no "negative NaN".')]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" not_a_num\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: nan")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-nan'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: nan")]),t._v("\n\n")])])]),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nan\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: nan")]),t._v("\n\n")])])]),s("p",[t._v("There is one subtle difference between the old "),s("code",[t._v("float")]),t._v(" versions of NaN and infinity and the Python 3.5+ "),s("code",[t._v("math")]),t._v(" library constants:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inf "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nan "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nan\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: (True, True)")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'inf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'inf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'nan'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'nan'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: (False, False)")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"pow-for-faster-exponentiation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pow-for-faster-exponentiation"}},[t._v("#")]),t._v(" Pow for faster exponentiation")]),t._v(" "),s("p",[t._v("Using the timeit module from the command line:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" python "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m timeit "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'for x in xrange(50000): b = x**3'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" loops"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" best of "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("51.2")]),t._v(" msec per loop\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" python "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m timeit "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'from math import pow'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'for x in xrange(50000): b = pow(x,3)'")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" loops"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" best of "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9.15")]),t._v(" msec per loop\n\n")])])]),s("p",[t._v("The built-in "),s("code",[t._v("**")]),t._v(" operator often comes in handy, but if performance is of the essence, use math.pow. Be sure to note, however, that pow returns floats, even if the arguments are integers:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" math "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("pow")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("pow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3125.0")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"copying-signs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#copying-signs"}},[t._v("#")]),t._v(" Copying signs")]),t._v(" "),s("p",[t._v("In Python 2.6 and higher, "),s("code",[t._v("math.copysign(x, y)")]),t._v(" returns "),s("code",[t._v("x")]),t._v(" with the sign of "),s("code",[t._v("y")]),t._v(". The returned value is always a "),s("code",[t._v("float")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("copysign"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2.0")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("copysign"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -3.0")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("copysign"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("14.2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4.0")]),t._v("\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("copysign"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -1.0, on a platform which supports signed zero")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"imaginary-numbers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#imaginary-numbers"}},[t._v("#")]),t._v(" Imaginary Numbers")]),t._v(" "),s("p",[t._v('Imaginary numbers in Python are represented by a "j" or "J" trailing the target number.')]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1j")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Equivalent to the square root of -1.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1j")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1j")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# = (-1+0j)")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"complex-numbers-and-the-cmath-module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#complex-numbers-and-the-cmath-module"}},[t._v("#")]),t._v(" Complex numbers and the cmath module")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("cmath")]),t._v(" module is similar to the "),s("code",[t._v("math")]),t._v(" module, but defines functions appropriately for the complex plane.")]),t._v(" "),s("p",[t._v("First of all, complex numbers are a numeric type that is part of the Python language itself rather than being provided by a library class. Thus we don't need to "),s("code",[t._v("import cmath")]),t._v(" for ordinary arithmetic expressions.")]),t._v(" "),s("p",[t._v("Note that we use "),s("code",[t._v("j")]),t._v(" (or "),s("code",[t._v("J")]),t._v(") and not "),s("code",[t._v("i")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("z "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3j")]),t._v("\n\n")])])]),s("p",[t._v("We must use "),s("code",[t._v("1j")]),t._v(" since "),s("code",[t._v("j")]),t._v(" would be the name of a variable rather than a numeric literal.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1j")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1j")]),t._v("\nOut"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0j")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1j")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1j")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Out: (0.20787957635076193+0j)     # "i to the i"  ==  math.e ** -(math.pi/2)')]),t._v("\n\n")])])]),s("p",[t._v("We have the "),s("code",[t._v("real")]),t._v(" part and the "),s("code",[t._v("imag")]),t._v(" (imaginary) part, as well as the complex "),s("code",[t._v("conjugate")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# real part and imaginary part are both float type")]),t._v("\nz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("real"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("imag\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: (1.0, 3.0)")]),t._v("\n\nz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("conjugate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: (1-3j)    # z.conjugate() == z.real - z.imag * 1j")]),t._v("\n\n")])])]),s("p",[t._v("The built-in functions "),s("code",[t._v("abs")]),t._v(" and "),s("code",[t._v("complex")]),t._v(" are also part of the language itself and don't require any import:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("abs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1j")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 1.4142135623730951     # square root of 2")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("complex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: (1+0j)")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("complex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("imag"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: (1j)")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("complex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: (1+1j)")]),t._v("\n\n")])])]),s("p",[t._v("The "),s("code",[t._v("complex")]),t._v(" function can take a string, but it can't have spaces:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("complex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1+1j'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: (1+1j)")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("complex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1 + 1j'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Exception: ValueError: complex() arg is a malformed string")]),t._v("\n\n")])])]),s("p",[t._v("But for most functions we do need the module, for instance "),s("code",[t._v("sqrt")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" cmath\n\ncmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sqrt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 1j")]),t._v("\n\n")])])]),s("p",[t._v("Naturally the behavior of "),s("code",[t._v("sqrt")]),t._v(" is different for complex numbers and real numbers. In non-complex "),s("code",[t._v("math")]),t._v(" the square root of a negative number raises an exception:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" math\n\nmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sqrt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Exception: ValueError: math domain error")]),t._v("\n\n")])])]),s("p",[t._v("Functions are provided to convert to and from polar coordinates:")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("cmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("polar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1j")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: (1.4142135623730951, 0.7853981633974483)    # == (sqrt(1 + 1), atan2(1, 1))")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("abs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1j")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("phase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1j")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: (1.4142135623730951, 0.7853981633974483)    # same as previous calculation")]),t._v("\n\ncmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sqrt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("atan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: (1.0000000000000002+1.0000000000000002j)")]),t._v("\n\n")])])]),s("p",[t._v('The mathematical field of complex analysis is beyond the scope of this example, but many functions in the complex plane have a "branch cut", usually along the real axis or the imaginary axis. Most modern platforms support "signed zero" as specified in IEEE 754, which provides continuity of those functions on both sides of the branch cut. The following example is from the Python documentation:')]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("cmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("phase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("complex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: 3.141592653589793")]),t._v("\n\ncmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("phase"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("complex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: -3.141592653589793")]),t._v("\n\n")])])]),s("p",[t._v("The "),s("code",[t._v("cmath")]),t._v(" module also provides many functions with direct counterparts from the "),s("code",[t._v("math")]),t._v(" module.")]),t._v(" "),s("p",[t._v("In addition to "),s("code",[t._v("sqrt")]),t._v(", there are complex versions of "),s("code",[t._v("exp")]),t._v(", "),s("code",[t._v("log")]),t._v(", "),s("code",[t._v("log10")]),t._v(", the trigonometric functions and their inverses ("),s("code",[t._v("sin")]),t._v(", "),s("code",[t._v("cos")]),t._v(", "),s("code",[t._v("tan")]),t._v(", "),s("code",[t._v("asin")]),t._v(", "),s("code",[t._v("acos")]),t._v(", "),s("code",[t._v("atan")]),t._v("), and the hyperbolic functions and their inverses ("),s("code",[t._v("sinh")]),t._v(", "),s("code",[t._v("cosh")]),t._v(", "),s("code",[t._v("tanh")]),t._v(", "),s("code",[t._v("asinh")]),t._v(", "),s("code",[t._v("acosh")]),t._v(", "),s("code",[t._v("atanh")]),t._v("). Note however there is no complex counterpart of "),s("code",[t._v("math.atan2")]),t._v(", the two-argument form of arctangent.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("cmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1j")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: (0.34657359027997264+0.7853981633974483j)")]),t._v("\n\ncmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1j")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" cmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: (-1+1.2246467991473532e-16j)   # e to the i pi == -1, within rounding error")]),t._v("\n\n")])])]),s("p",[t._v("The constants "),s("code",[t._v("pi")]),t._v(" and "),s("code",[t._v("e")]),t._v(" are provided. Note these are "),s("code",[t._v("float")]),t._v(" and not "),s("code",[t._v("complex")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: <class 'float'>")]),t._v("\n\n")])])]),s("p",[t._v("The "),s("code",[t._v("cmath")]),t._v(" module also provides complex versions of "),s("code",[t._v("isinf")]),t._v(", and (for Python 3.2+) "),s("code",[t._v("isfinite")]),t._v('. See "'),s("a",{attrs:{href:"http://stackoverflow.com/documentation/python/230/math-module/3973/infinity-and-nan-not-a-number",target:"_blank",rel:"noopener noreferrer"}},[t._v("Infinity and NaN"),s("OutboundLink")],1),t._v('". A complex number is considered infinite if either its real part or its imaginary part is infinite.')]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("cmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isinf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("complex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'inf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True")]),t._v("\n\n")])])]),s("p",[t._v("Likewise, the "),s("code",[t._v("cmath")]),t._v(" module provides a complex version of "),s("code",[t._v("isnan")]),t._v('. See "'),s("a",{attrs:{href:"http://stackoverflow.com/documentation/python/230/math-module/3973/infinity-and-nan-not-a-number",target:"_blank",rel:"noopener noreferrer"}},[t._v("Infinity and NaN"),s("OutboundLink")],1),t._v('". A complex number is considered "not a number" if either its real part or its imaginary part is "not a number".')]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("cmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isnan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'nan'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True ")]),t._v("\n\n")])])]),s("p",[t._v("Note there is no "),s("code",[t._v("cmath")]),t._v(" counterpart of the "),s("code",[t._v("math.inf")]),t._v(" and "),s("code",[t._v("math.nan")]),t._v(" constants (from Python 3.5 and higher)")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("cmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isinf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("complex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True")]),t._v("\n\ncmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isnan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("complex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nan"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: True")]),t._v("\n\ncmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inf\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Exception: AttributeError: module 'cmath' has no attribute 'inf'")]),t._v("\n\n")])])]),s("p",[t._v("In Python 3.5 and higher, there is an "),s("code",[t._v("isclose")]),t._v(" method in both "),s("code",[t._v("cmath")]),t._v(" and "),s("code",[t._v("math")]),t._v(" modules.")]),t._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[t._v("z "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("cmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("polar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1j")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nz\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Out: (1.0000000000000002+1.0000000000000002j)")]),t._v("\n\ncmath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isclose"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1j")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# True")]),t._v("\n\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);