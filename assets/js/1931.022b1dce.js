(window.webpackJsonp=window.webpackJsonp||[]).push([[1931],{2339:function(t,a,s){"use strict";s.r(a);var e=s(31),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"multithreading"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#multithreading"}},[t._v("#")]),t._v(" Multithreading")]),t._v(" "),s("h2",{attrs:{id:"using-parfor-to-parallelize-a-loop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-parfor-to-parallelize-a-loop"}},[t._v("#")]),t._v(" Using parfor to parallelize a loop")]),t._v(" "),s("p",[t._v("You can use "),s("a",{attrs:{href:"http://www.mathworks.com/help/distcomp/parfor.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("parfor")]),s("OutboundLink")],1),t._v(" to execute the iterations of a loop in parallel:")]),t._v(" "),s("p",[t._v("Example:")]),t._v(" "),s("div",{staticClass:"language-matlab extra-class"},[s("pre",{pre:!0,attrs:{class:"language-matlab"}},[s("code",[t._v("poolobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parpool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% Open a parallel pool with 2 workers ")]),t._v("\n\ns "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% Performing some parallel Computations")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("parfor")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("i")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("\n    s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("disp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% Outputs '10'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("poolobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% Close the parallel pool")]),t._v("\n\n")])])]),s("p",[t._v("Note: "),s("code",[t._v("parfor")]),t._v(" cannot be nested directly. For "),s("code",[t._v("parfor")]),t._v(" nesting use a function in fisrt "),s("code",[t._v("parfor")]),t._v(" and add second "),s("code",[t._v("parfor")]),t._v(" in that function.")]),t._v(" "),s("p",[t._v("Example:")]),t._v(" "),s("div",{staticClass:"language-matlab extra-class"},[s("pre",{pre:!0,attrs:{class:"language-matlab"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("parfor")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("i")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("op"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("op"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("parfor")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("j")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% Some Computation")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"when-to-use-parfor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#when-to-use-parfor"}},[t._v("#")]),t._v(" When to use parfor")]),t._v(" "),s("p",[t._v("Basically, "),s("a",{attrs:{href:"http://mathworks.com/help/distcomp/parfor.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("parfor")]),s("OutboundLink")],1),t._v(" is recommended in two cases: lots of iterations in your loop (i.e., like "),s("code",[t._v("1e10")]),t._v("), or if each iteration takes a very long time (e.g., "),s("code",[t._v("eig(magic(1e4))")]),t._v("). In the second case you might want to consider using "),s("a",{attrs:{href:"http://mathworks.com/help/distcomp/spmd.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("spmd")]),s("OutboundLink")],1),t._v(" . The reason "),s("code",[t._v("parfor")]),t._v(" is slower than a "),s("a",{attrs:{href:"http://mathworks.com/help/distcomp/for.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("for")]),s("OutboundLink")],1),t._v(" loop for short ranges or fast iterations is the overhead needed to manage all workers correctly, as opposed to just doing the calculation.")]),t._v(" "),s("p",[t._v("Also a lot of functions have "),s("a",{attrs:{href:"http://mathworks.com/products/parallel-computing/builtin-parallel-support.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("implicit multi-threading built-in"),s("OutboundLink")],1),t._v(", making a "),s("code",[t._v("parfor")]),t._v(" loop not more efficient, when using these functions, than a serial "),s("code",[t._v("for")]),t._v(" loop, since all cores are already being used. "),s("code",[t._v("parfor")]),t._v(" will actually be a detriment in this case, since it has the allocation overhead, whilst being as parallel as the function you are trying to use.")]),t._v(" "),s("p",[t._v("Consider the following example to see the behaviour of "),s("code",[t._v("for")]),t._v(" as opposed to that of "),s("code",[t._v("parfor")]),t._v(". First open the parallel pool if you've not already done so:")]),t._v(" "),s("div",{staticClass:"language-matlab extra-class"},[s("pre",{pre:!0,attrs:{class:"language-matlab"}},[s("code",[t._v("gcp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% Opens a parallel pool using your current settings")]),t._v("\n\n")])])]),s("p",[t._v("Then execute a couple of large loops:")]),t._v(" "),s("div",{staticClass:"language-matlab extra-class"},[s("pre",{pre:!0,attrs:{class:"language-matlab"}},[s("code",[t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% Iteration number")]),t._v("\nEigenValues "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cell")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% Prepare to store the data")]),t._v("\nTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("zeros")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" ii "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("n\ntic\n    EigenValues"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("ii"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("magic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% Might want to lower the magic if it takes too long")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Time")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ii"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" toc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% Collect time after each iteration")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\nfigure"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% Create a plot of results")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("plot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntitle "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Time per iteration'")]),t._v("\nylabel "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Time [s]'")]),t._v("\nxlabel "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Iteration number[-]'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),s("p",[t._v("Then do the same with "),s("code",[t._v("parfor")]),t._v(" instead of "),s("code",[t._v("for")]),t._v(". You will notice that the average time per iteration goes up. Do realise however that the "),s("code",[t._v("parfor")]),t._v(" used all available workers, thus the total time ("),s("code",[t._v("sum(Time)")]),t._v(") has to be divided by the number of cores in your computer.")]),t._v(" "),s("p",[t._v("So, whilst the time to do each separate iteration goes up using "),s("code",[t._v("parfor")]),t._v(" with respect to using "),s("code",[t._v("for")]),t._v(", the total time goes down considerably.")]),t._v(" "),s("h2",{attrs:{id:"executing-commands-in-parallel-using-a-single-program-multiple-data-spmd-statement"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#executing-commands-in-parallel-using-a-single-program-multiple-data-spmd-statement"}},[t._v("#")]),t._v(' Executing commands in parallel using a "Single Program, Multiple Data" (SPMD) statement')]),t._v(" "),s("p",[t._v("Unlike a parallel for-loop ("),s("code",[t._v("parfor")]),t._v("), which takes the iterations of a loop and distributes them among multiple threads, a single program, multiple data ("),s("code",[t._v("spmd")]),t._v(") statement takes a series of commands and distributes them to "),s("strong",[t._v("all")]),t._v(" the threads, so that each thread performs the command and stores the results.  Consider this:")]),t._v(" "),s("div",{staticClass:"language-matlab extra-class"},[s("pre",{pre:!0,attrs:{class:"language-matlab"}},[s("code",[t._v("poolobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parpool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% open a parallel pool with two workers")]),t._v("\n\nspmd\n    q "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% each thread generates a unique 3x3 array of random numbers")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\nq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% q is called like a cell vector")]),t._v("\nq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% the values stored in each thread may be accessed by their index")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("poolobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% if the pool is closed, then the data in q will no longer be accessible")]),t._v("\n\n")])])]),s("p",[t._v("It is important to note that each thread may be accessed during the "),s("code",[t._v("spmd")]),t._v(" block by its thread index (also called lab index, or "),s("code",[t._v("labindex")]),t._v("):")]),t._v(" "),s("div",{staticClass:"language-matlab extra-class"},[s("pre",{pre:!0,attrs:{class:"language-matlab"}},[s("code",[t._v("poolobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parpool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% open a parallel pool with two workers")]),t._v("\n\nspmd\n    q "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("labindex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% each thread generates a unique array of random numbers")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% the size of q{1} is 2x2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% the size of q{2} is 3x3")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("poolobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% q is no longer accessible")]),t._v("\n\n")])])]),s("p",[t._v("In both examples, "),s("code",[t._v("q")]),t._v(" is a "),s("a",{attrs:{href:"https://www.mathworks.com/help/distcomp/composite.composite.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("composite object"),s("OutboundLink")],1),t._v(", which may be initialized with the command "),s("code",[t._v("q = Composite()")]),t._v(".  It is important to note that composite objects are only accessible while the pool is running.")]),t._v(" "),s("h2",{attrs:{id:"using-the-batch-command-to-do-various-computations-in-parallel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-the-batch-command-to-do-various-computations-in-parallel"}},[t._v("#")]),t._v(" Using the batch command to do various computations in parallel")]),t._v(" "),s("p",[t._v("To use multi-threading in MATLAB one can use the "),s("code",[t._v("batch")]),t._v(" command. Note that you must have the Parallel Computing toolbox installed.")]),t._v(" "),s("p",[t._v("For a time-consuming script, for example,")]),t._v(" "),s("div",{staticClass:"language-matlab extra-class"},[s("pre",{pre:!0,attrs:{class:"language-matlab"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" ii"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e8")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ii"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ii"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pi")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),s("p",[t._v("to run it in batch mode one would use the following:")]),t._v(" "),s("div",{staticClass:"language-matlab extra-class"},[s("pre",{pre:!0,attrs:{class:"language-matlab"}},[s("code",[t._v("job"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("batch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v('"da"'),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("which is enables MATLAB to run in batch mode and makes it possible to use MATLAB in the meantime to do other things, such as add more batch processes.")]),t._v(" "),s("p",[t._v("To retrieve the results after finishing the job and load the array "),s("code",[t._v("A")]),t._v(" into the workspace:")]),t._v(" "),s("div",{staticClass:"language-matlab extra-class"},[s("pre",{pre:!0,attrs:{class:"language-matlab"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("job"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v('Finally, open the "monitor job gui" from '),s("strong",[t._v("Home")]),t._v(" → "),s("strong",[t._v("Environment")]),t._v(" → "),s("strong",[t._v("Parallel")]),t._v(" → "),s("strong",[t._v("Monitor jobs")]),t._v(" and delete the job through:")]),t._v(" "),s("div",{staticClass:"language-matlab extra-class"},[s("pre",{pre:!0,attrs:{class:"language-matlab"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("job"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("To load a function for batch processing, simply use this statement where "),s("code",[t._v("fcn")]),t._v(" is the function name, "),s("code",[t._v("N")]),t._v(" is number of output arrays and "),s("code",[t._v("x1")]),t._v(", "),s("code",[t._v("...")]),t._v(", "),s("code",[t._v("xn")]),t._v(" are input arrays:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\nj=batch(fcn, N, {x1, x2, ..., xn})\n\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);