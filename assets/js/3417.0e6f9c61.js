(window.webpackJsonp=window.webpackJsonp||[]).push([[3417],{3825:function(e,s,t){"use strict";t.r(s);var a=t(31),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"data-structures"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#data-structures"}},[e._v("#")]),e._v(" Data Structures")]),e._v(" "),t("p",[e._v("[TODO: This topic should be an example of all the basic CS 101 data structures along with some explanation as an overview of how data structures can be implemented in VBA. This would be a good opportunity to tie in and reinforce concepts introduced in Class-related topics in VBA documentation.]")]),e._v(" "),t("h2",{attrs:{id:"linked-list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linked-list"}},[e._v("#")]),e._v(" Linked List")]),e._v(" "),t("p",[e._v("This linked list example implements "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Set_(abstract_data_type)",target:"_blank",rel:"noopener noreferrer"}},[e._v("Set abstract data type"),t("OutboundLink")],1),e._v(" operations.")]),e._v(" "),t("p",[t("strong",[e._v("SinglyLinkedNode")]),e._v(" class")]),e._v(" "),t("div",{staticClass:"language-vb extra-class"},[t("pre",{pre:!0,attrs:{class:"language-vb"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Option")]),e._v(" Explicit\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Private")]),e._v(" Value "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Variant")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Private")]),e._v(" NextNode "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" SinglyLinkedNode "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('\'"Next" is a keyword in VBA and therefore is not a valid variable name')]),e._v("\n\n")])])]),t("p",[t("strong",[e._v("LinkedList")]),e._v(" class")]),e._v(" "),t("div",{staticClass:"language-vb extra-class"},[t("pre",{pre:!0,attrs:{class:"language-vb"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Option")]),e._v(" Explicit\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Private")]),e._v(" head "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" SinglyLinkedNode\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("'Set type operations")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Sub")]),e._v(" Add"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("value "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Variant")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Dim")]),e._v(" node "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" SinglyLinkedNode\n        \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Set")]),e._v(" node "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("New")]),e._v(" SinglyLinkedNode\n    node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" value\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Set")]),e._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("nextNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" head\n    \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Set")]),e._v(" head "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" node\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("End")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Sub")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Sub")]),e._v(" Remove"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("value "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Variant")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Dim")]),e._v(" node "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" SinglyLinkedNode\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Dim")]),e._v(" prev "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" SinglyLinkedNode\n    \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Set")]),e._v(" node "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" head\n    \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("While")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Not")]),e._v(" node "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Is")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("Nothing")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("If")]),e._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" value "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Then")]),e._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("'remove node")]),e._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("If")]),e._v(" node "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Is")]),e._v(" head "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Then")]),e._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Set")]),e._v(" head "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("nextNode\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Else")]),e._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Set")]),e._v(" prev"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("nextNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("nextNode\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("End")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("If")]),e._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Exit")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Sub")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("End")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("If")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Set")]),e._v(" prev "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" node\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Set")]),e._v(" node "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("nextNode\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Wend")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("End")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Sub")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Function")]),e._v(" Exists"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("value "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Variant")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Boolean")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Dim")]),e._v(" node "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" SinglyLinkedNode\n    \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Set")]),e._v(" node "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" head\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("While")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Not")]),e._v(" node "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Is")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("Nothing")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("If")]),e._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" value "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Then")]),e._v("\n            Exists "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),e._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Exit")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Function")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("End")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("If")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Set")]),e._v(" node "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("nextNode\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Wend")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("End")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Function")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Function")]),e._v(" Count"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Long")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Dim")]),e._v(" node "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" SinglyLinkedNode\n    \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Set")]),e._v(" node "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" head\n    \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("While")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Not")]),e._v(" node "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Is")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("Nothing")]),e._v("\n        Count "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Count "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Set")]),e._v(" node "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("nextNode\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Wend")]),e._v("\n    \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("End")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Function")]),e._v("\n\n")])])]),t("h2",{attrs:{id:"binary-tree"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#binary-tree"}},[e._v("#")]),e._v(" Binary Tree")]),e._v(" "),t("p",[e._v("This is an example of an unbalanced "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Binary_search_tree",target:"_blank",rel:"noopener noreferrer"}},[e._v("binary search tree"),t("OutboundLink")],1),e._v(". A binary tree is structured conceptually as a hierarchy of nodes descending downward from a common root, where each node has two children: left and right. For example, suppose the numbers 7, 5, 9, 3, 11, 6, 12, 14 and 15 were inserted into a BinaryTree. The structure would be as below. Note that this binary tree is not "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree",target:"_blank",rel:"noopener noreferrer"}},[e._v("balanced"),t("OutboundLink")],1),e._v(", which can be a desirable characteristic for guaranteeing the performance of lookups - see "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/AVL_tree",target:"_blank",rel:"noopener noreferrer"}},[e._v("AVL trees"),t("OutboundLink")],1),e._v(" for an example of a self-balancing binary search tree.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n            7\n            / \\\n           5   9\n          / \\   \\\n         3   6   11\n                   \\ \n                    12\n                      \\\n                       14\n                        \\\n                         15\n\n")])])]),t("p",[t("strong",[e._v("BinaryTreeNode")]),e._v(" class")]),e._v(" "),t("div",{staticClass:"language-vb extra-class"},[t("pre",{pre:!0,attrs:{class:"language-vb"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Option")]),e._v(" Explicit\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Public")]),e._v(" left "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" BinaryTreeNode\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Public")]),e._v(" right "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" BinaryTreeNode\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Public")]),e._v(" key "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Variant")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Public")]),e._v(" value "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("As")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("Variant")]),e._v("\n\n")])])]),t("p",[t("strong",[e._v("BinaryTree")]),e._v(" class")]),e._v(" "),t("p",[e._v("[TODO]")])])}),[],!1,null,null,null);s.default=n.exports}}]);