(window.webpackJsonp=window.webpackJsonp||[]).push([[502],{910:function(e,t,s){"use strict";s.r(t);var a=s(31),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"getting-started-with-bash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getting-started-with-bash"}},[e._v("#")]),e._v(" Getting started with Bash")]),e._v(" "),s("h2",{attrs:{id:"hello-world"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hello-world"}},[e._v("#")]),e._v(" Hello World")]),e._v(" "),s("h3",{attrs:{id:"interactive-shell"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interactive-shell"}},[e._v("#")]),e._v(" Interactive Shell")]),e._v(" "),s("p",[e._v("The Bash shell is commonly used "),s("strong",[e._v("interactively:")]),e._v(" It lets you enter and edit commands, then executes them when you press the "),s("kbd",[e._v("Return")]),e._v(" key. Many Unix-based and Unix-like operating systems use Bash as their default shell (notably Linux and macOS). The terminal automatically enters an interactive Bash shell process on startup.")]),e._v(" "),s("p",[e._v("Output "),s("code",[e._v("Hello World")]),e._v(" by typing the following:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello World"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#> Hello World  # Output Example")]),e._v("\n\n")])])]),s("h3",{attrs:{id:"notes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#notes"}},[e._v("#")]),e._v(" Notes")]),e._v(" "),s("li",[e._v("\nYou can change the shell by just typing the name of the shell in terminal. For example: `sh`, `bash`, etc.\n")]),e._v(" "),s("li",[e._v("\n[`echo`](https://www.gnu.org/software/bash/manual/bash.html#index-echo) is a Bash builtin command that writes the arguments it receives to the standard output.  It appends a newline to the output, by default.\n")]),e._v(" "),s("h3",{attrs:{id:"non-interactive-shell"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#non-interactive-shell"}},[e._v("#")]),e._v(" Non-Interactive Shell")]),e._v(" "),s("p",[e._v("The Bash shell can also be run "),s("strong",[e._v("non-interactively")]),e._v(" from a script, making the shell require no human interaction. Interactive behavior and scripted behavior should be identical – an important design consideration of Unix V7 Bourne shell and transitively Bash. Therefore anything that can be done at the command line can be put in a script file for reuse.")]),e._v(" "),s("p",[e._v("Follow these steps to create a "),s("code",[e._v("Hello World")]),e._v(" script:")]),e._v(" "),s("li",[e._v("\nCreate a new file called `hello-world.sh`\n"),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("touch")]),e._v(" hello-world.sh\n\n")])])])]),e._v(" "),s("li",[e._v("\nMake the script executable by running [`chmod`](http://ss64.com/bash/chmod.html)`+x hello-world.sh`\n")]),e._v(" "),s("li",[e._v("\nAdd this code:\n"),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[e._v("#!/bin/bash")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello World"')]),e._v("\n\n")])])]),s("p",[s("strong",[e._v("Line 1")]),e._v(": The first line of the script must start with the character sequence "),s("code",[e._v("#!")]),e._v(", referred to as  "),s("strong",[e._v("shebang")]),s("sup",[e._v("1")]),e._v(". The shebang instructs the operating system to run "),s("code",[e._v("/bin/bash")]),e._v(", the Bash shell, passing it the script's path as an argument.\nE.g. "),s("code",[e._v("/bin/bash hello-world.sh")]),e._v(" "),s("strong",[e._v("Line 2")]),e._v(": Uses the "),s("a",{attrs:{href:"https://www.gnu.org/software/bash/manual/bash.html#index-echo",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("echo")]),s("OutboundLink")],1),e._v(" command to write "),s("code",[e._v("Hello World")]),e._v(" to the standard output.\n")])]),s("p"),e._v(" "),s("li",[e._v("\nExecute the `hello-world.sh` script from the command line using one of the following:\n"),s("ul",[e._v("\n1. `./hello-world.sh` – most commonly used, and recommended\n1. `/bin/bash hello-world.sh`\n1. `bash hello-world.sh` – assuming `/bin` is in your `$PATH`\n1. `sh hello-world.sh`\n")])]),e._v(" "),s("p",[e._v("For real production use, you would omit the "),s("code",[e._v(".sh")]),e._v(" extension (which is misleading anyway, since this is a Bash script, not a "),s("code",[e._v("sh")]),e._v(" script) and perhaps move the file to a directory within your "),s("a",{attrs:{href:"/documentation/bash/4797/internal-variables/16877/path"}},[s("code",[e._v("PATH")])]),e._v(" so that it is available to you regardless of your current working directory, just like a system command such as "),s("code",[e._v("cat")]),e._v(" or "),s("code",[e._v("ls")]),e._v(".")]),e._v(" "),s("p",[e._v("Common mistakes include:")]),e._v(" "),s("li",[e._v("\nForgetting to apply execute permission on the file, i.e., `chmod +x hello-world.sh`, resulting in the output of `./hello-world.sh: Permission denied`.\n")]),e._v(" "),s("li",[e._v("\nEditing the script on Windows, which produces incorrect line ending characters that Bash cannot handle.\nA common symptom is `: command not found`  where the carriage return has forced the cursor to the beginning of line, overwriting the text before the colon in the error message.\nThe script can be fixed using the `dos2unix` program.\nAn example use: `dos2unix hello-world.sh`\n**`dos2unix` edits the file inline.**\n")]),e._v(" "),s("li",[e._v("\nUsing `sh ./hello-world.sh`, not realizing that `bash` and `sh` are distinct shells with distinct features (though since Bash is backwards-compatible, the opposite mistake is harmless).\nAnyway, simply relying on the script's shebang line is vastly preferable to explicitly writing `bash` or `sh` (or `python` or `perl` or `awk` or `ruby` or...) before each script's file name.\nA common shebang line to use in order to make your script more portable is to use `#!/usr/bin/env bash` instead of hard-coding a path to Bash.  That way, `/usr/bin/env` has to exist, but beyond that point, `bash` just needs to be on your `PATH`.  On many systems, `/bin/bash` doesn't exist, and you should use `/usr/local/bin/bash` or some other absolute path; this change avoids having to figure out the details of that.\n")]),e._v(" "),s("p",[s("sup",[e._v("1")]),e._v(" "),s("strong",[e._v("Also referred to as sha-bang, hashbang, pound-bang, hash-pling.")])]),e._v(" "),s("h2",{attrs:{id:"hello-world-using-variables"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hello-world-using-variables"}},[e._v("#")]),e._v(" Hello World Using Variables")]),e._v(" "),s("p",[e._v("Create a new file called "),s("code",[e._v("hello.sh")]),e._v(" with the following content and give it executable permissions with "),s("code",[e._v("chmod +x hello.sh")]),e._v(".")]),e._v(" "),s("blockquote"),e._v(" "),s("p",[e._v("Execute/Run via: "),s("code",[e._v("./hello.sh")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[e._v("#!/usr/bin/env bash")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note that spaces cannot be used around the `=` assignment operator")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("whom_variable")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"World"')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Use printf to safely output the data")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("printf")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello, %s'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v('"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$whom_variable")]),e._v('"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#> Hello, World")]),e._v("\n\n")])])]),s("p",[e._v("This will print "),s("code",[e._v("Hello, World")]),e._v(" to standard output when executed.")]),e._v(" "),s("p",[e._v("To tell bash where the script is you need to be very specific, by pointing it to the containing directory, normally with "),s("code",[e._v("./")]),e._v(" if it is your working directory, where "),s("code",[e._v(".")]),e._v(" is an alias to the current directory. If you do not specify the directory, "),s("code",[e._v("bash")]),e._v(" tries to locate the script in one of the directories contained in the "),s("code",[e._v("$PATH")]),e._v(" environment variable.")]),e._v(" "),s("p",[e._v("The following code accepts an argument "),s("code",[e._v("$1")]),e._v(", which is the first command line argument, and outputs it in a formatted string, following "),s("code",[e._v("Hello,")]),e._v(".")]),e._v(" "),s("blockquote"),e._v(" "),s("p",[e._v("Execute/Run via: "),s("code",[e._v("./hello.sh World")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[e._v("#!/usr/bin/env bash")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("printf")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello, %s'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v('"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")]),e._v('"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#> Hello, World")]),e._v("\n\n")])])]),s("p",[e._v("It is important to note that "),s("code",[e._v("$1")]),e._v(" has to be quoted in double quote, not single quote. "),s("code",[e._v('"$1"')]),e._v(" expands to the first command line argument, as desired, while "),s("code",[e._v("'$1'")]),e._v(" evaluates to literal string "),s("code",[e._v("$1")]),e._v(".")]),e._v(" "),s("blockquote"),e._v(" "),s("p",[e._v("**Security Note:**"),s("br"),e._v("\nRead [**Security implications of forgetting to quote a variable in bash shells**](http://unix.stackexchange.com/q/171346/4667) to understand the importance of placing the variable text within double quotes.")]),e._v(" "),s("h2",{attrs:{id:"hello-world-with-user-input"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hello-world-with-user-input"}},[e._v("#")]),e._v(" Hello World with User Input")]),e._v(" "),s("p",[e._v("The following will prompt a user for input, and then store that input as a string (text) in a variable. The variable is then used to give a message to the user.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[e._v("#!/usr/bin/env bash")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Who are you?"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("read")]),e._v(" name\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello, '),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$name")]),e._v('."')]),e._v("\n\n")])])]),s("p",[e._v("The command "),s("code",[e._v("read")]),e._v(" here reads one line of data from standard input into the variable "),s("code",[e._v("name")]),e._v(". This is then referenced using "),s("code",[e._v("$name")]),e._v(" and printed to standard out using "),s("code",[e._v("echo")]),e._v(".")]),e._v(" "),s("p",[e._v("Example output:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ ./hello_world.sh\nWho are you?\nMatt\nHello, Matt.\n\n")])])]),s("p",[e._v('Here the user entered the name "Matt", and this code was used to say '),s("code",[e._v("Hello, Matt.")]),e._v(".")]),e._v(" "),s("p",[e._v("And if you want to append something to the variable value while printing it, use curly brackets around the variable name as shown in the following example:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[e._v("#!/usr/bin/env bash")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"What are you doing?"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("read")]),e._v(" action\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"You are '),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${action}")]),e._v('ing."')]),e._v("\n\n")])])]),s("p",[e._v("Example output:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ ./hello_world.sh\nWhat are you doing?\nSleep\nYou are Sleeping.\n\n")])])]),s("p",[e._v('Here when user enters an action, "ing" is appended to that action while printing.')]),e._v(" "),s("h2",{attrs:{id:"importance-of-quoting-in-strings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#importance-of-quoting-in-strings"}},[e._v("#")]),e._v(" Importance of Quoting in Strings")]),e._v(" "),s("p",[e._v("Quoting is important for string expansion in bash. With these, you can control how the bash parses and expands your strings.")]),e._v(" "),s("h3",{attrs:{id:"there-are-two-types-of-quoting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#there-are-two-types-of-quoting"}},[e._v("#")]),e._v(" There are two types of quoting:")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("Weak")]),e._v(": "),s("strong",[e._v('uses double quotes: "')])]),e._v(" "),s("li",[s("strong",[e._v("Strong")]),e._v(": "),s("strong",[e._v("uses single quotes: '")])])]),e._v(" "),s("p",[e._v("If you want to bash to expand your argument, you can use "),s("strong",[e._v("Weak Quoting")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[e._v("#!/usr/bin/env bash")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("world")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"World"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello '),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$world")]),e._v('"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#> Hello World")]),e._v("\n\n")])])]),s("p",[e._v("If you don't want to bash to expand your argument, you can use "),s("strong",[e._v("Strong Quoting")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[e._v("#!/usr/bin/env bash")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("world")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"World"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Hello $world'")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#> Hello $world")]),e._v("\n\n")])])]),s("p",[e._v("You can also use escape to prevent expansion:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token shebang important"}},[e._v("#!/usr/bin/env bash")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("world")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"World"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello \\'),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$world")]),e._v('"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#> Hello $world")]),e._v("\n\n")])])]),s("p",[e._v("For more detailed information other than beginner details, you can continue to read it "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/bash/729/quoting#t=201703251731496717363",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("h2",{attrs:{id:"viewing-information-for-bash-built-ins"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#viewing-information-for-bash-built-ins"}},[e._v("#")]),e._v(" Viewing information for Bash built-ins")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("command"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\n")])])]),s("p",[e._v("This will display the Bash help (manual) page for the specified built-in.")]),e._v(" "),s("p",[e._v("For example, "),s("code",[e._v("help unset")]),e._v(" will show:")]),e._v(" "),s("blockquote"),e._v(" "),s("pre",{staticClass:"lang-none prettyprint-override"},[s("code",[e._v('unset: unset [-f] [-v] [-n] [name ...]\n   Unset values and attributes of shell variables and functions.\n\n   For each NAME, remove the corresponding variable or function.\n\n   Options:\n     -f    treat each NAME as a shell function\n     -v    treat each NAME as a shell variable\n     -n    treat each NAME as a name reference and unset the variable itself\n       rather than the variable it references\n\n   Without options, unset first tries to unset a variable, and if that fails,\n   tries to unset a function.\n\n   Some variables cannot be unset; also see `readonly\'.\n\n   Exit Status:\n   Returns success unless an invalid option is given or a NAME is read-only.\n\n```\n\n\n\n\nTo see a list of all built-ins with a short description, use\n\n```bash\nhelp -d\n\n```\n\n\n\n## Hello World in "Debug" mode\n\n\n```bash\n$ cat hello.sh \n#!/bin/bash \necho "Hello World"\n$ bash -x hello.sh \n+ echo Hello World\nHello World\n\n```\n\nThe `-x` argument enables you to walk through each line in the script. One good example is here:\n\n```bash\n$ cat hello.sh\n#!/bin/bash \necho "Hello World\\n" \nadding_string_to_number="s"\nv=$(expr 5 + $adding_string_to_number) \n\n$ ./hello.sh \nHello World\n\nexpr: non-integer argument\n\n```\n\nThe above prompted error is not enough to trace the script; however, using the following way gives you a better sense where to look for the error in the script.\n\n```bash\n$ bash -x hello.sh \n+ echo Hello World\\n\nHello World\n\n+ adding_string_to_number=s\n+ expr 5 + s\nexpr: non-integer argument\n+ v=\n\n```\n\n\n\n## Handling Named Arguments\n\n\n```bash\n#!/bin/bash\n\ndeploy=false\nuglify=false\n\nwhile (( $# > 1 )); do case $1 in\n   --deploy) deploy="$2";;\n   --uglify) uglify="$2";;\n   *) break;\n esac; shift 2\ndone\n\n$deploy && echo "will deploy... deploy = $deploy"\n$uglify && echo "will uglify... uglify = $uglify"\n\n# how to run\n# chmod +x script.sh\n# ./script.sh --deploy true --uglify false\n\n```\n\n')])])])}),[],!1,null,null,null);t.default=n.exports}}]);