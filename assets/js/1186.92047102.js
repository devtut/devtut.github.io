(window.webpackJsonp=window.webpackJsonp||[]).push([[1186],{1594:function(a,t,s){"use strict";s.r(t);var e=s(31),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"free-monads"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#free-monads"}},[a._v("#")]),a._v(" Free Monads")]),a._v(" "),s("h2",{attrs:{id:"free-monads-split-monadic-computations-into-data-structures-and-interpreters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#free-monads-split-monadic-computations-into-data-structures-and-interpreters"}},[a._v("#")]),a._v(" Free monads split monadic computations into data structures and interpreters")]),a._v(" "),s("p",[a._v("For instance, a computation involving commands to read and write from the prompt:")]),a._v(" "),s("p",[a._v('First we describe the "commands" of our computation as a Functor data type')]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("{-# LANGUAGE DeriveFunctor #-}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("TeletypeF")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("next")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PrintLine")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("next")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ReadLine")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("deriving")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Functor")]),a._v("\n\n")])])]),s("p",[a._v("Then we use "),s("code",[a._v("Free")]),a._v(' to create the "Free Monad over '),s("code",[a._v("TeletypeF")]),a._v('" and build some basic operations.')]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token import-statement"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" Control"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Monad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("liftF")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("iterM")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("type")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Teletype")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("TeletypeF")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("printLine")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Teletype")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("printLine")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("str")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("liftF")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PrintLine")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("str")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("readLine")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Teletype")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("String")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("readLine")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("liftF")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ReadLine")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),s("p",[a._v("Since "),s("code",[a._v("Free f")]),a._v(" is a "),s("code",[a._v("Monad")]),a._v(" whenever "),s("code",[a._v("f")]),a._v(" is a "),s("code",[a._v("Functor")]),a._v(", we can use the standard "),s("code",[a._v("Monad")]),a._v(" combinators (including "),s("code",[a._v("do")]),a._v(" notation) to build "),s("code",[a._v("Teletype")]),a._v(" computations.")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token import-statement"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" Control"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Monad")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- we can use the standard combinators")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Teletype")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("readLine")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("printLine")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("mockingbird")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Teletype")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("mockingbird")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("forever")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("echo")]),a._v("\n\n")])])]),s("p",[a._v('Finally, we write an "interpreter" turning '),s("code",[a._v("Teletype a")]),a._v(" values into something we know how to work with like "),s("code",[a._v("IO a")])]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("interpretTeletype")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Teletype")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("interpretTeletype")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("foldFree")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("run")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("run")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("TeletypeF")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("run")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PrintLine")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("str")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("run")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ReadLine")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n\n")])])]),s("p",[a._v('Which we can use to "run" the '),s("code",[a._v("Teletype a")]),a._v(" computation in "),s("code",[a._v("IO")])]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("interpretTeletype")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("mockingbird")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hello")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("hello")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("goodbye")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("goodbye")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("this")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("will")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("go")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("on")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("forever")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("this")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("will")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("go")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("on")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("forever")]),a._v("\n\n")])])]),s("h2",{attrs:{id:"the-freer-monad"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-freer-monad"}},[a._v("#")]),a._v(" The Freer monad")]),a._v(" "),s("p",[a._v("There's an alternative formulation of the free monad called the Freer (or Prompt, or Operational) monad. The Freer monad doesn't require a Functor instance for its underlying instruction set, and it has a more recognisably list-like structure than the standard free monad.")]),a._v(" "),s("p",[a._v("The Freer monad represents programs as a sequence of atomic "),s("strong",[a._v("instructions")]),a._v(" belonging to the instruction set "),s("code",[a._v("i :: * -> *")]),a._v(". Each instruction uses its parameter to declare its return type. For example, the set of base instructions for the "),s("code",[a._v("State")]),a._v(" monad are as follows:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("StateI")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("s")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Get")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("StateI")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("s")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("s")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- the Get instruction returns a value of type 's'")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Put")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("s")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("StateI")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("s")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- the Put instruction contains an 's' as an argument and returns ()")]),a._v("\n\n")])])]),s("p",[a._v("Sequencing these instructions takes place with the "),s("code",[a._v(":>>=")]),a._v(" constructor. "),s("code",[a._v(":>>=")]),a._v(" takes a single instruction returning an "),s("code",[a._v("a")]),a._v(" and prepends it to the rest of the program, piping its return value into the continuation. In other words, given an instruction returning an "),s("code",[a._v("a")]),a._v(", and a function to turn an "),s("code",[a._v("a")]),a._v(" into a program returning a "),s("code",[a._v("b")]),a._v(", "),s("code",[a._v(":>>=")]),a._v(" will produce a program returning a "),s("code",[a._v("b")]),a._v(".")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Freer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Freer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":>>=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Freer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Freer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v("\n\n")])])]),s("p",[a._v("Note that "),s("code",[a._v("a")]),a._v(" is existentially quantified in the "),s("code",[a._v(":>>=")]),a._v(" constructor. The only way for an interpreter to learn what "),s("code",[a._v("a")]),a._v(" is is by pattern matching on the GADT "),s("code",[a._v("i")]),a._v(".")]),a._v(" "),s("blockquote"),a._v(" "),s("p",[a._v("**Aside**: The co-Yoneda lemma tells us that `Freer` is isomorphic to `Free`.\nRecall the definition of the `CoYoneda` functor:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("CoYoneda")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("CoYoneda")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("CoYoneda")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v("\n\n")])])]),s("p",[s("code",[a._v("Freer i")]),a._v(" is equivalent to "),s("code",[a._v("Free (CoYoneda i)")]),a._v(". If you take "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/haskell/1290/free-monads/10159/free-monads-are-like-fixed-points#t=201704251552288375042",target:"_blank",rel:"noopener noreferrer"}},[s("code",[a._v("Free")]),a._v("'s constructors"),s("OutboundLink")],1),a._v(" and set "),s("code",[a._v("f ~ CoYoneda i")]),a._v(", you get:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Pure")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("CoYoneda")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("CoYoneda")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("CoYoneda")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("CoYonda")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("~")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("CoYoneda")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("CoYoneda")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v("\n\n")])])]),s("p",[a._v("from which we can recover `Freer i`'s constructors by just setting\n`Freer i ~ Free (CoYoneda i)`.")]),a._v(" "),s("p",[a._v("Because "),s("code",[a._v("CoYoneda i")]),a._v(" is a "),s("code",[a._v("Functor")]),a._v(" for any "),s("code",[a._v("i")]),a._v(", "),s("code",[a._v("Freer")]),a._v(" is a "),s("code",[a._v("Monad")]),a._v(" for any "),s("code",[a._v("i")]),a._v(", even if "),s("code",[a._v("i")]),a._v(" isn't a "),s("code",[a._v("Functor")]),a._v(".")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("instance")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Monad")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Freer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Return")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":>>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":>>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("g")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- using `(->) r`'s instance of Functor, so fmap = (.)")]),a._v("\n\n")])])]),s("p",[a._v("Interpreters can be built for "),s("code",[a._v("Freer")]),a._v(" by mapping instructions to some handler monad.")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("foldFreer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Monad")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("forall")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Freer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("foldFreer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("eta")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("foldFreer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("eta")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":>>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("eta")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("i")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("foldFreer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("eta")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),s("p",[a._v("For example, we can interpret the "),s("code",[a._v("Freer (StateI s)")]),a._v(" monad using the regular "),s("code",[a._v("State s")]),a._v(" monad as a handler:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("runFreerState")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Freer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("StateI")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("s")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("s")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("s")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("runFreerState")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("State"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("runState")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("foldFreer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("toState")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("toState")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("StateI")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("s")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("State")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("s")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n          "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("toState")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Get")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("State"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("get")]),a._v("\n          "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("toState")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Put")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("State"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("put")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("\n\n")])])]),s("h2",{attrs:{id:"free-monads-are-like-fixed-points"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#free-monads-are-like-fixed-points"}},[a._v("#")]),a._v(" Free Monads are like fixed points")]),a._v(" "),s("p",[a._v("Compare the definition of "),s("code",[a._v("Free")]),a._v(" to that of "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/haskell/2984/recursion-schemes/10136/fixed-points#t=201607231205277560464",target:"_blank",rel:"noopener noreferrer"}},[s("code",[a._v("Fix")]),s("OutboundLink")],1),a._v(":")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n              "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("newtype")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("unFix")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Fix")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),s("p",[a._v("In particular, compare the type of the "),s("code",[a._v("Free")]),a._v(" constructor with the type of the "),s("code",[a._v("Fix")]),a._v(" constructor. "),s("code",[a._v("Free")]),a._v(" layers up a functor just like "),s("code",[a._v("Fix")]),a._v(", except that "),s("code",[a._v("Free")]),a._v(" has an additional "),s("code",[a._v("Return a")]),a._v(" case.")]),a._v(" "),s("h2",{attrs:{id:"how-do-foldfree-and-iterm-work"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#how-do-foldfree-and-iterm-work"}},[a._v("#")]),a._v(" How do foldFree and iterM work?")]),a._v(" "),s("p",[a._v("There are some functions to help tear down "),s("code",[a._v("Free")]),a._v(" computations by interpreting them into another monad "),s("code",[a._v("m")]),a._v(": "),s("code",[a._v("iterM :: (Functor f, Monad m) => (f (m a) -> m a) -> (Free f a -> m a)")]),a._v(" and "),s("code",[a._v("foldFree :: Monad m => (forall x. f x -> m x) -> (Free f a -> m a)")]),a._v(". What are they doing?")]),a._v(" "),s("p",[a._v("First let's see what it would take to tear down an interpret a "),s("code",[a._v("Teletype a")]),a._v(" function into "),s("code",[a._v("IO")]),a._v(" manually. We can see "),s("code",[a._v("Free f a")]),a._v(" as being defined")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("data")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" \n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Pure")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" \n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])]),s("p",[a._v("The "),s("code",[a._v("Pure")]),a._v(" case is easy:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("interpretTeletype")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Teletype")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("interpretTeletype")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Pure")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("interpretTeletype")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("teletypeF")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("_")]),a._v("\n\n")])])]),s("p",[a._v("Now, how to interpret a "),s("code",[a._v("Teletype")]),a._v(" computation that was built with the "),s("code",[a._v("Free")]),a._v(" constructor? We'd like to arrive at a value of type "),s("code",[a._v("IO a")]),a._v(" by examining "),s("code",[a._v("teletypeF :: TeletypeF (Teletype a)")]),a._v(". To start with, we'll write a function "),s("code",[a._v("runIO :: TeletypeF a -> IO a")]),a._v(" which maps a single layer of the free monad to an "),s("code",[a._v("IO")]),a._v(" action:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("runIO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("TeletypeF")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("runIO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PrintLine")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("msg")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("msg")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("runIO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ReadLine")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("k")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("k")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n\n")])])]),s("p",[a._v("Now we can use "),s("code",[a._v("runIO")]),a._v(" to fill in the rest of "),s("code",[a._v("interpretTeletype")]),a._v(". Recall that "),s("code",[a._v("teletypeF :: TeletypeF (Teletype a)")]),a._v(" is a layer of the "),s("code",[a._v("TeletypeF")]),a._v(" functor which contains the rest of the "),s("code",[a._v("Free")]),a._v(" computation. We'll use "),s("code",[a._v("runIO")]),a._v(" to interpret the outermost layer (so we have "),s("code",[a._v("runIO teletypeF :: IO (Teletype a)")]),a._v(") and then use the "),s("code",[a._v("IO")]),a._v(" monad's "),s("code",[a._v(">>=")]),a._v(" combinator to interpret the returned "),s("code",[a._v("Teletype a")]),a._v(".")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("interpretTeletype")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Teletype")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("IO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("interpretTeletype")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Pure")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("interpretTeletype")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("teletypeF")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("runIO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("teletypeF")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("interpretTeletype")]),a._v("\n\n")])])]),s("p",[a._v("The definition of "),s("code",[a._v("foldFree")]),a._v(" is just that of "),s("code",[a._v("interpretTeletype")]),a._v(", except that the "),s("code",[a._v("runIO")]),a._v(" function has been factored out. As a result, "),s("code",[a._v("foldFree")]),a._v(" works independently of any particular base functor and of any target monad.")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("foldFree")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Monad")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("forall")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("foldFree")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("eta")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Pure")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("foldFree")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("eta")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("fa")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("eta")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("fa")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("foldFree")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("eta")]),a._v("\n\n")])])]),s("p",[s("code",[a._v("foldFree")]),a._v(" has a rank-2 type: "),s("code",[a._v("eta")]),a._v(" is a natural transformation. We could have given "),s("code",[a._v("foldFree")]),a._v(" a type of "),s("code",[a._v("Monad m => (f (Free f a) -> m (Free f a)) -> Free f a -> m a")]),a._v(", but that gives "),s("code",[a._v("eta")]),a._v(" the liberty of inspecting the "),s("code",[a._v("Free")]),a._v(" computation inside the "),s("code",[a._v("f")]),a._v(" layer. Giving "),s("code",[a._v("foldFree")]),a._v(" this more restrictive type ensures that "),s("code",[a._v("eta")]),a._v(" can only process a single layer at a time.")]),a._v(" "),s("p",[s("code",[a._v("iterM")]),a._v(" does give the folding function the ability to examine the subcomputation. The (monadic) result of the previous iteration is available to the next, inside "),s("code",[a._v("f")]),a._v("'s parameter. "),s("code",[a._v("iterM")]),a._v(" is analogous to a "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/haskell/2984/recursion-schemes/13192/general-recursion#t=20161231003345211125",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[a._v("paramorphism")]),s("OutboundLink")],1),a._v(" whereas "),s("code",[a._v("foldFree")]),a._v(" is like a "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/haskell/2984/recursion-schemes/10137/folding-up-a-structure-one-layer-at-a-time#t=20161231003345211125",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[a._v("catamorphism")]),s("OutboundLink")],1),a._v(".")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("iterM")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Monad")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Functor")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("f")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("iterM")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("phi")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Pure")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("x")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("iterM")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("phi")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Free")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("fa")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("phi")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("fmap")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("iterM")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("phi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("fa")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);