(window.webpackJsonp=window.webpackJsonp||[]).push([[2073],{2481:function(t,a,s){"use strict";s.r(a);var e=s(31),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"the-stuff-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-stuff-function"}},[t._v("#")]),t._v(" The STUFF Function")]),t._v(" "),s("h2",{attrs:{id:"using-for-xml-to-concatenate-values-from-multiple-rows"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-for-xml-to-concatenate-values-from-multiple-rows"}},[t._v("#")]),t._v(" Using FOR XML to Concatenate Values from Multiple Rows")]),t._v(" "),s("p",[t._v("One common use for the "),s("code",[t._v("FOR XML")]),t._v(" function is to concatenate the values of multiple rows.")]),t._v(" "),s("p",[t._v("Here's an example using the "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/sql/280/example-databases/1015/customers-table#t=201607211440098397043",target:"_blank",rel:"noopener noreferrer"}},[t._v("Customers table"),s("OutboundLink")],1),t._v(":")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" \n    STUFF"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("';'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" Email\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Customers \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Email "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" Email "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Email "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ASC")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOR")]),t._v(" XML PATH"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("In the example above, "),s("code",[t._v("FOR XML PATH(''))")]),t._v(" is being used to concatenate email addresses, using "),s("code",[t._v(";")]),t._v(" as the delimiter character. Also, the purpose of "),s("code",[t._v("STUFF")]),t._v(" is to remove the leading "),s("code",[t._v(";")]),t._v(" from the concatenated string. "),s("code",[t._v("STUFF")]),t._v(" is also implicitly casting the concatenated string from XML to varchar.")]),t._v(" "),s("p",[t._v("Note: the result from the above example will be XML-encoded, meaning it will replace "),s("code",[t._v("<")]),t._v(" characters with "),s("code",[t._v("&lt;")]),t._v(" etc. If you don't want this, change "),s("code",[t._v("FOR XML PATH(''))")]),t._v(" to "),s("code",[t._v("FOR XML PATH, TYPE).value('.[1]','varchar(MAX)')")]),t._v(", e.g.:")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" \n    STUFF"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("';'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" Email\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Customers \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Email "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" Email "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" Email "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ASC")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOR")]),t._v(" XML PATH"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TYPE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.[1]'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'varchar(900)'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("This can be used to achieve a result similar to "),s("code",[t._v("GROUP_CONCAT")]),t._v(" in MySQL or "),s("code",[t._v("string_agg")]),t._v(" in PostgreSQL 9.0+, although we use subqueries instead of GROUP BY aggregates. (As an alternative, you can install a user-defined aggregate such as "),s("a",{attrs:{href:"https://groupconcat.codeplex.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("this one"),s("OutboundLink")],1),t._v(" if you're looking for functionality closer to that of "),s("code",[t._v("GROUP_CONCAT")]),t._v(").")]),t._v(" "),s("h2",{attrs:{id:"basic-character-replacement-with-stuff"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#basic-character-replacement-with-stuff"}},[t._v("#")]),t._v(" Basic Character Replacement with STUFF()")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("STUFF()")]),t._v(' function inserts a string into another string by first deleting a specified number of characters.  The following example, deletes "Svr" and replaces it with "Server". This happens by specifying the '),s("code",[t._v("start_position")]),t._v(" and "),s("code",[t._v("length")]),t._v(" of the replacement.")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" STUFF"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'SQL Svr Documentation'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Server'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("Executing this example will result in returning "),s("code",[t._v("SQL Server Documentation")]),t._v(" instead of "),s("code",[t._v("SQL Svr Documentation.")])]),t._v(" "),s("h2",{attrs:{id:"basic-example-of-stuff-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#basic-example-of-stuff-function"}},[t._v("#")]),t._v(" Basic Example of STUFF() function.")]),t._v(" "),s("p",[t._v("STUFF(Original_Expression, Start, Length, Replacement_expression)")]),t._v(" "),s("p",[t._v("STUFF() function inserts Replacement_expression, at the start position specified, along with removing the characters specified using Length parameter.")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\nSelect FirstName, LastName,Email, STUFF(Email, 2, 3, '*****') as StuffedEmail From Employee\n\n")])])]),s("p",[s("strong",[t._v("Executing this example will result in returning the given table")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("FirstName")]),t._v(" "),s("th",[t._v("LastName")]),t._v(" "),s("th",[t._v("Email")]),t._v(" "),s("th",[t._v("StuffedEmail")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Jomes")]),t._v(" "),s("td",[t._v("Hunter")]),t._v(" "),s("td",[t._v("James@hotmail.com")]),t._v(" "),s("td",[t._v("J*****s@hotmail.com")])]),t._v(" "),s("tr",[s("td",[t._v("Shyam")]),t._v(" "),s("td",[t._v("rathod")]),t._v(" "),s("td",[t._v("Shyam@hotmail.com")]),t._v(" "),s("td",[t._v("S*****m@hotmail.com")])]),t._v(" "),s("tr",[s("td",[t._v("Ram")]),t._v(" "),s("td",[t._v("shinde")]),t._v(" "),s("td",[t._v("Ram@hotmail.com")]),t._v(" "),s("td",[t._v("R*****hotmail.com")])])])]),t._v(" "),s("h2",{attrs:{id:"obtain-column-names-separated-with-comma-not-a-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#obtain-column-names-separated-with-comma-not-a-list"}},[t._v("#")]),t._v(" Obtain column names separated with comma (not a list)")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\nThe result can be use for fast way to use columns on Insertion/Updates.\nWorks with tables and views.\n\nExample: eTableColumns  'Customers'\nColumnNames\n------------------------------------------------------\nId, FName, LName, Email, PhoneNumber, PreferredContact\n\nINSERT INTO Customers (Id, FName, LName, Email, PhoneNumber, PreferredContact)\n    VALUES (5, 'Ringo', 'Star', 'two@beatles.now', NULL, 'EMAIL')\n*/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PROCEDURE")]),t._v(" eTableColumns "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Table")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" ColumnNames "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" \n   STUFF"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("', '")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("  c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("    \n    sys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("columns")]),t._v(" c\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INNER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" \n    sys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("types")]),t._v(" t "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user_type_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user_type_id\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v("\n    c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("object_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" OBJECT_ID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Table")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOR")]),t._v(" XML PATH"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TYPE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.[1]'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'varchar(2000)'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nGO\n\n")])])]),s("h2",{attrs:{id:"stuff-for-comma-separated-in-sql-server"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stuff-for-comma-separated-in-sql-server"}},[t._v("#")]),t._v(" stuff for comma separated in sql server")]),t._v(" "),s("p",[s("code",[t._v("FOR XML PATH")]),t._v(" and "),s("code",[t._v("STUFF")]),t._v(" to concatenate the multiple rows into a single row:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n select distinct t1.id,\n      STUFF(\n             (SELECT ', ' + convert(varchar(10), t2.date, 120)\n              FROM yourtable t2\n              where t1.id = t2.id\n              FOR XML PATH (''))\n              , 1, 1, '')  AS date\n    from yourtable t1;\n\n")])])]),s("h4",{attrs:{id:"parameters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Parameter")]),t._v(" "),s("th",[t._v("Details")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("character_expression")]),t._v(" "),s("td",[t._v("the existing string in your data")])]),t._v(" "),s("tr",[s("td",[t._v("start_position")]),t._v(" "),s("td",[t._v("the position in "),s("code",[t._v("character_expression")]),t._v(" to delete "),s("code",[t._v("length")]),t._v(" and then insert the "),s("code",[t._v("replacement_string")])])]),t._v(" "),s("tr",[s("td",[t._v("length")]),t._v(" "),s("td",[t._v("the number of characters to delete from "),s("code",[t._v("character_expression")])])]),t._v(" "),s("tr",[s("td",[t._v("replacement_string")]),t._v(" "),s("td",[t._v("the sequence of characters to insert in "),s("code",[t._v("character_expression")])])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);