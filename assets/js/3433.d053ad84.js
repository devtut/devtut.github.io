(window.webpackJsonp=window.webpackJsonp||[]).push([[3433],{3842:function(t,e,a){"use strict";a.r(e);var r=a(31),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operators"}},[t._v("#")]),t._v(" Operators")]),t._v(" "),a("h2",{attrs:{id:"concatenation-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concatenation-operators"}},[t._v("#")]),t._v(" Concatenation Operators")]),t._v(" "),a("p",[t._v("VBA supports 2 different concatenation operators, "),a("code",[t._v("+")]),t._v(" and "),a("code",[t._v("&")]),t._v(" and both perform the exact same function when used with "),a("code",[t._v("String")]),t._v(" types - the right-hand "),a("code",[t._v("String")]),t._v(" is appended to the end of the left-hand "),a("code",[t._v("String")]),t._v(".")]),t._v(" "),a("p",[t._v("If the "),a("code",[t._v("&")]),t._v(" operator is used with a variable type other than a "),a("code",[t._v("String")]),t._v(", it is implicitly cast to a "),a("code",[t._v("String")]),t._v(" before being concatenated.")]),t._v(" "),a("p",[t._v("Note that the "),a("code",[t._v("+")]),t._v(" concatenation operator is an overload of the "),a("code",[t._v("+")]),t._v(" addition operator. The behavior of "),a("code",[t._v("+")]),t._v(" is determined by the "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/vba/3418/data-types-and-limits",target:"_blank",rel:"noopener noreferrer"}},[t._v("variable types"),a("OutboundLink")],1),t._v(" of the operands and precedence of operator types. If both operands are typed as a "),a("code",[t._v("String")]),t._v(" or "),a("code",[t._v("Variant")]),t._v(" with a sub-type of "),a("code",[t._v("String")]),t._v(", they are concatenated:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" Example"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" right "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v("\n    \n    left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),t._v("\n    right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),t._v("\n    \n    Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" right    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('\'Prints "55"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),a("p",[t._v("If "),a("strong",[t._v("either")]),t._v(" side is a numeric type and the other side is a "),a("code",[t._v("String")]),t._v(" that can be coerced into a number, the type precedence of mathematical operators causes the operator to be treated as the addition operator and the numeric values are added:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" Example"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" right "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("String")]),t._v("\n    \n    left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n    right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),t._v("\n    \n    Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" right    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Prints 10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),a("p",[t._v("This behavior can lead to subtle, hard to debug errors - especially if "),a("code",[t._v("Variant")]),t._v(" types are being used, so only the "),a("code",[t._v("&")]),t._v(" operator should typically be used for concatenation.")]),t._v(" "),a("h2",{attrs:{id:"comparison-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparison-operators"}},[t._v("#")]),t._v(" Comparison Operators")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Token")]),t._v(" "),a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("=")])]),t._v(" "),a("td",[t._v("Equal to")]),t._v(" "),a("td",[t._v("Returns "),a("code",[t._v("True")]),t._v(" if the left-hand and right-hand operands are equal. Note that this is an overload of the assignment operator.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<>")])]),t._v(" "),a("td",[t._v("Not equal to")]),t._v(" "),a("td",[t._v("Returns "),a("code",[t._v("True")]),t._v(" if the left-hand and right-hand operands are not equal.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v(">")])]),t._v(" "),a("td",[t._v("Greater than")]),t._v(" "),a("td",[t._v("Returns "),a("code",[t._v("True")]),t._v(" if the left-hand operand is greater than the right-hand operand.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<")])]),t._v(" "),a("td",[t._v("Less than")]),t._v(" "),a("td",[t._v("Returns "),a("code",[t._v("True")]),t._v(" if the left-hand operand is less than the right-hand operand.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v(">=")])]),t._v(" "),a("td",[t._v("Greater than or equal")]),t._v(" "),a("td",[t._v("Returns "),a("code",[t._v("True")]),t._v(" if the if the left-hand operand is greater than or equal to the right-hand operand.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<=")])]),t._v(" "),a("td",[t._v("Less than or equal")]),t._v(" "),a("td",[t._v("Returns "),a("code",[t._v("True")]),t._v(" if the if the left-hand operand is less than or equal to the right-hand operand.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("Is")])]),t._v(" "),a("td",[t._v("Reference equity")]),t._v(" "),a("td",[t._v("Returns "),a("code",[t._v("True")]),t._v(" if the left-hand object reference is the same instance as the right-hand object reference. It can also be used with "),a("code",[t._v("Nothing")]),t._v(" (the null object reference) on either side. "),a("strong",[t._v("Note:")]),t._v(" The "),a("code",[t._v("Is")]),t._v(" operator will attempt to coerce both operands into an "),a("code",[t._v("Object")]),t._v(" before performing the comparison. If either side is a primitive type "),a("strong",[t._v("or")]),t._v(" a "),a("code",[t._v("Variant")]),t._v(" that does not contain an object (either a non-object subtype or "),a("code",[t._v("vtEmpty")]),t._v('), the comparison will result in a Run-time error 424 - "Object required". If either operand belongs to a different '),a("strong",[t._v("interface")]),t._v(" of the same object, the comparison will return "),a("code",[t._v("True")]),t._v(". If you need to test for equity of both the instance "),a("strong",[t._v("and")]),t._v(" the interface, use "),a("code",[t._v("ObjPtr(left) = ObjPtr(right)")]),t._v(" instead.")])])])]),t._v(" "),a("h3",{attrs:{id:"notes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#notes"}},[t._v("#")]),t._v(" Notes")]),t._v(" "),a("p",[t._v('The VBA syntax allows for "chains" of comparison operators, but these constructs should generally be avoided. Comparisons are always performed from left to right on only 2 operands at a time, and each comparison results in a '),a("code",[t._v("Boolean")]),t._v(".  For example, the expression...")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nexpr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" c\n\n")])])]),a("p",[t._v("...may be read in some contexts as a test of whether "),a("code",[t._v("b")]),t._v(" is between "),a("code",[t._v("a")]),t._v(" and "),a("code",[t._v("c")]),t._v(". In VBA, this evaluates as follows:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nexpr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" c\nexpr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nexpr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nexpr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'CInt(True) = -1")]),t._v("\nexpr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),t._v("\n\n")])])]),a("p",[t._v("Any comparison operator other than "),a("code",[t._v("Is")]),t._v(" used with an "),a("code",[t._v("Object")]),t._v(" as an operand will be performed on the return value of the "),a("code",[t._v("Object")]),t._v("'s "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/vba/5321/attributes/18935/vb-varusermemid#t=201609050127168622955",target:"_blank",rel:"noopener noreferrer"}},[t._v("default member"),a("OutboundLink")],1),t._v('. If the object does not have a default member, the comparison will result in a Run-time error 438 - "Object doesn\'t support his property or method".')]),t._v(" "),a("p",[t._v("If the "),a("code",[t._v("Object")]),t._v(' is unintitialized, the comparison will result in a Run-time error 91 - "Object variable or With block variable not set".')]),t._v(" "),a("p",[t._v("If the literal "),a("code",[t._v("Nothing")]),t._v(" is used with any comparison operator other than "),a("code",[t._v("Is")]),t._v(', it will result in a Compile error - "Invalid use of object".')]),t._v(" "),a("p",[t._v("If the default member of the "),a("code",[t._v("Object")]),t._v(" is "),a("strong",[t._v("another "),a("code",[t._v("Object")])]),t._v(", VBA will continually call the default member of each successive return value until a primitive type is returned or an error is raised.  For example, assume "),a("code",[t._v("SomeClass")]),t._v(" has a default member of "),a("code",[t._v("Value")]),t._v(", which is an instance of "),a("code",[t._v("ChildClass")]),t._v(" with a default member of "),a("code",[t._v("ChildValue")]),t._v(".  The comparison...")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Set")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("New")]),t._v(" SomeClass\nDebug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("\n\n")])])]),a("p",[t._v("...will be evaluated as:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Set")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("New")]),t._v(" SomeClass\nDebug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ChildValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("\n\n")])])]),a("p",[t._v("If either operand is a numeric type and the "),a("strong",[t._v("other")]),t._v(" operand is a "),a("code",[t._v("String")]),t._v(" or "),a("code",[t._v("Variant")]),t._v(" of subtype "),a("code",[t._v("String")]),t._v(", a numeric comparison will be performed.  In this case, if the "),a("code",[t._v("String")]),t._v(' cannot be cast to a number, a Run-time error 13 - "Type mismatch" will result from the comparison.')]),t._v(" "),a("p",[t._v("If "),a("strong",[a("strong",[t._v("both")])]),t._v(" operands are a "),a("code",[t._v("String")]),t._v(" or a "),a("code",[t._v("Variant")]),t._v(" of subtype "),a("code",[t._v("String")]),t._v(", a string comparison will be performed based on the "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/vba/3992/vba-option-keyword/13937/option-compare-binary-text-database#t=201609050200481956772",target:"_blank",rel:"noopener noreferrer"}},[t._v("Option Compare"),a("OutboundLink")],1),t._v(" setting of the code module. These comparisons are performed on a character by character basis.  Note that the "),a("strong",[t._v("character representation")]),t._v(" of a "),a("code",[t._v("String")]),t._v(" containing a number is "),a("strong",[a("strong",[t._v("not")])]),t._v(" the same as a comparison of the numeric values:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" Example"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" right "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Variant")]),t._v("\n    \n    left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"42"')]),t._v("\n    right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),t._v("\n    Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" right              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Prints False")]),t._v("\n    Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print Val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Prints True")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),a("p",[t._v("For this reason, make sure that "),a("code",[t._v("String")]),t._v(" or "),a("code",[t._v("Variant")]),t._v(" variables are cast to numbers before performing numeric inequity comparisons on them.")]),t._v(" "),a("p",[t._v("If one operand is a "),a("code",[t._v("Date")]),t._v(", a numeric comparison on the underlying "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/vba/3418/data-types-and-limits/11783/date#t=201612081745238885533",target:"_blank",rel:"noopener noreferrer"}},[t._v("Double"),a("OutboundLink")],1),t._v(" value will be performed if the other operand is numeric or can be cast to a numeric type.")]),t._v(" "),a("p",[t._v("If the other operand is a "),a("code",[t._v("String")]),t._v(" or a "),a("code",[t._v("Variant")]),t._v(" of subtype "),a("code",[t._v("String")]),t._v(" that can be cast to a "),a("code",[t._v("Date")]),t._v(" using the current locale, the "),a("code",[t._v("String")]),t._v(" will be cast to a "),a("code",[t._v("Date")]),t._v(".  If it cannot be cast to a "),a("code",[t._v("Date")]),t._v(' in the current locale, a Run-time error 13 - "Type mismatch" will result from the comparison.')]),t._v(" "),a("p",[t._v("Care should be taken when making comparisons between "),a("code",[t._v("Double")]),t._v(" or "),a("code",[t._v("Single")]),t._v(" values and "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/vba/3418/data-types-and-limits/11778/boolean#t=201612081745238885533",target:"_blank",rel:"noopener noreferrer"}},[t._v("Booleans"),a("OutboundLink")],1),t._v(". Unlike other numeric types, non-zero values cannot be assumed to be "),a("code",[t._v("True")]),t._v(" due to VBA's behavior of promoting the data type of a comparison involving a floating point number to "),a("code",[t._v("Double")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v(" Example"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Dim")]),t._v(" Test "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("As")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Double")]),t._v("\n    \n    Test "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("        Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CBool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Prints True.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'True is promoted to Double - Test is not cast to Boolean")]),t._v("\n    Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print Test "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Prints False")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'With explicit casts:")]),t._v("\n    Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CBool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Prints True")]),t._v("\n    Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CDbl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CDbl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("'Prints True")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("End")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Sub")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"mathematical-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mathematical-operators"}},[t._v("#")]),t._v(" Mathematical Operators")]),t._v(" "),a("p",[t._v("Listed in order of precedence:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Token")]),t._v(" "),a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("^")])]),t._v(" "),a("td",[t._v("Exponentiation")]),t._v(" "),a("td",[t._v("Return the result of raising the left-hand operand to the power of the right-hand operand. Note that the value returned by exponentiation is "),a("strong",[t._v("always")]),t._v(" a "),a("code",[t._v("Double")]),t._v(", regardless of the value types being divided.  Any coercion of the result into a variable type takes place "),a("strong",[a("strong",[t._v("after")])]),t._v(" the calculation is performed.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("/")])]),t._v(" "),a("td",[t._v("Division"),a("sup",[t._v("1")])]),t._v(" "),a("td",[t._v("Returns the result of dividing the left-hand operand by the right-hand operand. Note that the value returned by division is "),a("strong",[t._v("always")]),t._v(" a "),a("code",[t._v("Double")]),t._v(", regardless of the value types being divided.  Any coercion of the result into a variable type takes place "),a("strong",[a("strong",[t._v("after")])]),t._v(" the calculation is performed.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("*")])]),t._v(" "),a("td",[t._v("Multiplication"),a("sup",[t._v("1")])]),t._v(" "),a("td",[t._v("Returns the product of 2 operands.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("\\")])]),t._v(" "),a("td",[t._v("Integer Division")]),t._v(" "),a("td",[t._v("Returns the integer result of dividing the left-hand operand by the right-hand operand "),a("strong",[a("strong",[t._v("after")])]),t._v(" rounding both sides with .5 rounding down. Any remainder of the division is ignored. If the right-hand operand (the divisor) is "),a("code",[t._v("0")]),t._v(", a Run-time error  11: Division by zero will result.  Note that this is "),a("strong",[a("strong",[t._v("after")])]),t._v(" all rounding  is performed - expressions such as "),a("code",[t._v("3 \\ 0.4")]),t._v(" will also result in a division by zero error.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("Mod")])]),t._v(" "),a("td",[t._v("Modulo")]),t._v(" "),a("td",[t._v("Returns the integer remainder of dividing the left-hand operand by the right-hand operand. The operand on each side is rounded to an integer "),a("strong",[t._v("before")]),t._v(" the division, with .5 rounding down.  For example, both "),a("code",[t._v("8.6 Mod 3")]),t._v(" and "),a("code",[t._v("12 Mod 2.6")]),t._v(" result in "),a("code",[t._v("0")]),t._v(". If the right-hand operand (the divisor) is "),a("code",[t._v("0")]),t._v(", a Run-time error  11: Division by zero will result.  Note that this is "),a("strong",[a("strong",[t._v("after")])]),t._v(" all rounding  is performed - expressions such as "),a("code",[t._v("3 Mod 0.4")]),t._v(" will also result in a division by zero error.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("-")])]),t._v(" "),a("td",[t._v("Subtraction"),a("sup",[t._v("2")])]),t._v(" "),a("td",[t._v("Returns the result of subtracting the right-hand operand from the left-hand operand.")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("+")])]),t._v(" "),a("td",[t._v("Addition"),a("sup",[t._v("2")])]),t._v(" "),a("td",[t._v("Returns the sum of 2 operands. Note that this token also treated as a concatenation operator when it is applied to a "),a("code",[t._v("String")]),t._v(". See "),a("strong",[t._v("Concatenation Operators")]),t._v(".")])])])]),t._v(" "),a("p",[a("sup",[t._v("1")]),t._v(" Multiplication and division are treated as having the same precedence.")]),t._v(" "),a("p",[a("sup",[t._v("2")]),t._v(" Addition and subtraction are treated as having the same precedence.")]),t._v(" "),a("h2",{attrs:{id:"bitwise-logical-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bitwise-logical-operators"}},[t._v("#")]),t._v(" Bitwise \\ Logical Operators")]),t._v(" "),a("p",[t._v('All of the logical operators in VBA can be thought of as "overrides" of the bitwise operators of the same name.  Technically, they are '),a("strong",[t._v("always")]),t._v(" treated as bitwise operators. All of the comparison operators in VBA return a "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/vba/3418/data-types-and-limits/11778/boolean#t=201609050243474000752",target:"_blank",rel:"noopener noreferrer"}},[t._v("Boolean"),a("OutboundLink")],1),t._v(", which will always have none of its bits set ("),a("code",[t._v("False")]),t._v(") or "),a("strong",[t._v("all")]),t._v(" of its bits set ("),a("code",[t._v("True")]),t._v("). But it will treat a value with "),a("strong",[t._v("any")]),t._v(" bit set as "),a("code",[t._v("True")]),t._v(". This means that the result of the casting the bitwise result of an expression to a "),a("code",[t._v("Boolean")]),t._v(" (see Comparison Operators) will always be the same as treating it as a logical expression.")]),t._v(" "),a("p",[t._v("Assigning the result of an expression using one of these operators will give the bitwise result. Note that in the truth tables below, "),a("code",[t._v("0")]),t._v(" is equivalent to "),a("code",[t._v("False")]),t._v(" and "),a("code",[t._v("1")]),t._v(" is equivalent to "),a("code",[t._v("True")]),t._v(".")]),t._v(" "),a("p",[a("code",[t._v("And")])]),t._v(" "),a("p",[t._v("Returns "),a("code",[t._v("True")]),t._v(" if the expressions on both sides evaluate to "),a("code",[t._v("True")]),t._v(".")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Left-hand Operand")]),t._v(" "),a("th",[t._v("Right-hand Operand")]),t._v(" "),a("th",[t._v("Result")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("0")])]),t._v(" "),a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("0")])]),t._v(" "),a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("0")])]),t._v(" "),a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")])])])]),t._v(" "),a("p",[a("code",[t._v("Or")])]),t._v(" "),a("p",[t._v("Returns "),a("code",[t._v("True")]),t._v(" if either side of the expression evaluates to "),a("code",[t._v("True")]),t._v(".")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Left-hand Operand")]),t._v(" "),a("th",[t._v("Right-hand Operand")]),t._v(" "),a("th",[t._v("Result")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("0")])]),t._v(" "),a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")])])])]),t._v(" "),a("p",[a("code",[t._v("Not")])]),t._v(" "),a("p",[t._v("Returns "),a("code",[t._v("True")]),t._v(" if the expression evaluates to "),a("code",[t._v("False")]),t._v(" and "),a("code",[t._v("False")]),t._v(" if the expression evaluations to "),a("code",[t._v("True")]),t._v(".")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Right-hand Operand")]),t._v(" "),a("th",[t._v("Result")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("0")])])])]),t._v(" "),a("p",[a("code",[t._v("Not")]),t._v(" is the only operand without a Left-hand operand.  The Visual Basic Editor will automatically simplify expressions with a left hand argument.  If you type...")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[t._v("Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Not")]),t._v(" y\n\n")])])]),a("p",[t._v("...the VBE will change the line to:")]),t._v(" "),a("div",{staticClass:"language-vb extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vb"}},[a("code",[t._v("Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Print "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Not")]),t._v(" x\n\n")])])]),a("p",[t._v("Similar simplifications will be made to any expression that contains a left-hand operand (including expressions) for "),a("code",[t._v("Not")]),t._v(".")]),t._v(" "),a("p",[a("code",[t._v("Xor")])]),t._v(" "),a("p",[t._v('Also known as "exclusive or". Returns '),a("code",[t._v("True")]),t._v(" if both expressions evaluate to different results.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Left-hand Operand")]),t._v(" "),a("th",[t._v("Right-hand Operand")]),t._v(" "),a("th",[t._v("Result")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("0")])]),t._v(" "),a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("0")])])])]),t._v(" "),a("p",[t._v("Note that although the "),a("code",[t._v("Xor")]),t._v(" operator can be "),a("strong",[t._v("used")]),t._v(" like a logical operator, there is absolutely no reason to do so as it gives the same result as the comparison operator "),a("code",[t._v("<>")]),t._v(".")]),t._v(" "),a("p",[a("code",[t._v("Eqv")])]),t._v(" "),a("p",[t._v('Also known as "equivalence".  Returns '),a("code",[t._v("True")]),t._v(" when both expressions evaluate to the same result.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Left-hand Operand")]),t._v(" "),a("th",[t._v("Right-hand Operand")]),t._v(" "),a("th",[t._v("Result")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("0")])]),t._v(" "),a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("0")])]),t._v(" "),a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")])])])]),t._v(" "),a("p",[t._v("Note that the "),a("code",[t._v("Eqv")]),t._v(" function is "),a("strong",[t._v("very")]),t._v(" rarely used as "),a("code",[t._v("x Eqv y")]),t._v(" is equivalent to the much more readable "),a("code",[t._v("Not (x Xor y)")]),t._v(".")]),t._v(" "),a("p",[a("code",[t._v("Imp")])]),t._v(" "),a("p",[t._v('Also known as "implication". Returns '),a("code",[t._v("True")]),t._v(" if both operands are the same "),a("strong",[t._v("or")]),t._v(" the second operand is "),a("code",[t._v("True")]),t._v(".")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Left-hand Operand")]),t._v(" "),a("th",[t._v("Right-hand Operand")]),t._v(" "),a("th",[t._v("Result")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("0")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")])]),t._v(" "),a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("0")])]),t._v(" "),a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("1")])])])]),t._v(" "),a("p",[t._v("Note that the "),a("code",[t._v("Imp")]),t._v(" function is very rarely used. A good rule of thumb is that if you can't explain what it means, you should use another construct.")]),t._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),a("p",[t._v("Operators are evaluated in the following order:")]),t._v(" "),a("ul",[a("li",[t._v("Mathematical operators")]),t._v(" "),a("li",[t._v("Bitwise operators")]),t._v(" "),a("li",[t._v("Concatenation operators")]),t._v(" "),a("li",[t._v("Comparison operators")]),t._v(" "),a("li",[t._v("Logical operators")])]),t._v(" "),a("p",[t._v("Operators with matching precedence are evaluated from left to right. The default order can be overridden by using parentheses "),a("code",[t._v("(")]),t._v(" and "),a("code",[t._v(")")]),t._v(" to group expressions.")])])}),[],!1,null,null,null);e.default=s.exports}}]);