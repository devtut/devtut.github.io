(window.webpackJsonp=window.webpackJsonp||[]).push([[1168],{1576:function(t,e,a){"use strict";a.r(e);var r=a(31),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"attoparsec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#attoparsec"}},[t._v("#")]),t._v(" Attoparsec")]),t._v(" "),a("p",[t._v('Attoparsec is a parsing combinator library that is "aimed particularly at dealing efficiently with network protocols and complicated text/binary file formats".')]),t._v(" "),a("p",[t._v("Attoparsec offers not only speed and efficiency, but backtracking and incremental input.")]),t._v(" "),a("p",[t._v("Its API closely mirrors that of another parser combinator library, Parsec.")]),t._v(" "),a("p",[t._v("There are submodules for compatibility with "),a("code",[t._v("ByteString")]),t._v(", "),a("code",[t._v("Text")]),t._v(" and "),a("code",[t._v("Char8")]),t._v(". Use of the "),a("code",[t._v("OverloadedStrings")]),t._v(" language extension is recommended.")]),t._v(" "),a("h2",{attrs:{id:"combinators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#combinators"}},[t._v("#")]),t._v(" Combinators")]),t._v(" "),a("p",[t._v("Parsing input is best achieved through larger parser functions that are composed of smaller, single purpose ones.")]),t._v(" "),a("p",[t._v("Let's say we wished to parse the following text which represents working hours:")]),t._v(" "),a("blockquote"),t._v(" "),a("p",[t._v("Monday: 0800 1600.")]),t._v(" "),a("p",[t._v('We could split these into two "tokens": the day name -- "Monday" -- and a time portion "0800" to "1600".')]),t._v(" "),a("p",[t._v("To parse a day name, we could write the following:")]),t._v(" "),a("p",[t._v("To parse the time portion we could write:")]),t._v(" "),a("p",[t._v('Now we have two parsers for our individual parts of the text, we can combine these in a "larger" parser to read an entire day\'s working hours:')]),t._v(" "),a("p",[t._v("and then run the parser:")]),t._v(" "),a("h2",{attrs:{id:"bitmap-parsing-binary-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bitmap-parsing-binary-data"}},[t._v("#")]),t._v(" Bitmap - Parsing Binary Data")]),t._v(" "),a("p",[t._v("Attoparsec makes parsing binary data trivial. Assuming these definitions:")]),t._v(" "),a("div",{staticClass:"language-hs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-hs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("dibP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Parser")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DIB")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("dibP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("read")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("unpack")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<$>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("take")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n")])])]),a("p",[t._v("Similarly, the size of the bitmap, the reserved sections and the pixel offset can be read easily too:")]),t._v(" "),a("p",[t._v("which can then be combined into a larger parser function for the entire header:")]),t._v(" "),a("h4",{attrs:{id:"parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Detail")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("Parser i a")])]),t._v(" "),a("td",[t._v("The core type for representing a parser. "),a("code",[t._v("i")]),t._v(" is the string type, e.g. "),a("code",[t._v("ByteString")]),t._v(".")])]),t._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"https://hackage.haskell.org/package/attoparsec-0.13.1.0/docs/Data-Attoparsec-Internal-Types.html#t:IResult",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("IResult i r")]),a("OutboundLink")],1)]),t._v(" "),a("td",[t._v("The result of a parse, with "),a("code",[t._v("Fail i [String] String")]),t._v(", "),a("code",[t._v("Partial (i -> IResult i r)")]),t._v(" and "),a("code",[t._v("Done i r")]),t._v(" as constructors.")])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);