(window.webpackJsonp=window.webpackJsonp||[]).push([[3133],{3541:function(t,e,a){"use strict";a.r(e);var s=a(31),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"activerecord-transactions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#activerecord-transactions"}},[t._v("#")]),t._v(" ActiveRecord Transactions")]),t._v(" "),a("p",[t._v("ActiveRecord Transactions are protective blocks where sequence of active record queries are only permanent if they can all succeed as one atomic action.")]),t._v(" "),a("h2",{attrs:{id:"getting-started-with-active-record-transactions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getting-started-with-active-record-transactions"}},[t._v("#")]),t._v(" Getting Started with Active Record Transactions")]),t._v(" "),a("p",[t._v("Active Record Transactions can be applied to Model classes as well as Model instances, the objects within the transaction block need not all be instances of same class. This is because transactions are per-database connection, not per-model. For example:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("transaction "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  account"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("save"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n  profile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("save"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n  print "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"All saves success, returning 1"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\nrescue_from "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ActiveRecord")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RecordInvalid")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("exception"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  print "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Exception thrown, transaction rolledback"')]),t._v("\n  render_error "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"failure"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" exception"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("record"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("errors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("full_messages"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_sentence\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("Using save with a bang ensures that transaction will be automatically rolled back when the exception is thrown and after the rollback, control goes to the rescue block for the exception. "),a("strong",[t._v("Make sure you rescue the exceptions thrown from the save! in Transaction Block.")])]),t._v(" "),a("p",[t._v("If you don't want to use save!, you can manually raise "),a("code",[t._v("raise ActiveRecord::Rollback")]),t._v(" when the save fails. You need not handle this exception. It will then rollback the transaction and take the control to the next statement after transaction block.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\n  User.transaction do\n      if account.save && profile.save\n        print "All saves success, returning 1"\n        return 1\n      else\n        raise ActiveRecord::Rollback\n      end\n    end\n    print "Transaction Rolled Back"\n\n')])])])])}),[],!1,null,null,null);e.default=n.exports}}]);