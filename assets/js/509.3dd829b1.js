(window.webpackJsonp=window.webpackJsonp||[]).push([[509],{917:function(s,t,a){"use strict";a.r(t);var e=a(31),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"jobs-and-processes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jobs-and-processes"}},[s._v("#")]),s._v(" Jobs and Processes")]),s._v(" "),a("h2",{attrs:{id:"job-handling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#job-handling"}},[s._v("#")]),s._v(" Job handling")]),s._v(" "),a("h3",{attrs:{id:"creating-jobs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-jobs"}},[s._v("#")]),s._v(" Creating jobs")]),s._v(" "),a("p",[s._v("To create an job, just append a single "),a("code",[s._v("&")]),s._v(" after the command:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20024")]),s._v("\n\n")])])]),a("p",[s._v("You can also make a running process a job by pressing "),a("kbd",[s._v("Ctrl")]),s._v(" + "),a("kbd",[s._v("z")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n^Z\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("+  Stopped                 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\n")])])]),a("h3",{attrs:{id:"background-and-foreground-a-process"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#background-and-foreground-a-process"}},[s._v("#")]),s._v(" Background and foreground a process")]),s._v(" "),a("p",[s._v("To bring the Process to the foreground, the command "),a("code",[s._v("fg")]),s._v(" is used together with "),a("code",[s._v("%")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20024")]),s._v("\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fg")]),s._v(" %1\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\n")])])]),a("p",[s._v("Now you can interact with the process. To bring it back to the background you can use the "),a("code",[s._v("bg")]),s._v(" command. Due to the occupied terminal session, you need to stop the process first by pressing "),a("kbd",[s._v("Ctrl")]),s._v(" + "),a("kbd",[s._v("z")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n^Z\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("+  Stopped              "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bg")]),s._v(" %1\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("+ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n\n")])])]),a("p",[s._v("Due to the laziness of some Programmers, all these commands also work with a single "),a("code",[s._v("%")]),s._v(" if there is only one process, or for the first process in the list. For Example:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20024")]),s._v("\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fg")]),s._v(" %        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# to bring a process to foreground 'fg %' is also working.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\n")])])]),a("p",[s._v("or just")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ %           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# laziness knows no boundaries, '%' is also working.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\n")])])]),a("p",[s._v("Additionally, just typing "),a("code",[s._v("fg")]),s._v(" or "),a("code",[s._v("bg")]),s._v(" without any argument handles the last job:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fg")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n^C\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fg")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("\n\n")])])]),a("h3",{attrs:{id:"killing-running-jobs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#killing-running-jobs"}},[s._v("#")]),s._v(" Killing running jobs")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20024")]),s._v("\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" %1\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("+  Terminated              "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\n")])])]),a("p",[s._v("The sleep process runs in the background with process id (pid) "),a("code",[s._v("20024")]),s._v(" and job number "),a("code",[s._v("1")]),s._v(". In order to reference the process, you can use either the pid or the job number. If you use the job number, you must prefix it with "),a("code",[s._v("%")]),s._v(". The default kill signal sent by "),a("code",[s._v("kill")]),s._v(" is "),a("code",[s._v("SIGTERM")]),s._v(", which allows the target process to exit gracefully.")]),s._v(" "),a("p",[s._v("Some common kill signals are shown below. To see a full list, run "),a("code",[s._v("kill -l")]),s._v(".")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("Signal name")]),s._v(" "),a("th",[s._v("Signal value")]),s._v(" "),a("th",[s._v("Effect")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[a("code",[s._v("SIGHUP")])]),s._v(" "),a("td",[a("code",[s._v("1")])]),s._v(" "),a("td",[s._v("Hangup")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("SIGINT")])]),s._v(" "),a("td",[a("code",[s._v("2")])]),s._v(" "),a("td",[s._v("Interrupt from keyboard")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("SIGKILL")])]),s._v(" "),a("td",[a("code",[s._v("9")])]),s._v(" "),a("td",[s._v("Kill signal")])]),s._v(" "),a("tr",[a("td",[a("code",[s._v("SIGTERM")])]),s._v(" "),a("td",[a("code",[s._v("15")])]),s._v(" "),a("td",[s._v("Termination signal")])])])]),s._v(" "),a("h3",{attrs:{id:"start-and-kill-specific-processes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start-and-kill-specific-processes"}},[s._v("#")]),s._v(" Start and kill specific processes")]),s._v(" "),a("p",[s._v("Probably the easiest way of killing a running process is by selecting it through the process name as in the following example using "),a("code",[s._v("pkill")]),s._v(" command as")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("pkill")]),s._v(" -f test.py\n\n")])])]),a("p",[s._v("(or) a more fool-proof way using "),a("code",[s._v("pgrep")]),s._v(" to search for the actual process-id")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("pgrep -f "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'python test.py'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n\n")])])]),a("p",[s._v("The same result can be obtained using "),a("code",[s._v("grep")]),s._v(" over "),a("code",[s._v("ps -ef | grep name_of_process")]),s._v(" then killing the process associated with the resulting pid (process id). Selecting a process using its name is convinient in a testing environment but can be really dangerous when the script is used in production: it is virtually impossible to be sure that the name will match the process you actually want to kill. In those cases, the following approach is actually much safe.")]),s._v(" "),a("p",[s._v("Start the script that will eventually killed with the following approach. Let's assume that the command you want to execute and eventually kill is "),a("code",[s._v("python test.py")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" -e /tmp/test.py.pid "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Check if the file already exists")]),s._v("\n    python test.py "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#+and if so do not run another process.")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$!")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /tmp/test.py.pid\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ERROR: The process is already running with pid "')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /tmp/test.py.pid\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n")])])]),a("p",[s._v("This will create a file in the "),a("code",[s._v("/tmp")]),s._v(" directory containing the pid of the "),a("code",[s._v("python test.py")]),s._v(" process. If the file already exists, we assume that the command is already running and the script return an error.")]),s._v(" "),a("p",[s._v("Then, when you want to kill it use the following script:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" -e /tmp/test.py.pid "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# If the file do not exists, then the")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /tmp/test.py.pid"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#+the process is not running. Useless")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" /tmp/test.py.pid              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#+trying to kill it.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"test.py is not running"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n")])])]),a("p",[s._v("that will kill exactly the process associated with your command, without relying on any volatile information (like the string used to run the command). Even in this case if the file does not exist, the script assume that you want to kill a non-running process.")]),s._v(" "),a("p",[s._v("This last example can be easily improved for running the same command multiple times (appending to the pid file instead of overwriting it, for example) and to manage cases where the process dies before being killed.")]),s._v(" "),a("h2",{attrs:{id:"check-which-process-running-on-specific-port"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-which-process-running-on-specific-port"}},[s._v("#")]),s._v(" Check which process running on specific port")]),s._v(" "),a("p",[s._v("To check which process running on port 8080")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("lsof")]),s._v(" -i :8080\n\n")])])]),a("h2",{attrs:{id:"disowning-background-job"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disowning-background-job"}},[s._v("#")]),s._v(" Disowning background job")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("gzip")]),s._v(" extremelylargefile.txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bg")]),s._v("\n$ disown %1\n\n")])])]),a("p",[s._v("This allows a long running process to continue once your shell (terminal, ssh, etc) is closed.")]),s._v(" "),a("h2",{attrs:{id:"list-current-jobs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-current-jobs"}},[s._v("#")]),s._v(" List Current Jobs")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v(" -f /var/log/syslog "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" log.txt\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("+  Stopped                 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v(" -f /var/log/syslog "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" log.txt\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("jobs")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("+  Stopped                 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v(" -f /var/log/syslog "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" log.txt\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("-  Running                 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"list-all-processes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-all-processes"}},[s._v("#")]),s._v(" List all processes")]),s._v(" "),a("p",[s._v("There are two common ways to list all processes on a system. Both list all processes running by all users, though they differ in the format they output (the reason for the differences are historical).")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -ef   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# lists all processes")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" aux   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# lists all processes in alternative format (BSD)")]),s._v("\n\n")])])]),a("p",[s._v("This can be used to check if a given application is running. For example, to check if the SSH server (sshd) is running:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -ef "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" sshd\n\n")])])]),a("h2",{attrs:{id:"finding-information-about-a-running-process"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finding-information-about-a-running-process"}},[s._v("#")]),s._v(" Finding information about a running process")]),s._v(" "),a("p",[a("code",[s._v("ps aux | grep <search-term>")]),s._v(" shows processes matching "),a("strong",[s._v("search-term")])]),s._v(" "),a("p",[s._v("Example:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("root@server7:~"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ps aux | grep nginx")]),s._v("\nroot       "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("315")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("144392")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1020")]),s._v(" ?        Ss   May28   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 nginx: master process /usr/sbin/nginx\nwww-data  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5647")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("145124")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3048")]),s._v(" ?        S    Jul18   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(":53 nginx: worker process\nwww-data  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5648")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("144392")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("376")]),s._v(" ?        S    Jul18   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 nginx: cache manager process\nroot     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13134")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4960")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("920")]),s._v(" pts/0    S+   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(":33   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" --color"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("auto nginx\nroot@server7:~"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n\n")])])]),a("p",[s._v("Here, second column is the process id. For example, if you want to kill the nginx process, you can use the command "),a("code",[s._v("kill 5647")]),s._v(". It is always adviced to use the "),a("code",[s._v("kill")]),s._v(" command with "),a("code",[s._v("SIGTERM")]),s._v(" rather than "),a("code",[s._v("SIGKILL")]),s._v(".")])])}),[],!1,null,null,null);t.default=n.exports}}]);