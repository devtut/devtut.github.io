(window.webpackJsonp=window.webpackJsonp||[]).push([[526],{934:function(t,e,s){"use strict";s.r(e);var a=s(31),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"redirection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redirection"}},[t._v("#")]),t._v(" Redirection")]),t._v(" "),s("h2",{attrs:{id:"append-vs-truncate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#append-vs-truncate"}},[t._v("#")]),t._v(" Append vs Truncate")]),t._v(" "),s("h3",{attrs:{id:"truncate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#truncate"}},[t._v("#")]),t._v(" Truncate "),s("code",[t._v(">")])]),t._v(" "),s("ol",[s("li",[t._v("Create specified file if it does not exist.")]),t._v(" "),s("li",[t._v("Truncate (remove file's content)")]),t._v(" "),s("li",[t._v("Write to file")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"first line"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /tmp/lines\n$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"second line"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /tmp/lines\n\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" /tmp/lines\nsecond line\n\n")])])]),s("h3",{attrs:{id:"append"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#append"}},[t._v("#")]),t._v(" Append "),s("code",[t._v(">>")])]),t._v(" "),s("ol",[s("li",[t._v("Create specified file if it does not exist.")]),t._v(" "),s("li",[t._v("Append file (writing at end of file).")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Overwrite existing file")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"first line"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /tmp/lines\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Append a second line")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"second line"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" /tmp/lines\n\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" /tmp/lines\nfirst line\nsecond line\n\n")])])]),s("h2",{attrs:{id:"redirecting-both-stdout-and-stderr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redirecting-both-stdout-and-stderr"}},[t._v("#")]),t._v(" Redirecting both STDOUT and STDERR")]),t._v(" "),s("p",[t._v("File descriptors like "),s("code",[t._v("0")]),t._v(" and "),s("code",[t._v("1")]),t._v(" are pointers. We change what file descriptors point to with redirection. "),s("code",[t._v(">/dev/null")]),t._v(" means "),s("code",[t._v("1")]),t._v(" points to "),s("code",[t._v("/dev/null")]),t._v(".")]),t._v(" "),s("p",[t._v("First we point "),s("code",[t._v("1")]),t._v(" ("),s("code",[t._v("STDOUT")]),t._v(") to "),s("code",[t._v("/dev/null")]),t._v(" then point "),s("code",[t._v("2")]),t._v(" ("),s("code",[t._v("STDERR")]),t._v(") to whatever "),s("code",[t._v("1")]),t._v(" points to.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# STDERR is redirect to STDOUT: redirected to /dev/null,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# effectually redirecting both STDERR and STDOUT to /dev/null")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /dev/null "),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v(">")]),s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("&1")]),t._v("\n\n")])])]),s("p",[t._v("This "),s("strong",[t._v("can")]),t._v(" be further shortened to the following:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&>")]),t._v(" /dev/null\n\n")])])]),s("p",[t._v("However, this form may be undesirable in production if shell compatibility is a concern as it conflicts with POSIX, introduces parsing ambiguity, and shells without this feature will misinterpret it:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Actual code")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&>")]),t._v(" /dev/null\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&>")]),t._v(" /dev/null "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'goodbye'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Desired behavior")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /dev/null "),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v(">")]),s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("&1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'goodbye'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /dev/null "),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v(">")]),s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("&1")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Actual behavior")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" goodbye "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /dev/null\n\n")])])]),s("p",[t._v("NOTE: "),s("code",[t._v("&>")]),t._v(" is known to work as desired in both Bash and Zsh.")]),t._v(" "),s("h2",{attrs:{id:"redirecting-standard-output"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redirecting-standard-output"}},[t._v("#")]),t._v(" Redirecting standard output")]),t._v(" "),s("p",[s("code",[t._v(">")]),t._v(" redirect the standard output (aka "),s("code",[t._v("STDOUT")]),t._v(") of the current command into a file or another descriptor.")]),t._v(" "),s("p",[t._v("These examples write the output of the "),s("code",[t._v("ls")]),t._v(" command into the file "),s("code",[t._v("file.txt")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("file.txt\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" file.txt "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\n\n")])])]),s("p",[t._v("The target file is created if it doesn't exists, otherwise this file is truncated.")]),t._v(" "),s("p",[t._v("The default redirection descriptor is the standard output or "),s("code",[t._v("1")]),t._v(" when none is specified.\nThis command is equivalent to the previous examples with the standard output explicitly indicated:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("1")]),t._v(">")]),t._v("file.txt\n\n")])])]),s("p",[t._v("Note: the redirection is initialized by the executed shell and not by the executed command, therefore it is done before the command execution.")]),t._v(" "),s("h2",{attrs:{id:"using-named-pipes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-named-pipes"}},[t._v("#")]),t._v(" Using named pipes")]),t._v(" "),s("p",[t._v("Sometimes you may want to output something by one program and input it into another program, but can't use a standard pipe.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('".log"')]),t._v("\n\n")])])]),s("p",[t._v("You could simply write to a temporary file:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" tempFile.txt\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" tempFile.txt\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('".log"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" tempFile.txt\n\n")])])]),s("p",[t._v("This works fine for most applications, however, nobody will know what "),s("code",[t._v("tempFile")]),t._v(" does and someone might remove it if it contains the output of "),s("code",[t._v("ls -l")]),t._v(" in that directory. This is where a named pipe comes into play:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkfifo")]),t._v(" myPipe\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" myPipe\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('".log"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" myPipe\n\n")])])]),s("p",[s("code",[t._v("myPipe")]),t._v(" is technically a file (everything is in Linux), so let's do "),s("code",[t._v("ls -l")]),t._v(" in an empty directory that we just created a pipe in:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" pipeFolder\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" pipeFolder\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkfifo")]),t._v(" myPipe\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -l\n\n")])])]),s("p",[t._v("The output is:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("prw-r--r-- "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" root root "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" Jul "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(":20 myPipe\n\n")])])]),s("p",[t._v("Notice the first character in the permissions, it's listed as a pipe, not a file.")]),t._v(" "),s("p",[t._v("Now let's do something cool.")]),t._v(" "),s("p",[t._v("Open one terminal, and make note of the directory (or create one so that cleanup is easy), and make a pipe.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkfifo")]),t._v(" myPipe\n\n")])])]),s("p",[t._v("Now let's put something in the pipe.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello from the other side"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" myPipe\n\n")])])]),s("p",[t._v("You'll notice this hangs, the other side of the pipe is still closed. Let's open up the other side of the pipe and let that stuff through.")]),t._v(" "),s("p",[t._v("Open another terminal and go to the directory that the pipe is in (or if you know it, prepend it to the pipe):")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" myPipe\n\n")])])]),s("p",[t._v("You'll notice that after "),s("code",[t._v("hello from the other side")]),t._v(" is output, the program in the first terminal finishes, as does that in the second terminal.")]),t._v(" "),s("p",[t._v("Now run the commands in reverse. Start with "),s("code",[t._v("cat < myPipe")]),t._v(" and then echo something into it. It still works, because a program will wait until something is put into the pipe before terminating, because it knows it has to get something.")]),t._v(" "),s("p",[t._v("Named pipes can be useful for moving information between terminals or between programs.")]),t._v(" "),s("p",[t._v("Pipes are small. Once full, the writer blocks until some reader reads the contents, so you need to either run the reader and writer in different terminals or run one or the other in the background:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\nls -l /tmp > myPipe &\n cat < myPipe\n\n")])])]),s("p",[s("strong",[t._v("More examples using named pipes:")])]),t._v(" "),s("li",[t._v("\nExample 1 - all commands on the same terminal / same shell\n"),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" file3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("mypipe "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mypipe\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Output: Prints ls -l data and then prints file3 contents on screen")]),t._v("\n\n")])])])]),t._v(" "),s("li",[t._v("\nExample 2 - all commands on the same terminal / same shell\n"),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("mypipe "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" file3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("mypipe "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mypipe\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Output: This prints on screen the contents of mypipe.")]),t._v("\n\n")])])]),s("p",[t._v("Mind that first contents of "),s("code",[t._v("file3")]),t._v(" are displayed and then the "),s("code",[t._v("ls -l")]),t._v(" data is displayed (LIFO configuration).")])]),t._v(" "),s("li",[t._v("\nExample 3 - all commands on the same terminal / same shell\n"),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("pipedata")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mypipe"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pipedata")]),t._v('"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("mypipe\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Output: Prints the output of ls directly on screen")]),t._v("\n\n")])])]),s("p",[t._v("Mind that the variable "),s("code",[t._v("$pipedata")]),t._v(" is not available for usage in the main terminal / main shell since the use of "),s("code",[t._v("&")]),t._v(" invokes a subshell and "),s("code",[t._v("$pipedata")]),t._v(" was only available in this subshell.")])]),t._v(" "),s("li",[t._v("\nExample 4 - all commands on the same terminal / same shell\n"),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" pipedata\n$ "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("pipedata")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mypipe"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -l *.sh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("mypipe\n$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pipedata")]),t._v('"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Output : Prints correctly the contents of mypipe")]),t._v("\n\n")])])]),s("p",[t._v("This prints correctly the value of "),s("code",[t._v("$pipedata")]),t._v(" variable in the main shell due to the export declaration of the variable. The main terminal/main shell is not hanging due to the invocation of a background shell ("),s("code",[t._v("&")]),t._v(").")])]),t._v(" "),s("h2",{attrs:{id:"redirecting-multiple-commands-to-the-same-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redirecting-multiple-commands-to-the-same-file"}},[t._v("#")]),t._v(" Redirecting multiple commands to the same file")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"contents of home directory"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" ~\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" output.txt\n\n")])])]),s("h2",{attrs:{id:"print-error-messages-to-stderr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#print-error-messages-to-stderr"}},[t._v("#")]),t._v(" Print error messages to stderr")]),t._v(" "),s("p",[t._v("Error messages are generally included in a script for debugging purposes or for providing rich user experience. Simply writing error message like this:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("cmd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cmd failed'")]),t._v("\n\n")])])]),s("p",[t._v("may work for simple cases but it's not the usual way. In this example, the error message will pollute the actual output of the script by mixing both errors and successful output in "),s("code",[t._v("stdout")]),t._v(".")]),t._v(" "),s("p",[t._v("In short, error message should go to "),s("code",[t._v("stderr")]),t._v(" not "),s("code",[t._v("stdout")]),t._v(". It's pretty simple:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("cmd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cmd failed'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/dev/stderr\n\n")])])]),s("p",[t._v("Another example:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" cmd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'success'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cmd failed'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/dev/stderr\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n\n")])])]),s("p",[t._v("In the above example, the success message will be printed on "),s("code",[t._v("stdout")]),t._v(" while the error message will be printed on "),s("code",[t._v("stderr")]),t._v(".")]),t._v(" "),s("p",[t._v("A better way to print error message is to define a function:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"E: '),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$*")]),t._v('"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v("/dev/stderr\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("Now, when you have to print an error:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("err "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My error message"')]),t._v("\n\n")])])]),s("h2",{attrs:{id:"redirection-to-network-addresses"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redirection-to-network-addresses"}},[t._v("#")]),t._v(" Redirection to network addresses")]),t._v(" "),s("p",[t._v("Bash treats some paths as special and can do some network communication by writing to "),s("code",[t._v("/dev/{udp|tcp}/host/port")]),t._v(". Bash cannot setup a listening server, but can initiate a connection, and for TCP can read the results at least.")]),t._v(" "),s("p",[t._v("For example, to send a simple web request one could do:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("3")]),t._v("<")]),t._v("/dev/tcp/www.google.com/80\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("printf")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET / HTTP/1.0\\r\\n\\r\\n'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("&3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("&3")]),t._v("\n\n")])])]),s("p",[t._v("and the results of "),s("code",[t._v("www.google.com")]),t._v("'s default web page will be printed to "),s("code",[t._v("stdout")]),t._v(".")]),t._v(" "),s("p",[t._v("Similarly")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("printf")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'HI\\n'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/dev/udp/192.168.1.1/6666\n\n")])])]),s("p",[t._v("would send a UDP message containing "),s("code",[t._v("HI\\n")]),t._v(" to a listener on "),s("code",[t._v("192.168.1.1:6666")])]),t._v(" "),s("h2",{attrs:{id:"redirecting-stdin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redirecting-stdin"}},[t._v("#")]),t._v(" Redirecting STDIN")]),t._v(" "),s("p",[s("code",[t._v("<")]),t._v(" reads from its right argument and writes to its left argument.")]),t._v(" "),s("p",[t._v("To write a file into "),s("code",[t._v("STDIN")]),t._v(" we should "),s("strong",[t._v("read")]),t._v(" "),s("code",[t._v("/tmp/a_file")]),t._v(" and "),s("strong",[t._v("write")]),t._v(" into "),s("code",[t._v("STDIN")]),t._v(" i.e "),s("code",[t._v("0</tmp/a_file")])]),t._v(" "),s("p",[t._v("Note: Internal file descriptor defaults to "),s("code",[t._v("0")]),t._v(" ("),s("code",[t._v("STDIN")]),t._v(") for "),s("code",[t._v("<")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /tmp/list.txt\n$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" /tmp/list.txt\n$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" /tmp/list.txt\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" /tmp/list.txt\na\nb\nc\n\n")])])]),s("h2",{attrs:{id:"redirecting-stderr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redirecting-stderr"}},[t._v("#")]),t._v(" Redirecting STDERR")]),t._v(" "),s("p",[s("code",[t._v("2")]),t._v(" is "),s("code",[t._v("STDERR")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ echo_to_stderr "),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v(">")]),t._v("/dev/null "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echos nothing")]),t._v("\n\n")])])]),s("p",[t._v("Definitions:")]),t._v(" "),s("p",[s("code",[t._v("echo_to_stderr")]),t._v(" is a command that writes "),s("code",[t._v('"stderr"')]),t._v(" to "),s("code",[t._v("STDERR")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("echo_to_stderr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" stderr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("&2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n$ echo_to_stderr\nstderr\n\n")])])]),s("h2",{attrs:{id:"stdin-stdout-and-stderr-explained"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stdin-stdout-and-stderr-explained"}},[t._v("#")]),t._v(" STDIN, STDOUT and STDERR explained")]),t._v(" "),s("p",[t._v("Commands have one input (STDIN) and two kinds of outputs, standard output (STDOUT) and standard error (STDERR).")]),t._v(" "),s("p",[t._v("For example:")]),t._v(" "),s("p",[s("strong",[t._v("STDIN")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("root@server~"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# read")]),t._v("\nType some text here\n\n")])])]),s("p",[t._v("Standard input is used to provide input to a program.\n(Here we're using the "),s("a",{attrs:{href:"http://stackoverflow.com/documentation/bash/5473",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("read")]),t._v(" builtin"),s("OutboundLink")],1),t._v(" to read a line from STDIN.)")]),t._v(" "),s("p",[s("strong",[t._v("STDOUT")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("root@server~"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ls file")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("\n\n")])])]),s("p",[t._v('Standard output is generally used for "normal" output from a command. For example, '),s("code",[t._v("ls")]),t._v(" lists files, so the files are sent to STDOUT.")]),t._v(" "),s("p",[s("strong",[t._v("STDERR")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("root@server~"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ls anotherfile")]),t._v("\nls: cannot access "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'anotherfile'")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" No such "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" or directory\n\n")])])]),s("p",[t._v("Standard error is (as the name implies) used for error messages. Because this message is not a list of files, it is sent to STDERR.")]),t._v(" "),s("p",[t._v("STDIN, STDOUT and STDERR are the three "),s("strong",[t._v("standard streams.")]),t._v(" They are identified to the shell by a number rather than a name:")]),t._v(" "),s("p",[t._v("0 = Standard in"),s("br"),t._v("\n1 = Standard out"),s("br"),t._v("\n2 = Standard error")]),t._v(" "),s("p",[t._v("By default, STDIN is attached to the keyboard, and both STDOUT and STDERR appear in the terminal. However, we can redirect either STDOUT or STDERR to whatever we need. For example, let's say that you only need the standard out and all error messages printed on standard error should be suppressed. That's when we use the descriptors "),s("code",[t._v("1")]),t._v(" and "),s("code",[t._v("2")]),t._v(".")]),t._v(" "),s("p",[s("strong",[t._v("Redirecting STDERR to /dev/null")]),s("br"),t._v("\nTaking the previous example,")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("root@server~"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ls anotherfile 2>/dev/null")]),t._v("\nroot@server~"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n\n")])])]),s("p",[t._v("In this case, if there is any STDERR, it will be redirected to /dev/null (a special file which ignores anything put into it), so you won't get any error output on the shell.")]),t._v(" "),s("h4",{attrs:{id:"syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),s("ul",[s("li",[t._v("command </path/to/file # Redirect standard input to file")]),t._v(" "),s("li",[t._v("command >/path/to/file # Redirect standard output to flie")]),t._v(" "),s("li",[t._v("command file_descriptor>/path/to/file # Redirect output of file_descriptor to file")]),t._v(" "),s("li",[t._v("command >&file_descriptor # Redirect output to file_descriptor")]),t._v(" "),s("li",[t._v("command file_descriptor>&another_file_descriptor # Redirect file_descriptor to another_file_descriptor")]),t._v(" "),s("li",[t._v("command <&file_descriptor # Redirect file_descriptor to standard input")]),t._v(" "),s("li",[t._v("command &>/path/to/file # Redirect standard output and standard error to file")])]),t._v(" "),s("h4",{attrs:{id:"parameters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Parameter")]),t._v(" "),s("th",[t._v("Details")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("internal file descriptor")]),t._v(" "),s("td",[t._v("An integer.")])]),t._v(" "),s("tr",[s("td",[t._v("direction")]),t._v(" "),s("td",[t._v("One of "),s("code",[t._v(">")]),t._v(", "),s("code",[t._v("<")]),t._v(" or "),s("code",[t._v("<>")])])]),t._v(" "),s("tr",[s("td",[t._v("external file descriptor or path")]),t._v(" "),s("td",[s("code",[t._v("&")]),t._v(" followed by an integer for file descriptor or a path.")])])])]),t._v(" "),s("h4",{attrs:{id:"remarks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),s("p",[t._v("UNIX console programs have an input file and two output files (input and output streams, as well as devices, are treated as files by the OS.) These are typically the keyboard and screen, respectively, but any or all of them can be redirected to come from — or go to — a file or other program.")]),t._v(" "),s("p",[s("code",[t._v("STDIN")]),t._v(" is standard input, and is how the program receives interactive input. "),s("code",[t._v("STDIN")]),t._v(" is usually assigned file descriptor 0.")]),t._v(" "),s("p",[s("code",[t._v("STDOUT")]),t._v(" is standard output. Whatever is emitted on "),s("code",[t._v("STDOUT")]),t._v(' is considered the "result" of the program. '),s("code",[t._v("STDOUT")]),t._v(" is usually assigned file descriptor 1.")]),t._v(" "),s("p",[s("code",[t._v("STDERR")]),t._v(" is where error messages are displayed. Typically, when running a program from the console, "),s("code",[t._v("STDERR")]),t._v(" is output on the screen and is indistinguishable from "),s("code",[t._v("STDOUT")]),t._v(". "),s("code",[t._v("STDERR")]),t._v(" is usually assigned file descriptor 2.")]),t._v(" "),s("p",[s("strong",[t._v("The order of redirection is important")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v(">")]),s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("&1")]),t._v("\n\n")])])]),s("p",[t._v("Redirects both ("),s("code",[t._v("STDOUT")]),t._v(" and "),s("code",[t._v("STDERR")]),t._v(") to the file.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("command")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v(">")]),s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("&1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("\n\n")])])]),s("p",[t._v("Redirects only "),s("code",[t._v("STDOUT")]),t._v(", because the file descriptor 2 is redirected to the file pointed to by file descriptor 1 (which is not the file "),s("code",[t._v("file")]),t._v(" yet when the statement is evaluated).")]),t._v(" "),s("p",[t._v("Each command in a pipeline has its own "),s("code",[t._v("STDERR")]),t._v(" (and "),s("code",[t._v("STDOUT")]),t._v(") because each is a new process. This can create surprising results if you expect a redirect to affect the entire pipeline. For example this command (wrapped for legibility):")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ python -c "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'import sys;print >> sys.stderr, \"Python error!\"'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cut")]),t._v(" -f1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v(">>")]),t._v(" error.log\n\n")])])]),s("p",[t._v('will print "Python error!" to the console rather than the log file. Instead, attach the error to the command you want to capture:')]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ python -c "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'import sys;print >> sys.stderr, \"Python error!\"'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v(">>")]),t._v(" error.log "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cut")]),t._v(" -f1\n\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);