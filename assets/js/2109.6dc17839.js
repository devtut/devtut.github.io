(window.webpackJsonp=window.webpackJsonp||[]).push([[2109],{2517:function(e,t,a){"use strict";a.r(t);var s=a(31),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"error-1055-only-full-group-by-something-is-not-in-group-by-clause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#error-1055-only-full-group-by-something-is-not-in-group-by-clause"}},[e._v("#")]),e._v(" Error 1055: ONLY_FULL_GROUP_BY: something  is not in GROUP BY clause ...")]),e._v(" "),a("h2",{attrs:{id:"misusing-group-by-to-return-unpredictable-results-murphy-s-law"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#misusing-group-by-to-return-unpredictable-results-murphy-s-law"}},[e._v("#")]),e._v(" Misusing GROUP BY to return unpredictable results: Murphy's Law")]),e._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("SELECT")]),e._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("item_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" uses"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("category"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* nonstandard */")]),e._v(" \n       "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" number_of_uses \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" item \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("JOIN")]),e._v(" uses "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ON")]),e._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("item_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" uses"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("item_id\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("GROUP")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("BY")]),e._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("item_id\n\n")])])]),a("p",[e._v("will show the rows in a table called item, and show the count of related rows in a table called uses. It will also show the value of a column called "),a("code",[e._v("uses.category")]),e._v(".")]),e._v(" "),a("p",[e._v("This query works in MySQL (before the "),a("code",[e._v("ONLY_FULL_GROUP_BY")]),e._v(" flag appeared). It uses "),a("a",{attrs:{href:"https://dev.mysql.com/doc/refman/5.7/en/group-by-handling.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("MySQL's nonstandard extension to "),a("code",[e._v("GROUP BY")]),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("But the query has a problem:  if several rows in the "),a("code",[e._v("uses")]),e._v(" table match the "),a("code",[e._v("ON")]),e._v(" condition in the "),a("code",[e._v("JOIN")]),e._v(" clause, MySQL returns the "),a("code",[e._v("category")]),e._v(" column from just one of those rows. Which row? The writer of the query, and the user of the application, doesn't get to know that in advance. Formally speaking, it's "),a("strong",[e._v("unpredictable")]),e._v(": MySQL can return any value it wants.")]),e._v(" "),a("p",[a("strong",[e._v("Unpredictable")]),e._v(" is like "),a("strong",[e._v("random,")]),e._v(" with one significant difference. One might expect a "),a("strong",[e._v("random")]),e._v(" choice to change from time to time.  Therefore, if a choice were random, you might detect it during debugging or testing.  The "),a("strong",[e._v("unpredictable")]),e._v(" result is worse: MySQL returns the same result each time you use the query, "),a("strong",[e._v("until it doesn't.")]),e._v("  Sometimes it's a new version of the MySQL server that causes a different result. Sometimes it's a growing table causing the problem. What can go wrong, will go wrong, and when you don't expect it. That's called "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Murphy%27s_law",target:"_blank",rel:"noopener noreferrer"}},[e._v("Murphy's Law"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("The MySQL team has been working to make it harder for developers to make this mistake. Newer versions of MySQL in the 5.7 sequence have a "),a("code",[e._v("sql_mode")]),e._v(" flag called "),a("code",[e._v("ONLY_FULL_GROUP_BY")]),e._v(". When that flag is set, the MySQL server returns the 1055 error and refuses to run this kind of query.")]),e._v(" "),a("h2",{attrs:{id:"misusing-group-by-with-select-and-how-to-fix-it"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#misusing-group-by-with-select-and-how-to-fix-it"}},[e._v("#")]),e._v(" Misusing GROUP BY with SELECT *, and how to fix it.")]),e._v(" "),a("p",[e._v("Sometimes a query looks like this, with a "),a("code",[e._v("*")]),e._v(" in the "),a("code",[e._v("SELECT")]),e._v(" clause.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\nSELECT item.*,     /* nonstandard */ \n        COUNT(*) number_of_uses\n  FROM item \n  JOIN uses ON item.item_id, uses.item_id\n GROUP BY item.item_id\n\n")])])]),a("p",[e._v("Such a query needs to be refactored to comply with the "),a("code",[e._v("ONLY_FULL_GROUP_BY")]),e._v(" standard.")]),e._v(" "),a("p",[e._v("To do this, we need a subquery that uses "),a("code",[e._v("GROUP BY")]),e._v(" correctly to return the "),a("code",[e._v("number_of_uses")]),e._v(" value for each "),a("code",[e._v("item_id")]),e._v(".  This subquery is short and sweet, because it only needs to look at the "),a("code",[e._v("uses")]),e._v(" table.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n                             SELECT item_id, COUNT(*) number_of_uses\n                                FROM  uses \n                               GROUP BY item_id\n\n")])])]),a("p",[e._v("Then, we can join that subquery with the "),a("code",[e._v("item")]),e._v(" table.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\nSELECT item.*, usecount.number_of_uses\n   FROM item\n   JOIN (\n                              SELECT item_id, COUNT(*) number_of_uses\n                                FROM  uses \n                               GROUP BY item_id\n        ) usecount ON item.item_id = usecount.item_id\n\n")])])]),a("p",[e._v("This allows the "),a("code",[e._v("GROUP BY")]),e._v(" clause to be simple and correct, and also allows us to use the "),a("code",[e._v("*")]),e._v(" specifier.")]),e._v(" "),a("p",[e._v("Note: nevertheless, wise developers avoid using the "),a("code",[e._v("*")]),e._v(" specifier in any case. It's usually better to list the columns you want in a query.")]),e._v(" "),a("h2",{attrs:{id:"using-and-misusing-group-by"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-and-misusing-group-by"}},[e._v("#")]),e._v(" Using and misusing GROUP BY")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\nSELECT item.item_id, item.name,     /* not SQL-92 */ \n        COUNT(*) number_of_uses\n  FROM item \n  JOIN uses ON item.item_id, uses.item_id\n GROUP BY item.item_id\n\n")])])]),a("p",[e._v("will show the rows in a table called "),a("code",[e._v("item")]),e._v(", and show the count of related rows in a table called "),a("code",[e._v("uses")]),e._v(".  This works well, but unfortunately it's not standard SQL-92.")]),e._v(" "),a("p",[e._v("Why not? because the "),a("code",[e._v("SELECT")]),e._v(" clause (and the "),a("code",[e._v("ORDER BY")]),e._v(" clause) in "),a("code",[e._v("GROUP BY")]),e._v(" queries must contain columns that are")]),e._v(" "),a("ol",[a("li",[e._v("mentioned in the "),a("code",[e._v("GROUP BY")]),e._v(" clause, or")]),e._v(" "),a("li",[e._v("aggregate functions such as "),a("code",[e._v("COUNT()")]),e._v(", "),a("code",[e._v("MIN()")]),e._v(", and the like.")])]),e._v(" "),a("p",[e._v("This example's "),a("code",[e._v("SELECT")]),e._v(" clause mentions "),a("code",[e._v("item.name")]),e._v(", a column that does not meet either of those criteria. MySQL 5.6 and earlier will reject this query if the SQL mode contains "),a("code",[e._v("ONLY_FULL_GROUP_BY")]),e._v(".")]),e._v(" "),a("p",[e._v("This example query can be made to comply with the SQL-92 standard by changing the "),a("code",[e._v("GROUP BY")]),e._v(" clause, like this.")]),e._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("SELECT")]),e._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("item_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" \n       "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" number_of_uses\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" item \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("JOIN")]),e._v(" uses "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ON")]),e._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("item_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" uses"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("item_id\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("GROUP")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("BY")]),e._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("item_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("name\n\n")])])]),a("p",[e._v("The later SQL-99 standard allows a "),a("code",[e._v("SELECT")]),e._v(" statement to omit unaggregated columns from the group key if the DBMS can prove a functional dependence between them and the group key columns. Because "),a("code",[e._v("item.name")]),e._v(" is functionally dependent on "),a("code",[e._v("item.item_id")]),e._v(", the initial example is valid SQL-99. MySQL gained a "),a("a",{attrs:{href:"https://dev.mysql.com/doc/refman/5.7/en/group-by-functional-dependence.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("functional dependence prover"),a("OutboundLink")],1),e._v(" in version 5.7. The original example works under "),a("code",[e._v("ONLY_FULL_GROUP_BY")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"any-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#any-value"}},[e._v("#")]),e._v(" ANY_VALUE()")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\nSELECT item.item_id, ANY_VALUE(uses.tag) tag,   \n        COUNT(*) number_of_uses\n  FROM item \n  JOIN uses ON item.item_id, uses.item_id\n GROUP BY item.item_id\n\n")])])]),a("p",[e._v("shows the rows in a table called "),a("code",[e._v("item")]),e._v(", the count of related rows, and one of the values in the related table called "),a("code",[e._v("uses")]),e._v(".")]),e._v(" "),a("p",[e._v("You can think of "),a("a",{attrs:{href:"http://dev.mysql.com/doc/refman/5.7/en/miscellaneous-functions.html#function_any-value",target:"_blank",rel:"noopener noreferrer"}},[e._v("this "),a("code",[e._v("ANY_VALUE()")]),e._v(" function"),a("OutboundLink")],1),e._v(" as a strange a kind of aggregate function. Instead of returning a count, sum, or maximum, it instructs the MySQL server to choose, arbitrarily, one value from the group in question. It's a way of working around Error 1055.")]),e._v(" "),a("p",[e._v("Be careful when using "),a("code",[e._v("ANY_VALUE()")]),e._v(" in queries in production applications.")]),e._v(" "),a("p",[e._v("It really should be called "),a("code",[e._v("SURPRISE_ME()")]),e._v(". It returns the value of some row in the GROUP BY group. Which row it returns is indeterminate. That means it's entirely up to the MySQL server. Formally, it returns an unpredictable value.")]),e._v(" "),a("p",[e._v("The server doesn't choose a random value, it's worse than that. It returns the same value every time you run the query, until it doesn't. It can change, or not, when a table grows or shrinks, or when the server has more or less RAM, or when the server version changes, or when Mars is in retrograde (whatever that means), or for no reason at all.")]),e._v(" "),a("p",[e._v("You have been warned.")]),e._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[e._v("#")]),e._v(" Remarks")]),e._v(" "),a("p",[e._v("For a long time now, MySQL has contained a notorious nonstandard extension to "),a("code",[e._v("GROUP BY")]),e._v(", which allows oddball behavior in the name of efficiency. This extension has allowed countless developers around the world to use "),a("code",[e._v("GROUP BY")]),e._v(" in production code without completely understanding what they were doing.")]),e._v(" "),a("p",[e._v("In particular, it's a bad idea to use "),a("code",[e._v("SELECT *")]),e._v(" in a "),a("code",[e._v("GROUP BY")]),e._v(" query, because a standard "),a("code",[e._v("GROUP BY")]),e._v(" clause requires enumerating the columns. Many developers have, unfortunately, done that.")]),e._v(" "),a("p",[e._v("Read this. "),a("a",{attrs:{href:"https://dev.mysql.com/doc/refman/5.7/en/group-by-handling.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://dev.mysql.com/doc/refman/5.7/en/group-by-handling.html"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("The MySQL team has been trying to fix this misfeature without messing up production code. They added a "),a("code",[e._v("sql_mode")]),e._v(" flag in 5.7.5 named "),a("a",{attrs:{href:"http://dev.mysql.com/doc/refman/5.7/en/sql-mode.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("ONLY_FULL_GROUP_BY")]),a("OutboundLink")],1),e._v(" to compel standard behavior.  In a recent release, they turned on that flag by default. When you upgraded your local MySQL to 5.7.14, the flag got switched on and your production code, dependent on the old extension, stopped working.")]),e._v(" "),a("p",[e._v("If you've recently started getting 1055 errors, what are your choices?")]),e._v(" "),a("ol",[a("li",[e._v("fix the offending SQL queries, or get their authors to do that.")]),e._v(" "),a("li",[e._v("roll back to a version of MySQL compatible out-of-the-box with the application software you use.")]),e._v(" "),a("li",[e._v("change your server's "),a("a",{attrs:{href:"http://dev.mysql.com/doc/refman/5.7/en/sql-mode.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("sql_mode")]),a("OutboundLink")],1),e._v(" to get rid of the newly set "),a("code",[e._v("ONLY_FULL_GROUP_BY")]),e._v(" mode.")])]),e._v(" "),a("p",[e._v("You can change the mode by doing a "),a("code",[e._v("SET")]),e._v(" command.")]),e._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("SET")]),e._v("  sql_mode "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'")]),e._v("\n\n")])])]),a("p",[e._v("should do the trick if you do it right after your application connects to MySQL.")]),e._v(" "),a("p",[e._v("Or, you can find "),a("a",{attrs:{href:"http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("the init file in your MySQL installation"),a("OutboundLink")],1),e._v(", locate the "),a("code",[e._v("sql_mode=")]),e._v(" line, and change it to omit "),a("code",[e._v("ONLY_FULL_GROUP_BY")]),e._v(", and restart your server.")])])}),[],!1,null,null,null);t.default=n.exports}}]);