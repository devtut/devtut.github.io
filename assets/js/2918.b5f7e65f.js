(window.webpackJsonp=window.webpackJsonp||[]).push([[2918],{3327:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"modifying-strings-by-substitution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#modifying-strings-by-substitution"}},[t._v("#")]),t._v(" Modifying strings by substitution")]),t._v(" "),a("p",[a("code",[t._v("sub")]),t._v(" and "),a("code",[t._v("gsub")]),t._v(" are used to edit strings using patterns. See "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/r/1123",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pattern Matching and Replacement"),a("OutboundLink")],1),t._v(" for more on related functions and "),a("a",{attrs:{href:"http://stackoverflow.com/documentation/r/5748",target:"_blank",rel:"noopener noreferrer"}},[t._v("Regular Expressions"),a("OutboundLink")],1),t._v(" for how to build a pattern.")]),t._v(" "),a("h2",{attrs:{id:"rearrange-character-strings-using-capture-groups"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rearrange-character-strings-using-capture-groups"}},[t._v("#")]),t._v(" Rearrange character strings using capture groups")]),t._v(" "),a("p",[t._v("If you want to change the order of a character strings you can use parentheses in the "),a("code",[t._v("pattern")]),t._v(" to group parts of the string together. These groups can in the "),a("code",[t._v("replacement")]),t._v(" argument be addresed using consecutive numbers.")]),t._v(" "),a("p",[t._v('The following example shows how you can reorder a vector of names of the form "surname, forename" into a vector of the form "forename surname".')]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("library"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("randomNames"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \nset.seed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nstrings "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<-")]),t._v(" randomNames"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nstrings\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# [1] "Sigg, Zachary"        "Holt, Jake"           "Ortega, Sandra"       "De La Torre, Nichole"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# [5] "Perkins, Donovon"  ')]),t._v("\n\nsub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^(.+),\\\\s(.+)$"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\2 \\\\1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" strings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# [1] "Zachary Sigg"        "Jake Holt"           "Sandra Ortega"       "Nichole De La Torre"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# [5] "Donovon Perkins"    ')]),t._v("\n\n")])])]),a("p",[t._v("If you only need the surname you could just address the first pairs of parentheses.")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("sub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^(.+),\\\\s(.+)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" strings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# [1] "Sigg"        "Holt"        "Ortega"      "De La Torre" "Perkins"  ')]),t._v("\n\n")])])]),a("h2",{attrs:{id:"eliminate-duplicated-consecutive-elements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eliminate-duplicated-consecutive-elements"}},[t._v("#")]),t._v(" Eliminate duplicated consecutive elements")]),t._v(" "),a("p",[t._v("Let's say we want to eliminate duplicated subsequence element from a string (it can be more than one). For example:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),t._v("\n\n")])])]),a("p",[t._v("and convert it into:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),t._v("\n\n")])])]),a("p",[t._v("Using "),a("code",[t._v("gsub")]),t._v(", we can achieve it:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("gsub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"(\\\\d+)(,\\\\1)+"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2,14,14,14,19"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2,14,19"')]),t._v("\n\n")])])]),a("p",[t._v("It works also for more than one different repetition, for example:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\n> gsub("(\\\\d+)(,\\\\1)+", "\\\\1", "2,14,14,14,19,19,20,21")\n[1] "2,14,19,20,21"\n\n')])])]),a("p",[t._v("Let's explain the regular expression:")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("(\\\\d+)")]),t._v(": A group 1 delimited by () and finds any digit (at least one). Remember we need to use the double backslash ("),a("code",[t._v("\\\\")]),t._v(") here because for a character variable a backslash represents special escape character for literal string delimiters ("),a("code",[t._v('\\"')]),t._v(" or "),a("code",[t._v("\\'")]),t._v("). "),a("code",[t._v("\\d\\")]),t._v(" is equivalent to: "),a("code",[t._v("[0-9]")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v(",")]),t._v(": A punctuation sign: "),a("code",[t._v(",")]),t._v(" (we can include spaces or any other delimiter)")]),t._v(" "),a("li",[a("code",[t._v("\\\\1")]),t._v(": An identical string to the group 1, i.e.: the repeated number. If that doesn't happen, then the pattern doesn't match.")])]),t._v(" "),a("p",[t._v("Let's try a similar situation: eliminate consecutive repeated words:")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("one"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("two"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("two"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("three"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("four"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("four"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("five"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("six\n\n")])])]),a("p",[t._v("Then, just replace "),a("code",[t._v("\\d")]),t._v(" by "),a("code",[t._v("\\w")]),t._v(", where "),a("code",[t._v("\\w")]),t._v(" matches any word character, including:\nany letter, digit or underscore. It is equivalent to "),a("code",[t._v("[a-zA-Z0-9_]")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" gsub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"(\\\\w+)(,\\\\1)+"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one,two,two,three,four,four,five,six"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one,two,three,four,five,six"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n\n")])])]),a("p",[t._v("Then, the above pattern includes as a particular case duplicated digits case.")])])}),[],!1,null,null,null);s.default=n.exports}}]);