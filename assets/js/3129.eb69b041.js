(window.webpackJsonp=window.webpackJsonp||[]).push([[3129],{3537:function(s,a,t){"use strict";t.r(a);var e=t(31),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"activerecord-associations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#activerecord-associations"}},[s._v("#")]),s._v(" ActiveRecord Associations")]),s._v(" "),t("h2",{attrs:{id:"polymorphic-association"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#polymorphic-association"}},[s._v("#")]),s._v(" Polymorphic association")]),s._v(" "),t("p",[s._v("This type of association allows an ActiveRecord model to belong to more than one kind of model record. Common example:")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ActiveRecord")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Base")]),s._v("\n  has_one "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":address")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":as")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":addressable")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Company")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ActiveRecord")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Base")]),s._v("\n  has_one "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":address")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":as")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":addressable")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Address")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ActiveRecord")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Base")]),s._v("\n  belongs_to "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":addressable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":polymorphic")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),t("p",[s._v("Without this association, youâ€™d have all these foreign keys in your Address table but you only would ever have a value for one of them because an address, in this scenario, can only belong to one entity (Human or Company). Here is what it would look like:")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Address")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ActiveRecord")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Base")]),s._v("\n  belongs_to "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":human")]),s._v("\n  belongs_to "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":company")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"belongs-to"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#belongs-to"}},[s._v("#")]),s._v(" belongs_to")]),s._v(" "),t("p",[s._v("A "),t("code",[s._v("belongs_to")]),s._v(' association sets up a one-to-one connection with another model, so each instance of the declaring model "belongs to" one instance of the other model.')]),s._v(" "),t("p",[s._v("For example, if your application includes users and posts, and each post can be assigned to exactly one user, you'd declare the post model this way:")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Post")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ApplicationRecord")]),s._v("\n  belongs_to "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":user")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),t("p",[s._v("In your table structure you might then have")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[s._v("create_table "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"posts"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" force"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":cascade")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("t"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n  t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("integer  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"user_id"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  limit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"self-referential-association"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#self-referential-association"}},[s._v("#")]),s._v(" Self-Referential Association")]),s._v(" "),t("p",[s._v("Self-referential association is used to associate a model with itself. The most frequent example would be, to manage association between a friend and his follower.")]),s._v(" "),t("p",[s._v("ex.")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[s._v("rails g model friendship user_id"),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":references")]),s._v(" friend_id"),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":integer")]),s._v("\n\n")])])]),t("p",[s._v("now you can associate models like;")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ActiveRecord")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Base")]),s._v("\n  has_many "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":friendships")]),s._v("\n  has_many "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":friends")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":through")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":friendships")]),s._v("\n  has_many "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":inverse_friendships")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":class_name")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Friendship"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":foreign_key")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"friend_id"')]),s._v("\n  has_many "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":inverse_friends")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":through")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":inverse_friendships")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":source")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":user")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),t("p",[s._v("and the other model will look like;")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Friendship")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ActiveRecord")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Base")]),s._v("\n  belongs_to "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":user")]),s._v("\n  belongs_to "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":friend")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":class_name")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"User"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"has-one"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#has-one"}},[s._v("#")]),s._v(" has_one")]),s._v(" "),t("p",[s._v("A "),t("code",[s._v("has_one")]),s._v(" association sets up a one-to-one connection with another model, but with different semantics. This association indicates that each instance of a model contains or possesses one instance of another model.")]),s._v(" "),t("p",[s._v("For example, if each user in your application has only one account, you'd declare the user model like this:")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ApplicationRecord")]),s._v("\n  has_one "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":account")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),t("p",[s._v("In Active Record, when you have a "),t("code",[s._v("has_one")]),s._v(" relation, active record ensures that the only one record exists with the foreign key.")]),s._v(" "),t("p",[s._v("Here in our example: In accounts table, there can only be one record with a particular user_id. If you try to associate one more account for the same user, it makes the previous entry's foreign key as null(making it orphan) and creates a new one automatically. It makes the previous entry null even if the save fails for the new entry to maintain consistency.")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[s._v("user "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("User")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("first\nuser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("build_account"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sample"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nuser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("save   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Saves")]),s._v(" it successfully"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" creates an entry "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" accounts table with user_id "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nuser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("build_account"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sample1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("automatically makes the previous entry's foreign key null"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nuser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("save  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("creates the "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" account with name sample "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" user_id "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"has-many"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#has-many"}},[s._v("#")]),s._v(" has_many")]),s._v(" "),t("p",[s._v("A "),t("code",[s._v("has_many")]),s._v(" association indicates a one-to-many connection with another model. This association generally is located on the other side of a belongs_to association.")]),s._v(" "),t("p",[s._v("This association indicates that each instance of the model has zero or more instances of another model.")]),s._v(" "),t("p",[s._v("For example, in an application containing users and posts, the user model could be declared like this:")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ApplicationRecord")]),s._v("\n  has_many "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":posts")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),t("p",[s._v("The table structure of "),t("code",[s._v("Post")]),s._v(" would remain the same as in the "),t("code",[s._v("belongs_to")]),s._v(" example; in contrast, "),t("code",[s._v("User")]),s._v(" would not require any schema changes.")]),s._v(" "),t("p",[s._v("If you want to get the list of all the published posts for the "),t("code",[s._v("User")]),s._v(", then you can add the following (i.e. you can add scopes to your association objects):")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ApplicationRecord")]),s._v("\n  has_many "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":published_posts")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" where"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"posts.published IS TRUE"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" class_name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Post"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"the-has-many-through-association"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-has-many-through-association"}},[s._v("#")]),s._v(" The has_many :through association")]),s._v(" "),t("p",[s._v("A "),t("code",[s._v("has_many :through")]),s._v(" association is often used to set up a "),t("code",[s._v("many-to-many")]),s._v(" connection with another model. This association indicates that the declaring model can be matched with zero or more instances of another model by proceeding through a third model.")]),s._v(" "),t("p",[s._v("For example, consider a medical practice where patients make appointments to see physicians. The relevant association declarations could look like this:")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Physician")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ApplicationRecord")]),s._v("\n  has_many "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":appointments")]),s._v("\n  has_many "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":patients")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" through"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":appointments")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Appointment")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ApplicationRecord")]),s._v("\n  belongs_to "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":physician")]),s._v("\n  belongs_to "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":patient")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Patient")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ApplicationRecord")]),s._v("\n  has_many "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":appointments")]),s._v("\n  has_many "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":physicians")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" through"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":appointments")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"the-has-one-through-association"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-has-one-through-association"}},[s._v("#")]),s._v(" The has_one :through association")]),s._v(" "),t("p",[s._v("A "),t("code",[s._v("has_one :through")]),s._v(" association sets up a "),t("code",[s._v("one-to-one")]),s._v(" connection with another model. This association indicates that the declaring model can be matched with one instance of another model by proceeding through a third model.")]),s._v(" "),t("p",[s._v("For example, if each "),t("code",[s._v("supplier")]),s._v(" has one "),t("code",[s._v("account")]),s._v(", and each account is associated with one account history, then the supplier model could look like this:")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Supplier")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ApplicationRecord")]),s._v("\n  has_one "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":account")]),s._v("\n  has_one "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":account_history")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" through"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":account")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Account")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ApplicationRecord")]),s._v("\n  belongs_to "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":supplier")]),s._v("\n  has_one "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":account_history")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AccountHistory")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ApplicationRecord")]),s._v("\n  belongs_to "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":account")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])]),t("h2",{attrs:{id:"the-has-and-belongs-to-many-association"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-has-and-belongs-to-many-association"}},[s._v("#")]),s._v(" The has_and_belongs_to_many association")]),s._v(" "),t("p",[s._v("A "),t("code",[s._v("has_and_belongs_to_many")]),s._v(" association creates a direct "),t("code",[s._v("many-to-many")]),s._v(" connection with another model, with no intervening model.")]),s._v(" "),t("p",[s._v("For example, if your application includes "),t("code",[s._v("assemblies")]),s._v(" and "),t("code",[s._v("parts")]),s._v(", with each assembly having many parts and each part appearing in many assemblies, you could declare the models this way:")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Assembly")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ApplicationRecord")]),s._v("\n  has_and_belongs_to_many "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":parts")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Part")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ApplicationRecord")]),s._v("\n  has_and_belongs_to_many "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":assemblies")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);