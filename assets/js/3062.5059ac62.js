(window.webpackJsonp=window.webpackJsonp||[]).push([[3062],{3470:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"control-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#control-flow"}},[t._v("#")]),t._v(" Control Flow")]),t._v(" "),a("h2",{attrs:{id:"if-elsif-else-and-end"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if-elsif-else-and-end"}},[t._v("#")]),t._v(" if, elsif, else and end")]),t._v(" "),a("p",[t._v("Ruby offers the expected "),a("code",[t._v("if")]),t._v(" and "),a("code",[t._v("else")]),t._v(" expressions for branching logic, terminated by the "),a("code",[t._v("end")]),t._v(" keyword:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Simulate flipping a coin")]),t._v("\nresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":heads")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":tails")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sample\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":heads")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The coin-toss came up \"heads\"'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The coin-toss came up \"tails\"'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("In Ruby, "),a("code",[t._v("if")]),t._v(" statements are expressions that evaluate to a value, and the result can be assigned to a variable:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":minor")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":adult")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("Ruby also offers C-style ternary operators ("),a("a",{attrs:{href:"http://stackoverflow.com/documentation/ruby/640/control-flow/10907/ternary-operator#t=201607270911323570258",target:"_blank",rel:"noopener noreferrer"}},[t._v("see here for details"),a("OutboundLink")],1),t._v(") that can be expressed as:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("some_statement "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" if_true "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" if_false  \n\n")])])]),a("p",[t._v("This means the above example using if-else can also be written as")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":minor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":adult")]),t._v("\n\n")])])]),a("p",[t._v("Additionally, Ruby offers the "),a("code",[t._v("elsif")]),t._v(" keyword which accepts an expression to enables additional branching logic:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("label "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" shirt_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":s")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'small'")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elsif")]),t._v(" shirt_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":m")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'medium'")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elsif")]),t._v(" shirt_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":l")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'large'")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'unknown size'")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("If none of the conditions in an "),a("code",[t._v("if")]),t._v("/"),a("code",[t._v("elsif")]),t._v(" chain are true, and there is no "),a("code",[t._v("else")]),t._v(" clause, then the expression evaluates to nil.  This can be useful inside string interpolation, since "),a("code",[t._v("nil.to_s")]),t._v(" is the empty string:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"user'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@users")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n\n")])])]),a("h2",{attrs:{id:"case-statement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#case-statement"}},[t._v("#")]),t._v(" Case statement")]),t._v(" "),a("p",[t._v("Ruby uses the "),a("code",[t._v("case")]),t._v(" keyword for switch statements.")]),t._v(" "),a("p",[t._v("As per the "),a("a",{attrs:{href:"http://ruby-doc.org/docs/keywords/1.9/Object.html#method-i-case",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ruby Docs"),a("OutboundLink")],1),t._v(":")]),t._v(" "),a("blockquote"),t._v(" "),a("p",[t._v("Case statements consist of an optional condition, which is in the\nposition of an argument to `case`, and zero or more `when` clauses.\nThe first `when` clause to match the condition (or to evaluate to\nBoolean truth, if the condition is null) “wins”, and its code stanza\nis executed. The value of the case statement is the value of the\nsuccessful `when` clause, or `nil` if there is no such clause.")]),t._v(" "),a("p",[t._v("A case statement can end with an `else` clause. Each `when` a\nstatement can have multiple candidate values, separated by commas.")]),t._v(" "),a("p",[t._v("Example:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" x\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1, 2, or 3"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Some other number"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("Shorter version:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" x\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1, 2, or 3"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Some other number"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("The value of the "),a("code",[t._v("case")]),t._v(" clause is matched with each "),a("code",[t._v("when")]),t._v(" clause using the "),a("code",[t._v("===")]),t._v(" method (not "),a("code",[t._v("==")]),t._v("). Therefore it can be used with a variety of different types of objects.")]),t._v(" "),a("p",[t._v("A "),a("code",[t._v("case")]),t._v(" statement can be used with "),a("a",{attrs:{href:"http://ruby-doc.org/core/Range.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ranges"),a("OutboundLink")],1),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".19")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"teenager"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("A "),a("code",[t._v("case")]),t._v(" statement can be used with a "),a("a",{attrs:{href:"http://ruby-doc.org/core/Regexp.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Regexp"),a("OutboundLink")],1),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"google"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/oo/")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"word contains oo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("A "),a("code",[t._v("case")]),t._v(" statement can be used with a "),a("a",{attrs:{href:"http://ruby-doc.org/core/Proc.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Proc"),a("OutboundLink")],1),t._v(" or lambda:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("44")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("even"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"even or less than zero"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("A "),a("code",[t._v("case")]),t._v(" statement can be used with "),a("a",{attrs:{href:"http://ruby-doc.org/core/Class.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Classes"),a("OutboundLink")],1),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" x\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Integer")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"It\'s an integer"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"It\'s a string"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("By implementing the "),a("code",[t._v("===")]),t._v(" method you can create your own match classes:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Empty")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("object "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" object\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Empty")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name was empty"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name is not empty"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("A "),a("code",[t._v("case")]),t._v(" statement can be used without a value to match against:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ENV")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Y'")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ENV")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Y'")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Neither A nor B'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("A "),a("code",[t._v("case")]),t._v(" statement has a value, so you can use it as a method argument or in an assignment:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("description "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("when")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".19")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"teenager"')]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"truthy-and-falsy-values"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#truthy-and-falsy-values"}},[t._v("#")]),t._v(" Truthy and Falsy values")]),t._v(" "),a("p",[t._v('In Ruby, there are exactly two values which are considered "falsy", and will return false when tested as a condition for an '),a("code",[t._v("if")]),t._v(" expression. They are:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("nil")])]),t._v(" "),a("li",[t._v("boolean "),a("code",[t._v("false")])])]),t._v(" "),a("p",[a("strong",[t._v("All")]),t._v(' other values are considered "truthy", including:')]),t._v(" "),a("ul",[a("li",[a("code",[t._v("0")]),t._v(" - numeric zero (Integer or otherwise)")]),t._v(" "),a("li",[a("code",[t._v('""')]),t._v(" - Empty strings")]),t._v(" "),a("li",[a("code",[t._v('"\\n"')]),t._v(" - Strings containing only whitespace")]),t._v(" "),a("li",[a("code",[t._v("[]")]),t._v(" - Empty arrays")]),t._v(" "),a("li",[a("code",[t._v("{}")]),t._v(" - Empty hashes")])]),t._v(" "),a("p",[t._v("Take, for example, the following code:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("check_truthy")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("var_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  is_truthy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" var "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"truthy"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"falsy"')]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("var_name"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v(" is "),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("is_truthy"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\ncheck_truthy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"false"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncheck_truthy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nil"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncheck_truthy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncheck_truthy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"empty string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncheck_truthy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncheck_truthy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"empty array"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncheck_truthy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"empty hash"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("Will output:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" is falsy\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nil")]),t._v(" is falsy\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" is truthy\nempty string is truthy\n\\n is truthy\nempty array is truthy\nempty hash is truthy\n\n")])])]),a("h2",{attrs:{id:"inline-if-unless"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inline-if-unless"}},[t._v("#")]),t._v(" Inline if/unless")]),t._v(" "),a("p",[t._v("A common pattern is to use an inline, or trailing, "),a("code",[t._v("if")]),t._v(" or "),a("code",[t._v("unless")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x is less than 5"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\n")])])]),a("p",[t._v("This is known as a conditional "),a("strong",[t._v("modifier")]),t._v(", and is a handy way of adding simple guard code and early returns:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("save_to_file")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"no filename given"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("empty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unless")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("valid"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("It is not possible to add an "),a("code",[t._v("else")]),t._v(" clause to these modifiers. Also it is generally not recommended to use conditional modifiers inside the main logic -- For complex code one should use normal "),a("code",[t._v("if")]),t._v(", "),a("code",[t._v("elsif")]),t._v(", "),a("code",[t._v("else")]),t._v(" instead.")]),t._v(" "),a("h2",{attrs:{id:"while-until"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while-until"}},[t._v("#")]),t._v(" while, until")]),t._v(" "),a("p",[t._v("A "),a("code",[t._v("while")]),t._v(" loop executes the block while the given condition is met:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Iteration #'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n  i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("An "),a("code",[t._v("until")]),t._v(" loop executes the block while the conditional is false:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("until")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Iteration #'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n  i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"or-equals-conditional-assignment-operator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#or-equals-conditional-assignment-operator"}},[t._v("#")]),t._v(" Or-Equals/Conditional assignment operator (||=)")]),t._v(" "),a("p",[t._v("Ruby has an or-equals operator that allows a value to be assigned to a variable if and only if that variable evaluates to either "),a("code",[t._v("nil")]),t._v(" or "),a("code",[t._v("false")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\n||= # this is the operator that achieves this. \n\n")])])]),a("p",[t._v("this operator with the double pipes representing or and the equals sign representing assigning of a value. You may think it represents something like this:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\nx = x || y\n\n")])])]),a("p",[t._v("this above example is not correct. The or-equals operator actually represents this:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\nx || x = y\n\n")])])]),a("p",[t._v("If "),a("code",[t._v("x")]),t._v(" evaluates to "),a("code",[t._v("nil")]),t._v(" or "),a("code",[t._v("false")]),t._v(" then "),a("code",[t._v("x")]),t._v(" is assigned the value of "),a("code",[t._v("y")]),t._v(", and left unchanged otherwise.")]),t._v(" "),a("p",[t._v("Here is a practical use-case of the or-equals operator. Imagine you have a portion of your code that is expected to send an email to a user. What do you do if for what ever reason there is no email for this user. You might write something like this:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\nif user_email.nil?\n    user_email = "error@yourapp.com"\n end\n\n')])])]),a("p",[t._v("Using the or-equals operator we can cut this entire chunk of code, providing clean, clear control and functionality.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\nuser_email ||= "error@yourapp.com"\n\n')])])]),a("p",[t._v("In cases where "),a("code",[t._v("false")]),t._v(" is a valid value, care must be taken to not override it accidentally:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("has_been_run "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nhas_been_run "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> true")]),t._v("\n\nhas_been_run "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nhas_been_run "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" has_been_run"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nil")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> false")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"flip-flop-operator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flip-flop-operator"}},[t._v("#")]),t._v(" Flip-Flop operator")]),t._v(" "),a("p",[t._v("The flip flop operator "),a("code",[t._v("..")]),t._v(" is used between two conditions in a conditional statement:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("select "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  e "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => [2, 3, 4]")]),t._v("\n\n")])])]),a("p",[t._v("The condition evaluates to "),a("code",[t._v("false")]),t._v(" "),a("strong",[t._v("until")]),t._v(" the first part becomes "),a("code",[t._v("true")]),t._v(". Then it evaluates to "),a("code",[t._v("true")]),t._v(" "),a("strong",[t._v("until")]),t._v(" the second part becomes "),a("code",[t._v("true")]),t._v(". After that it switches to "),a("code",[t._v("false")]),t._v(" again.")]),t._v(" "),a("p",[t._v("This example illustrates what is being selected:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("select "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  e "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => [2, 2, 3, 4]")]),t._v("\n\n")])])]),a("p",[t._v("The flip-flop operator only works inside ifs (including "),a("code",[t._v("unless")]),t._v(") and ternary operator. Otherwise it is being considered as the range operator.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("select "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => ArgumentError: bad value for range")]),t._v("\n\n")])])]),a("p",[t._v("It can switch from "),a("code",[t._v("false")]),t._v(" to "),a("code",[t._v("true")]),t._v(" and backwards multiple times:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("to_a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("select "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  e "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => [2, 3, 4, 2, 3, 4] ")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"unless"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unless"}},[t._v("#")]),t._v(" unless")]),t._v(" "),a("p",[t._v("A common statement is "),a("code",[t._v("if !(some condition)")]),t._v(". Ruby offers the alternative of the "),a("code",[t._v("unless")]),t._v(" statement.")]),t._v(" "),a("p",[t._v("The structure is exactly the same as an "),a("code",[t._v("if")]),t._v(" statement, except the condition is negative. Also, the "),a("code",[t._v("unless")]),t._v(" statement does not support "),a("code",[t._v("elsif")]),t._v(", but it does support "),a("code",[t._v("else")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Prints not inclusive")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unless")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hellow'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'all'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'not inclusive'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"throw-catch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#throw-catch"}},[t._v("#")]),t._v(" throw, catch")]),t._v(" "),a("p",[t._v("Unlike many other programming languages, the "),a("code",[t._v("throw")]),t._v(" and "),a("code",[t._v("catch")]),t._v(" keywords are not related to exception handling in Ruby.")]),t._v(" "),a("p",[t._v("In Ruby, "),a("code",[t._v("throw")]),t._v(" and "),a("code",[t._v("catch")]),t._v(' act a bit like labels in other languages. They are used to change the control flow, but are not related to a concept of "error" like Exceptions are.')]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("catch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":out")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  catch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":nested")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nested"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"before"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v(":out")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"will not be executed"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"after"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# prints "nested", "before", "after"')]),t._v("\n\n")])])]),a("h2",{attrs:{id:"ternary-operator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ternary-operator"}},[t._v("#")]),t._v(" Ternary operator")]),t._v(" "),a("p",[t._v("Ruby has a ternary operator ("),a("code",[t._v("?:")]),t._v("), which returns one of two value based on if a condition evaluates as truthy:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("conditional "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" value_if_truthy "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" value_if_falsy\n\nvalue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nvalue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"true"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"false"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> "true"')]),t._v("\n\nvalue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nvalue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"true"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"false"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#=> "false"')]),t._v("\n\n")])])]),a("p",[t._v("it is the same as writing "),a("code",[t._v("if a then b else c end")]),t._v(", though the ternary is preferred")]),t._v(" "),a("p",[t._v("Examples:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("puts "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 2")]),t._v("\n\nputs "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 2")]),t._v("\n\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\nputs x                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 2")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"loop-control-with-break-next-and-redo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loop-control-with-break-next-and-redo"}},[t._v("#")]),t._v(" Loop control with break, next, and redo")]),t._v(" "),a("p",[t._v("The flow of execution of a Ruby block may be controlled with the "),a("code",[t._v("break")]),t._v(", "),a("code",[t._v("next")]),t._v(", and "),a("code",[t._v("redo")]),t._v(" statements.")]),t._v(" "),a("h3",{attrs:{id:"break"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#break"}},[t._v("#")]),t._v(" "),a("code",[t._v("break")])]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("break")]),t._v(" statement will exit the block immediately.  Any remaining instructions in the block will be skipped, and the iteration will end:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("actions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%w(run jump swim exit macarena)")]),t._v("\nindex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" actions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  action "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" actions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" action "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"exit"')]),t._v("\n\n  index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Currently doing this action: '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("action"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Currently doing this action: run")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Currently doing this action: jump")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Currently doing this action: swim")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"next"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#next"}},[t._v("#")]),t._v(" "),a("code",[t._v("next")])]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("next")]),t._v(" statement will return to the top of the block immediately, and proceed with the next iteration.  Any remaining instructions in the block will be skipped:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("actions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%w(run jump swim rest macarena)")]),t._v("\nindex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" actions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  action "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" actions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" action "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rest"')]),t._v("\n\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Currently doing this action: '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("action"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Currently doing this action: run")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Currently doing this action: jump")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Currently doing this action: swim")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Currently doing this action: macarena")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"redo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redo"}},[t._v("#")]),t._v(" "),a("code",[t._v("redo")])]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("redo")]),t._v(" statement will return to the top of the block immediately, and retry the same iteration.  Any remaining instructions in the block will be skipped:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("actions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("%w(run jump swim sleep macarena)")]),t._v("\nindex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nrepeat_count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" actions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  action "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" actions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Currently doing this action: '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("action"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" action "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sleep"')]),t._v("\n    repeat_count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("redo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" repeat_count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n  index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Currently doing this action: run")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Currently doing this action: jump")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Currently doing this action: swim")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Currently doing this action: sleep")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Currently doing this action: sleep")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Currently doing this action: sleep")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Currently doing this action: macarena")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"enumerable-iteration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enumerable-iteration"}},[t._v("#")]),t._v(" "),a("code",[t._v("Enumerable")]),t._v(" iteration")]),t._v(" "),a("p",[t._v("In addition to loops, these statements work with Enumerable iteration methods, such as "),a("code",[t._v("each")]),t._v(" and "),a("code",[t._v("map")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("each")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("even"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Item: '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Item: 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Item: 3")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"block-result-values"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#block-result-values"}},[t._v("#")]),t._v(" Block result values")]),t._v(" "),a("p",[t._v("In both the "),a("code",[t._v("break")]),t._v(" and "),a("code",[t._v("next")]),t._v(" statements, a value may be provided, and will be used as a block result value:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("even_value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("even"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\nputs "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The first even value is: '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("even_value"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# The first even value is: 2")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"return-vs-next-non-local-return-in-a-block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#return-vs-next-non-local-return-in-a-block"}},[t._v("#")]),t._v(" return vs. next: non-local return in a block")]),t._v(" "),a("p",[t._v("Consider this "),a("strong",[t._v("broken")]),t._v(" snippet:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")])]),t._v("\n  bar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("map "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("even"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n    x\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'baz'")]),t._v("\n  bar\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\nfoo "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => 0")]),t._v("\n\n")])])]),a("p",[t._v("One might expect "),a("code",[t._v("return")]),t._v(" to yield a value for "),a("code",[t._v("map")]),t._v("'s array of block results. So the return value of "),a("code",[t._v("foo")]),t._v(" would be "),a("code",[t._v("[1, 0, 3, 0]")]),t._v(". Instead, "),a("strong",[a("code",[t._v("return")]),t._v(" returns a value from the method "),a("code",[t._v("foo")])]),t._v(". Notice that "),a("code",[t._v("baz")]),t._v(" isn't printed, which means execution never reached that line.")]),t._v(" "),a("p",[a("code",[t._v("next")]),t._v(" with a value does the trick. It acts as a block-level "),a("code",[t._v("return")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")])]),t._v("\n  bar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("map "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("even"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n    x\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'baz'")]),t._v("\n  bar\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\nfoo "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# baz")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# => [1, 0, 3, 0]")]),t._v("\n\n")])])]),a("p",[t._v("In the absence of a "),a("code",[t._v("return")]),t._v(", the value returned by the block is the value of its last expression.")]),t._v(" "),a("h2",{attrs:{id:"control-flow-with-logic-statements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#control-flow-with-logic-statements"}},[t._v("#")]),t._v(" Control flow with logic statements")]),t._v(" "),a("p",[t._v("While it might seem counterintuitive, you can use logical operators to determine whether or not a statement is run. For instance:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exist"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("STDERR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("filename"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v(' does not exist!"')]),t._v("\n\n")])])]),a("p",[t._v("This will check to see if the file exists and only print the error message if it doesn't. The "),a("code",[t._v("or")]),t._v(" statement is lazy, which means it'll stop executing once it's sure which whether it's value is true or false. As soon as the first term is found to be true, there's no need to check the value of the other term. But if the first term is false, it must check the second term.")]),t._v(" "),a("p",[t._v("A common use is to set a default value:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("glass "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" glass "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'full'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Optimist! ")]),t._v("\n\n")])])]),a("p",[t._v("That sets the value of "),a("code",[t._v("glass")]),t._v(" to 'full' if it's not already set. More concisely, you can use the symbolic version of "),a("code",[t._v("or")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("glass "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'empty'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Pessimist. ")]),t._v("\n\n")])])]),a("p",[t._v("It's also possible to run the second statement only if the first one is false:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exist"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("filename"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v(' found!"')]),t._v("\n\n")])])]),a("p",[t._v("Again, "),a("code",[t._v("and")]),t._v(" is lazy so it will only execute the second statement if necessary to arrive at a value.")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("or")]),t._v(" operator has lower precedence than "),a("code",[t._v("and")]),t._v(". Similarly, "),a("code",[t._v("||")]),t._v(" has lower precedence than "),a("code",[t._v("&&")]),t._v(". The symbol forms have higher precedence than the word forms. This is handy to know when you want to mix this technique with assignment:")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> a==1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> b==2")]),t._v("\n\n")])])]),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" puts a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> a==2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#=> b==2")]),t._v("\n\n")])])]),a("p",[t._v("Note that the Ruby Style Guide "),a("a",{attrs:{href:"https://github.com/bbatsov/ruby-style-guide#no-and-or-or",target:"_blank",rel:"noopener noreferrer"}},[t._v("recommends"),a("OutboundLink")],1),t._v(":")]),t._v(" "),a("blockquote"),t._v(" "),a("p",[t._v("The "),a("code",[t._v("and")]),t._v(" and "),a("code",[t._v("or")]),t._v(" keywords are banned. The minimal added readability is just not worth the high probability of introducing subtle bugs. For boolean expressions, always use "),a("code",[t._v("&&")]),t._v(" and "),a("code",[t._v("||")]),t._v(" instead. For flow control, use "),a("code",[t._v("if")]),t._v(" and "),a("code",[t._v("unless")]),t._v("; "),a("code",[t._v("&&")]),t._v(" and "),a("code",[t._v("||")]),t._v(" are also acceptable but less clear.")]),t._v(" "),a("h2",{attrs:{id:"begin-end"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#begin-end"}},[t._v("#")]),t._v(" begin, end")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("begin")]),t._v(" block is a control structure that groups together multiple statements.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n  a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n  b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n  a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("A "),a("code",[t._v("begin")]),t._v(" block will return the value of the last statement in the block.  The following example will return "),a("code",[t._v("3")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("The "),a("code",[t._v("begin")]),t._v(" block is useful for conditional assignment using the "),a("code",[t._v("||=")]),t._v(" operator where multiple statements may be required to return a result.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("circumference "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),t._v("\n    radius "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n    tau "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Math")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PI")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    tau "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" radius\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("p",[t._v("It can also be combined with other block structures such as "),a("code",[t._v("rescue")]),t._v(", "),a("code",[t._v("ensure")]),t._v(", "),a("code",[t._v("while")]),t._v(", "),a("code",[t._v("if")]),t._v(", "),a("code",[t._v("unless")]),t._v(", etc to provide greater control of program flow.")]),t._v(" "),a("p",[a("code",[t._v("Begin")]),t._v(" blocks are not code blocks, like "),a("code",[t._v("{ ... }")]),t._v(" or "),a("code",[t._v("do ... end")]),t._v("; they cannot be passed to functions.")])])}),[],!1,null,null,null);s.default=n.exports}}]);