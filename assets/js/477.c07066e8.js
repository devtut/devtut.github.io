(window.webpackJsonp=window.webpackJsonp||[]).push([[477],{885:function(t,a,s){"use strict";s.r(a);var e=s(31),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"bash-history-substitutions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bash-history-substitutions"}},[t._v("#")]),t._v(" Bash history substitutions")]),t._v(" "),s("h2",{attrs:{id:"quick-reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#quick-reference"}},[t._v("#")]),t._v(" Quick Reference")]),t._v(" "),s("h3",{attrs:{id:"interaction-with-the-history"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interaction-with-the-history"}},[t._v("#")]),t._v(" Interaction with the history")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# List all previous commands")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("history")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Clear the history, useful if you entered a password by accident")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("history")]),t._v(" -c\n\n")])])]),s("h3",{attrs:{id:"event-designators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-designators"}},[t._v("#")]),t._v(" Event designators")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Expands to line n of bash history")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Expands to last command")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Expands to last command starting with "text"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("text\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Expands to last command containing "text"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("?text\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Expands to command n lines ago")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("-n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Expands to last command with first occurrence of "foo" replaced by "bar"')]),t._v("\n^foo^bar^\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Expands to the current command")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"word-designators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#word-designators"}},[t._v("#")]),t._v(" Word designators")]),t._v(" "),s("p",[t._v("These are separated by "),s("code",[t._v(":")]),t._v(" from the event designator they refer to. The colon can be omitted if the word designator doesn't start with a number: "),s("code",[t._v("!^")]),t._v(" is the same as "),s("code",[t._v("!:^")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Expands to the first argument of the most recent command")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("^\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Expands to the last argument of the most recent command (short for !!:$)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("$\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Expands to the third argument of the most recent command")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(":3\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Expands to arguments x through y (inclusive) of the last command")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# x and y can be numbers or the anchor characters ^ $")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(":x-y\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Expands to all words of the last command except the 0th")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Equivalent to :^-$")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("*\n\n")])])]),s("h3",{attrs:{id:"modifiers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#modifiers"}},[t._v("#")]),t._v(" Modifiers")]),t._v(" "),s("p",[t._v("These modify the preceding event or word designator.")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Replacement in the expansion using sed syntax")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Allows flags before the s and alternate separators")]),t._v("\n:s/foo/bar/ "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#substitutes bar for first occurrence of foo")]),t._v("\n:gs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("bar"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#substitutes bar for all foo")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Remove leading path from last argument ("tail")')]),t._v("\n:t\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Remove trailing path from last argument ("head")')]),t._v("\n:h\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Remove file extension from last argument")]),t._v("\n:r\n\n")])])]),s("p",[t._v("If the Bash variable "),s("code",[t._v("HISTCONTROL")]),t._v(" contains either "),s("code",[t._v("ignorespace")]),t._v(" or "),s("code",[t._v("ignoreboth")]),t._v(" (or, alternatively, "),s("code",[t._v("HISTIGNORE")]),t._v(" contains the pattern "),s("code",[t._v("[ ]*")]),t._v("), you can prevent your commands from being stored in Bash history by prepending them with a space:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This command won't be saved in the history")]),t._v("\n foo\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This command will be saved")]),t._v("\nbar\n\n")])])]),s("h2",{attrs:{id:"repeat-previous-command-with-sudo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#repeat-previous-command-with-sudo"}},[t._v("#")]),t._v(" Repeat previous command with sudo")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" r-base\nE: Could not "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),t._v(" lock "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" /var/lib/dpkg/lock - "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(": Permission denied"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nE: Unable to lock the administration directory "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/var/lib/dpkg/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", are you root?\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" r-base\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sudo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" password "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(": \n\n")])])]),s("h2",{attrs:{id:"search-in-the-command-history-by-pattern"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#search-in-the-command-history-by-pattern"}},[t._v("#")]),t._v(" Search in the command history by pattern")]),t._v(" "),s("p",[t._v("Press "),s("kbd",[t._v("control")]),s("kbd",[t._v("r")]),t._v(" and type a pattern.")]),t._v(" "),s("p",[t._v("For example, if you recently executed "),s("code",[t._v("man 5 crontab")]),t._v(", you can find it quickly by "),s("strong",[t._v("starting to type")]),t._v(' "crontab". The prompt will change like this:')]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reverse-i-search"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("`cr': "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("man")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("crontab")]),t._v("\n\n")])])]),s("p",[t._v("The ``cr'` there is the string I typed so far.\nThis is an incremental search, so as you continue typing, the search result gets updated to match the most recent command that contained the pattern.")]),t._v(" "),s("p",[t._v("Press the left or right arrow keys to edit the matched command before running it,\nor the "),s("kbd",[t._v("enter")]),t._v(" key to run the command.")]),t._v(" "),s("p",[t._v("By default the search finds the most recently executed command matching the pattern. To go further back in the history press "),s("kbd",[t._v("control")]),s("kbd",[t._v("r")]),t._v(" again. You may press it repeatedly until you find the desired command.")]),t._v(" "),s("h2",{attrs:{id:"switch-to-newly-created-directory-with-n"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#switch-to-newly-created-directory-with-n"}},[t._v("#")]),t._v(" Switch to newly created directory with !#:N")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" backup_download_directory "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#:1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" backup_download_directory "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" backup_download_directory\n\n")])])]),s("p",[t._v("This will substitute the Nth argument of the current command. In the example "),s("code",[t._v("!#:1")]),t._v(" is replaced with the first argument, i.e. backup_download_directory.")]),t._v(" "),s("h2",{attrs:{id:"using"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using"}},[t._v("#")]),t._v(" Using !$")]),t._v(" "),s("p",[t._v("You can use the "),s("code",[t._v("!$")]),t._v(" to reduce repetition when using the command line:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ping")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ping")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("$\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ping")]),t._v("\n\n")])])]),s("p",[t._v("You can also build upon the repetition")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("$ pong\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ping")]),t._v(" pong\n$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("$, a great game\npong, a great game\n\n")])])]),s("p",[t._v("Notice that in the last example we did not get "),s("code",[t._v("ping pong, a great game")]),t._v(" because the last argument passed  to the previous command was "),s("code",[t._v("pong")]),t._v(", we can avoid issue like this by adding quotes. Continuing with the example, our last argument was "),s("code",[t._v("game")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"it is !$ time"')]),t._v("\nit is game "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hooray, !'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$!")]),t._v('"')]),t._v("\nhooray, it is game time"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"repeat-the-previous-command-with-a-substitution"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#repeat-the-previous-command-with-a-substitution"}},[t._v("#")]),t._v(" Repeat the previous command with a substitution")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ mplayer Lecture_video_part1.mkv\n$ ^1^2^\nmplayer Lecture_video_part2.mkv\n\n")])])]),s("p",[t._v("This command will replace "),s("code",[t._v("1")]),t._v(" with "),s("code",[t._v("2")]),t._v(" in the previously executed command. It will only replace the first occurrence of the string and is equivalent to "),s("code",[t._v("!!:s/1/2/")]),t._v(".")]),t._v(" "),s("p",[t._v("If you want to replace "),s("strong",[t._v("all")]),t._v(" occurrences, you have to use "),s("code",[t._v("!!:gs/1/2/")]),t._v(" or "),s("code",[t._v("!!:as/1/2/")]),t._v(".")])])}),[],!1,null,null,null);a.default=n.exports}}]);