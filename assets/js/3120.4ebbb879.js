(window.webpackJsonp=window.webpackJsonp||[]).push([[3120],{3528:function(s,a,t){"use strict";t.r(a);var e=t(31),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"variable-scope-and-visibility"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#variable-scope-and-visibility"}},[s._v("#")]),s._v(" Variable Scope and Visibility")]),s._v(" "),t("h2",{attrs:{id:"class-variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-variables"}},[s._v("#")]),s._v(" Class Variables")]),s._v(" "),t("p",[s._v("Class variables have a class wide scope, they can be declared anywhere in the class. A variable will be considered a class variable when prefixed with "),t("code",[s._v("@@")])]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Dinosaur")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@@classification")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Like a Reptile, but like a bird"')]),s._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("classification")])]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@@classification")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("classification")])]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@@classification")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\ndino "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Dinosaur")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("\ndino"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("classification\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "Like a Reptile, but like a bird"')]),s._v("\n  \n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Dinosaur")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("classification\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "Like a Reptile, but like a bird"')]),s._v("\n\n")])])]),t("p",[s._v("Class variables are shared between related classes and can be overwritten from a child class")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TRex")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Dinosaur")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@@classification")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Big teeth bird!"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TRex")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("classification\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "Big teeth bird!"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Dinosaur")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("classification\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "Big teeth bird!"')]),s._v("\n\n")])])]),t("p",[s._v("This behaviour is unwanted most of the time and can be circumvented by using class-level instance variables.")]),s._v(" "),t("p",[s._v("Class variables defined inside a module will not overwrite their including classes class variables:")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("module")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SomethingStrange")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@@classification")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Something Strange"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DuckDinosaur")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Dinosaur")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SomethingStrange")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DuckDinosaur")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("class_variables\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => [:@@classification]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SomethingStrange")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("class_variables\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => [:@@classification]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DuckDinosaur")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("classification\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "Big teeth bird!"')]),s._v("\n\n")])])]),t("h2",{attrs:{id:"local-variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#local-variables"}},[s._v("#")]),s._v(" Local Variables")]),s._v(" "),t("p",[s._v("Local variables (unlike the other variable classes) do not have any prefix")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[s._v("local_variable "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"local"')]),s._v("\np local_variable\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => local")]),s._v("\n\n")])])]),t("p",[s._v('Its scope is dependent on where it has been declared, it can not be used outside the "declaration containers" scope. For example, if a local variable is declared in a method, it can only be used inside that method.')]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("some_method")])]),s._v("\n    method_scope_var "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hi there"')]),s._v("\n    p method_scope_var\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\nsome_method\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# hi there")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => hi there")]),s._v("\n\nmethod_scope_var\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# NameError: undefined local variable or method `method_scope_var'")]),s._v("\n\n")])])]),t("p",[s._v("Of course, local variables are not limited to methods, as a rule of thumb you could say that, as soon as you declare a variable inside a "),t("code",[s._v("do ... end")]),s._v(" block or wrapped in curly braces "),t("code",[s._v("{}")]),s._v(" it will be local and scoped to the block it has been declared in.")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("times "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n    local_var "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    p local_var\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 2")]),s._v("\n\nlocal_var\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# NameError: undefined local variable or method `local_var'")]),s._v("\n\n")])])]),t("p",[s._v("However, local variables declared in "),t("code",[s._v("if")]),s._v(" or "),t("code",[s._v("case")]),s._v(" blocks can be used in the parent-scope:")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n    usable "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"yay"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\np usable\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# yay")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "yay"')]),s._v("\n\n")])])]),t("p",[s._v("While local variables can not be used outside of its block of declaration, it will be passed down to blocks:")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[s._v("my_variable "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo"')]),s._v("\n\nmy_variable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("split"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("each_with_index "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("char"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n    puts "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"The character in string '"),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),s._v("my_variable"),t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v("' at index "),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v(" is "),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),s._v("char"),t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The character in string 'foo' at index 0 is f")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The character in string 'foo' at index 1 is o")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The character in string 'foo' at index 2 is o")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => ["f", "o", "o"]')]),s._v("\n\n")])])]),t("p",[s._v("But not to method / class / module definitions")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[s._v("my_variable "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("some_method")])]),s._v("\n    puts "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"you can't use the local variable in here, see? "),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),s._v("my_variable"),t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v('"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\nsome_method\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# NameError: undefined local variable or method `my_variable'")]),s._v("\n\n")])])]),t("p",[s._v("The variables used for block arguments are (of course) local to the block, but will overshadow previously defined variables, without overwriting them.")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[s._v("overshadowed "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sunlight"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"darkness"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("each")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("overshadowed"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n    p overshadowed\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# darkness")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => ["darkness"]')]),s._v("\n\np overshadowed\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "sunlight"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "sunlight"')]),s._v("\n\n")])])]),t("h2",{attrs:{id:"global-variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#global-variables"}},[s._v("#")]),s._v(" Global Variables")]),s._v(" "),t("p",[s._v("Global variables have a global scope and hence, can be used everywhere. Their scope is not dependent on where they are defined. A variable will be considered global, when prefixed with a "),t("code",[s._v("$")]),s._v(" sign.")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i_am_global")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"omg"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Dinosaur")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("instance_method")])]),s._v("\n       p "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"global vars can be used everywhere. See? '),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i_am_global")]),t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v(", "),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$another_global_var")]),t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v('"')]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("class_method")])]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$another_global_var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"srsly?"')]),s._v("\n       p "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"global vars can be used everywhere. See? '),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i_am_global")]),t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v('"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Dinosaur")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("class_method\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "global vars can be used everywhere. See? omg"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "global vars can be used everywhere. See? omg"')]),s._v("\n\ndinosaur "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Dinosaur")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("\ndinosaur"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("instance_method\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "global vars can be used everywhere. See? omg, srsly?"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "global vars can be used everywhere. See? omg, srsly?"')]),s._v("\n\n")])])]),t("p",[s._v('Since a global variable can be defined everywhere and will be visible everywhere, calling an "undefined" global variable will return nil instead of raising an error.')]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[s._v("p "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$undefined_var")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# nil")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => nil")]),s._v("\n\n")])])]),t("p",[s._v("Although global variables are easy to use its usage is strongly discouraged in favour of constants.")]),s._v(" "),t("h2",{attrs:{id:"instance-variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#instance-variables"}},[s._v("#")]),s._v(" Instance Variables")]),s._v(" "),t("p",[s._v("Instance variables have an object wide scope, they can be declared anywhere in the object, however an instance variable declared on class level, will only be visible in the class object. A variable will be considered an instance variable when prefixed with "),t("code",[s._v("@")]),s._v(". Instance variables are used to set and get an objects attributes and will return nil if not defined.")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Dinosaur")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@base_sound")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"rawrr"')]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("initialize")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sound "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("nil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@sound")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sound "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("base_sound\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("speak")])]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@sound")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("try_to_speak")])]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@base_sound")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count_and_store_sound_length")])]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@sound")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("chars"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("each_with_index "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("char"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@sound_length")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n            p "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),s._v("char"),t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v(": "),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("#{")]),s._v("sound_length"),t("span",{pre:!0,attrs:{class:"token delimiter tag"}},[s._v("}")])]),s._v('"')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sound_length")])]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@sound_length")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("base_sound")])]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@base_sound")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\ndino_1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Dinosaur")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("\ndino_2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Dinosaur")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"grrr"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Dinosaur")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("base_sound\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "rawrr"')]),s._v("\ndino_2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("speak\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "grrr"')]),s._v("\n\n")])])]),t("p",[s._v("The instance variable declared on class level can not be accessed on object level:")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[s._v("dino_1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("try_to_speak\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => nil")]),s._v("\n\n")])])]),t("p",[s._v("However, we used the instance variable "),t("code",[s._v("@base_sound")]),s._v(" to instantiate the sound when no sound is passed to the new method:")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[s._v("dino_1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("speak\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "rawwr"')]),s._v("\n\n")])])]),t("p",[s._v("Instance variables can be declared anywhere in the object, even inside a block:")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[s._v("dino_1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count_and_store_sound_length\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "r: 1"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "a: 2"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "w: 3"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "r: 4"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "r: 5"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => ["r", "a", "w", "r", "r"]')]),s._v("\n\ndino_1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sound_length\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 5")]),s._v("\n\n")])])]),t("p",[s._v("Instance variables are "),t("strong",[s._v("not")]),s._v(" shared between instances of the same class")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[s._v("dino_2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sound_length\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => nil")]),s._v("\n\n")])])]),t("p",[s._v("This can be used to create class level variables, that will not be overwritten by a child-class, since classes are also objects in Ruby.")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DuckDuckDinosaur")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Dinosaur")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@base_sound")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"quack quack"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\nduck_dino "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DuckDuckDinosaur")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("\nduck_dino"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("speak\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "quack quack"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DuckDuckDinosaur")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("base_sound\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "quack quack"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("Dinosaur")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("base_sound\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "rawrr"')]),s._v("\n\n")])])]),t("h4",{attrs:{id:"syntax"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[s._v("#")]),s._v(" Syntax")]),s._v(" "),t("ul",[t("li",[s._v("$global_variable")]),s._v(" "),t("li",[s._v("@@class_variable")]),s._v(" "),t("li",[s._v("@instance_variable")]),s._v(" "),t("li",[s._v("local_variable")])]),s._v(" "),t("h4",{attrs:{id:"remarks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[s._v("#")]),s._v(" Remarks")]),s._v(" "),t("p",[s._v("Class variables are shared in the class hierarchy. This can result in surprising behavior.")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@@variable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":x")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("variable")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@@variable")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@@variable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":y")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("variable  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# :y")]),s._v("\n\n")])])]),t("p",[s._v("Classes are objects, so instance variables can be used to provide state that is specific to each class.")]),s._v(" "),t("div",{staticClass:"language-ruby extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ruby"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@variable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":x")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token method-definition"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("variable")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@variable")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@variable")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token symbol"}},[s._v(":y")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("variable  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# :x")]),s._v("\n\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);