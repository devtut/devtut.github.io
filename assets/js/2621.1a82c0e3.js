(window.webpackJsonp=window.webpackJsonp||[]).push([[2621],{3029:function(t,a,s){"use strict";s.r(a);var e=s(31),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"regular-expressions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#regular-expressions"}},[t._v("#")]),t._v(" Regular Expressions")]),t._v(" "),s("h2",{attrs:{id:"single-match"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#single-match"}},[t._v("#")]),t._v(" Single match")]),t._v(" "),s("p",[t._v("You can quickly determine if a text includes a specific pattern using Regex. There are multiple ways to work with Regex in PowerShell.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Sample text")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$text")]),t._v(" = @"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\nThis is (a) sample\ntext, this is\na (sample text)\n"')]),t._v("@\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Sample pattern: Content wrapped in ()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\(.*?\\)'")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"using-the-match-operator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-the-match-operator"}},[t._v("#")]),t._v(" Using the -Match operator")]),t._v(" "),s("p",[t._v("To determine if a string matches a pattern using the built-in "),s("code",[t._v("-matches")]),t._v(" operator, use the syntax "),s("code",[t._v("'input' -match 'pattern'")]),t._v(". This will return "),s("code",[t._v("true")]),t._v(" or "),s("code",[t._v("false")]),t._v(" depending on the result of the search. If there was match you can view the match and groups (if defined in pattern) by accessing the "),s("code",[t._v("$Matches")]),t._v("-variable.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[t._v("> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$text")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-match")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),t._v("\nTrue\n\n> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$Matches")]),t._v("\n\nName Value\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("-"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("-"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n0    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n\n")])])]),s("p",[t._v("You can also use "),s("code",[t._v("-match")]),t._v(" to filter through an array of strings and only return the strings containing a match.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[t._v("> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$textarray")]),t._v(" = @"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\nThis is (a) sample\ntext, this is\na (sample text)\n"')]),t._v("@ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("split "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"`n"')]),t._v("\n\n> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$textarray")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-match")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),t._v("\nThis is "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" sample\na "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"using-select-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-select-string"}},[t._v("#")]),t._v(" Using Select-String")]),t._v(" "),s("p",[t._v("PowerShell 2.0 introduced a new cmdlet for searching through text using regex. It returns a "),s("code",[t._v("MatchInfo")]),t._v(" object per textinput that contains a match. You can access it's properties to find matching groups etc.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[t._v("> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$m")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Select-String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("InputObject "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$text")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Pattern "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),t._v("\n\n> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$m")]),t._v("\n\nThis is "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" sample\ntext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" this is\na "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$m")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Format-List")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n\nIgnoreCase : True\nLineNumber : 1\nLine       : This is "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" sample\n             text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" this is\n             a "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nFilename   : InputStream\nPath       : InputStream\nPattern    : \\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("?\\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nContext    : \nMatches    : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("Like "),s("code",[t._v("-match")]),t._v(", "),s("code",[t._v("Select-String")]),t._v(" can also be used to filter through an array of strings by piping an array to it. It creates a "),s("code",[t._v("MatchInfo")]),t._v("-object per string that includes a match.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[t._v("> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$textarray")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Select-String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Pattern "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),t._v("\n\nThis is "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" sample\na "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#You can also access the matches, groups etc.")]),t._v("\n> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$textarray")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Select-String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Pattern "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fl")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n\n\nIgnoreCase : True\nLineNumber : 1\nLine       : This is "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" sample\nFilename   : InputStream\nPath       : InputStream\nPattern    : \\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("?\\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nContext    : \nMatches    : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nIgnoreCase : True\nLineNumber : 3\nLine       : a "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nFilename   : InputStream\nPath       : InputStream\nPattern    : \\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("?\\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nContext    : \nMatches    : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[s("code",[t._v("Select-String")]),t._v(" can also search using a normal text-pattern (no regex) by adding the "),s("code",[t._v("-SimpleMatch")]),t._v(" switch.")]),t._v(" "),s("h3",{attrs:{id:"using-regex-match"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-regex-match"}},[t._v("#")]),t._v(" Using "),s("a",{attrs:{href:":Replace(%22text%22,%22pattern%22,%22newvalue%22)"}},[t._v("RegEx")]),t._v("::Match()")]),t._v(" "),s("p",[t._v("You can also use the static "),s("code",[t._v("Match()")]),t._v(" method available in the .NET "),s("code",[t._v("[RegEx]")]),t._v("-class.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[t._v("> "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("[regex]")]),t._v("::Match"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$text")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nGroups   : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nSuccess  : True\nCaptures : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nIndex    : 8\nLength   : 3\nValue    : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n> "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("[regex]")]),t._v("::Match"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$text")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Select-Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ExpandProperty Value\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"replace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replace"}},[t._v("#")]),t._v(" Replace")]),t._v(" "),s("p",[t._v("A common task for regex is to replace text that matches a pattern with a new value.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Sample text")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$text")]),t._v(" = @"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\nThis is (a) sample\ntext, this is\na (sample text)\n"')]),t._v("@\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Sample pattern: Text wrapped in ()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\(.*?\\)'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Replace matches with:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$newvalue")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"using-replace-operator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-replace-operator"}},[t._v("#")]),t._v(" Using -Replace operator")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("-replace")]),t._v(" operator in PowerShell can be used to replace text matching a pattern with a new value using the syntax "),s("code",[t._v("'input' -replace 'pattern', 'newvalue'")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[t._v("> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$text")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-replace")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$newvalue")]),t._v("\nThis is test sample\ntext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" this is\na test\n\n")])])]),s("h3",{attrs:{id:"using-regex-replace-method"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-regex-replace-method"}},[t._v("#")]),t._v(" Using "),s("a",{attrs:{href:":Replace(%22text%22,%22pattern%22,%22newvalue%22)"}},[t._v("RegEx")]),t._v("::Replace() method")]),t._v(" "),s("p",[t._v("Replacing matches can also be done using the "),s("code",[t._v("Replace()")]),t._v(" method in the "),s("code",[t._v("[RegEx]")]),t._v(" .NET class.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("[regex]")]),t._v("::Replace"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$text")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nThis is test sample\ntext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" this is\na test\n\n")])])]),s("h2",{attrs:{id:"replace-text-with-dynamic-value-using-a-matchevalutor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replace-text-with-dynamic-value-using-a-matchevalutor"}},[t._v("#")]),t._v(" Replace text with dynamic value using a MatchEvalutor")]),t._v(" "),s("p",[t._v("Sometimes you need to replace a value matching a pattern with a new value that's based on that specific match, making it impossible to predict the new value. For these types of scenarios, a "),s("code",[t._v("MatchEvaluator")]),t._v(" can be very useful.")]),t._v(" "),s("p",[t._v("In PowerShell, a "),s("code",[t._v("MatchEvaluator")]),t._v(" is as simple as a scriptblock with a single paramter that contains a "),s("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.match(v=vs.110).aspx",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("Match")]),s("OutboundLink")],1),t._v("-object for the current match. The output of the action will be the new value for that specific match. "),s("code",[t._v("MatchEvalutor")]),t._v(" can be used with the "),s("code",[t._v("[Regex]::Replace()")]),t._v(" static method.")]),t._v(" "),s("p",[s("strong",[t._v("Example")]),t._v(": Replacing the text inside "),s("code",[t._v("()")]),t._v(" with it's length")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Sample text")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$text")]),t._v(" = @"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\nThis is (a) sample\ntext, this is\na (sample text)\n"')]),t._v("@\n    \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Sample pattern: Content wrapped in ()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'(?<=\\().*?(?=\\))'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$MatchEvalutor")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("param")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Replace content with length of content")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Length\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("Output:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[t._v("> "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("[regex]")]),t._v("::Replace"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$text")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$MatchEvalutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nThis is 1 sample\ntext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" this is\na 11\n\n")])])]),s("p",[s("strong",[t._v("Example:")]),t._v(" Make "),s("code",[t._v("sample")]),t._v(" upper-case")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#Sample pattern: "Sample"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sample'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$MatchEvalutor")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("param")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Return match in upper-case")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ToUpper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("Output:")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[t._v("> "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("[regex]")]),t._v("::Replace"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$text")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$MatchEvalutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nThis is "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" SAMPLE\ntext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" this is\na "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SAMPLE text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"escape-special-characters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#escape-special-characters"}},[t._v("#")]),t._v(" Escape special characters")]),t._v(" "),s("p",[t._v("A regex-pattern uses many special characters to describe a pattern. Ex., "),s("code",[t._v(".")]),t._v(' means "any character", '),s("code",[t._v("+")]),t._v(' is "one or more" etc.')]),t._v(" "),s("p",[t._v("To use these characters, as a "),s("code",[t._v(".")]),t._v(","),s("code",[t._v("+")]),t._v(" etc., in a pattern, you need to escape them to remove their special meaning. This is done by using the escape character which is a backslash "),s("code",[t._v("\\")]),t._v(" in regex. Example: To search for "),s("code",[t._v("+")]),t._v(", you would use the pattern "),s("code",[t._v("\\+")]),t._v(".")]),t._v(" "),s("p",[t._v("It can be hard to remember all special characters in regex, so to escape every special character in a string you want to search for, you could use the "),s("code",[t._v('[RegEx]::Escape("input")')]),t._v(" method.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[t._v("> "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("[regex]")]),t._v("::Escape"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"(foo)"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo\\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n> "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("[regex]")]),t._v("::Escape"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1+1.2=2.2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n1\\"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("1\\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("2=2\\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("2\n\n")])])]),s("h2",{attrs:{id:"multiple-matches"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#multiple-matches"}},[t._v("#")]),t._v(" Multiple matches")]),t._v(" "),s("p",[t._v("There are multiple ways to find all matches for a pattern in a text.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Sample text")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$text")]),t._v(" = @"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\nThis is (a) sample\ntext, this is\na (sample text)\n"')]),t._v("@\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Sample pattern: Content wrapped in ()")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\(.*?\\)'")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"using-select-string-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-select-string-2"}},[t._v("#")]),t._v(" Using Select-String")]),t._v(" "),s("p",[t._v("You can find all matches (global match) by adding the "),s("code",[t._v("-AllMatches")]),t._v(" switch to "),s("code",[t._v("Select-String")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[t._v("> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$m")]),t._v(" = "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Select-String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("InputObject "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$text")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Pattern "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("AllMatches\n\n> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$m")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Format-List")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n\nIgnoreCase : True\nLineNumber : 1\nLine       : This is "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" sample\n             text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" this is\n             a "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nFilename   : InputStream\nPath       : InputStream\nPattern    : \\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("?\\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nContext    : \nMatches    : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#List all matches")]),t._v("\n> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$m")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Matches\n\nGroups   : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nSuccess  : True\nCaptures : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nIndex    : 8\nLength   : 3\nValue    : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nGroups   : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nSuccess  : True\nCaptures : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nIndex    : 37\nLength   : 13\nValue    : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Get matched text")]),t._v("\n> "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$m")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Matches "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Select-Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ExpandProperty Value\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"using-regex-matches"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-regex-matches"}},[t._v("#")]),t._v(" Using "),s("a",{attrs:{href:":Replace(%22text%22,%22pattern%22,%22newvalue%22)"}},[t._v("RegEx")]),t._v("::Matches()")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Matches()")]),t._v(" method in the .NET `"),s("a",{attrs:{href:":Replace(%22text%22,%22pattern%22,%22newvalue%22)"}},[t._v("regex")]),t._v("-class can also be used to do a global search for multiple matches.")]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[t._v("> "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("[regex]")]),t._v("::Matches"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$text")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nGroups   : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nSuccess  : True\nCaptures : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nIndex    : 8\nLength   : 3\nValue    : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nGroups   : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nSuccess  : True\nCaptures : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nIndex    : 37\nLength   : 13\nValue    : "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n> "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("[regex]")]),t._v("::Matches"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$text")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Select-Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ExpandProperty Value\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sample text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("h4",{attrs:{id:"syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),s("ul",[s("li",[t._v("'text' -match 'RegExPattern'")]),t._v(" "),s("li",[t._v("'text' -replace 'RegExPattern', 'newvalue'")]),t._v(" "),s("li",[s("a",{attrs:{href:":Replace(%22text%22,%22pattern%22,%22newvalue%22)"}},[t._v("regex")]),t._v('::Match("text","pattern")    #Single match')]),t._v(" "),s("li",[s("a",{attrs:{href:":Replace(%22text%22,%22pattern%22,%22newvalue%22)"}},[t._v("regex")]),t._v('::Matches("text","pattern")    #Multiple matches')]),t._v(" "),s("li"),t._v(" "),s("li",[s("a",{attrs:{href:":Replace(%22text%22,%22pattern%22,%22newvalue%22)"}},[t._v("regex")]),t._v('::Replace("text","pattern", {param($m) }) #MatchEvaluator')]),t._v(" "),s("li",[s("a",{attrs:{href:":Replace(%22text%22,%22pattern%22,%22newvalue%22)"}},[t._v("regex")]),t._v('::Escape("input") #Escape special characters')])])])}),[],!1,null,null,null);a.default=n.exports}}]);