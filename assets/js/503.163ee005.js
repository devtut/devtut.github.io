(window.webpackJsonp=window.webpackJsonp||[]).push([[503],{911:function(a,s,t){"use strict";t.r(s);var n=t(31),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"global-and-local-variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#global-and-local-variables"}},[a._v("#")]),a._v(" global and local variables")]),a._v(" "),t("p",[a._v("By default, every variable in bash is "),t("strong",[a._v("global")]),a._v(" to every function, script and even the outside shell if you are declaring your variables inside a script.")]),a._v(" "),t("p",[a._v("If you want your variable to be local to a function, you can use "),t("code",[a._v("local")]),a._v(" to have that variable a new variable that is independent to the global scope and whose value will only be accessible inside that function.")]),a._v(" "),t("h2",{attrs:{id:"global-variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#global-variables"}},[a._v("#")]),a._v(" Global variables")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello"')]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$var")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\nfoo\n\n")])])]),t("p",[a._v('Will obviously output "hello", but this works the other way around too:')]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\nfoo\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$var")]),a._v("\n\n")])])]),t("p",[a._v("Will also output "),t("code",[a._v('"hello"')])]),a._v(" "),t("h2",{attrs:{id:"local-variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#local-variables"}},[a._v("#")]),a._v(" Local variables")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("local")]),a._v(" var\n    "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\nfoo\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$var")]),a._v("\n\n")])])]),t("p",[a._v("Will output nothing, as var is a variable local to the function foo, and its value is not visible from outside of it.")]),a._v(" "),t("h2",{attrs:{id:"mixing-the-two-together"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mixing-the-two-together"}},[a._v("#")]),a._v(" Mixing the two together")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello"')]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("foo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("local")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"sup?"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"inside function, var='),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$var")]),a._v('"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\nfoo\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"outside function, var='),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$var")]),a._v('"')]),a._v("\n\n")])])]),t("p",[a._v("Will output")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("inside function, "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("sup?\noutside function, "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("hello\n\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);