(window.webpackJsonp=window.webpackJsonp||[]).push([[653],{1061:function(t,s,e){"use strict";e.r(s);var a=e(31),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"floating-point-arithmetic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#floating-point-arithmetic"}},[t._v("#")]),t._v(" Floating Point Arithmetic")]),t._v(" "),e("h2",{attrs:{id:"floating-point-numbers-are-weird"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#floating-point-numbers-are-weird"}},[t._v("#")]),t._v(" Floating Point Numbers are Weird")]),t._v(" "),e("p",[t._v("The first mistake that nearly every single programmer makes is presuming that this code will work as intended:")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" total "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.01f")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    total "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("p",[t._v("The novice programmer assumes that this will sum up every single number in the range "),e("code",[t._v("0, 0.01, 0.02, 0.03, ..., 1.97, 1.98, 1.99")]),t._v(", to yield the result "),e("code",[t._v("199")]),t._v("—the mathematically correct answer.")]),t._v(" "),e("p",[t._v("Two things happen that make this untrue:")]),t._v(" "),e("ol",[e("li",[t._v("The program as written never concludes. "),e("code",[t._v("a")]),t._v(" never becomes equal to "),e("code",[t._v("2")]),t._v(", and the loop never terminates.")]),t._v(" "),e("li",[t._v("If we rewrite the loop logic to check "),e("code",[t._v("a < 2")]),t._v(" instead, the loop terminates, but the total ends up being something different from "),e("code",[t._v("199")]),t._v(". On IEEE754-compliant machines, it will often sum up to about "),e("code",[t._v("201")]),t._v(" instead.")])]),t._v(" "),e("p",[t._v("The reason that this happens is that "),e("strong",[t._v("Floating Point Numbers represent Approximations of their assigned values")]),t._v(".")]),t._v(" "),e("p",[t._v("The classical example is the following computation:")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" c "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//This never prints on IEEE754-compliant machines")]),t._v("\n    std"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This Computer is Magic!"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    std"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This Computer is pretty normal, all things considered."')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[t._v("Though what we the programmer see is three numbers written in base10, what the compiler (and the underlying hardware) see are binary numbers. Because "),e("code",[t._v("0.1")]),t._v(", "),e("code",[t._v("0.2")]),t._v(", and "),e("code",[t._v("0.3")]),t._v(" require perfect division by "),e("code",[t._v("10")]),t._v("—which is quite easy in a base-10 system, but impossible in a base-2 system—these numbers have to be stored in imprecise formats, similar to how the number "),e("code",[t._v("1/3")]),t._v(" has to be stored in the imprecise form "),e("code",[t._v("0.333333333333333...")]),t._v(" in base-10.")]),t._v(" "),e("div",{staticClass:"language-cpp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//64-bit floats have 53 digits of precision, including the whole-number-part.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0011111110111001100110011001100110011001100110011001100110011010")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//imperfect representation of 0.1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0011111111001001100110011001100110011001100110011001100110011010")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//imperfect representation of 0.2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" c "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0011111111010011001100110011001100110011001100110011001100110011")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//imperfect representation of 0.3")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0011111111010011001100110011001100110011001100110011001100110100")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//Note that this is not quite equal to the "canonical" 0.3!')]),t._v("\n\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);