(window.webpackJsonp=window.webpackJsonp||[]).push([[852],{1258:function(a,e,t){"use strict";t.r(e);var s=t(31),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"literals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#literals"}},[a._v("#")]),a._v(" Literals")]),a._v(" "),t("h2",{attrs:{id:"uint-literals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#uint-literals"}},[a._v("#")]),a._v(" uint literals")]),a._v(" "),t("p",[t("code",[a._v("uint")]),a._v(" literals are defined by using the suffix "),t("code",[a._v("U")]),a._v(" or "),t("code",[a._v("u")]),a._v(", or by using an integral values within the range of "),t("code",[a._v("uint")]),a._v(":")]),a._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("uint")])]),a._v(" ui "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5U")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"int-literals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#int-literals"}},[a._v("#")]),a._v(" int literals")]),a._v(" "),t("p",[t("code",[a._v("int")]),a._v(" literals are defined by simply using integral values within the range of "),t("code",[a._v("int")]),a._v(":")]),a._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")])]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"sbyte-literals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sbyte-literals"}},[a._v("#")]),a._v(" sbyte literals")]),a._v(" "),t("p",[t("code",[a._v("sbyte")]),a._v(" type has no literal suffix. Integer literals are implicitly converted from "),t("code",[a._v("int")]),a._v(":")]),a._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("sbyte")])]),a._v(" sb "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("127")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"decimal-literals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#decimal-literals"}},[a._v("#")]),a._v(" decimal literals")]),a._v(" "),t("p",[t("code",[a._v("decimal")]),a._v(" literals are defined by using the suffix M or m on a real number:")]),a._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("decimal")])]),a._v(" m "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("30.5M")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"double-literals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#double-literals"}},[a._v("#")]),a._v(" double literals")]),a._v(" "),t("p",[t("code",[a._v("double")]),a._v(" literals are defined by using the suffix D or d, or by using a real number:")]),a._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")])]),a._v(" d "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("30.5D")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"float-literals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#float-literals"}},[a._v("#")]),a._v(" float literals")]),a._v(" "),t("p",[t("code",[a._v("float")]),a._v(" literals are defined by using the suffix F or f, or by using a real number:")]),a._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("float")])]),a._v(" f "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("30.5F")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"long-literals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#long-literals"}},[a._v("#")]),a._v(" long literals")]),a._v(" "),t("p",[t("code",[a._v("long")]),a._v(" literals are defined by using the suffix "),t("code",[a._v("L")]),a._v(" or "),t("code",[a._v("l")]),a._v(", or by using an integral values within the range of "),t("code",[a._v("long")]),a._v(":")]),a._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")])]),a._v(" l "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5L")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"ulong-literal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ulong-literal"}},[a._v("#")]),a._v(" ulong literal")]),a._v(" "),t("p",[t("code",[a._v("ulong")]),a._v(" literals are defined by using the suffix "),t("code",[a._v("UL")]),a._v(", "),t("code",[a._v("ul")]),a._v(", "),t("code",[a._v("Ul")]),a._v(", "),t("code",[a._v("uL")]),a._v(", "),t("code",[a._v("LU")]),a._v(", "),t("code",[a._v("lu")]),a._v(", "),t("code",[a._v("Lu")]),a._v(", or "),t("code",[a._v("lU")]),a._v(", or by using an integral values within the range of "),t("code",[a._v("ulong")]),a._v(":")]),a._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ulong")])]),a._v(" ul "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5UL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"string-literals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-literals"}},[a._v("#")]),a._v(" string literals")]),a._v(" "),t("p",[t("code",[a._v("string")]),a._v(" literals are defined by wrapping the value with double-quotes "),t("code",[a._v('"')]),a._v(":")]),a._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("string")])]),a._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello, this is a string literal"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("p",[a._v("String literals may contain escape sequences. See "),t("a",{attrs:{href:"http://stackoverflow.com/documentation/c%23/39/string-escape-sequences",target:"_blank",rel:"noopener noreferrer"}},[a._v("String Escape Sequences"),t("OutboundLink")],1)]),a._v(" "),t("p",[a._v("Additionally, C# supports verbatim string literals (See "),t("a",{attrs:{href:"http://stackoverflow.com/documentation/c%23/16/verbatim-strings",target:"_blank",rel:"noopener noreferrer"}},[a._v("Verbatim Strings"),t("OutboundLink")],1),a._v("). These are defined by wrapping the value with double-quotes "),t("code",[a._v('"')]),a._v(", and prepending it with "),t("code",[a._v("@")]),a._v(". Escape sequences are ignored in verbatim string literals, and all whitespace characters are included:")]),a._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("string")])]),a._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('@"The path is:\nC:\\Windows\\System32"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//The backslashes and newline are included in the string")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"char-literals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#char-literals"}},[a._v("#")]),a._v(" char literals")]),a._v(" "),t("p",[t("code",[a._v("char")]),a._v(" literals are defined by wrapping the value with single-quotes "),t("code",[a._v("'")]),a._v(":")]),a._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")])]),a._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string character"}},[a._v("'h'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("p",[a._v("Character literals may contain escape sequences. See "),t("a",{attrs:{href:"http://stackoverflow.com/documentation/c%23/39/string-escape-sequences",target:"_blank",rel:"noopener noreferrer"}},[a._v("String Escape Sequences"),t("OutboundLink")],1)]),a._v(" "),t("p",[a._v("A character literal must be exactly one character long (after all escape sequences have been evaluated). Empty character literals are not valid. The default character (returned by "),t("code",[a._v("default(char)")]),a._v(" or "),t("code",[a._v("new char()")]),a._v(") is "),t("code",[a._v("'\\0'")]),a._v(", or the NULL character (not to be confused with the "),t("code",[a._v("null")]),a._v(" literal and null references).")]),a._v(" "),t("h2",{attrs:{id:"byte-literals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#byte-literals"}},[a._v("#")]),a._v(" byte literals")]),a._v(" "),t("p",[t("code",[a._v("byte")]),a._v(" type has no literal suffix. Integer literals are implicitly converted from "),t("code",[a._v("int")]),a._v(":")]),a._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")])]),a._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("127")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"short-literal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#short-literal"}},[a._v("#")]),a._v(" short literal")]),a._v(" "),t("p",[t("code",[a._v("short")]),a._v(" type has no literal. Integer literals are implicitly converted from "),t("code",[a._v("int")]),a._v(":")]),a._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("short")])]),a._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("127")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"ushort-literal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ushort-literal"}},[a._v("#")]),a._v(" ushort literal")]),a._v(" "),t("p",[t("code",[a._v("ushort")]),a._v(" type has no literal suffix. Integer literals are implicitly converted from "),t("code",[a._v("int")]),a._v(":")]),a._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ushort")])]),a._v(" us "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("127")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"bool-literals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bool-literals"}},[a._v("#")]),a._v(" bool literals")]),a._v(" "),t("p",[t("code",[a._v("bool")]),a._v(" literals are either "),t("code",[a._v("true")]),a._v(" or "),t("code",[a._v("false")]),a._v(";")]),a._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("bool")])]),a._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("h4",{attrs:{id:"syntax"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[a._v("#")]),a._v(" Syntax")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("bool:")]),a._v(" true or false")]),a._v(" "),t("li",[t("strong",[a._v("byte:")]),a._v(" None, integer literal implicitly converted from int")]),a._v(" "),t("li",[t("strong",[a._v("sbyte:")]),a._v(" None, integer literal implicitly converted from int")]),a._v(" "),t("li",[t("strong",[a._v("char:")]),a._v(" Wrap the value with single-quotes")]),a._v(" "),t("li",[t("strong",[a._v("decimal:")]),a._v(" M or m")]),a._v(" "),t("li",[t("strong",[a._v("double:")]),a._v(" D, d, or a real number")]),a._v(" "),t("li",[t("strong",[a._v("float:")]),a._v(" F or f")]),a._v(" "),t("li",[t("strong",[a._v("int:")]),a._v(" None, default for integral values within the range of int")]),a._v(" "),t("li",[t("strong",[a._v("uint:")]),a._v(" U, u, or integral values within the range of uint")]),a._v(" "),t("li",[t("strong",[a._v("long:")]),a._v(" L, l, or integral values within the range of long")]),a._v(" "),t("li",[t("strong",[a._v("ulong:")]),a._v(" UL, ul, Ul, uL, LU, lu, Lu, lU, or integral values within the range of ulong")]),a._v(" "),t("li",[t("strong",[a._v("short:")]),a._v(" None, integer literal implicitly converted from int")]),a._v(" "),t("li",[t("strong",[a._v("ushort:")]),a._v(" None, integer literal implicitly converted from int")]),a._v(" "),t("li",[t("strong",[a._v("string:")]),a._v(" Wrap the value with double-quotes, optionally prepended with "),t("code",[a._v("@")])]),a._v(" "),t("li",[t("strong",[a._v("null")]),a._v(": The literal "),t("code",[a._v("null")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);