(window.webpackJsonp=window.webpackJsonp||[]).push([[2631],{3039:function(s,e,a){"use strict";a.r(e);var t=a(31),r=Object(t.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"strings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#strings"}},[s._v("#")]),s._v(" Strings")]),s._v(" "),a("h2",{attrs:{id:"creating-a-basic-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-basic-string"}},[s._v("#")]),s._v(" Creating a basic string")]),s._v(" "),a("h3",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" String")]),s._v(" "),a("p",[s._v("Strings are created by wrapping the text with double quotes. Double-quoted strings can evalute variables and special characters.")]),s._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$myString")]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Some basic text"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$mySecondString")]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"String with a '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$variable")]),s._v('"')]),s._v("\n\n")])])]),a("p",[s._v("To use a double quote inside a string it needs to be escaped using the escape character, backtick (```powershell). Single quotes can be used inside a double-quoted string.")]),s._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$myString")]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"A `"double quoted`" string which also has \'single quotes\'."')]),s._v("\n\n")])])]),a("h3",{attrs:{id:"literal-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#literal-string"}},[s._v("#")]),s._v(" Literal string")]),s._v(" "),a("p",[s._v("Literal strings are strings that doesn't evaluate variables and special characters. It's created using single quotes.")]),s._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$myLiteralString")]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Simple text including special characters (`n) and a $variable-reference'")]),s._v("\n\n")])])]),a("p",[s._v("To use single quotes inside a literal string, use double single quotes or a literal here-string. Double qutoes can be used safely inside a literal string")]),s._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$myLiteralString")]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Simple string with ''single quotes'' and \"double quotes\".'")]),s._v("\n\n")])])]),a("h2",{attrs:{id:"format-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#format-string"}},[s._v("#")]),s._v(" Format string")]),s._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$hash")]),s._v(" = @"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" city = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Berlin'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$result")]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'You should really visit {0}'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("f "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("city\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Write-Host")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$result")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#prints "You should really visit Berlin"')]),s._v("\n\n")])])]),a("p",[s._v("Format strings can be used with the "),a("code",[s._v("-f")]),s._v(" operator or the static "),a("code",[s._v("[String]::Format(string format, args)")]),s._v(" .NET method.")]),s._v(" "),a("h2",{attrs:{id:"multiline-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multiline-string"}},[s._v("#")]),s._v(" Multiline string")]),s._v(" "),a("p",[s._v("There are multiple ways to create a multiline string in PowerShell:")]),s._v(" "),a("li",[s._v('\nYou can use the special characters for carriage return and/or newline manually or use the `NewLine`-environment variable to insert the systems "newline" value)\n'),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello`r`nWorld"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello{0}World"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("f "),a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("[environment]")]),s._v("::NewLine\n\n")])])])]),s._v(" "),a("li",[s._v("\nCreate a linebreak while defining a string (before closing quote)\n"),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello\nWorld"')]),s._v("\n\n")])])])]),s._v(" "),a("li",[s._v("\nUsing a here-string. **This is the most common technique.**\n"),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[s._v("@"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\nHello\nWorld\n"')]),s._v("@\n\n")])])])]),s._v(" "),a("h2",{attrs:{id:"here-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#here-string"}},[s._v("#")]),s._v(" Here-string")]),s._v(" "),a("p",[s._v("Here-strings are very useful when creating multiline strings. One of the biggest benefits compared to other multiline strings are that you can use quotes without having to escape them using a backtick.")]),s._v(" "),a("h3",{attrs:{id:"here-string-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#here-string-2"}},[s._v("#")]),s._v(" Here-string")]),s._v(" "),a("p",[s._v("Here-strings begin with "),a("code",[s._v('@"')]),s._v(" and a linebreak and end with "),a("code",[s._v('"@')]),s._v(" on it's own line ("),a("strong",[a("code",[s._v('"@')]),s._v("must be first characters on the line, not even whitespace/tab")]),s._v(").")]),s._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[s._v("@"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\nSimple\n    Multiline string \nwith "')]),s._v("quotes"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\n"')]),s._v("@\n\n")])])]),a("h3",{attrs:{id:"literal-here-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#literal-here-string"}},[s._v("#")]),s._v(" Literal here-string")]),s._v(" "),a("p",[s._v("You could also create a literal here-string by using single quotes, when you don't want any expressions to be expanded just like a normal literal string.")]),s._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[s._v("@"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\nThe following line won'")]),s._v("t be expanded\n$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Get-Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nbecause this is a literal here"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("string\n'@\n\n")])])]),a("h2",{attrs:{id:"concatenating-strings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concatenating-strings"}},[s._v("#")]),s._v(" Concatenating strings")]),s._v(" "),a("h3",{attrs:{id:"using-variables-in-a-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-variables-in-a-string"}},[s._v("#")]),s._v(" Using variables in a string")]),s._v(" "),a("p",[s._v("You can concatenate strings using variables inside a double-quoted string. This does not work with properties.")]),s._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$string1")]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Power"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$string2")]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Shell"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Greetings from '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$string1")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$string2")]),s._v('"')]),s._v("\n\n")])])]),a("h3",{attrs:{id:"using-the-operator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-the-operator"}},[s._v("#")]),s._v(" Using the "),a("code",[s._v("+")]),s._v(" operator")]),s._v(" "),a("p",[s._v("You can also join strings using the "),a("code",[s._v("+")]),s._v(" operator.")]),s._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$string1")]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Greetings from"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$string2")]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"PowerShell"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$string1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$string2")]),s._v("\n\n")])])]),a("p",[s._v("This also works with properties of objects.")]),s._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The title of this console is \'"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$host")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\'"')]),s._v("\n\n")])])]),a("h3",{attrs:{id:"using-subexpressions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-subexpressions"}},[s._v("#")]),s._v(" Using subexpressions")]),s._v(" "),a("p",[s._v("The output/result of a subexpressions "),a("code",[s._v("$()")]),s._v(" can be used in a string. This is useful when accessing propeties of an object or performing a complex expression. Subexpressions can contain multiple statements separated by semicolon "),a("code",[s._v(";")])]),s._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Tomorrow is '),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Get-Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),s._v('.AddDays(1).DayOfWeek)"')]),s._v("\n\n")])])]),a("h2",{attrs:{id:"special-characters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#special-characters"}},[s._v("#")]),s._v(" Special characters")]),s._v(" "),a("p",[s._v("When used inside a double-quoted string, the escape character (backtick ```powershell) reperesents a special character.")]),s._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[s._v("`0    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Null")]),s._v("\n`a    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Alert/Beep")]),s._v("\n`b    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Backspace")]),s._v("\n`f    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Form feed (used for printer output)")]),s._v("\n`n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#New line")]),s._v("\n`r    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Carriage return")]),s._v("\n`t    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Horizontal tab")]),s._v("\n`v    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Vertical tab (used for printer output)")]),s._v("\n\n")])])]),a("p",[s._v("Example:")]),s._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[s._v("> "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This`tuses`ttab`r`nThis is on a second line"')]),s._v("\nThis    uses    tab\nThis is on a second line\n\n")])])]),a("p",[s._v("You can also escape special characters with special meanings:")]),s._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[s._v("`#    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Comment-operator")]),s._v("\n`$    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Variable operator")]),s._v("\n``    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Escape character")]),s._v("\n`'    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Single quote")]),s._v('\n`"    '),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Double quote")]),s._v("\n\n")])])]),a("h4",{attrs:{id:"syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[s._v("#")]),s._v(" Syntax")]),s._v(" "),a("li",[s._v('\n"(Double-quoted) String"\n')]),s._v(" "),a("li",[s._v("\n'Literal string'\n")]),s._v(" "),a("li",[a("p",[s._v('@"'),a("br"),s._v("\nHere-string"),a("br"),s._v('\n"@')])]),s._v(" "),a("li",[a("p",[s._v("@'"),a("br"),s._v("\nLiteral here-string"),a("br"),s._v("\n'@")])]),s._v(" "),a("h4",{attrs:{id:"remarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[s._v("#")]),s._v(" Remarks")]),s._v(" "),a("p",[s._v("Strings are objects representing text.")])])}),[],!1,null,null,null);e.default=r.exports}}]);