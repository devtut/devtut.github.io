(window.webpackJsonp=window.webpackJsonp||[]).push([[2392],{2799:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"interpolation-in-perl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interpolation-in-perl"}},[t._v("#")]),t._v(" Interpolation in Perl")]),t._v(" "),a("h2",{attrs:{id:"what-is-interpolated"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-interpolated"}},[t._v("#")]),t._v(" What is interpolated")]),t._v(" "),a("p",[t._v("Perl interpolates variable names:")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$name")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Paul'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, $name!\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Hello, Paul!")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$char[1]\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# b")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("%map")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("125")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1080")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$map{a}\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 125")]),t._v("\n\n")])])]),a("p",[t._v("Arrays may be interpolated as a whole, their elements are separated by spaces:")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My chars are @char\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# My chars are a b c")]),t._v("\n\n")])])]),a("p",[t._v("Perl does "),a("strong",[t._v("not")]),t._v(" interpolate hashes as a whole:")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("%map")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("125")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1080")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My map is %map\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# My map is %map")]),t._v("\n\n")])])]),a("p",[t._v("and function calls (including constants):")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" constant "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    PI "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3.1415926'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I like PI\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# I like PI")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I like "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v(" PI "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# I like 3.1415926")]),t._v("\n\n")])])]),a("p",[t._v("Perl interpolates "),a("strong",[t._v("escape sequences")]),t._v(" starting with "),a("code",[t._v("\\")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("t                  horizontal tab\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("n                  newline\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("r                  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("f                  form feed\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("b                  backspace\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("a                  alarm "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bell"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("e                  escape\n\n")])])]),a("p",[t._v("Interpolation of "),a("code",[t._v("\\n")]),t._v(" depends on the system where program is working: it will produce a newline character(s) according to the current system conventions.")]),t._v(" "),a("p",[t._v("Perl does "),a("strong",[t._v("not")]),t._v(" interpolate "),a("code",[t._v("\\v")]),t._v(", which means vertical tab in C and other languages.")]),t._v(" "),a("p",[t._v("Character may be addressed using their codes:")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("1d11e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("     𝄞 by hexadecimal code\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("350436")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    𝄞 by octal code\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("N"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("U"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("1d11e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("   𝄞 by Unicode code point\n\n")])])]),a("p",[t._v("or Unicode names:")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("N"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("MUSICAL SYMBOL G CLEF"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("Character with codes from "),a("code",[t._v("0x00")]),t._v(" to "),a("code",[t._v("0xFF")]),t._v(" in the "),a("strong",[t._v("native")]),t._v(" encoding may be addressed in a shorter form:")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("x0a     hexadecimal\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("012")]),t._v("     octal\n\n")])])]),a("p",[t._v("Control character may be addressed using special escape sequences:")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("c@      chr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("ca      chr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("cb      chr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("cz      chr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("      chr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("27")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("      chr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Cannot be used at the end of a string")]),t._v("\n                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# since backslash will interpolate the terminating quote")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("      chr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("29")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("      chr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("c_      chr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("      chr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("Uppercase letters have the same meaning: "),a("code",[t._v('"\\cA" == "\\ca"')]),t._v(".")]),t._v(" "),a("p",[t._v("Interpretation of all escape sequences except for "),a("code",[t._v("\\N{...}")]),t._v(" may depend on the platform since they use platform- and encoding-dependent codes.")]),t._v(" "),a("h2",{attrs:{id:"basic-interpolation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basic-interpolation"}},[t._v("#")]),t._v(" Basic interpolation")]),t._v(" "),a("p",[t._v("Interpolation means that Perl interpreter will substitute the values of variables for their name and some symbols (which are impossible or difficult to type in directly) for special sequences of characters (it is also known as escaping). The most important distinction is between single and double quotes: double quotes interpolate the enclosed string, but single quotes do not.")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$name")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Paul'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$age")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My name is $name.\\nI am $age.\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# My name is Paul.")]),t._v("\n                                         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# I am 64.")]),t._v("\n\n")])])]),a("p",[t._v("But:")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'My name is $name.\\nI am $age.\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# My name is $name.\\nI am $age.\\n")]),t._v("\n\n")])])]),a("p",[t._v("You can use "),a("code",[t._v("q{}")]),t._v(" (with any delimiter) instead of single quotes and "),a("code",[t._v("qq{}")]),t._v(" instead of double quotes. For example, "),a("code",[t._v("q{I'm 64}")]),t._v(" allows to use an apostrophe within a non-interpolated string (otherwise it would terminate the string).")]),t._v(" "),a("p",[t._v("Statements:")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('qq{$name said: "I\'m $age".}')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Paul said: "I\'m 64".')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$name said: \\"I\'m $age\\"."')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Paul said: "I\'m 64".')]),t._v("\n\n")])])]),a("p",[t._v("do the same thing, but in the first one you do not need to escape double quotes within the string.")]),t._v(" "),a("p",[t._v("If your variable name clashes with surrounding text, you can use the syntax "),a("code",[t._v("${var}")]),t._v(" to disambiguate:")]),t._v(" "),a("div",{staticClass:"language-perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$decade")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I like ${decade}s music!"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# I like 80s music!")]),t._v("\n\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);