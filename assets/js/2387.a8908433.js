(window.webpackJsonp=window.webpackJsonp||[]).push([[2387],{2795:function(t,a,e){"use strict";e.r(a);var s=e(31),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"file-i-o-reading-and-writing-files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#file-i-o-reading-and-writing-files"}},[t._v("#")]),t._v(" File I/O (reading and writing files)")]),t._v(" "),e("h2",{attrs:{id:"opening-a-filehandle-for-reading"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#opening-a-filehandle-for-reading"}},[t._v("#")]),t._v(" Opening A FileHandle for Reading")]),t._v(" "),e("h3",{attrs:{id:"opening-generic-ascii-text-files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#opening-generic-ascii-text-files"}},[t._v("#")]),t._v(" Opening Generic ASCII Text Files")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[t._v("open "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$filehandle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$name_of_file")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("die")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Can\'t open $name_of_file, $!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[t._v('This is the basic idiom for "default" File IO and makes '),e("code",[t._v("$filehandle")]),t._v(" a readable input stream of "),e("code",[t._v("bytes")]),t._v(", filtered by a default system-specific decoder, which can be locally set with the "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/perl/1604/file-i-o-reading-and-writing-files/24140/setting-the-default-encoding-for-io",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("open")]),t._v(" pragma"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("Perl itself does not handle errors in file opening, so you have to handle those yourself by checking the exit condition of "),e("code",[t._v("open")]),t._v(". "),e("code",[t._v("$!")]),t._v(" is populated with the error message that caused open to fail.")]),t._v(" "),e("p",[t._v('On Windows, the default decoder is a "CRLF" filter, which maps any "\\r\\n" sequences in the input to "\\n"')]),t._v(" "),e("h3",{attrs:{id:"opening-binary-files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#opening-binary-files"}},[t._v("#")]),t._v(" Opening Binary Files")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[t._v("open "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$filehandle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<:raw'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path/to/file'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("die")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Can\'t open $name_of_file, $!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[t._v("This specifies that Perl should "),e("strong",[t._v("not")]),t._v(" perform a "),e("code",[t._v("CRLF")]),t._v(" translation on Windows.")]),t._v(" "),e("h3",{attrs:{id:"opening-utf8-text-files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#opening-utf8-text-files"}},[t._v("#")]),t._v(" Opening UTF8 Text Files")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[t._v("open "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$filehandle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<:raw:encoding(utf-8)'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path/to/file'")]),t._v(" \n   "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("die")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Can\'t open $name_of_file, $!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[t._v("This specifies that Perl should both avoid "),e("code",[t._v("CRLF")]),t._v(" translation, and then decode the resulting bytes into strings of "),e("strong",[t._v("characters")]),t._v(" ( internally implemented as arrays of integers which can exceed 255 ), instead of strings of "),e("strong",[t._v("bytes")])]),t._v(" "),e("h2",{attrs:{id:"reading-from-a-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reading-from-a-file"}},[t._v("#")]),t._v(" Reading from a file")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$filename")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/path/to/file'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nopen "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$filename")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("die")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Failed to open file: $filename"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# You can then either read the file one line at a time...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chomp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$line")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$line")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ...or read whole file into an array in one go")]),t._v("\nchomp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@fileArray")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n")])])]),e("p",[t._v("If you know that your input file is UTF-8, you can specify the encoding:")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[t._v("open "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<:encoding(utf8)'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$filename")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("die")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Failed to open file: $filename"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[t._v("After finished reading from the file, the filehandle should be closed:")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[t._v("close "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" warn "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"close failed: $!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[t._v("See also: "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/perl/1779/reading-a-file-into-a-variable#t=201609170552195534952",target:"_blank",rel:"noopener noreferrer"}},[t._v("Reading a file into a variable"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("Another and "),e("strong",[t._v("faster")]),t._v(" way to read a file is to use File::Slurper Module. This is useful if you work with many files.")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" File"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Slurper"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$file")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" read_text"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"path/to/file"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# utf8 without CRLF transforms by default")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$file")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Contains the file body")]),t._v("\n\n")])])]),e("p",[t._v("See also: "),e("a",{attrs:{href:"https://metacpan.org/pod/File::Slurper",target:"_blank",rel:"noopener noreferrer"}},[t._v("[Reading a file with slurp]"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"write-to-a-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#write-to-a-file"}},[t._v("#")]),t._v(" Write to a file")]),t._v(" "),e("p",[t._v("This code opens a file for writing. Returns an error if the file couldn't be opened. Also closes the file at the end.")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/perl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" strict"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" warnings"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" open qw"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("encoding"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UTF"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("std "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Make UTF-8 default encoding")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Open "output.txt" for writing (">") and from now on, refer to it as the variable $fh.')]),t._v("\nopen"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('">"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"output.txt"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# In case the action failed, print error message and quit.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("die")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Can\'t open > output.txt: $!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[t._v("Now we have an open file ready for writing which we access through "),e("code",[t._v("$fh")]),t._v(" (this variable is called a "),e("strong",[t._v("filehandle")]),t._v("). Next we can direct output to that file using the "),e("code",[t._v("print")]),t._v(" operator:")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Print "Hello" to $fh ("output.txt").')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Don't forget to close the file once we're done!")]),t._v("\nclose "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" warn "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Close failed: $!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[t._v("The "),e("code",[t._v("open")]),t._v(" operator has a scalar variable ("),e("code",[t._v("$fh")]),t._v(" in this case) as its first parameter. Since it is defined in the "),e("code",[t._v("open")]),t._v(" operator it is treated as a "),e("strong",[t._v("filehandle")]),t._v(". Second parameter "),e("code",[t._v('">"')]),t._v(" (greater than) defines that the file is opened for writing. The last parameter is the path of the file to write the data to.")]),t._v(" "),e("p",[t._v("To write the data into the file, the "),e("code",[t._v("print")]),t._v(" operator is used along with the "),e("strong",[t._v("filehandle")]),t._v(". Notice that in the "),e("code",[t._v("print")]),t._v(" operator there is no comma between the "),e("strong",[t._v("filehandle")]),t._v(" and the statement itself, just whitespace.")]),t._v(" "),e("h2",{attrs:{id:"use-autodie-and-you-won-t-need-to-check-file-open-close-failures"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#use-autodie-and-you-won-t-need-to-check-file-open-close-failures"}},[t._v("#")]),t._v(' "use autodie" and you won\'t need to check file open/close failures')]),t._v(" "),e("h3",{attrs:{id:"autodie-allows-you-to-work-with-files-without-having-to-explicitly-check-for-open-close-failures"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#autodie-allows-you-to-work-with-files-without-having-to-explicitly-check-for-open-close-failures"}},[t._v("#")]),t._v(" "),e("code",[t._v("autodie")]),t._v(" allows you to work with files without having to explicitly check for open/close failures.")]),t._v(" "),e("p",[t._v("Since Perl 5.10.1, the "),e("a",{attrs:{href:"http://perldoc.perl.org/autodie.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("autodie")]),e("OutboundLink")],1),t._v(" pragma has been available in core Perl. When used, Perl will automatically check for errors when opening and closing files.")]),t._v(" "),e("p",[t._v("Here is an example in which all of the lines of one file are read and then written to the end of a log file.")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.010")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 5.010 and later enable "say", which prints arguments, then a newline')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" strict"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# require declaring variables (avoid silent errors due to typos)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" warnings"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# enable helpful syntax-related warnings")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" open qw"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("encoding"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UTF"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("std "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Make UTF-8 default encoding")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" autodie"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Automatically handle errors in opening and closing files")]),t._v("\n\nopen"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh_in")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"input.txt"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# check for failure is automatic")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# open a file for appending (i.e. using ">>")')]),t._v("\nopen"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh_log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'>>'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"output.log"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# check for failure is automatic")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$line")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" readline "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh_in")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# also works: while (my $line = <$fh_in>)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remove newline")]),t._v("\n     chomp "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$line")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# write to log file")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("say")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh_log")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$line")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("die")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"failed to print '$line'\"")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# autodie doesn't check print")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Close the file handles (check for failure is automatic)")]),t._v("\nclose "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh_in")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nclose "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh_log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[t._v("By the way, you should technically always check "),e("code",[t._v("print")]),t._v(" statements. Many people don't, but "),e("code",[t._v("perl")]),t._v(" (the Perl interpreter) doesn't do this automatically and "),e("a",{attrs:{href:"http://perldoc.perl.org/autodie.html#SYNOPSIS",target:"_blank",rel:"noopener noreferrer"}},[t._v("neither does "),e("code",[t._v("autodie")]),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"rewind-a-filehandle"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rewind-a-filehandle"}},[t._v("#")]),t._v(" Rewind a filehandle")]),t._v(" "),e("p",[t._v("Sometimes it is needful to backtrack after reading.")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# identify current position in file, in case the first line isn't a comment")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$current_pos")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tell"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$line")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" readline "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$line")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=~")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/$START_OF_COMMENT_LINE/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        push "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@names")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" get_name_from_comment"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$line")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("last")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# break out of the while loop")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$current_pos")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tell"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# keep track of current position, in case we need to rewind the next line read")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Step back a line so that it can be processed later as the first data line")]),t._v("\nseek "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$current_pos")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"reading-and-writing-gzip-compressed-files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reading-and-writing-gzip-compressed-files"}},[t._v("#")]),t._v(" Reading and Writing gzip compressed files")]),t._v(" "),e("h3",{attrs:{id:"writing-a-gzipped-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#writing-a-gzipped-file"}},[t._v("#")]),t._v(" Writing a gzipped file")]),t._v(" "),e("p",[t._v("To write a gzipped file, "),e("code",[t._v("use")]),t._v(" the module "),e("code",[t._v("IO::Compress::Gzip")]),t._v(" and create a filehandle by creating a new instance of "),e("code",[t._v("IO::Compress::Gzip")]),t._v(" for the desired output file:")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" strict"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" warnings"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" open qw"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("encoding"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UTF"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("std "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Make UTF-8 default encoding")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" IO"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Compress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Gzip"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh_out")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" IO"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Compress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Gzip"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("new"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello.txt.gz"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh_out")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World!\\n"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nclose "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh_out")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" IO"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Compress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Gzip"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("h3",{attrs:{id:"reading-from-a-gzipped-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reading-from-a-gzipped-file"}},[t._v("#")]),t._v(" Reading from a gzipped file")]),t._v(" "),e("p",[t._v("To read from a gzipped file, "),e("code",[t._v("use")]),t._v(" the module "),e("code",[t._v("IO::Uncompress::Gunzip")]),t._v(" and then create a filehandle by creating a new instance of "),e("code",[t._v("IO::Uncompress::Gunzip")]),t._v(" for the input file:")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/bin/env perl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" strict"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" warnings"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" open qw"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("encoding"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UTF"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("std "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Make UTF-8 default encoding")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" IO"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Uncompress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Gunzip"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh_in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" IO"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Uncompress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Gunzip"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("new"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello.txt.gz"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$line")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" readline "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$fh_in")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$line")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"setting-the-default-encoding-for-io"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setting-the-default-encoding-for-io"}},[t._v("#")]),t._v(" Setting the default Encoding for IO")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# encode/decode UTF-8 for files and standard input/output")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" open qw"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("encoding"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UTF"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("std "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n")])])]),e("p",[t._v("This "),e("code",[t._v("pragma")]),t._v(" changes the default mode of reading and writing text ( files, standard input, standard output, and standard error ) to UTF-8, which is typically what you want when writing new applications.")]),t._v(" "),e("p",[t._v("ASCII is a subset of UTF-8, so this is not expected to cause any problems with legacy ASCII files and will help protect you the accidental file corruption that can happen when treating UTF-8 files as ASCII.")]),t._v(" "),e("p",[t._v("However, it is important that you know what the encoding of your files is that you are dealing with and handle them accordingly. ("),e("a",{attrs:{href:"http://stackoverflow.com/a/6163129/215487",target:"_blank",rel:"noopener noreferrer"}},[t._v("Reasons that we should not ignore Unicode."),e("OutboundLink")],1),t._v(") For more in depth treatment of Unicode, please see the "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/perl/4375/unicode",target:"_blank",rel:"noopener noreferrer"}},[t._v("Perl Unicode topic"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"reading-from-and-writing-to-a-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reading-from-and-writing-to-a-file"}},[t._v("#")]),t._v(" Reading from and writing to a file")]),t._v(" "),e("p",[t._v("Before reading and writing text files you should know what encoding to use. "),e("a",{attrs:{href:"http://stackoverflow.com/documentation/perl/4375/unicode",target:"_blank",rel:"noopener noreferrer"}},[t._v("See the Perl Unicode Documentation for more details on encoding"),e("OutboundLink")],1),t._v(". Here we show the setting of UTF-8 as the default encoding and decoding for the function "),e("code",[t._v("open")]),t._v(". This is done by using the "),e("code",[t._v("open")]),t._v(" pragma near the top of your code (right after "),e("code",[t._v("use strict;")]),t._v(" and "),e("code",[t._v("use warnings;")]),t._v(" would be appropriate):")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" strict"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" warnings"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" open qw"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("encoding"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UTF"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("std "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n")])])]),e("p",[t._v("The "),e("code",[t._v("open")]),t._v(" function creates a filehandle that is used for reading from and/or writing to a file. The "),e("code",[t._v("open")]),t._v(" function has the signature")]),t._v(" "),e("p",[e("code",[t._v("open(FILEHANDLE, MODE, FILEPATH)")]),t._v(" and returns a false value if the operation fails. The error description is then stored to "),e("code",[t._v("$!")]),t._v(".")]),t._v(" "),e("p",[e("strong",[t._v("Reading")])]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/perl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" strict"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" warnings"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" open qw"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("encoding"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UTF"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("std "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Make UTF-8 default encoding")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$file_path")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/path/to/file"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nopen"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$file_handle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$file_path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("die")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Could not open file! $!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$row")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$file_handle")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" chomp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$row")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nclose "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$file_handle")]),t._v(" \n      "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" warn "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Close failed!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[e("strong",[t._v("Writing")])]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/perl")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" strict"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" warnings"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" open qw"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("encoding"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UTF"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("std "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Make UTF-8 default encoding")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$file_path")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/path/to/file"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nopen"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("my")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$file_handle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'>'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$file_path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("die")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Could not open file! $!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$file_handle")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Writing to a file"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nclose "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$file_handle")]),t._v(" \n      "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" warn "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Close failed!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),e("p",[e("strong",[t._v("Reading chunks")])]),t._v(" "),e("p",[t._v("Opening and reading big files can take some time and resources. If only a small part of the content is required, it might be a good idea to read the content in chunks using the "),e("code",[t._v("read")]),t._v(" function which has the signature")]),t._v(" "),e("p",[e("code",[t._v("read(FILEHANDLE, SCALAR, LENGTH, OFFSET)")])]),t._v(" "),e("p",[e("code",[t._v("FILEHANDLE")]),t._v(" must be an opened file handle, "),e("code",[t._v("SCALAR")]),t._v(" will hold the read data after the operation. "),e("code",[t._v("LENGTH")]),t._v(" specifies the number of characters to be read starting from the "),e("code",[t._v("OFFSET")]),t._v(". The function returns the number of characters read, "),e("code",[t._v("0")]),t._v(" if the end of file was reached and "),e("code",[t._v("undef")]),t._v(" in case of an error.")]),t._v(" "),e("div",{staticClass:"language-perl extra-class"},[e("pre",{pre:!0,attrs:{class:"language-perl"}},[e("code",[t._v("read"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$file_handle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$data")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n")])])]),e("p",[t._v("Reads 16 characters from the beginning of the file into "),e("code",[t._v("$data")]),t._v(".")]),t._v(" "),e("h4",{attrs:{id:"parameters"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Mode")]),t._v(" "),e("th",[t._v("Explaination")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v(">")])]),t._v(" "),e("td",[e("strong",[t._v("Write (trunc)")]),t._v(". Will overwrite existing files. Creates a new file if no file was found")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v(">>")])]),t._v(" "),e("td",[e("strong",[t._v("Write (append)")]),t._v(". Will not overwrite files but append new content at the end of it. Will also create a file if used for opening a non existing file.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("<")])]),t._v(" "),e("td",[e("strong",[t._v("Read")]),t._v(". Opens the file in read only mode.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("+<")])]),t._v(" "),e("td",[e("strong",[t._v("Read / Write")]),t._v(". Will not create or truncate the file.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("+>")])]),t._v(" "),e("td",[e("strong",[t._v("Read / Write (trunc)")]),t._v(". Will create and truncate the file.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("+>>")])]),t._v(" "),e("td",[e("strong",[t._v("Read / Write (append)")]),t._v(". Will create but not truncate the file.")])])])]),t._v(" "),e("h4",{attrs:{id:"remarks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[t._v("#")]),t._v(" Remarks")]),t._v(" "),e("p",[e("code",[t._v("chomp")]),t._v(" is often used when reading from a file. By default it trims the newline character, although for its full functionality refer to the "),e("a",{attrs:{href:"http://perldoc.perl.org/functions/chomp.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("perldocs"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("Beware of the difference between characters and bytes: Not all encodings - especially UTF-8 -  use 1-byte-characters. While this is handled pretty much flawlessly by PerlIO, there is one potential pitfall of note:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("read")]),t._v(" uses "),e("strong",[t._v("characters")]),t._v(" for its "),e("strong",[t._v("length")]),t._v(" and "),e("strong",[t._v("offset")]),t._v(" parameters")]),t._v(" "),e("li",[e("code",[t._v("seek")]),t._v(" and "),e("code",[t._v("tell")]),t._v(" "),e("strong",[t._v("always")]),t._v(" use "),e("strong",[t._v("bytes")]),t._v(" for positioning")])]),t._v(" "),e("p",[t._v("So don't use arithmetics based on these mixed values. Instead use e.g. "),e("code",[t._v("Encode::encode('utf8',$value_by_read)")]),t._v(" to get the octets(bytes) from a "),e("code",[t._v("read")]),t._v("result, whose count you can then use with "),e("code",[t._v("tell")]),t._v(" and "),e("code",[t._v("seek")]),t._v(".")])])}),[],!1,null,null,null);a.default=n.exports}}]);