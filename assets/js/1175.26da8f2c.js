(window.webpackJsonp=window.webpackJsonp||[]).push([[1175],{1583:function(a,t,s){"use strict";s.r(t);var e=s(31),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"concurrency"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concurrency"}},[a._v("#")]),a._v(" Concurrency")]),a._v(" "),s("h2",{attrs:{id:"spawning-threads-with-forkio"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spawning-threads-with-forkio"}},[a._v("#")]),a._v(" Spawning Threads with "),s("code",[a._v("forkIO")])]),a._v(" "),s("p",[a._v("Haskell supports many forms of concurrency and the most obvious being forking a thread using "),s("code",[a._v("forkIO")]),a._v(".")]),a._v(" "),s("p",[a._v("The function "),s("code",[a._v("forkIO :: IO () -> IO ThreadId")]),a._v(" takes an "),s("code",[a._v("IO")]),a._v(" action and returns its "),s("code",[a._v("ThreadId")]),a._v(", meanwhile the action will be run in the background.")]),a._v(" "),s("p",[a._v("We can demonstrate this quite succinctly using "),s("code",[a._v("ghci")]),a._v(":")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Prelude")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Control"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Concurrent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("forkIO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("..")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100000000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ThreadId")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("290")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Prelude")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Control"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Concurrent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("forkIO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hi!"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hi!"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- some time later....")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Prelude")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Control"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Concurrent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("50000005000000")]),a._v("\n\n")])])]),s("p",[a._v("Both actions will run in the background, and the second is almost guaranteed to finish before the last!")]),a._v(" "),s("h2",{attrs:{id:"communicating-between-threads-with-mvar"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#communicating-between-threads-with-mvar"}},[a._v("#")]),a._v(" Communicating between Threads with "),s("code",[a._v("MVar")])]),a._v(" "),s("p",[a._v("It is very easy to pass information between threads using the "),s("code",[a._v("MVar a")]),a._v(" type and its accompanying functions in "),s("code",[a._v("Control.Concurrent")]),a._v(":")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("newEmptyMVar :: IO (MVar a)")]),a._v(" -- creates a new "),s("code",[a._v("MVar a")])]),a._v(" "),s("li",[s("code",[a._v("newMVar :: a -> IO (MVar a)")]),a._v(" -- creates a new "),s("code",[a._v("MVar")]),a._v(" with the given value")]),a._v(" "),s("li",[s("code",[a._v("takeMVar :: MVar a -> IO a")]),a._v(" -- retrieves the value from the given "),s("code",[a._v("MVar")]),a._v(", or "),s("strong",[a._v("blocks")]),a._v(" until one is available")]),a._v(" "),s("li",[s("code",[a._v("putMVar :: MVar a -> a -> IO ()")]),a._v(" -- puts the given value in the "),s("code",[a._v("MVar")]),a._v(", or "),s("strong",[a._v("blocks")]),a._v(" until it's empty")])]),a._v(" "),s("p",[a._v("Let's sum the numbers from 1 to 100 million in a thread and wait on the result:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token import-statement"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" Control"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Concurrent")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("newEmptyMVar")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("forkIO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("putMVar")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("sum")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("..")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10000000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=<<")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("takeMVar")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- takeMVar will block 'til m is non-empty!")]),a._v("\n\n")])])]),s("p",[a._v("A more complex demonstration might be to take user input and sum in the background while waiting for more input:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("main2")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("loop")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("where")]),a._v(" \n    "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("loop")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("newEmptyMVar")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("n")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("getLine")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("putStrLn")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Calculating. Please wait"')]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- In another thread, parse the user input and sum")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("forkIO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("putMVar")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("sum")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("read")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("n")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- In another thread, wait 'til the sum's complete then print it")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("forkIO")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("$")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("print")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=<<")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("takeMVar")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("m")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("loop")]),a._v("\n\n")])])]),s("p",[a._v("As stated earlier, if you call "),s("code",[a._v("takeMVar")]),a._v(" and the "),s("code",[a._v("MVar")]),a._v(" is empty, it blocks until another thread puts something into the "),s("code",[a._v("MVar")]),a._v(", which could result in a "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Dining_philosophers_problem",target:"_blank",rel:"noopener noreferrer"}},[a._v("Dining Philosophers Problem"),s("OutboundLink")],1),a._v(". The same thing happens with "),s("code",[a._v("putMVar")]),a._v(": if it's full, it'll block 'til it's empty!")]),a._v(" "),s("p",[a._v("Take the following function:")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("concurrent")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ma")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("mb")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("do")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("takeMVar")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ma")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("takeMVar")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("mb")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("putMVar")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ma")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("a")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("putMVar")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("mb")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("b")]),a._v("\n\n")])])]),s("p",[a._v("We run the the two functions with some "),s("code",[a._v("MVar")]),a._v("s")]),a._v(" "),s("div",{staticClass:"language-hs extra-class"},[s("pre",{pre:!0,attrs:{class:"language-hs"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("concurrent")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ma")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("mb")]),a._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- new thread 1 ")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("concurrent")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("mb")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token hvariable"}},[a._v("ma")]),a._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("-- new thread 2")]),a._v("\n\n")])])]),s("p",[a._v("What could happen is that:")]),a._v(" "),s("ol",[s("li",[a._v("Thread 1 reads "),s("code",[a._v("ma")]),a._v(" and blocks "),s("code",[a._v("ma")])]),a._v(" "),s("li",[a._v("Thread 2 reads "),s("code",[a._v("mb")]),a._v(" and thus blocks "),s("code",[a._v("mb")])])]),a._v(" "),s("p",[a._v("Now Thread 1 cannot read "),s("code",[a._v("mb")]),a._v(" as Thread 2 has blocked it, and Thread 2 cannot read "),s("code",[a._v("ma")]),a._v(" as Thread 1 has blocked it. A classic deadlock!")]),a._v(" "),s("h2",{attrs:{id:"atomic-blocks-with-software-transactional-memory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#atomic-blocks-with-software-transactional-memory"}},[a._v("#")]),a._v(" Atomic Blocks with Software Transactional Memory")]),a._v(" "),s("p",[a._v("Another powerful & mature concurrency tool in Haskell is Software Transactional Memory, which allows for multiple threads to write to a single variable of type "),s("code",[a._v("TVar a")]),a._v(" in an atomic manner.")]),a._v(" "),s("p",[s("code",[a._v("TVar a")]),a._v(" is the main type associated with the "),s("a",{attrs:{href:"https://hackage.haskell.org/package/stm-2.4.4.1/docs/Control-Monad-STM.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[a._v("STM")]),s("OutboundLink")],1),a._v(" monad and stands for transactional variable. They're used much like "),s("code",[a._v("MVar")]),a._v(" but within the "),s("code",[a._v("STM")]),a._v(" monad through the following functions:")]),a._v(" "),s("h3",{attrs:{id:"atomically-stm-a-io-a"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#atomically-stm-a-io-a"}},[a._v("#")]),a._v(" "),s("code",[a._v("atomically :: STM a -> IO a")])]),a._v(" "),s("p",[a._v("Perform a series of STM actions atomically.")]),a._v(" "),s("h3",{attrs:{id:"readtvar-tvar-a-stm-a"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#readtvar-tvar-a-stm-a"}},[a._v("#")]),a._v(" "),s("code",[a._v("readTVar :: TVar a -> STM a")])]),a._v(" "),s("p",[a._v("Read the "),s("code",[a._v("TVar")]),a._v("'s value, e.g.:")]),a._v(" "),s("h3",{attrs:{id:"writetvar-tvar-a-a-stm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#writetvar-tvar-a-a-stm"}},[a._v("#")]),a._v(" "),s("code",[a._v("writeTVar :: TVar a -> a -> STM ()")])]),a._v(" "),s("p",[a._v("Write a value to the given "),s("code",[a._v("TVar")]),a._v(".")]),a._v(" "),s("p",[a._v("This example is taken from the Haskell Wiki:")]),a._v(" "),s("h4",{attrs:{id:"remarks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remarks"}},[a._v("#")]),a._v(" Remarks")]),a._v(" "),s("p",[a._v("Good resources for learning about concurrent and parallel programming in Haskell are:")]),a._v(" "),s("li",[a._v("\n[Parallel and Concurrent Programming in Haskell](http://chimera.labs.oreilly.com/books/1230000000929/index.html)\n")]),a._v(" "),s("li",[a._v("\nthe [Haskell Wiki](https://wiki.haskell.org/Concurrency)\n")])])}),[],!1,null,null,null);t.default=r.exports}}]);